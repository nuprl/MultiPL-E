language: cs
name: HumanEval_126_is_sorted
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            last = lst[i];\n        }\n        return isSorted;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8a59b7f33a04ed599c2667850f467d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8a59b7f33a04ed599c2667850f467d4>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        var seen = new HashSet<long>();\n        foreach\
    \ (var item in lst) {\n            if (seen.Add(item))\n                return\
    \ false;\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d9339316b94e4aff9f0a372249dbf2fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d9339316b94e4aff9f0a372249dbf2fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        long lastCount\
    \ = 0;\n        bool isSorted = false;\n        foreach (long num in lst) {\n\
    \            if (num == last)\n                lastCount++;\n            else\n\
    \            {\n                if (lastCount > 1)\n                    return\
    \ false;\n                isSorted = true;\n                last = num;\n    \
    \            lastCount = 1;\n            }\n        }\n        return isSorted;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0870841c7494080bad0050ff10b14cd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0870841c7494080bad0050ff10b14cd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long lastValue = lst[0];\n        bool isSorted\
    \ = false;\n        foreach (long value in lst) {\n            if (value >= lastValue)\n\
    \                return false;\n            lastValue = value;\n        }\n  \
    \      return true;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0936ee2ee17946f7ba8d0934b0c2c585>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0936ee2ee17946f7ba8d0934b0c2c585>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long last = lst[0];\n\
    \        bool isSorted = false;\n        foreach (long num in lst) {\n       \
    \     if (num > last) {\n                isSorted = false;\n                break;\n\
    \            }\n            last = num;\n        }\n        return isSorted;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2adc74d209db4d60919bfc2795482611>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2adc74d209db4d60919bfc2795482611>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long last = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] > last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            last = lst[i];\n        }\n     \
    \   return isSorted;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9856086a740542c19c168f3296e47d1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9856086a740542c19c168f3296e47d1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\
    \ return true;\n        long last = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            if (lst[i] == last) {\n                isSorted = true;\n       \
    \         break;\n            }\n            last = lst[i];\n        }\n     \
    \   return isSorted;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f9bc0326c27a4b96bb79ccfade087038>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f9bc0326c27a4b96bb79ccfade087038>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool first = true;\n\
    \        foreach (long num in lst) {\n            if (first && num == last)\n\
    \                return false;\n            if (num < last)\n                return\
    \ false;\n            first = false;\n            last = num;\n        }\n   \
    \     return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <435b028b94a74b5e97f90d285e24afc9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <435b028b94a74b5e97f90d285e24afc9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        var hash = new Dictionary<long, long>();\n\
    \        foreach (var item in lst)\n            hash[item] = hash[item] ?? 0;\n\
    \        foreach (var item in lst)\n            if (hash[item] == 0)\n       \
    \         return false;\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo6_k9gvg.cs(26,26): error CS0019: Operator ''??'' cannot be applied to
    operands of type ''long'' and ''int''

    '
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\
    \ return true;\n        if (lst.Count > 2) return false;\n        long last =\
    \ lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] > last) {\n                isSorted = false;\n\
    \                break;\n            }\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d25a8443c794140a6ec6dca4dd709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d25a8443c794140a6ec6dca4dd709f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        long lastCount\
    \ = 0;\n        foreach (long num in lst) {\n            if (num == last)\n  \
    \              lastCount++;\n            else\n                if (lastCount >\
    \ 1)\n                    return false;\n                else\n              \
    \      lastCount = 1;\n            last = num;\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <89cfcc716a41496babb62b3e33e64d2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <89cfcc716a41496babb62b3e33e64d2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool flag = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] > last)\
    \ {\n                flag = false;\n                break;\n            }\n  \
    \          last = lst[i];\n        }\n        return flag;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a0667cca636c4e62a3ce5234ae96987a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a0667cca636c4e62a3ce5234ae96987a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long prev = 0;\n \
    \       foreach (long n in lst) {\n            if (n == prev) {\n            \
    \    return false;\n            }\n            prev = n;\n        }\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4b72637e66e544e195a369257dde81c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4b72637e66e544e195a369257dde81c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long lastValue = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            if (lst[i] == lastValue) {\n\
    \                isSorted = true;\n            }\n            lastValue = lst[i];\n\
    \        }\n        return isSorted;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <955164d1860444be926cfa498e176751>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <955164d1860444be926cfa498e176751>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool first = true;\n\
    \        foreach (long num in lst) {\n            if (first && num == last)\n\
    \                continue;\n            first = false;\n            if (num <\
    \ last)\n                return false;\n            last = num;\n        }\n \
    \       return true;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6d148885ce479f80c2490877bc00ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6d148885ce479f80c2490877bc00ab>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long lastValue = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            if (lst[i] == lastValue) {\n\
    \                isSorted = true;\n                break;\n            }\n   \
    \         lastValue = lst[i];\n        }\n        return isSorted;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be33ffb4886d417d978762f7ef93856d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be33ffb4886d417d978762f7ef93856d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            if (lst[i] == last) {\n                isSorted = true;\n\
    \                break;\n            }\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <866395f098ca424681c6d3e02e5494e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <866395f098ca424681c6d3e02e5494e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long prev = 0;\n \
    \       foreach (long n in lst) {\n            if (n == prev) {\n            \
    \    return false;\n            }\n            prev = n;\n        }\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4b72637e66e544e195a369257dde81c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4b72637e66e544e195a369257dde81c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\
    \ return true;\n        long last = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] > last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            last = lst[i];\n        }\n        return isSorted;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <df5fa1dc41ea456c874ac5baf70e34ed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <df5fa1dc41ea456c874ac5baf70e34ed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long lastValue = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            isSorted = true;\n            lastValue = lst[i];\n\
    \        }\n        return isSorted;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <34cdfad657c741f78f9c64617ccca1dd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <34cdfad657c741f78f9c64617ccca1dd>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long last = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] > last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            if (lst[i] == last) {\n         \
    \       isSorted = true;\n                break;\n            }\n            last\
    \ = lst[i];\n        }\n        return isSorted;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <09551ed4ba3b4eeda047d4b627405027>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <09551ed4ba3b4eeda047d4b627405027>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\
    \ return true;\n        long last = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] > last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            isSorted = true;\n            last = lst[i];\n        }\n       \
    \ return isSorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <853eb0469cd34e6d85a1a403010e869a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <853eb0469cd34e6d85a1a403010e869a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long prev = 0;\n \
    \       foreach (long num in lst) {\n            if (prev > num) {\n         \
    \       return false;\n            }\n            prev = num;\n        }\n   \
    \     return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ea365531c70467588e102550ba202d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ea365531c70467588e102550ba202d0>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long lastValue = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue)\n                return false;\n            else\n            \
    \    lastValue = lst[i];\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <197dbb9fdd334296bb193c38598c6bcc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <197dbb9fdd334296bb193c38598c6bcc>:0 \n"
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long lastValue = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue)\n                return false;\n            else\n            \
    \    lastValue = lst[i];\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <197dbb9fdd334296bb193c38598c6bcc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <197dbb9fdd334296bb193c38598c6bcc>:0 \n"
  stdout: ''
  timestamp: 1659800635
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long prev = 0;\n \
    \       long curr = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n \
    \           if (lst[i] < curr) {\n                return false;\n            }\n\
    \            if (lst[i] == prev) {\n                return false;\n          \
    \  }\n            prev = lst[i];\n        }\n        return true;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <425e35bf565144c68fec900de6162a62>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <425e35bf565144c68fec900de6162a62>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative\
    \ and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item\
    \ (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.IsSorted (System.Collections.Generic.List"
  stdout: ''
  timestamp: 1659800635
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long last = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            isSorted = true;\n            last\
    \ = lst[i];\n        }\n        return isSorted;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a94de9bceaa7420e94a7296ef2193d95>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative\
    \ and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item\
    \ (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.IsSorted (System.Collections.Generic.List`1[T] lst) [0x00001] in <a94de9bceaa7420e94a7296ef2193d95>:0\
    \ \n  at Problem.Main (System.String[] args) [0x000cc] in <a94de9bceaa7420e94a7296ef2193d95>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted\
    \ (System.Collections.Generic.List`1[T] lst) [0x00001] in <a94de9bceaa7420e94a7296ef2193d95>:0\
    \ \n  at Problem.Main (System.String[] args) [0x000cc] in <a94de9bceaa7420e94a7296ef2193d95>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long lastValue = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            isSorted = true;\n            lastValue = lst[i];\n\
    \        }\n        return isSorted;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <34cdfad657c741f78f9c64617ccca1dd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <34cdfad657c741f78f9c64617ccca1dd>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long last = lst[0];\n\
    \        bool sorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] > last) {\n                sorted = true;\n          \
    \      break;\n            }\n            last = lst[i];\n        }\n        return\
    \ sorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa4abfa467034554aaba6650b07dc6d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa4abfa467034554aaba6650b07dc6d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool first = true;\n\
    \        foreach (long num in lst) {\n            if (first && num == last)\n\
    \                continue;\n            if (num < last)\n                return\
    \ false;\n            last = num;\n            first = false;\n        }\n   \
    \     return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a3bb5ab5cb044aac8865039dc9a119f6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a3bb5ab5cb044aac8865039dc9a119f6>:0 \n"
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long prev = 0;\n \
    \       bool sorted = false;\n        foreach (long num in lst) {\n          \
    \  if (num < prev) {\n                sorted = false;\n                break;\n\
    \            }\n            prev = num;\n        }\n        return sorted;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <79c50adfba664def8895fb190d8897e8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <79c50adfba664def8895fb190d8897e8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool first = true;\n\
    \        foreach (long num in lst) {\n            if (first && num == last)\n\
    \                continue;\n            first = false;\n            if (num <\
    \ last)\n                return false;\n            last = num;\n        }\n \
    \       return true;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6d148885ce479f80c2490877bc00ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6d148885ce479f80c2490877bc00ab>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            if (lst[i] == last) {\n                isSorted = true;\n\
    \                break;\n            }\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <866395f098ca424681c6d3e02e5494e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <866395f098ca424681c6d3e02e5494e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long lastValue = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            if (lst[i] == lastValue) {\n\
    \                isSorted = true;\n                break;\n            }\n   \
    \         lastValue = lst[i];\n        }\n        return isSorted;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be33ffb4886d417d978762f7ef93856d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be33ffb4886d417d978762f7ef93856d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            last = lst[i];\n        }\n        return isSorted;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8a59b7f33a04ed599c2667850f467d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8a59b7f33a04ed599c2667850f467d4>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        var hashset = new HashSet<long>(lst);\n   \
    \     return hashset.Count == lst.Count && hashset.SequenceEqual(lst);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82f1c79ca82a4f9bb6e0de784ec301b1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82f1c79ca82a4f9bb6e0de784ec301b1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long last = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            isSorted = true;\n            last\
    \ = lst[i];\n        }\n        return isSorted;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a94de9bceaa7420e94a7296ef2193d95>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative\
    \ and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item\
    \ (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.IsSorted (System.Collections.Generic.List`1[T] lst) [0x00001] in <a94de9bceaa7420e94a7296ef2193d95>:0\
    \ \n  at Problem.Main (System.String[] args) [0x000cc] in <a94de9bceaa7420e94a7296ef2193d95>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted\
    \ (System.Collections.Generic.List`1[T] lst) [0x00001] in <a94de9bceaa7420e94a7296ef2193d95>:0\
    \ \n  at Problem.Main (System.String[] args) [0x000cc] in <a94de9bceaa7420e94a7296ef2193d95>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        var seen = new HashSet<long>();\n        foreach\
    \ (var item in lst)\n        {\n            if (seen.Add(item))\n            {\n\
    \                seen.Remove(item);\n                return false;\n         \
    \   }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1db96a10cec4124b1cbecf987f8ab99>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1db96a10cec4124b1cbecf987f8ab99>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ > last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            last = lst[i];\n        }\n        return isSorted;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9eef03157cfa434799867e707571cd17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9eef03157cfa434799867e707571cd17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\
    \ return true;\n        long last = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] > last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            last = lst[i];\n        }\n        return isSorted;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <df5fa1dc41ea456c874ac5baf70e34ed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <df5fa1dc41ea456c874ac5baf70e34ed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\
    \ return true;\n        long last = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] > last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            isSorted = true;\n            last = lst[i];\n        }\n       \
    \ return isSorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <853eb0469cd34e6d85a1a403010e869a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <853eb0469cd34e6d85a1a403010e869a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\
    \ return true;\n        if (lst.Count < 3) return true;\n        if (lst.Count\
    \ < 4) return true;\n        if (lst.Count < 5) return true;\n        if (lst.Count\
    \ < 6) return true;\n        if (lst.Count < 7) return true;\n        if (lst.Count\
    \ < 8) return true;\n        if (lst.Count < 9) return true;\n        if (lst.Count\
    \ < 10) return true;\n        if (lst.Count < 11) return true;\n        if (lst.Count\
    \ < 12) return true;\n        if (lst.Count < 13) return true;\n        if (lst.Count\
    \ < 14) return true;\n        if (lst.Count < 15) return true;\n        if (lst.Count\
    \ < 16) return true;\n        if (lst.Count < 17) return true;\n        if (lst.Count\
    \ < 18) return true;\n        if (lst.Count < 19) return true;\n        if (lst.Count\
    \ < 20) return true;\n        if (lst.Count < 21) return true;\n        if (lst.Count\
    \ < 22) return true;\n        if (lst.Count < 23) return true;\n        if (lst.Count\
    \ < 24) return true;\n        if (lst.Count < 25) return true;\n        if (lst.Count\
    \ < 26) return true;\n        if (lst.Count < 27) return true;\n        if (lst.Count\
    \ < 28) return true;\n        if (lst.Count < 29) return true;\n        if (lst.Count\
    \ < 30) return true;\n        if (lst.Count < 31) return true;\n        if (lst.Count\
    \ < 32) return true;\n        if (lst.Count < 33) return true;\n        if (lst.Count\
    \ < 34) return true;\n        if (lst.Count < 35) return true;\n        if (lst.Count\
    \ < 36) return true;\n        if (lst.Count < 37) return true;\n        if (lst.Count\
    \ < 38) return true;\n        if (lst.Count < 39) return true;\n        if (lst.Count\
    \ < 40) return true;\n        if (lst.Count < 41) return true;\n        if (lst.Count\
    \ < 42) return true;\n        if (lst.Count < 43) return true;\n        if (lst.Count\
    \ < 44) return true;\n        if (lst.Count < 45) return true;\n        if (lst.Count\
    \ < 46) return true;\n        if (lst.Count < 47) return true;\n        if (lst.Count\
    \ < 48) return true;\n        if (lst.Count < 49) return true;\n        if (lst.Count\
    \ < 50) return true;\n        if (lst.Count < 51) return true;\n        if (lst.Count\
    \ < 52) return true;\n        if (lst.Count < 53) return true;\n        if (lst.Count\
    \ < 54) return true;\n        if (lst.Count < 55) return true;\n        if (lst.Count\
    \ < 56) return true;\n        if (lst.Count < 57) return true;\n        if (lst.Count\
    \ < \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3kht8d6d.cs(78,24): error CS1525: Invalid expression term ''}''

    /tmp/tmp3kht8d6d.cs(78,24): error CS1026: ) expected

    /tmp/tmp3kht8d6d.cs(78,24): error CS1002: ; expected

    '
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        long lastCount\
    \ = 0;\n        bool isSorted = false;\n        foreach (long num in lst) {\n\
    \            if (num == last)\n                lastCount++;\n            else\n\
    \            {\n                if (lastCount > 1)\n                    return\
    \ false;\n                last = num;\n                lastCount = 1;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f0b16daf0f6431b819ec37ac63a924f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f0b16daf0f6431b819ec37ac63a924f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long lastValue = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue)\n                return false;\n            else\n            \
    \    lastValue = lst[i];\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <197dbb9fdd334296bb193c38598c6bcc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <197dbb9fdd334296bb193c38598c6bcc>:0 \n"
  stdout: ''
  timestamp: 1659800635
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long last = lst[0];\n\
    \        bool sorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                sorted = false;\n         \
    \       break;\n            }\n            sorted = true;\n            last =\
    \ lst[i];\n        }\n        return sorted;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e011ac5dfa2a425b972dc02d6494fbc4>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative\
    \ and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item\
    \ (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.IsSorted (System.Collections.Generic.List`1[T] lst) [0x00001] in <e011ac5dfa2a425b972dc02d6494fbc4>:0\
    \ \n  at Problem.Main (System.String[] args) [0x000cc] in <e011ac5dfa2a425b972dc02d6494fbc4>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted\
    \ (System.Collections.Generic.List`1[T] lst) [0x00001] in <e011ac5dfa2a425b972dc02d6494fbc4>:0\
    \ \n  at Problem.Main (System.String[] args) [0x000cc] in <e011ac5dfa2a425b972dc02d6494fbc4>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool first = true;\n\
    \        foreach (long num in lst) {\n            if (first && num == last)\n\
    \                return false;\n            if (num < last)\n                return\
    \ false;\n            last = num;\n            first = false;\n        }\n   \
    \     return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4007237dbede463d8332dbedc98d1de5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4007237dbede463d8332dbedc98d1de5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long prev = 0;\n \
    \       long current = lst[0];\n        bool isSorted = true;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < current) {\n        \
    \        isSorted = false;\n                break;\n            }\n          \
    \  if (lst[i] == current) {\n                if (prev != lst[i]) {\n         \
    \           isSorted = false;\n                    break;\n                }\n\
    \            }\n            prev = current;\n            current = lst[i];\n \
    \       }\n        return isSorted;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted\
    \ (System.Collections.Generic.List`1[T] lst) [0x00004] in <88c861f6e753486ca2162dc6144baf4f>:0\
    \ \n  at Problem.Main (System.String[] args) [0x000cc] in <88c861f6e753486ca2162dc6144baf4f>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted\
    \ (System.Collections.Generic.List`1[T] lst) [0x00004] in <88c861f6e753486ca2162dc6144baf4f>:0\
    \ \n  at Problem.Main (System.String[] args) [0x000cc] in <88c861f6e753486ca2162dc6144baf4f>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long first = lst[0];\n        long last = lst[lst.Count\
    \ - 1];\n        long mid = first + (lst.Count - 1) / 2;\n        bool isSorted\
    \ = true;\n        for (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i]\
    \ > lst[i + 1]) {\n                isSorted = false;\n                break;\n\
    \            }\n        }\n        return isSorted;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1ec96d10eae4f6db8c3d7e36c736808>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1ec96d10eae4f6db8c3d7e36c736808>:0 \n"
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\
    \ return true;\n        long last = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] > last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            isSorted = true;\n            last = lst[i];\n        }\n       \
    \ return isSorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <853eb0469cd34e6d85a1a403010e869a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <853eb0469cd34e6d85a1a403010e869a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long last = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            if (lst[i] == last) {\n         \
    \       isSorted = true;\n                break;\n            }\n            last\
    \ = lst[i];\n        }\n        return isSorted;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8ca50aee54d84b6686999b49225c7439>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8ca50aee54d84b6686999b49225c7439>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            if (lst[i] == last) {\n                isSorted = true;\n\
    \                break;\n            }\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <866395f098ca424681c6d3e02e5494e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <866395f098ca424681c6d3e02e5494e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        long lastCount\
    \ = 0;\n        foreach (long num in lst) {\n            if (num == last)\n  \
    \              lastCount++;\n            else\n                if (lastCount >\
    \ 1)\n                    return false;\n            last = num;\n           \
    \ lastCount = 1;\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6404ae78677146a789259f72b7f76ab8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6404ae78677146a789259f72b7f76ab8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long prev = 0;\n \
    \       long curr = lst[0];\n        bool isSorted = false;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < curr) {\n           \
    \     isSorted = false;\n                break;\n            }\n            if\
    \ (lst[i] == prev) {\n                isSorted = false;\n                break;\n\
    \            }\n            prev = lst[i];\n            curr = lst[i];\n     \
    \   }\n        return isSorted;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a451412deb534b97b2a4b2662399a359>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a451412deb534b97b2a4b2662399a359>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ > last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ec6cdfe6d0840e6b749d1bc80270447>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ec6cdfe6d0840e6b749d1bc80270447>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n        }\n        return isSorted;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5b2878e48334497388b21a50f32e6d2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5b2878e48334497388b21a50f32e6d2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long lastValue = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            if (lst[i] == lastValue) {\n                isSorted\
    \ = true;\n                break;\n            }\n            lastValue = lst[i];\n\
    \        }\n        return isSorted;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9324ac060df84b81aaed90d1c4970ff9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9324ac060df84b81aaed90d1c4970ff9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long prev = 0;\n \
    \       bool isSorted = false;\n        foreach (long num in lst) {\n        \
    \    if (num < prev) {\n                isSorted = false;\n                break;\n\
    \            }\n            prev = num;\n        }\n        return isSorted;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8926b058982f49dea1d6488c60109974>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8926b058982f49dea1d6488c60109974>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long lastValue = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue)\n                return false;\n            else\n            \
    \    lastValue = lst[i];\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <197dbb9fdd334296bb193c38598c6bcc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <197dbb9fdd334296bb193c38598c6bcc>:0 \n"
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        var hash = new HashSet<long>();\n        foreach\
    \ (var item in lst) {\n            if (hash.Contains(item))\n                return\
    \ false;\n            hash.Add(item);\n        }\n        return true;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f814741f56f74ab7877947df5b6ffccc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f814741f56f74ab7877947df5b6ffccc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            last = lst[i];\n        }\n        return isSorted;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8a59b7f33a04ed599c2667850f467d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8a59b7f33a04ed599c2667850f467d4>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        var hashSet = new HashSet<long>();\n      \
    \  foreach (var item in lst)\n        {\n            if (hashSet.Contains(item))\n\
    \                return false;\n            hashSet.Add(item);\n        }\n  \
    \      return true;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1450a116c2444e3aa59b046480a8ef9e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1450a116c2444e3aa59b046480a8ef9e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        var last = lst[0];\n        var lastCount =\
    \ 0;\n        for (var i = 1; i < lst.Count; i++) {\n            var current =\
    \ lst[i];\n            if (current == last)\n                lastCount++;\n  \
    \          else\n                if (lastCount > 1)\n                    return\
    \ false;\n                else\n                    lastCount = 1;\n         \
    \   last = current;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <142cc6cab4cd43d6a9c766a5648c4875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <142cc6cab4cd43d6a9c766a5648c4875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800636
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long lastValue = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            if (lst[i] == lastValue) {\n\
    \                isSorted = true;\n                break;\n            }\n   \
    \         lastValue = lst[i];\n        }\n        return isSorted;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be33ffb4886d417d978762f7ef93856d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be33ffb4886d417d978762f7ef93856d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\
    \ return true;\n        long last = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] > last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            isSorted = true;\n            last = lst[i];\n        }\n       \
    \ return isSorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <853eb0469cd34e6d85a1a403010e869a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <853eb0469cd34e6d85a1a403010e869a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        var seen = new HashSet<long>();\n        foreach\
    \ (var item in lst) {\n            if (seen.Add(item))\n                return\
    \ false;\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d9339316b94e4aff9f0a372249dbf2fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d9339316b94e4aff9f0a372249dbf2fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        var hash = new Dictionary<long, long>();\n\
    \        foreach (var item in lst)\n            hash[item] = hash[item] ?? 0;\n\
    \        var sorted = lst.OrderBy(x => x);\n        var last = sorted[0];\n  \
    \      var isSorted = true;\n        for (int i = 1; i < sorted.Count; i++) {\n\
    \            if (sorted[i] != last) {\n                isSorted = false;\n   \
    \             break;\n            }\n        }\n        return isSorted;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsl_6tp2u.cs(26,26): error CS0019: Operator ''??'' cannot be applied to
    operands of type ''long'' and ''int''

    /tmp/tmpsl_6tp2u.cs(28,20): error CS0021: Cannot apply indexing with [] to an
    expression of type ''IOrderedEnumerable<long>''

    /tmp/tmpsl_6tp2u.cs(30,25): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''int'' and ''method group''

    /tmp/tmpsl_6tp2u.cs(31,17): error CS0021: Cannot apply indexing with [] to an
    expression of type ''IOrderedEnumerable<long>''

    '
  timestamp: 1659800636
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long prev = 0;\n \
    \       foreach (long n in lst) {\n            if (n == prev) {\n            \
    \    return false;\n            }\n            prev = n;\n        }\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4b72637e66e544e195a369257dde81c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4b72637e66e544e195a369257dde81c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long lastValue = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            isSorted = true;\n            lastValue = lst[i];\n\
    \        }\n        return isSorted;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <34cdfad657c741f78f9c64617ccca1dd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <34cdfad657c741f78f9c64617ccca1dd>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long prev = 0;\n        long curr = lst[0];\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < curr)\
    \ {\n                return false;\n            }\n            prev = curr;\n\
    \            curr = lst[i];\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dc5b513a639470fa109c579d4b74619>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dc5b513a639470fa109c579d4b74619>:0 \n"
  stdout: ''
  timestamp: 1659800636
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long lastValue = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue)\n                return false;\n            else\n            \
    \    lastValue = lst[i];\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <197dbb9fdd334296bb193c38598c6bcc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <197dbb9fdd334296bb193c38598c6bcc>:0 \n"
  stdout: ''
  timestamp: 1659800635
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long lastValue = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] > lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            if (lst[i] == lastValue) {\n\
    \                isSorted = true;\n                break;\n            }\n   \
    \         lastValue = lst[i];\n        }\n        return isSorted;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f6eb272c1854a38a1da107b1c1f72af>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f6eb272c1854a38a1da107b1c1f72af>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800636
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\
    \ return true;\n        var hash = new HashSet<long>();\n        foreach (var\
    \ item in lst) {\n            if (hash.Contains(item)) {\n                return\
    \ false;\n            }\n            hash.Add(item);\n        }\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <94650243a1ae4d5481bd34971d89c0e3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <94650243a1ae4d5481bd34971d89c0e3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800636
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            last = lst[i];\n        }\n        return isSorted;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8a59b7f33a04ed599c2667850f467d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8a59b7f33a04ed599c2667850f467d4>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ > last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ec6cdfe6d0840e6b749d1bc80270447>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ec6cdfe6d0840e6b749d1bc80270447>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ > last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ec6cdfe6d0840e6b749d1bc80270447>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ec6cdfe6d0840e6b749d1bc80270447>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\
    \ return true;\n        long last = lst[0];\n        long curr = lst[1];\n   \
    \     for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < curr) return\
    \ false;\n            if (lst[i] == last) return false;\n            last = lst[i];\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ae6bce9e78f46e29bc3a59cee1f8f9c>:0 \n"
  stdout: ''
  timestamp: 1659800636
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\
    \ return true;\n        long last = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] > last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            isSorted = true;\n            last = lst[i];\n        }\n       \
    \ return isSorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <853eb0469cd34e6d85a1a403010e869a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <853eb0469cd34e6d85a1a403010e869a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long prev = 0;\n \
    \       bool isSorted = false;\n        foreach (long i in lst) {\n          \
    \  if (prev > i) {\n                isSorted = false;\n                break;\n\
    \            }\n            prev = i;\n        }\n        return isSorted;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dfec605eda3a4e419078ba0f142d505e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dfec605eda3a4e419078ba0f142d505e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800636
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long lastValue = lst[0];\n\
    \        bool isSorted = false;\n        foreach (long value in lst) {\n     \
    \       if (value <= lastValue) {\n                isSorted = false;\n       \
    \         break;\n            }\n            lastValue = value;\n        }\n \
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0bffbf3b5caf40158d4a19eac94f9c62>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0bffbf3b5caf40158d4a19eac94f9c62>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800636
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long prev = 0;\n \
    \       bool isSorted = false;\n        foreach (long num in lst) {\n        \
    \    if (num < prev) {\n                isSorted = false;\n                break;\n\
    \            }\n            prev = num;\n        }\n        return isSorted;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8926b058982f49dea1d6488c60109974>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8926b058982f49dea1d6488c60109974>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long lastValue = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue)\n                return false;\n            else\n            \
    \    lastValue = lst[i];\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <197dbb9fdd334296bb193c38598c6bcc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <197dbb9fdd334296bb193c38598c6bcc>:0 \n"
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long prev = 0;\n \
    \       foreach (long num in lst) {\n            if (num < prev) {\n         \
    \       return false;\n            }\n            prev = num;\n        }\n   \
    \     return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <973ddb02786b437b900564c752ad6a9e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <973ddb02786b437b900564c752ad6a9e>:0 \n"
  stdout: ''
  timestamp: 1659800636
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        var seen = new HashSet<long>();\n        foreach\
    \ (var item in lst)\n            if (seen.Add(item))\n                return false;\n\
    \        return true;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <85e433e691b84610b367cfe133d1eeeb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <85e433e691b84610b367cfe133d1eeeb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800636
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\
    \ return true;\n        long lastValue = lst[0];\n        bool isSorted = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            lastValue = lst[i];\n        }\n        return isSorted;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4287be56dc124fd98cf354258ed1dff4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4287be56dc124fd98cf354258ed1dff4>:0 \n"
  stdout: ''
  timestamp: 1659800636
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long lastValue = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            if (lst[i] == lastValue) {\n\
    \                isSorted = true;\n            }\n            lastValue = lst[i];\n\
    \        }\n        return isSorted;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <955164d1860444be926cfa498e176751>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <955164d1860444be926cfa498e176751>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long prev = 0;\n \
    \       long current = lst[0];\n        bool isSorted = false;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < current) {\n        \
    \        isSorted = false;\n                break;\n            }\n          \
    \  if (lst[i] == current) {\n                if (prev == current) {\n        \
    \            isSorted = false;\n                    break;\n                }\n\
    \                else {\n                    isSorted = true;\n              \
    \  }\n            }\n            else {\n                isSorted = false;\n \
    \           }\n            prev = current;\n            current = lst[i];\n  \
    \      }\n        return isSorted;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1acfdee459c47e2b99102a207482726>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1acfdee459c47e2b99102a207482726>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800636
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ > last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ec6cdfe6d0840e6b749d1bc80270447>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ec6cdfe6d0840e6b749d1bc80270447>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long last = lst[0];\n\
    \        bool sorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                sorted = false;\n         \
    \       break;\n            }\n            if (lst[i] == last) {\n           \
    \     sorted = true;\n            }\n            last = lst[i];\n        }\n \
    \       return sorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <13b3f57fd2124612afee9b193851f09f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <13b3f57fd2124612afee9b193851f09f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800636
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ > last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ec6cdfe6d0840e6b749d1bc80270447>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ec6cdfe6d0840e6b749d1bc80270447>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            if (lst[i] == last) {\n                isSorted = true;\n\
    \                break;\n            }\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <866395f098ca424681c6d3e02e5494e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <866395f098ca424681c6d3e02e5494e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long lastValue = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue)\n                isSorted = false;\n            lastValue = lst[i];\n\
    \        }\n        return isSorted;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7c300f8ccf4434988e60879f8e65c78>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7c300f8ccf4434988e60879f8e65c78>:0 \n"
  stdout: ''
  timestamp: 1659800636
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long lastValue = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            if (lst[i] == lastValue)\n                continue;\n\
    \            isSorted = true;\n            lastValue = lst[i];\n        }\n  \
    \      return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd3f8d64ff0848eda4754224d9cad99a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd3f8d64ff0848eda4754224d9cad99a>:0 \n"
  stdout: ''
  timestamp: 1659800636
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        var seen = new HashSet<long>();\n        foreach\
    \ (var item in lst) {\n            if (seen.Contains(item))\n                return\
    \ false;\n            seen.Add(item);\n        }\n        return true;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <baab7829e2b74b699f1c6d1a52bc12d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <baab7829e2b74b699f1c6d1a52bc12d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800636
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        var hash = new Dictionary<long, long>();\n\
    \        foreach (var item in lst)\n            hash[item] = hash[item] ?? 0;\n\
    \        var sorted = lst.OrderBy(x => x).ToList();\n        foreach (var item\
    \ in sorted)\n            if (hash[item] != 0)\n                return false;\n\
    \        return true;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5zzyh77z.cs(26,26): error CS0019: Operator ''??'' cannot be applied to
    operands of type ''long'' and ''int''

    '
  timestamp: 1659800636
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long lastValue = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            if (lst[i] == lastValue) {\n\
    \                isSorted = true;\n            }\n            lastValue = lst[i];\n\
    \        }\n        return isSorted;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <955164d1860444be926cfa498e176751>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <955164d1860444be926cfa498e176751>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long prev = 0;\n \
    \       bool sorted = false;\n        foreach (long n in lst) {\n            if\
    \ (prev < n) {\n                sorted = true;\n                break;\n     \
    \       }\n            prev = n;\n        }\n        return sorted;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f98e84f32dda49a7a8fbae78906646f7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f98e84f32dda49a7a8fbae78906646f7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800636
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long prev = 0;\n \
    \       long current = lst[0];\n        bool isSorted = false;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < current) {\n        \
    \        isSorted = false;\n                break;\n            }\n          \
    \  if (lst[i] == current) {\n                if (prev == current) {\n        \
    \            isSorted = false;\n                    break;\n                }\n\
    \                isSorted = true;\n                prev = current;\n         \
    \       current = lst[i];\n            }\n        }\n        return isSorted;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b71afd4d3d8041679ee0bf750892546b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b71afd4d3d8041679ee0bf750892546b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800636
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            last = lst[i];\n        }\n        return isSorted;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8a59b7f33a04ed599c2667850f467d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8a59b7f33a04ed599c2667850f467d4>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long prev = 0;\n \
    \       long curr = lst[0];\n        bool isSorted = false;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < prev) {\n           \
    \     isSorted = false;\n                break;\n            }\n            if\
    \ (lst[i] == prev) {\n                isSorted = true;\n                break;\n\
    \            }\n            prev = lst[i];\n        }\n        return isSorted;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ab8b376d5b114d0c9497187786d4c592>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ab8b376d5b114d0c9497187786d4c592>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800636
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long last = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] > last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            last = lst[i];\n        }\n     \
    \   return isSorted;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9856086a740542c19c168f3296e47d1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9856086a740542c19c168f3296e47d1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long last = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            if (lst[i] == last) {\n         \
    \       isSorted = true;\n                break;\n            }\n            last\
    \ = lst[i];\n        }\n        return isSorted;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8ca50aee54d84b6686999b49225c7439>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8ca50aee54d84b6686999b49225c7439>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long first = lst[0];\n        long last = lst[lst.Count\
    \ - 1];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < first)\n                isSorted = false;\n\
    \            if (lst[i] > last)\n                isSorted = false;\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6526c10c1d3a47bba5b5cd05332a55fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6526c10c1d3a47bba5b5cd05332a55fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800636
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long last = lst[0];\n\
    \        bool sorted = false;\n        foreach (long num in lst) {\n         \
    \   if (num > last) {\n                sorted = true;\n                break;\n\
    \            }\n            last = num;\n        }\n        return sorted;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3106b563ce2948cbb575423d99964bc7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3106b563ce2948cbb575423d99964bc7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800636
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long lastValue = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            lastValue = lst[i];\n      \
    \  }\n        return isSorted;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d18e6cd959144278074f10afaf46f08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d18e6cd959144278074f10afaf46f08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800636
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ > last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ec6cdfe6d0840e6b749d1bc80270447>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ec6cdfe6d0840e6b749d1bc80270447>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool first = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                return false;\n            }\n            else if (lst[i]\
    \ == last) {\n                if (first) {\n                    first = false;\n\
    \                }\n                else {\n                    return false;\n\
    \                }\n            }\n            else {\n                last =\
    \ lst[i];\n            }\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e0947fa291aa4ed68394ad41d42047d1>:0 \n"
  stdout: ''
  timestamp: 1659800636
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool flag = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] > last)\
    \ {\n                flag = false;\n                break;\n            }\n  \
    \          last = lst[i];\n        }\n        return flag;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a0667cca636c4e62a3ce5234ae96987a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a0667cca636c4e62a3ce5234ae96987a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ > last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            last = lst[i];\n        }\n        return isSorted;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9eef03157cfa434799867e707571cd17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9eef03157cfa434799867e707571cd17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        var hashSet = new HashSet<long>();\n      \
    \  foreach (var item in lst)\n            hashSet.Add(item);\n        return hashSet.Count\
    \ == lst.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a08a841111054211808c113e2a0301d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a08a841111054211808c113e2a0301d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800637
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long lastValue = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            if (lst[i] == lastValue) {\n\
    \                isSorted = true;\n            }\n            lastValue = lst[i];\n\
    \        }\n        return isSorted;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <955164d1860444be926cfa498e176751>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <955164d1860444be926cfa498e176751>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\
    \ return true;\n        long last = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] > last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            if (lst[i] == last) {\n                isSorted = true;\n       \
    \         break;\n            }\n            last = lst[i];\n        }\n     \
    \   return isSorted;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <edec8aa9a13d4af7926030f1c18b2554>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <edec8aa9a13d4af7926030f1c18b2554>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800637
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long first = lst[0];\n        long last = lst[lst.Count\
    \ - 1];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < first)\n                isSorted = false;\n\
    \            if (lst[i] > last)\n                isSorted = false;\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6526c10c1d3a47bba5b5cd05332a55fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6526c10c1d3a47bba5b5cd05332a55fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800636
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long last = lst[0];\n\
    \        bool sorted = false;\n        foreach (long num in lst) {\n         \
    \   if (num > last) {\n                sorted = true;\n                break;\n\
    \            }\n            last = num;\n        }\n        return sorted;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3106b563ce2948cbb575423d99964bc7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3106b563ce2948cbb575423d99964bc7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800636
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ > last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ec6cdfe6d0840e6b749d1bc80270447>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ec6cdfe6d0840e6b749d1bc80270447>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool flag = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                flag = false;\n                break;\n            }\n  \
    \          last = lst[i];\n        }\n        return flag;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4efb9a4ca2694fd4ac5becb58fddb9ad>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4efb9a4ca2694fd4ac5becb58fddb9ad>:0 \n"
  stdout: ''
  timestamp: 1659800637
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool first = true;\n\
    \        foreach (long i in lst) {\n            if (first && i == last)\n    \
    \            continue;\n            first = false;\n            if (i > last)\n\
    \                return false;\n            last = i;\n        }\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad8b0411575c461887a020d688d4da25>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad8b0411575c461887a020d688d4da25>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800637
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long prev = 0;\n \
    \       long curr = lst[0];\n        bool result = true;\n        for (int i =\
    \ 1; i < lst.Count; i++) {\n            if (lst[i] < curr) {\n               \
    \ result = false;\n                break;\n            }\n            if (lst[i]\
    \ == prev) {\n                result = false;\n                break;\n      \
    \      }\n            prev = lst[i];\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <51b5f77459644e69ae04c56e45de4948>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <51b5f77459644e69ae04c56e45de4948>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative\
    \ and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item\
    \ (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.IsSorted (System.Collections.Generic.List"
  stdout: ''
  timestamp: 1659800637
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long prev = 0;\n \
    \       long curr = lst[0];\n        bool isSorted = true;\n        for (int i\
    \ = 1; i < lst.Count; i++) {\n            if (lst[i] < curr) {\n             \
    \   isSorted = false;\n                break;\n            }\n            prev\
    \ = curr;\n            curr = lst[i];\n        }\n        return isSorted;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted\
    \ (System.Collections.Generic.List`1[T] lst) [0x00004] in <a80fec69c8da415085056af971aff87e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x000cc] in <a80fec69c8da415085056af971aff87e>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted\
    \ (System.Collections.Generic.List`1[T] lst) [0x00004] in <a80fec69c8da415085056af971aff87e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x000cc] in <a80fec69c8da415085056af971aff87e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800637
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\
    \ return true;\n        long last = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            if (lst[i] == last) {\n                isSorted = true;\n       \
    \         break;\n            }\n            last = lst[i];\n        }\n     \
    \   return isSorted;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f9bc0326c27a4b96bb79ccfade087038>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f9bc0326c27a4b96bb79ccfade087038>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\
    \ return true;\n        long last = lst[0];\n        long lastCount = 0;\n   \
    \     foreach (long num in lst) {\n            if (num == last) lastCount++;\n\
    \            else if ((lastCount > 1) || (lastCount > last.Equals(num)))\n   \
    \             return false;\n            last = num;\n            lastCount =\
    \ 1;\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl7zg3stz.cs(27,42): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659800637
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long last = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            last = lst[i];\n        }\n     \
    \   return isSorted;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted\
    \ (System.Collections.Generic.List`1[T] lst) [0x00001] in <f64bb015921740db96057aea5f6a115d>:0\
    \ \n  at Problem.Main (System.String[] args) [0x000cc] in <f64bb015921740db96057aea5f6a115d>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted\
    \ (System.Collections.Generic.List`1[T] lst) [0x00001] in <f64bb015921740db96057aea5f6a115d>:0\
    \ \n  at Problem.Main (System.String[] args) [0x000cc] in <f64bb015921740db96057aea5f6a115d>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800637
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        var hash = new Dictionary<long, long>();\n\
    \        foreach (var item in lst) {\n            if (hash.ContainsKey(item))\n\
    \                return false;\n            hash[item] = item;\n        }\n  \
    \      return true;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d43125a9a87747cb9e62133b1f432481>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d43125a9a87747cb9e62133b1f432481>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800637
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long lastValue = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            lastValue = lst[i];\n        }\n        return isSorted;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <12ca79bda5f24d42b8efb95b63638153>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <12ca79bda5f24d42b8efb95b63638153>:0 \n"
  stdout: ''
  timestamp: 1659800637
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long last = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            isSorted = true;\n            last\
    \ = lst[i];\n        }\n        return isSorted;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a94de9bceaa7420e94a7296ef2193d95>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative\
    \ and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item\
    \ (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.IsSorted (System.Collections.Generic.List`1[T] lst) [0x00001] in <a94de9bceaa7420e94a7296ef2193d95>:0\
    \ \n  at Problem.Main (System.String[] args) [0x000cc] in <a94de9bceaa7420e94a7296ef2193d95>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted\
    \ (System.Collections.Generic.List`1[T] lst) [0x00001] in <a94de9bceaa7420e94a7296ef2193d95>:0\
    \ \n  at Problem.Main (System.String[] args) [0x000cc] in <a94de9bceaa7420e94a7296ef2193d95>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800635
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long last = lst[0];\n\
    \        bool isSorted = false;\n        foreach (long num in lst) {\n       \
    \     if (num > last) {\n                isSorted = false;\n                break;\n\
    \            }\n            last = num;\n        }\n        return isSorted;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2adc74d209db4d60919bfc2795482611>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2adc74d209db4d60919bfc2795482611>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            last = lst[i];\n        }\n        return isSorted;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8a59b7f33a04ed599c2667850f467d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8a59b7f33a04ed599c2667850f467d4>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long first = lst[0];\n        long last = lst[lst.Count\
    \ - 1];\n        long middle = first + (lst.Count - 1) * 0.5;\n        bool isSorted\
    \ = true;\n        for (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i]\
    \ > lst[i + 1]) {\n                isSorted = false;\n                break;\n\
    \            }\n        }\n        return isSorted;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbwk8kh3p.cs(26,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800637
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\
    \ return true;\n        var seen = new HashSet<long>();\n        foreach (var\
    \ item in lst) {\n            if (seen.Add(item)) {\n                if (seen.Count\
    \ > 1) return false;\n            }\n        }\n        return true;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0d71ef28b9134516b141cfa995ad1ed6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0d71ef28b9134516b141cfa995ad1ed6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800637
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long lastValue = lst[0];\n\
    \        bool isSorted = false;\n        foreach (long value in lst) {\n     \
    \       if (value > lastValue) {\n                isSorted = false;\n        \
    \        break;\n            }\n            lastValue = value;\n        }\n  \
    \      return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a03539bfed4144cdbcf669349587def1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a03539bfed4144cdbcf669349587def1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800637
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long last = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            if (lst[i] == last) {\n         \
    \       isSorted = true;\n                break;\n            }\n            last\
    \ = lst[i];\n        }\n        return isSorted;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8ca50aee54d84b6686999b49225c7439>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8ca50aee54d84b6686999b49225c7439>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long first = lst[0];\n        long last = lst[lst.Count\
    \ - 1];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < first) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] > last) {\n   \
    \             isSorted = false;\n                break;\n            }\n     \
    \   }\n        return isSorted;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <516727e86e79403796bb9be5009044cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <516727e86e79403796bb9be5009044cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800637
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\
    \ return true;\n        var hashSet = new HashSet<long>(lst);\n        return\
    \ lst.SequenceEqual(hashSet);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <144d09e1d257432b9a7d7898a6b67ce3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <144d09e1d257432b9a7d7898a6b67ce3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800637
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long last = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            isSorted = true;\n            last\
    \ = lst[i];\n        }\n        return isSorted;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a94de9bceaa7420e94a7296ef2193d95>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative\
    \ and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item\
    \ (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.IsSorted (System.Collections.Generic.List`1[T] lst) [0x00001] in <a94de9bceaa7420e94a7296ef2193d95>:0\
    \ \n  at Problem.Main (System.String[] args) [0x000cc] in <a94de9bceaa7420e94a7296ef2193d95>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted\
    \ (System.Collections.Generic.List`1[T] lst) [0x00001] in <a94de9bceaa7420e94a7296ef2193d95>:0\
    \ \n  at Problem.Main (System.String[] args) [0x000cc] in <a94de9bceaa7420e94a7296ef2193d95>:0\
    \ \n"
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        long lastCount\
    \ = 0;\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] == last) {\n  \
    \              lastCount++;\n                if (lastCount > 1) {\n          \
    \          isSorted = false;\n                    break;\n                }\n\
    \            }\n            last = lst[i];\n            lastCount = 0;\n     \
    \   }\n        return isSorted;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <917ca9589d5b4976ad037b2e8fb53278>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <917ca9589d5b4976ad037b2e8fb53278>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800637
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long lastValue = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            if (lst[i] == lastValue) {\n                isSorted\
    \ = true;\n                break;\n            }\n            lastValue = lst[i];\n\
    \        }\n        return isSorted;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9324ac060df84b81aaed90d1c4970ff9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9324ac060df84b81aaed90d1c4970ff9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long lastValue = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue)\n                return false;\n            else\n            \
    \    lastValue = lst[i];\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <197dbb9fdd334296bb193c38598c6bcc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <197dbb9fdd334296bb193c38598c6bcc>:0 \n"
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long first = lst[0];\n        long last = lst[lst.Count\
    \ - 1];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < first)\n                isSorted = false;\n\
    \            if (lst[i] > last)\n                isSorted = false;\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6526c10c1d3a47bba5b5cd05332a55fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6526c10c1d3a47bba5b5cd05332a55fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800636
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\
    \ return true;\n        long last = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            isSorted = true;\n            last = lst[i];\n        }\n       \
    \ return isSorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eac3613480964bad8dd278b89d4b625c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eac3613480964bad8dd278b89d4b625c>:0 \n"
  stdout: ''
  timestamp: 1659800637
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long prev = 0;\n \
    \       bool sorted = false;\n        foreach (long num in lst) {\n          \
    \  if (prev > num) {\n                sorted = false;\n                break;\n\
    \            }\n            prev = num;\n        }\n        return sorted;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db0adefaddc6453dab6926ee80f97d75>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db0adefaddc6453dab6926ee80f97d75>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800637
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            if (lst[i] == last) {\n                isSorted = true;\n\
    \                break;\n            }\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <866395f098ca424681c6d3e02e5494e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <866395f098ca424681c6d3e02e5494e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long lastValue = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            if (lst[i] == lastValue) {\n\
    \                isSorted = true;\n                break;\n            }\n   \
    \         lastValue = lst[i];\n        }\n        return isSorted;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be33ffb4886d417d978762f7ef93856d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be33ffb4886d417d978762f7ef93856d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        var hash = new HashSet<long>();\n        foreach\
    \ (var item in lst)\n            hash.Add(item);\n        return !hash.IsEmpty;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp0ghxe75.cs(27,22): error CS1061: ''HashSet<long>'' does not contain a
    definition for ''IsEmpty'' and no accessible extension method ''IsEmpty'' accepting
    a first argument of type ''HashSet<long>'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1659800637
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long first = lst[0];\n        long last = lst[lst.Count\
    \ - 1];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < first)\n                isSorted = false;\n\
    \            if (lst[i] > last)\n                isSorted = false;\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6526c10c1d3a47bba5b5cd05332a55fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6526c10c1d3a47bba5b5cd05332a55fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800636
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            last = lst[i];\n        }\n        return isSorted;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8a59b7f33a04ed599c2667850f467d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8a59b7f33a04ed599c2667850f467d4>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long lastValue = lst[0];\n\
    \        bool isSorted = false;\n        foreach (long value in lst) {\n     \
    \       if (value > lastValue) {\n                isSorted = false;\n        \
    \        break;\n            }\n            if (value == lastValue) {\n      \
    \          isSorted = true;\n                break;\n            }\n         \
    \   lastValue = value;\n        }\n        return isSorted;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e01df1c3a06149ccb95442cef9b3c5f9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e01df1c3a06149ccb95442cef9b3c5f9>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative\
    \ and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item\
    \ (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.IsSorted (System.Collections.Generic.List"
  stdout: ''
  timestamp: 1659800637
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ > last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ec6cdfe6d0840e6b749d1bc80270447>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ec6cdfe6d0840e6b749d1bc80270447>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            if (lst[i] == last) {\n                isSorted = true;\n\
    \                break;\n            }\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <866395f098ca424681c6d3e02e5494e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <866395f098ca424681c6d3e02e5494e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long lastValue = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            if (lst[i] == lastValue)\n                continue;\n\
    \            isSorted = true;\n            lastValue = lst[i];\n        }\n  \
    \      return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd3f8d64ff0848eda4754224d9cad99a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd3f8d64ff0848eda4754224d9cad99a>:0 \n"
  stdout: ''
  timestamp: 1659800636
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\
    \ return true;\n        long last = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            if (lst[i] == last) {\n                isSorted = true;\n       \
    \         break;\n            }\n            last = lst[i];\n        }\n     \
    \   return isSorted;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f9bc0326c27a4b96bb79ccfade087038>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f9bc0326c27a4b96bb79ccfade087038>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long first = lst[0];\n        long last = lst[lst.Count\
    \ - 1];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < first)\n                isSorted = false;\n\
    \            if (lst[i] > last)\n                isSorted = false;\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6526c10c1d3a47bba5b5cd05332a55fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6526c10c1d3a47bba5b5cd05332a55fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800636
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\
    \ return true;\n        if (lst.Count > 2 && lst.Distinct().Count() > 1) return\
    \ false;\n        long last = lst[0];\n        bool isSorted = false;\n      \
    \  for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n \
    \               isSorted = false;\n                break;\n            }\n   \
    \         isSorted = true;\n            last = lst[i];\n        }\n        return\
    \ isSorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <feb8c5bdde05427fa958226c9c6b4131>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <feb8c5bdde05427fa958226c9c6b4131>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800637
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\
    \ return true;\n        if (lst.Count > 2 && lst.Contains(lst.Last())) return\
    \ false;\n        long last = lst.Last();\n        long first = lst.First();\n\
    \        long mid = lst.Count / 2;\n        bool isAscending = true;\n       \
    \ bool isDescending = true;\n        bool isEven = true;\n        bool isOdd =\
    \ true;\n        bool isEvenOdd = true;\n        bool isEvenEven = true;\n   \
    \     bool isOddOdd = true;\n        bool isEvenOddOdd = true;\n        bool isEvenEvenOdd\
    \ = true;\n        bool isOddEvenOdd = true;\n        bool isEvenOddEvenOdd =\
    \ true;\n        bool isEvenEvenOddEvenOdd = true;\n        bool isOddEvenOddEvenOdd\
    \ = true;\n        bool isEvenOddOddEvenOdd = true;\n        bool isEvenEvenOddOddEvenOdd\
    \ = true;\n        bool isOddEvenOddOddEvenOdd = true;\n        bool isEvenOddEvenOddOddEvenOdd\
    \ = true;\n        bool isEvenEvenOddEvenOddOddEvenOdd = true;\n        bool isOddEvenOddOddEvenOddEvenOdd\
    \ = true;\n        bool isEvenOddOddOddEvenOddEvenOdd = true;\n        bool isEvenEvenOddEvenOddOddOddEvenOdd\
    \ = true;\n        bool isOddEvenOddOddEvenOddOddEvenOdd = true;\n        bool\
    \ isEvenOddEvenOddOddOddEvenOddEvenOdd = true;\n        bool isEvenEvenOddEvenOddEvenOddOddEvenOdd\
    \ = true;\n        bool isOddEvenOddOddEvenOddOddEvenOddEvenOdd = true;\n    \
    \    bool isEvenOddOddOddOddEvenOddOddEvenOddEvenOdd = true;\n        bool isEvenEvenOddEvenOddOddOddOddEvenOddEvenOddEvenOdd\
    \ = true;\n        bool isOddEvenOddOddOddEvenOddEvenOddOddEvenOddEvenOddEvenOdd\
    \ = true;\n        bool isEvenOddEvenOddOddOddOddEvenOddOddEvenOddOddEvenOddEvenOdd\
    \ = true;\n        bool isEvenEvenOddEvenOddEvenOddO\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2s5nclmi.cs(56,42): error CS1002: ; expected

    '
  timestamp: 1659800636
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\
    \ return true;\n        long last = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] > last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            isSorted = true;\n            last = lst[i];\n        }\n       \
    \ return isSorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <853eb0469cd34e6d85a1a403010e869a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <853eb0469cd34e6d85a1a403010e869a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long lastValue = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ > lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            lastValue = lst[i];\n        }\n        return isSorted;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <89df3a0df0d647c59cbe39e0dda58dff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <89df3a0df0d647c59cbe39e0dda58dff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800637
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long lastValue = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            if (lst[i] == lastValue) {\n\
    \                isSorted = true;\n            }\n            lastValue = lst[i];\n\
    \        }\n        return isSorted;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <955164d1860444be926cfa498e176751>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <955164d1860444be926cfa498e176751>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long lastValue = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            if (lst[i] == lastValue) {\n                isSorted\
    \ = true;\n                break;\n            }\n            lastValue = lst[i];\n\
    \        }\n        return isSorted;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9324ac060df84b81aaed90d1c4970ff9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9324ac060df84b81aaed90d1c4970ff9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            last = lst[i];\n        }\n        return isSorted;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8a59b7f33a04ed599c2667850f467d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8a59b7f33a04ed599c2667850f467d4>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long first = lst[0];\n        long last = lst[lst.Count\
    \ - 1];\n        if (first > last)\n            return false;\n        long mid\
    \ = first + (last - first) / 2;\n        bool isSorted = true;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < mid)\n              \
    \  isSorted = false;\n        }\n        return isSorted;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05e687bbd2154f3f8d4d7ea5cd6b5817>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05e687bbd2154f3f8d4d7ea5cd6b5817>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800637
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long prev = 0;\n        long curr = lst[0];\n\
    \        bool flag = false;\n        for (int i = 1; i < lst.Count; i++) {\n \
    \           if (lst[i] < curr) {\n                flag = true;\n             \
    \   break;\n            }\n            if (lst[i] == prev) {\n               \
    \ flag = false;\n                break;\n            }\n            prev = lst[i];\n\
    \        }\n        return flag;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <adb558b4dae049a7af54d9c7d50ed4fd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <adb558b4dae049a7af54d9c7d50ed4fd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800637
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        var seen = new HashSet<long>();\n        foreach\
    \ (var item in lst)\n        {\n            if (seen.Add(item))\n            {\n\
    \                if (item == lst[lst.Count - 1])\n                    return true;\n\
    \            }\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0590970158e34032a6bb8f5bcf1c2626>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0590970158e34032a6bb8f5bcf1c2626>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800637
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long prev = 0;\n \
    \       foreach (var item in lst) {\n            if (item < prev) {\n        \
    \        return false;\n            }\n            prev = item;\n        }\n \
    \       return true;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <df06faf33d2d4746aac8df42482b0844>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <df06faf33d2d4746aac8df42482b0844>:0 \n"
  stdout: ''
  timestamp: 1659800638
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long prev = 0;\n \
    \       long curr = lst[0];\n        bool isSorted = false;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < curr) {\n           \
    \     isSorted = false;\n                break;\n            }\n            if\
    \ (lst[i] == prev) {\n                isSorted = false;\n                break;\n\
    \            }\n            prev = lst[i];\n            curr = lst[i];\n     \
    \   }\n        return isSorted;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a451412deb534b97b2a4b2662399a359>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a451412deb534b97b2a4b2662399a359>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ > last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ec6cdfe6d0840e6b749d1bc80270447>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ec6cdfe6d0840e6b749d1bc80270447>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ > last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ec6cdfe6d0840e6b749d1bc80270447>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ec6cdfe6d0840e6b749d1bc80270447>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        var seen = new HashSet<long>();\n        foreach\
    \ (var item in lst) {\n            if (seen.Add(item))\n                return\
    \ false;\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d9339316b94e4aff9f0a372249dbf2fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d9339316b94e4aff9f0a372249dbf2fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5955426b9b334436a93a0973163aeb59>:0 \n"
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long lastValue = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue)\n                return false;\n            else\n            \
    \    lastValue = lst[i];\n        }\n        return isSorted;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bdf7c57225f143a4b343c0c7ea8892dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bdf7c57225f143a4b343c0c7ea8892dc>:0 \n"
  stdout: ''
  timestamp: 1659800638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            if (lst[i] == last) {\n                isSorted = true;\n\
    \                break;\n            }\n            last = lst[i];\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <866395f098ca424681c6d3e02e5494e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <866395f098ca424681c6d3e02e5494e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\
    \ return true;\n        long last = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            if (lst[i] == last) {\n                isSorted = true;\n       \
    \         break;\n            }\n            last = lst[i];\n        }\n     \
    \   return isSorted;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f9bc0326c27a4b96bb79ccfade087038>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f9bc0326c27a4b96bb79ccfade087038>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800634
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        long prev = 0;\n \
    \       long current = lst[0];\n        bool isSorted = false;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < current) {\n        \
    \        isSorted = false;\n                break;\n            }\n          \
    \  if (lst[i] == current) {\n                isSorted = true;\n            }\n\
    \            prev = current;\n            current = lst[i];\n        }\n     \
    \   return isSorted;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db5d627c86da41cf9221ab716c879779>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db5d627c86da41cf9221ab716c879779>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3,\
    \ 4, 5]) \u279E True\n    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n\
    \    public static bool IsSorted(List<long> lst) {\n        if (lst.Count < 2)\n\
    \            return true;\n        long first = lst[0];\n        long last = lst[lst.Count\
    \ - 1];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < first)\n                isSorted = false;\n\
    \            if (lst[i] > last)\n                isSorted = false;\n        }\n\
    \        return isSorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6526c10c1d3a47bba5b5cd05332a55fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6526c10c1d3a47bba5b5cd05332a55fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800636
