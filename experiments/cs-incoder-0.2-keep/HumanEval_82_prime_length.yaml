name: HumanEval_82_prime_length
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function that takes a string and returns True if the\
  \ string\n    // length is a prime number or False otherwise\n    // Examples\n\
  \    // prime_length('Hello') == True\n    // prime_length('abcdcba') == True\n\
  \    // prime_length('kittens') == True\n    // prime_length('orange') == False\n\
  \    public static bool PrimeLength(string str) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(PrimeLength((\"\
  Hello\")) == (true));\n    Debug.Assert(PrimeLength((\"abcdcba\")) == (true));\n\
  \    Debug.Assert(PrimeLength((\"kittens\")) == (true));\n    Debug.Assert(PrimeLength((\"\
  orange\")) == (false));\n    Debug.Assert(PrimeLength((\"wow\")) == (true));\n \
  \   Debug.Assert(PrimeLength((\"world\")) == (true));\n    Debug.Assert(PrimeLength((\"\
  MadaM\")) == (true));\n    Debug.Assert(PrimeLength((\"Wow\")) == (true));\n   \
  \ Debug.Assert(PrimeLength((\"\")) == (false));\n    Debug.Assert(PrimeLength((\"\
  HI\")) == (true));\n    Debug.Assert(PrimeLength((\"go\")) == (true));\n    Debug.Assert(PrimeLength((\"\
  gogo\")) == (false));\n    Debug.Assert(PrimeLength((\"aaaaaaaaaaaaaaa\")) == (false));\n\
  \    Debug.Assert(PrimeLength((\"Madam\")) == (true));\n    Debug.Assert(PrimeLength((\"\
  M\")) == (false));\n    Debug.Assert(PrimeLength((\"0\")) == (false));\n    }\n\n\
  }\n"
completions: ["        if (str == null || str.Length <= 1) {\n            return false;\n\
    \        }\n        bool isPrime = true;\n        int length = str.Length;\n \
    \       for (int i = 2; i <= Math.Sqrt(length); i++) {\n            if (length\
    \ % i == 0) {\n                isPrime = false;\n                break;\n    \
    \        }\n        }\n        return isPrime;", "        int n = str.Length;\n\
    \        if (n == 0) return false;\n        if (n == 1) return true;\n       \
    \ if (n % 2 == 0) return false;\n        for (int i = 3; i <= Math.Sqrt(n); i\
    \ += 2) {\n            if (n % i == 0) return false;\n        }\n        return\
    \ true;", "        if (str == null || str.Length <= 1) {\n            return false;\n\
    \        }\n        bool isPrime = true;\n        for (int i = 2; i <= str.Length;\
    \ i++) {\n            if (str.Substring(0, i).Equals(str.Substring(i))) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        return isPrime;", "        if (str == null || str.Length <= 1)\
    \ {\n            return false;\n        }\n        int length = str.Length;\n\
    \        int count = 0;\n        for (int i = 2; i <= length / 2; i++) {\n   \
    \         if (str.Substring(i, 1).All(c => c != str.Substring(i - 1, 1).FirstOrDefault()))\
    \ {\n                count++;\n            }\n        }\n        if (count ==\
    \ 0) {\n            return true;\n        }\n        return false;", "       \
    \ if (str == null || str.Length < 2)\n            return false;\n        int n\
    \ = str.Length;\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n\
    \            int j;\n            for (j = i; j < n; j++)\n                if (str[j]\
    \ != str[i])\n                    break;\n            if (j == n)\n          \
    \      count++;\n        }\n        return count == 0;", "        bool isPrime\
    \ = true;\n        int n = str.Length;\n        for (int i = 2; i <= Math.Sqrt(n);\
    \ i++) {\n            if (n % i == 0) {\n                isPrime = false;\n  \
    \              break;\n            }\n        }\n        return isPrime;", " \
    \       bool isPrime = true;\n        foreach (char c in str) {\n            if\
    \ (c < '0' || c > '9') {\n                isPrime = false;\n                break;\n\
    \            }\n            int n = Convert.ToInt32(c);\n            int count\
    \ = 0;\n            while (n != 1) {\n                n = n / 10;\n          \
    \      count++;\n            }\n            if (count == 0) {\n              \
    \  isPrime = true;\n                break;\n            }\n        }\n       \
    \ return isPrime;", "        if (str == null || str.Length <= 1) {\n         \
    \   return false;\n        }\n        int n = str.Length;\n        bool isPrime\
    \ = true;\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i ==\
    \ 0) {\n                isPrime = false;\n                break;\n           \
    \ }\n        }\n        return isPrime;", "        bool isPrime = true;\n    \
    \    int length = str.Length;\n        for (int i = 2; i <= length / 2; i++) {\n\
    \            if (str[length - i].ToString() == \"0\") {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        return isPrime;",
  "        if (str == null || str.Length < 2)\n            return false;\n       \
    \ bool isPrime = true;\n        for (int i = 2; i <= str.Length; i++) {\n    \
    \        if (str.Substring(0, i).Contains(str.Substring(i))) {\n             \
    \   isPrime = false;\n                break;\n            }\n        }\n     \
    \   return isPrime;", "        bool isPrime = true;\n        int length = str.Length;\n\
    \        for (int i = 0; i <= length / 2; i++) {\n            if (str[i] % 2 ==\
    \ 0) {\n                isPrime = false;\n            }\n        }\n        return\
    \ isPrime;", "        if (str == null || str.Length < 2)\n            return false;\n\
    \        int n = str.Length;\n        for (int i = 2; i <= n / 2; i++)\n     \
    \       if (n % i == 0)\n                return false;\n        return true;",
  "        bool isPrime = true;\n        string str = str.ToLower();\n        char[]\
    \ charArray = str.ToCharArray();\n        int length = str.Length;\n        for\
    \ (int i = 0; i < length; i++)\n        {\n            int count = 0;\n      \
    \      int j = 0;\n            while (j < charArray.Length)\n            {\n \
    \               if (charArray[j] == charArray[i])\n                {\n       \
    \             count++;\n                    j++;\n                }\n        \
    \        else\n                {\n                    break;\n               \
    \ }\n            }\n            if (count == charArray.Length)\n            {\n\
    \                isPrime = false;\n                break;\n            }\n   \
    \     }\n        return isPrime;", "        if (str == null || str.Length < 2)\
    \ {\n            return false;\n        }\n        bool isPrime = true;\n    \
    \    for (int i = 2; i <= str.Length; i++) {\n            if (str.Substring(0,\
    \ i).Contains(str)) {\n                isPrime = false;\n                break;\n\
    \            }\n        }\n        return isPrime;", "        if (str == null\
    \ || str.Length == 0)\n            return false;\n        int n = str.Length;\n\
    \        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0)\n   \
    \             return false;\n        }\n        return true;", "        bool isPrime\
    \ = true;\n        int length = str.Length;\n        for (int i = 1; i <= length\
    \ / 2; i++) {\n            if (str[i - 1] != str[i]) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        return isPrime;",
  "        bool result = false;\n        int length = str.Length;\n        if (length\
    \ < 2) {\n            return result;\n        }\n        bool isPrime = true;\n\
    \        for (int i = 2; i <= length / 2; i++) {\n            if (str[i] != 0)\
    \ {\n                for (int j = i; j < length; j++) {\n                    if\
    \ (str[j] != 0) {\n                        isPrime = false;\n                \
    \        break;\n                    }\n                }\n            }\n   \
    \     }\n        if (isPrime) {\n            result = true;\n        }\n     \
    \   return result;", "        bool isPrime = true;\n        int length = str.Length;\n\
    \        for (int i = 2; i <= length / 2; i++) {\n            if (str[length -\
    \ i] != '\\0') {\n                for (int j = i; j < length / i; j++) {\n   \
    \                 if (str[j] != '\\0') {\n                        isPrime = false;\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return isPrime;", "        bool isPrime = true;\n\
    \        int length = str.Length;\n        for (int i = 3; i <= Math.Sqrt(length);\
    \ i += 2) {\n            if (length % i == 0) {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        return isPrime;", " \
    \       bool isPrime = true;\n        int length = str.Length;\n        for (int\
    \ i = 3; i <= length / 2; i++) {\n            if (str[length - i] != '\\0') {\n\
    \                int j = 2;\n                while (j < i) {\n               \
    \     if (str[length - i] % j == 0) {\n                        isPrime = false;\n\
    \                        break;\n                    }\n                    j++;\n\
    \                }\n            }\n        }\n        return isPrime;"]
stop_tokens:
- "\n    }\n"
