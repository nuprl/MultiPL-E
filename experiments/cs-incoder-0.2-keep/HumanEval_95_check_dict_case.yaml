name: HumanEval_95_check_dict_case
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a dictionary, return True if all keys are strings in lower\
  \ \n    // case or all keys are strings in upper case, else return False.\n    //\
  \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
  \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
  \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
  \ return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
  :\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"John\", \"\
  Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
  STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    public static bool\
  \ CheckDictCase(Dictionary<string,string> dict) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckDictCase((new\
  \ Dictionary<string,string>(){{\"p\", \"pineapple\"}, {\"b\", \"banana\"}})) ==\
  \ (true));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"\
  p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})) == (false));\n\
  \    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"p\", \"pineapple\"\
  }, {\"5\", \"banana\"}, {\"a\", \"apple\"}})) == (false));\n    Debug.Assert(CheckDictCase((new\
  \ Dictionary<string,string>(){{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\"\
  , \"Houston\"}})) == (false));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"\
  STATE\", \"NC\"}, {\"ZIP\", \"12345\"}})) == (true));\n    Debug.Assert(CheckDictCase((new\
  \ Dictionary<string,string>(){{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))\
  \ == (true));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>()))\
  \ == (false));\n    }\n\n}\n"
completions: ["        if (dict.Count == 0)\n            return false;\n        foreach\
    \ (var key in dict.Keys)\n        {\n            if (key.Length > 0)\n       \
    \     {\n                if (char.IsLower(key[0]) || char.IsUpper(key[0]))\n \
    \                   return false;\n            }\n            else\n         \
    \   {\n                if (char.IsLower(key[0]) || char.IsUpper(key[0]))\n   \
    \                 return false;\n            }\n        }\n        return true;",
  "        if (dict.Count == 0)\n            return false;\n        foreach (var key\
    \ in dict.Keys)\n        {\n            if (key.Length > 0)\n            {\n \
    \               if (char.IsLower(key[0]) || char.IsUpper(key[0]))\n          \
    \          return false;\n            }\n        }\n        return true;", " \
    \       if (dict.Count == 0)\n            return false;\n        foreach (var\
    \ item in dict)\n        {\n            string key = item.Key;\n            string\
    \ value = item.Value;\n            if (key.Length > 0)\n            {\n      \
    \          if (char.IsLower(key[0]) || char.IsUpper(key[0]))\n               \
    \ {\n                    if (value.Length > 0)\n                    {\n      \
    \                  return true;\n                    }\n                }\n  \
    \              else\n                {\n                    if (value.Length >\
    \ 0)\n                    {\n                        return false;\n         \
    \           }\n                }\n            }\n            else\n          \
    \  {\n                if (value.Length > 0)\n                {\n             \
    \       return true;\n                }\n            }\n        }\n        return\
    \ false;", "        bool result = true;\n        foreach (KeyValuePair<string,\
    \ string> kvp in dict) {\n            if (kvp.Key.ToLower() == kvp.Key) {\n  \
    \              result = false;\n                break;\n            }\n      \
    \      if (kvp.Key.ToUpper() == kvp.Key) {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;", " \
    \       if (dict.Count == 0) return false;\n        foreach (string key in dict.Keys)\
    \ {\n            if (key.Length != 1) return false;\n        }\n        foreach\
    \ (string key in dict.Keys) {\n            if (dict[key] == null) continue;\n\
    \            if (dict[key].Length != 1) return false;\n        }\n        return\
    \ true;", "        if (dict.Count == 0)\n            return false;\n        foreach\
    \ (var item in dict)\n        {\n            if (item.Key.Length > 0 && item.Key.ToLower()\
    \ == item.Key)\n                return false;\n            if (item.Key.Length\
    \ > 0 && item.Key.ToUpper() == item.Key)\n                return false;\n    \
    \    }\n        return true;", "        if (dict.Count == 0) {\n            return\
    \ false;\n        }\n        foreach (KeyValuePair<string, string> kvp in dict)\
    \ {\n            string key = kvp.Key;\n            string value = kvp.Value;\n\
    \            if (key.Length > 0) {\n                if (Char.IsLower(key[0]))\
    \ {\n                    if (value.Length > 0) {\n                        return\
    \ true;\n                    }\n                } else {\n                   \
    \ if (value.Length > 0) {\n                        return false;\n           \
    \         }\n                }\n            }\n        }\n        return false;",
  "        if (dict.Count == 0)\n            return false;\n        foreach (var item\
    \ in dict)\n        {\n            if (item.Key.Length != item.Value.Length)\n\
    \                return false;\n            foreach (var c in item.Key)\n    \
    \        {\n                if (!char.IsLower(c) && !char.IsUpper(c))\n      \
    \              return false;\n            }\n        }\n        return true;",
  "        bool result = true;\n        foreach (KeyValuePair<string, string> kvp\
    \ in dict) {\n            string key = kvp.Key;\n            string value = kvp.Value;\n\
    \            if (key.Length > 0) {\n                if (key.ToLower() == key)\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n                if (key.ToUpper() == key) {\n                   \
    \ result = false;\n                    break;\n                }\n           \
    \ }\n        }\n        return result;", "        bool result = true;\n      \
    \  foreach (var item in dict)\n        {\n            if (item.Key.ToLower() ==\
    \ item.Key)\n            {\n                result = false;\n            }\n \
    \           else\n            {\n                result = true;\n            }\n\
    \        }\n        return result;", "        if (dict.Count == 0)\n         \
    \   return false;\n        foreach (string key in dict.Keys) {\n            string\
    \ lowerCase = key.ToLower();\n            string upperCase = key.ToUpper();\n\
    \            if (lowerCase == upperCase)\n                continue;\n        \
    \    return false;\n        }\n        return true;", "        if (dict.Count\
    \ == 0) return false;\n        foreach (var key in dict.Keys) {\n            if\
    \ (key.Length != 1) return false;\n            if (dict[key.ToLower()] != dict[key.ToUpper()])\
    \ return false;\n        }\n        return true;", "        bool ret = true;\n\
    \        foreach (string key in dict.Keys) {\n            string value = dict[key];\n\
    \            if (key.Length > 0 && value.Length > 0) {\n                bool isUpper\
    \ = char.IsUpper(key[0]); \n                bool isLower = char.IsLower(key[0]);\
    \ \n                if (isUpper != isLower) {\n                    ret = false;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return ret;", "        bool result = true;\n        foreach (KeyValuePair<string,\
    \ string> kvp in dict) {\n            if (kvp.Key.Length != kvp.Value.Length)\
    \ {\n                result = false;\n                break;\n            }\n\
    \            string lowerCase = kvp.Key.ToLower();\n            string upperCase\
    \ = kvp.Key.ToUpper();\n            if (lowerCase != kvp.Value || upperCase !=\
    \ kvp.Value) {\n                result = false;\n                break;\n    \
    \        }\n        }\n        return result;", "        if (dict.Count == 0)\n\
    \            return false;\n        foreach (var key in dict.Keys)\n        {\n\
    \            if (key.Length > 0)\n            {\n                if (Char.IsLower(key[0])\
    \ || Char.IsUpper(key[0]))\n                {\n                    if (!dict.ContainsKey(key.ToLower()))\n\
    \                        return false;\n                }\n                else\n\
    \                {\n                    if (!dict.ContainsKey(key.ToUpper()))\n\
    \                        return false;\n                }\n            }\n   \
    \     }\n        return true;", "        if (dict.Count == 0)\n            return\
    \ false;\n        foreach (var key in dict.Keys)\n        {\n            if (key.Length\
    \ > 0)\n            {\n                if (char.IsLower(key[0]) || char.IsUpper(key[0]))\n\
    \                {\n                    if (!dict.ContainsKey(key.ToLower()))\n\
    \                        return false;\n                }\n                else\n\
    \                {\n                    if (!dict.ContainsKey(key.ToUpper()))\n\
    \                        return false;\n                }\n            }\n   \
    \     }\n        return true;", "        if (dict.Count == 0)\n            return\
    \ false;\n        foreach (var key in dict.Keys)\n        {\n            if (key.Length\
    \ > 0)\n            {\n                if (char.IsLower(key[0]) || char.IsUpper(key[0]))\n\
    \                    return false;\n            }\n        }\n        return true;",
  "        bool ret = true;\n        foreach (var key in dict.Keys) {\n          \
    \  if (key.Length > 0) {\n                string lower = key.ToLower();\n    \
    \            string upper = key.ToUpper();\n                if (lower != upper)\
    \ {\n                    ret = false;\n                    break;\n          \
    \      }\n            }\n        }\n        return ret;", "        bool result\
    \ = true;\n        foreach (KeyValuePair<string, string> entry in dict)\n    \
    \    {\n            string key = entry.Key;\n            string value = entry.Value;\n\
    \            if (key.Length != value.Length)\n            {\n                result\
    \ = false;\n                break;\n            }\n            else\n        \
    \    {\n                for (int i = 0; i < key.Length; i++)\n               \
    \ {\n                    if (char.IsLower(key[i]) != char.IsLower(value[i]))\n\
    \                    {\n                        result = false;\n            \
    \            break;\n                    }\n                }\n            }\n\
    \        }\n        return result;", "        if (dict.Count == 0) {\n       \
    \     return false;\n        }\n        foreach (var key in dict.Keys) {\n   \
    \         string lowerCase = key.ToLower();\n            string upperCase = key.ToUpper();\n\
    \            if (lowerCase == upperCase) {\n                continue;\n      \
    \      }\n            return false;\n        }\n        return true;"]
stop_tokens:
- "\n    }\n"
