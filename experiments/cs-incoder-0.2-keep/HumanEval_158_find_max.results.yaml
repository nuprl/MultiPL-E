language: cs
name: HumanEval_158_find_max
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = 0;\n            foreach (char c in word) {\n                count++;\n
    \           }\n            if (count > maxCount) {\n                maxCount =
    count;\n                maxWord = word;\n            }\n        }\n        return
    maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0630d97124154b3ebc74655ddc597e02>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        int max = 0;\n
    \       string maxWord = \"\";\n        foreach (string word in words) {\n            int
    uniqueChars = word.Distinct().Count();\n            if (uniqueChars > max) {\n
    \               max = uniqueChars;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ca37983cdbf343e08c926eeddaca30df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ca37983cdbf343e08c926eeddaca30df>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        int max = 0;\n
    \       string maxWord = \"\";\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                count++;\n
    \           }\n            if (count > max) {\n                max = count;\n
    \               maxWord = word;\n            }\n        }\n        return maxWord;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e5e157701df4d6291d358eeb4c625d9>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        string maxCount = \"\";\n        foreach (string word in words)
    {\n            int count = word.ToCharArray().Distinct().Count();\n            if
    (count > maxCount.Length) {\n                maxCount = count;\n                maxWord
    = word;\n            }\n        }\n        return maxWord;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv2jxwzwq.cs(22,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798617
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       foreach (string word in words) {\n            int maxCount = 0;\n            foreach
    (char c in word) {\n                maxCount = maxCount + 1;\n            }\n
    \           if (maxCount > max.Length) {\n                max = word;\n            }\n
    \       }\n        return max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8f926839243f47f4846915669676db03>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = word.Distinct().Count();\n            if (count > maxCount) {\n                max
    = word;\n                maxCount = count;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = word.Length;\n            if (count > maxCount) {\n                max
    = word;\n                maxCount = count;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c363bd75d19f46bdb4e3b5ed10edd7cf>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string result
    = \"\";\n        HashSet<string> uniqueChars = new HashSet<string>();\n        foreach
    (string word in words) {\n            foreach (char c in word) {\n                if
    (!uniqueChars.Contains(c)) {\n                    uniqueChars.Add(c);\n                }\n
    \           }\n        }\n        if (uniqueChars.Count > words.Count) {\n            result
    = \"\";\n        }\n        else {\n            result = words.OrderByDescending(x
    => x.Length).First();\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6ya706u2.cs(21,43): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp6ya706u2.cs(22,37): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659798617
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       foreach (string word in words) {\n            int uniqueChars = word.Distinct().Count();\n
    \           if (uniqueChars > max.Length) {\n                max = word;\n            }\n
    \       }\n        return max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee6fa16d75c145f1ba3cec54fc770044>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee6fa16d75c145f1ba3cec54fc770044>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        string maxCount = \"\";\n        foreach (string word in words)
    {\n            int count = word.Length;\n            if (maxCount.Length > count)
    {\n                maxCount = maxCount.Substring(0, count);\n            }\n            if
    (maxCount.Length < count) {\n                maxCount = maxCount + word.Substring(0,
    count);\n            }\n            if (maxCount.Length == count) {\n                maxWord
    = word;\n            }\n        }\n        return maxWord;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e05759ddafca4e72bbb082e5ff103dfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e05759ddafca4e72bbb082e5ff103dfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       string max2 = \"\";\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                if (char.IsLetter(c))
    {\n                    count++;\n                }\n            }\n            if
    (count > max2.Length) {\n                max = word;\n                max2 = max;\n
    \           } else if (count < max2.Length) {\n                max2 = word;\n
    \           }\n        }\n        if (max2.Length > max.Length) {\n            return
    max2;\n        } else {\n            return max;\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <41692cfff2494484b59ec4ee5d61732c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <41692cfff2494484b59ec4ee5d61732c>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = word.ToCharArray().Distinct().Count();\n            if (count > maxCount)
    {\n                max = word;\n                maxCount = count;\n            }\n
    \       }\n        return max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b5950bf91b844b55b859848384b00aec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b5950bf91b844b55b859848384b00aec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        string maxCount = \"\";\n        foreach (string word in words)
    {\n            int count = word.ToCharArray().Distinct().Count();\n            if
    (count > maxCount.Length) {\n                maxCount = count;\n                maxWord
    = word;\n            }\n        }\n        return maxWord;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv2jxwzwq.cs(22,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798617
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = string.Empty;\n        string maxChars = string.Empty;\n        foreach (string
    word in words) {\n            int maxCharCount = 0;\n            foreach (char
    c in word) {\n                if (maxCharCount < word.Count(x => x == c)) {\n
    \                   maxCharCount = word.Count(x => x == c);\n                    maxChars
    = c;\n                }\n            }\n            if (maxCharCount > maxWord.Count(x
    => x == maxChars)) {\n                maxWord = word;\n            }\n        }\n
    \       return maxWord;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7642urmz.cs(24,32): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmp7642urmz.cs(27,51): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1659798617
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Length;\n            if (count > maxCount) {\n                maxCount
    = count;\n                maxWord = word;\n            }\n        }\n        return
    maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd915440e21e4a8b993f2545adab76ad>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        Dictionary<string, int> wordCounts = new Dictionary<string, int>();\n
    \       foreach (string word in words) {\n            int count = 0;\n            if
    (wordCounts.ContainsKey(word)) {\n                count = wordCounts[word];\n
    \           }\n            wordCounts[word] = count + 1;\n            if (wordCounts.Values.Max()
    == count) {\n                maxWord = word;\n            }\n        }\n        return
    maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <929e2d747a9044298da97a44563214d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <929e2d747a9044298da97a44563214d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = string.Empty;\n        int maxCount = 0;\n        foreach (string word in words)
    {\n            int count = word.ToCharArray().Distinct().Count();\n            if
    (count > maxCount) {\n                maxCount = count;\n                maxWord
    = word;\n            }\n        }\n        return maxWord;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b28bd9959b1d4ff5a912bdeadb44f800>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b28bd9959b1d4ff5a912bdeadb44f800>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string result
    = \"\";\n        Dictionary<string, int> charCounts = new Dictionary<string, int>();\n
    \       foreach (string word in words) {\n            charCounts.Add(word, 0);\n
    \       }\n        foreach (string word in words) {\n            foreach (char
    c in word) {\n                charCounts[word]++;\n            }\n        }\n
    \       foreach (KeyValuePair<string, int> kvp in charCounts) {\n            if
    (kvp.Value == words.Count) {\n                result = kvp.Key;\n                break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4414aa5d49424a4a82d2f166587bfc1a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4414aa5d49424a4a82d2f166587bfc1a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = word.Distinct().Count();\n            if (count > maxCount) {\n                max
    = word;\n                maxCount = count;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = word.Distinct().Count();\n            if (count > maxCount) {\n                max
    = word;\n                maxCount = count;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = 0;\n            foreach (char c in word) {\n                if
    (char.IsLetter(c)) {\n                    count++;\n                }\n            }\n
    \           if (count > maxCount) {\n                maxCount = count;\n                maxWord
    = word;\n            }\n        }\n        return maxWord;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b74a0f8e96b438485e3e055a7fb7be0>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string result
    = \"\";\n        Dictionary<string, int> count = new Dictionary<string, int>();\n
    \       foreach (string word in words) {\n            int count = 0;\n            foreach
    (char c in word) {\n                if (count.ContainsKey(c)) {\n                    count[c]++;\n
    \               } else {\n                    count[c] = 1;\n                }\n
    \           }\n            if (count.Values.Max() == 1) {\n                result
    = word;\n                break;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb7wj9uk5.cs(20,17): error CS0136: A local or parameter named ''count''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpb7wj9uk5.cs(22,27): error CS1061: ''int'' does not contain a definition
    for ''ContainsKey'' and no accessible extension method ''ContainsKey'' accepting
    a first argument of type ''int'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpb7wj9uk5.cs(23,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmpb7wj9uk5.cs(25,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmpb7wj9uk5.cs(28,23): error CS1061: ''int'' does not contain a definition
    for ''Values'' and no accessible extension method ''Values'' accepting a first
    argument of type ''int'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659798617
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        // Write your
    code here\n        var result = new Dictionary<string, int>();\n        foreach
    (var word in words)\n        {\n            var charCount = word.ToCharArray().Distinct().Count();\n
    \           if (result.ContainsKey(charCount))\n            {\n                result[charCount]++;\n
    \           }\n            else\n            {\n                result.Add(charCount,
    1);\n            }\n        }\n        string maxKey = string.Empty;\n        int
    maxValue = 0;\n        foreach (var item in result)\n        {\n            if
    (item.Value > maxValue)\n            {\n                maxValue = item.Value;\n
    \               maxKey = item.Key;\n            }\n        }\n        return maxKey;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbwspnxz8.cs(22,36): error CS1503: Argument 1: cannot convert from ''int''
    to ''string''

    /tmp/tmpbwspnxz8.cs(24,24): error CS1503: Argument 1: cannot convert from ''int''
    to ''string''

    /tmp/tmpbwspnxz8.cs(28,28): error CS1503: Argument 1: cannot convert from ''int''
    to ''string''

    '
  timestamp: 1659798617
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       foreach (string word in words) {\n            int uniqueChars = word.Distinct().Count();\n
    \           if (uniqueChars > max.Length) {\n                max = word;\n            }\n
    \       }\n        return max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee6fa16d75c145f1ba3cec54fc770044>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee6fa16d75c145f1ba3cec54fc770044>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                if (char.IsLetter(c))
    {\n                    count++;\n                }\n            }\n            if
    (count > maxCount) {\n                max = word;\n                maxCount =
    count;\n            }\n        }\n        return max;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <21abb49aa17f458dbef4efc9547e1bc9>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Length;\n            if (count > maxCount) {\n                maxCount
    = count;\n                maxWord = word;\n            }\n        }\n        return
    maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd915440e21e4a8b993f2545adab76ad>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        // Your code goes
    here\n        string max = \"\";\n        int maxCount = 0;\n        foreach (string
    word in words)\n        {\n            int count = 0;\n            foreach (char
    c in word)\n            {\n                if (char.IsLetter(c))\n                {\n
    \                   count++;\n                }\n            }\n            if
    (count > maxCount)\n            {\n                max = word;\n                maxCount
    = count;\n            }\n        }\n        return max;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <02e402f9a30e4f5c9d76d8d7e59792c7>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        string maxCount = \"\";\n        foreach (string word in words)
    {\n            int count = word.Distinct().Count();\n            if (count > maxCount.Length)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprccouu_j.cs(22,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       string max2 = \"\";\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                count++;\n
    \           }\n            if (count > max) {\n                max = count;\n
    \               max2 = word;\n            }\n        }\n        if (max == max2)
    {\n            return max2;\n        }\n        return max;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps1r7jmkf.cs(24,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    /tmp/tmps1r7jmkf.cs(25,23): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       string max2 = \"\";\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                if (char.IsLetter(c))
    {\n                    count++;\n                }\n            }\n            if
    (count > max2.Length) {\n                max = word;\n                max2 = max;\n
    \           } else if (count < max2.Length) {\n                max2 = word;\n
    \           }\n        }\n        return max2;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a517a778c1b64ba7a46ef33011c0311f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a517a778c1b64ba7a46ef33011c0311f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        int maxCount =
    0;\n        string maxWord = \"\";\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <598ad2cf61a0462b99d047425623526f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <598ad2cf61a0462b99d047425623526f>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        // Write your
    code here\n        string maxWord = \"\";\n        int maxCount = 0;\n        foreach
    (string word in words) {\n            int count = word.Distinct().Count();\n            if
    (count > maxCount) {\n                maxCount = count;\n                maxWord
    = word;\n            }\n        }\n        return maxWord;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2be9b9f394ee4af7a18cf126f04aea87>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2be9b9f394ee4af7a18cf126f04aea87>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string result
    = \"\";\n        Dictionary<string, int> charCounts = new Dictionary<string, int>();\n
    \       foreach (string word in words) {\n            charCounts.Add(word, 0);\n
    \       }\n        foreach (string word in words) {\n            foreach (char
    c in word) {\n                if (!charCounts.ContainsKey(c)) {\n                    charCounts[c]
    = 1;\n                } else {\n                    charCounts[c]++;\n                }\n
    \           }\n        }\n        foreach (KeyValuePair<string, int> kvp in charCounts)
    {\n            if (kvp.Value > result.Length) {\n                result = kvp.Key;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7s3edy0g.cs(24,45): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp7s3edy0g.cs(25,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp7s3edy0g.cs(27,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = word.Distinct().Count();\n            if (count > maxCount) {\n                max
    = word;\n                maxCount = count;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = word.Distinct().Count();\n            if (count > maxCount) {\n                max
    = word;\n                maxCount = count;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        string maxChar = \"\";\n        int maxCount = 0;\n        foreach
    (string word in words) {\n            int count = 0;\n            foreach (char
    c in word) {\n                if (char.IsLetter(c)) {\n                    count++;\n
    \               }\n            }\n            if (count > maxCount) {\n                maxCount
    = count;\n                maxWord = word;\n                maxChar = maxWord.ToCharArray().OrderByDescending(c
    => c).First();\n            }\n        }\n        return maxWord;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpibedtmzb.cs(30,27): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = string.Empty;\n        int maxCount = 0;\n        foreach (string word in words)
    {\n            int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32fccfd2639948119e7e26794af363fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32fccfd2639948119e7e26794af363fa>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       string max2 = \"\";\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                count++;\n
    \           }\n            if (count > max.Length) {\n                max = word;\n
    \           }\n            else if (count > max2.Length) {\n                max2
    = word;\n            }\n        }\n        if (max.Length > max2.Length) {\n            return
    max;\n        }\n        return max2;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <41c1b18351964aaab4aadf0cd88d3078>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <41c1b18351964aaab4aadf0cd88d3078>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       foreach (string word in words) {\n            int uniqueChars = word.Distinct().Count();\n
    \           if (uniqueChars > max.Length) {\n                max = word;\n            }\n
    \       }\n        return max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee6fa16d75c145f1ba3cec54fc770044>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee6fa16d75c145f1ba3cec54fc770044>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = word.Distinct().Count();\n            if (count > maxCount) {\n                max
    = word;\n                maxCount = count;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string result
    = \"\";\n        foreach (string word in words) {\n            int uniqueChars
    = word.Distinct().Count();\n            if (uniqueChars > result.Length) {\n                result
    = word;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7201fe733f7f4619968b7a855d741471>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7201fe733f7f4619968b7a855d741471>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        int max = 0;\n
    \       string maxWord = \"\";\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                count++;\n
    \           }\n            if (count > max) {\n                max = count;\n
    \               maxWord = word;\n            }\n        }\n        return maxWord;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e5e157701df4d6291d358eeb4c625d9>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       string max2 = \"\";\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                count++;\n
    \           }\n            if (count > max) {\n                max = count;\n
    \               max2 = word;\n            }\n        }\n        if (max2 == \"\")
    return \"\";\n        return max2;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp375q58mr.cs(24,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    /tmp/tmp375q58mr.cs(25,23): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = word.Distinct().Count();\n            if (count > maxCount) {\n                max
    = word;\n                maxCount = count;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Length;\n            if (maxCount < count) {\n                maxCount
    = count;\n                maxWord = word;\n            }\n        }\n        return
    maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f7bd8ef14c246d5a112561242e189f8>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       string max2 = \"\";\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                count++;\n
    \           }\n            if (count > max.Length) {\n                max = word;\n
    \           }\n        }\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                count++;\n
    \           }\n            if (count > max2.Length) {\n                max2 =
    word;\n            }\n        }\n        if (max.Length > max2.Length) {\n            return
    max;\n        } else {\n            return max2;\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <50b1dbed50ee4bbd93808f397bcc2329>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       foreach (string word in words) {\n            int count = 0;\n            foreach
    (char c in word) {\n                count++;\n            }\n            if (count
    > max.Length) {\n                max = word;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed5beb6b54ff46fd8a4b0ca85609dd0c>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       string max2 = \"\";\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                count++;\n
    \           }\n            if (count > max) {\n                max = count;\n
    \               max2 = word;\n            }\n        }\n        if (max2.Length
    > max.Length) {\n            return max2;\n        }\n        return max;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9re9zejh.cs(24,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    /tmp/tmp9re9zejh.cs(25,23): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       string max2 = \"\";\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                count++;\n
    \           }\n            if (count > max) {\n                max = count;\n
    \               max2 = word;\n            }\n        }\n        if (max2 == \"\")
    {\n            return \"\";\n        }\n        if (max == max2.Length) {\n            return
    max2;\n        }\n        return max2;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpitgjl61m.cs(24,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    /tmp/tmpitgjl61m.cs(25,23): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    /tmp/tmpitgjl61m.cs(32,13): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''string'' and ''int''

    '
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = word.Distinct().Count();\n            if (count > maxCount) {\n                max
    = word;\n                maxCount = count;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       string max2 = \"\";\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                count++;\n
    \           }\n            if (count > max) {\n                max = count;\n
    \               max2 = word;\n            }\n        }\n        return max2;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3zk1_0km.cs(24,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    /tmp/tmp3zk1_0km.cs(25,23): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = word.ToCharArray().Distinct().Count();\n            if (count > maxCount)
    {\n                max = word;\n                maxCount = count;\n            }\n
    \       }\n        return max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b5950bf91b844b55b859848384b00aec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b5950bf91b844b55b859848384b00aec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        // Write your
    code here\n        string result = \"\";\n        Dictionary<string, int> charCount
    = new Dictionary<string, int>();\n        foreach (string word in words) {\n            foreach
    (char c in word) {\n                if (!charCount.ContainsKey(c)) {\n                    charCount.Add(c,
    0);\n                }\n                charCount[c]++;\n            }\n        }\n
    \       foreach (KeyValuePair<string, int> kvp in charCount) {\n            if
    (kvp.Value > result.Length) {\n                result = kvp.Key;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk9jwc_g2.cs(22,44): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpk9jwc_g2.cs(23,35): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpk9jwc_g2.cs(25,27): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       foreach (string word in words) {\n            int uniqueChars = word.Distinct().Count();\n
    \           if (uniqueChars > max.Length) {\n                max = word;\n            }\n
    \       }\n        return max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee6fa16d75c145f1ba3cec54fc770044>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee6fa16d75c145f1ba3cec54fc770044>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                count++;\n
    \           }\n            if (count > maxCount) {\n                max = word;\n
    \               maxCount = count;\n            }\n        }\n        return max;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <50574f24858d4efbabfbff61871bad8c>:0
    \n"
  stdout: ''
  timestamp: 1659798619
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        string maxChar = \"\";\n        int maxCount = 0;\n        foreach
    (string word in words) {\n            int count = 0;\n            foreach (char
    c in word) {\n                if (char.IsLetter(c)) {\n                    count++;\n
    \               }\n            }\n            if (count > maxCount) {\n                maxCount
    = count;\n                maxWord = word;\n                maxChar = maxWord.ToCharArray().OrderByDescending(c
    => c).First();\n            }\n        }\n        return maxWord;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpibedtmzb.cs(30,27): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       foreach (string word in words) {\n            int uniqueChars = word.Distinct().Count();\n
    \           if (uniqueChars > max.Length) {\n                max = word;\n            }\n
    \       }\n        return max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee6fa16d75c145f1ba3cec54fc770044>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee6fa16d75c145f1ba3cec54fc770044>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                if (char.IsLetter(c))
    {\n                    count++;\n                }\n            }\n            if
    (count > maxCount) {\n                max = word;\n                maxCount =
    count;\n            }\n        }\n        return max;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <21abb49aa17f458dbef4efc9547e1bc9>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string result
    = \"\";\n        Dictionary<string, int> charCounts = new Dictionary<string, int>();\n
    \       foreach (string word in words) {\n            charCounts.Add(word, 0);\n
    \           foreach (char c in word) {\n                charCounts[word]++;\n
    \           }\n        }\n        foreach (KeyValuePair<string, int> kvp in charCounts)
    {\n            if (kvp.Value > result.Length) {\n                result = kvp.Key;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2849d57e384045879945600d14766021>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: An item with the same key
    has already been added. Key: play\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert
    (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)
    [0x0015a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add
    (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n
    \ at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x00020] in
    <2849d57e384045879945600d14766021>:0 \n  at Problem.Main (System.String[] args)
    [0x00234] in <2849d57e384045879945600d14766021>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentException: An item with the same key has already been added. Key:
    play\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey
    key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x0015a]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add
    (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n
    \ at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x00020] in
    <2849"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = 0;\n            foreach (char c in word) {\n                count++;\n
    \           }\n            if (count > maxCount) {\n                maxCount =
    count;\n                maxWord = word;\n            }\n        }\n        return
    maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0630d97124154b3ebc74655ddc597e02>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       string max2 = \"\";\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                count++;\n
    \           }\n            if (count > max.Length) {\n                max = word;\n
    \           }\n            if (count > max2.Length) {\n                max2 =
    word;\n            }\n        }\n        if (max2.Length > max.Length) {\n            return
    max2;\n        }\n        return max;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bfefc428462c44c284f8ddb7e49b5809>:0
    \n"
  stdout: ''
  timestamp: 1659798619
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       string max2 = \"\";\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                count++;\n
    \           }\n            if (count > max) {\n                max = count;\n
    \               max2 = word;\n            }\n        }\n        if (max == max2)
    {\n            return \"\";\n        }\n        return max2;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp11ta2769.cs(24,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    /tmp/tmp11ta2769.cs(25,23): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        string maxChar = \"\";\n        int maxCount = 0;\n        foreach
    (string word in words) {\n            int count = 0;\n            foreach (char
    c in word) {\n                if (char.IsLetter(c)) {\n                    count++;\n
    \               }\n            }\n            if (count > maxCount) {\n                maxCount
    = count;\n                maxWord = word;\n                maxChar = maxWord.ToCharArray().OrderBy(c
    => c).First();\n            }\n        }\n        return maxWord;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps06ylxuh.cs(30,27): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       foreach (string word in words) {\n            int uniqueChars = word.Distinct().Count();\n
    \           if (uniqueChars > max.Length) {\n                max = word;\n            }\n
    \       }\n        return max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee6fa16d75c145f1ba3cec54fc770044>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee6fa16d75c145f1ba3cec54fc770044>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = string.Empty;\n        int maxCount = 0;\n        foreach (string word in words)
    {\n            int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32fccfd2639948119e7e26794af363fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32fccfd2639948119e7e26794af363fa>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        string maxChar = \"\";\n        int maxCount = 0;\n        foreach
    (string word in words) {\n            int count = 0;\n            foreach (char
    c in word) {\n                count++;\n            }\n            if (count >
    maxCount) {\n                maxCount = count;\n                maxWord = word;\n
    \               maxChar = maxWord.ToCharArray();\n            }\n        }\n        if
    (maxCount == 0) {\n            return \"\";\n        }\n        char[] charArray
    = maxChar.ToCharArray();\n        Array.Sort(charArray);\n        string result
    = \"\";\n        for (int i = 0; i < charArray.Length; i++) {\n            result
    += charArray[i];\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfqmdff1h.cs(28,27): error CS0029: Cannot implicitly convert type ''char[]''
    to ''string''

    '
  timestamp: 1659798619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       foreach (string word in words) {\n            int count = 0;\n            foreach
    (char c in word) {\n                count++;\n            }\n            if (count
    > max.Length) {\n                max = word;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed5beb6b54ff46fd8a4b0ca85609dd0c>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = word.Distinct().Count();\n            if (count > maxCount) {\n                max
    = word;\n                maxCount = count;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string result
    = \"\";\n        foreach (string word in words) {\n            int uniqueChars
    = word.ToCharArray().Distinct().Count();\n            if (uniqueChars > result.Length)
    {\n                result = word;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bcb1a0e727245b9a146087e9805fdd7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bcb1a0e727245b9a146087e9805fdd7>:0
    \n"
  stdout: ''
  timestamp: 1659798619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        // Write your
    code here\n        var maxCount = 0;\n        var maxWord = \"\";\n        foreach
    (var word in words)\n        {\n            var count = word.Distinct().Count();\n
    \           if (count > maxCount)\n            {\n                maxCount = count;\n
    \               maxWord = word;\n            }\n        }\n        return maxWord;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <01e07b3e60ee4b95b395356a3d04c9f2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <01e07b3e60ee4b95b395356a3d04c9f2>:0
    \n"
  stdout: ''
  timestamp: 1659798619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        string maxCount = \"\";\n        foreach (string word in words)
    {\n            int count = 0;\n            foreach (char c in word) {\n                count++;\n
    \           }\n            if (count > int.Parse(maxCount)) {\n                maxWord
    = word;\n                maxCount = count.ToString();\n            }\n        }\n
    \       return maxWord;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x00050]
    in <7a3370c9a6644dcf9c20f9f3644115d0>:0 \n  at Problem.Main (System.String[] args)
    [0x00024] in <7a3370c9a6644dcf9c20f9f3644115d0>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x00050]
    in <7a3370c9a6644dcf9c20f9f3644115d0>:0 \n  at Problem.Main (System.String[] args)
    [0x00024] in <7a3370c9a6644dcf9c20f9f3644115d0>:0 \n"
  stdout: ''
  timestamp: 1659798619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       string max2 = \"\";\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                if (count
    < words.Count(w => w.Contains(c))) {\n                    count++;\n                }\n
    \           }\n            if (count > words.Count(w => w.Contains(max))) {\n
    \               max = word;\n            }\n        }\n        foreach (string
    word in words) {\n            int count = 0;\n            foreach (char c in word)
    {\n                if (count < words.Count(w => w.Contains(c))) {\n                    count++;\n
    \               }\n            }\n            if (count > words.Count(w => w.Contains(max2)))
    {\n                max2 = word;\n            }\n        }\n        if (max ==
    \"\" && max2 == \"\") {\n            return \"\";\n        }\n        if (max
    == \"\") {\n            return max2;\n        }\n        if (max2 == \"\") {\n
    \           return max;\n        }\n        if (max.Length > max2.Length) {\n
    \           return max;\n        }\n        return max2;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6f28cef0e2144e99878de3a007ba9930>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6f28cef0e2144e99878de3a007ba9930>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        int maxCount =
    0;\n        string maxWord = \"\";\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <598ad2cf61a0462b99d047425623526f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <598ad2cf61a0462b99d047425623526f>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       string max2 = \"\";\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                count++;\n
    \           }\n            if (count > max) {\n                max = count;\n
    \               max2 = word;\n            }\n        }\n        if (max2 == \"\")
    {\n            return \"\";\n        }\n        return max2;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxszu7vh4.cs(24,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    /tmp/tmpxszu7vh4.cs(25,23): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       string max2 = \"\";\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                if (char.IsLetter(c))
    {\n                    count++;\n                }\n            }\n            if
    (count > max.Length) {\n                max = word;\n            }\n            if
    (count > max2.Length) {\n                max2 = word;\n            }\n        }\n
    \       if (max2.Length > max.Length) {\n            return max2;\n        }\n
    \       return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <27639641f2274a0ebb3fc68bea22976a>:0
    \n"
  stdout: ''
  timestamp: 1659798619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       string max2 = \"\";\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                count++;\n
    \           }\n            if (count > max2.Length) {\n                max = word;\n
    \               max2 = max;\n            } else if (count < max2.Length) {\n                max2
    = word;\n            }\n        }\n        return max2;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f191e2cd792d4026a86d490904f69ce9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f191e2cd792d4026a86d490904f69ce9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       foreach (string word in words) {\n            int count = 0;\n            foreach
    (char c in word) {\n                count++;\n            }\n            if (count
    > max.Length) {\n                max = word;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed5beb6b54ff46fd8a4b0ca85609dd0c>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        string maxChar = \"\";\n        string currentWord = \"\";\n
    \       string currentChar = \"\";\n        int maxCount = 0;\n        foreach
    (string word in words) {\n            currentWord = word;\n            currentChar
    = currentWord.ToCharArray().Distinct().ToArray().ToString();\n            maxCount
    = currentChar.Length;\n            foreach (char c in currentChar) {\n                if
    (maxCount > maxWord.ToCharArray().Distinct().ToArray().Length) {\n                    maxWord
    = currentWord;\n                    maxChar = c;\n                    maxCount
    = currentChar.Length;\n                }\n            }\n        }\n        return
    maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphiovrx2r.cs(29,31): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659798619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = word.Distinct().Count();\n            if (count > maxCount) {\n                max
    = word;\n                maxCount = count;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = string.Empty;\n        int maxCount = 0;\n        foreach (string word in words)
    {\n            int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32fccfd2639948119e7e26794af363fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32fccfd2639948119e7e26794af363fa>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = word.Distinct().Count();\n            if (count > maxCount) {\n                max
    = word;\n                maxCount = count;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        List<string> uniqueWords
    = new List<string>();\n        foreach (string word in words) {\n            int
    uniqueChars = word.ToCharArray().Distinct().Count();\n            if (uniqueChars
    > uniqueWords.Count) {\n                uniqueWords.Add(word);\n            }\n
    \       }\n        if (uniqueWords.Count == 0) {\n            return \"\";\n        }\n
    \       return uniqueWords.OrderBy(w => w.ToCharArray().Distinct().Count()).First();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7210fb0de7174be4a3e856246b2bc12c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7210fb0de7174be4a3e856246b2bc12c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       foreach (string word in words) {\n            int count = 0;\n            foreach
    (char c in word) {\n                count++;\n            }\n            if (count
    > max.Length) {\n                max = word;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed5beb6b54ff46fd8a4b0ca85609dd0c>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       foreach (string word in words) {\n            int count = 0;\n            foreach
    (char c in word) {\n                count++;\n            }\n            if (count
    > max.Length) {\n                max = word;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed5beb6b54ff46fd8a4b0ca85609dd0c>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.ToCharArray().Distinct().Count();\n            if
    (count > maxCount) {\n                maxCount = count;\n                maxWord
    = word;\n            }\n        }\n        return maxWord;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f456fe6fa34d4754bdafe0d4231bee89>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f456fe6fa34d4754bdafe0d4231bee89>:0
    \n"
  stdout: ''
  timestamp: 1659798619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        // Write your
    code here\n        string max = \"\";\n        int maxCount = 0;\n        foreach
    (string word in words)\n        {\n            int count = 0;\n            foreach
    (char c in word)\n            {\n                if (word.IndexOf(c) > -1)\n                {\n
    \                   count++;\n                }\n            }\n            if
    (count > maxCount)\n            {\n                max = word;\n                maxCount
    = count;\n            }\n        }\n        if (maxCount == 0)\n        {\n            return
    \"\";\n        }\n        else\n        {\n            return max;\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5b51fa572ef64da1991232ec2386f67a>:0
    \n"
  stdout: ''
  timestamp: 1659798619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = word.Distinct().Count();\n            if (count > maxCount) {\n                max
    = word;\n                maxCount = count;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                count++;\n
    \           }\n            if (count > maxCount) {\n                max = word;\n
    \               maxCount = count;\n            }\n        }\n        return max;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <50574f24858d4efbabfbff61871bad8c>:0
    \n"
  stdout: ''
  timestamp: 1659798619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.ToCharArray().Distinct().Count();\n            if
    (count > maxCount) {\n                maxCount = count;\n                maxWord
    = word;\n            }\n        }\n        return maxWord;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f456fe6fa34d4754bdafe0d4231bee89>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f456fe6fa34d4754bdafe0d4231bee89>:0
    \n"
  stdout: ''
  timestamp: 1659798619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = string.Empty;\n        string maxChar = string.Empty;\n        foreach (string
    word in words) {\n            int uniqueChars = word.Distinct().Count();\n            if
    (uniqueChars > maxChar.Length) {\n                maxChar = uniqueChars.ToString();\n
    \               maxWord = word;\n            }\n        }\n        return maxWord;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2ef5546e0d840b297831fbf1bcdc6ce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2ef5546e0d840b297831fbf1bcdc6ce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string result
    = \"\";\n        foreach (string word in words) {\n            int uniqueChars
    = word.Distinct().Count();\n            if (uniqueChars > result.Length) {\n                result
    = word;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7201fe733f7f4619968b7a855d741471>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7201fe733f7f4619968b7a855d741471>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = word.Distinct().Count();\n            if (count > maxCount) {\n                max
    = word;\n                maxCount = count;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       foreach (string word in words) {\n            int uniqueChars = word.ToCharArray().Distinct().Count();\n
    \           if (uniqueChars > max.ToCharArray().Distinct().Count()) {\n                max
    = word;\n            }\n        }\n        return max;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77964a7fc418492bbd58194ae4ef0c8d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77964a7fc418492bbd58194ae4ef0c8d>:0
    \n"
  stdout: ''
  timestamp: 1659798619
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        string maxChar = \"\";\n        int maxCount = 0;\n        foreach
    (string word in words) {\n            int count = 0;\n            foreach (char
    c in word) {\n                if (char.IsLetter(c)) {\n                    count++;\n
    \               }\n            }\n            if (count > maxCount) {\n                maxCount
    = count;\n                maxWord = word;\n                maxChar = maxWord.ToCharArray().OrderByDescending(c
    => c).First();\n            }\n        }\n        return maxWord;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpibedtmzb.cs(30,27): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       string max2 = \"\";\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                if (char.IsLetter(c))
    {\n                    count++;\n                }\n            }\n            if
    (count > max2.Length) {\n                max = word;\n                max2 = max;\n
    \           } else if (count < max2.Length) {\n                max2 = word;\n
    \           }\n        }\n        return max2;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a517a778c1b64ba7a46ef33011c0311f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a517a778c1b64ba7a46ef33011c0311f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       string max2 = \"\";\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                count++;\n
    \           }\n            if (count > max.Length) {\n                max = word;\n
    \           }\n            if (count > max2.Length) {\n                max2 =
    word;\n            }\n        }\n        return max2;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60aa8c6b531047d89e1268d14cf3ce9d>:0
    \n"
  stdout: ''
  timestamp: 1659798619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        // Your code goes
    here\n        string max = \"\";\n        string max2 = \"\";\n        foreach
    (string word in words) {\n            int count = 0;\n            foreach (char
    c in word) {\n                count++;\n            }\n            if (count >
    max.Length) {\n                max = word;\n            }\n        }\n        foreach
    (string word in words) {\n            int count = 0;\n            foreach (char
    c in word) {\n                count++;\n            }\n            if (count >
    max2.Length) {\n                max2 = word;\n            }\n        }\n        if
    (max.Length > max2.Length) {\n            return max;\n        }\n        return
    max2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <176007b525664df0b50d3a21fc9eaf84>:0
    \n"
  stdout: ''
  timestamp: 1659798619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = string.Empty;\n        string maxChar = string.Empty;\n        int maxCount
    = 0;\n        foreach (string word in words) {\n            int count = 0;\n            foreach
    (char c in word) {\n                if (char.IsLetter(c)) {\n                    count++;\n
    \               }\n            }\n            if (count > maxCount) {\n                maxCount
    = count;\n                maxWord = word;\n                maxChar = string.Empty;\n
    \           }\n        }\n        if (maxCount == 0) {\n            return string.Empty;\n
    \       }\n        foreach (string word in words) {\n            int count = 0;\n
    \           foreach (char c in word) {\n                if (char.IsLetter(c))
    {\n                    count++;\n                }\n            }\n            if
    (count > maxCount) {\n                maxCount = count;\n                maxWord
    = word;\n                maxChar = string.Empty;\n            }\n        }\n        return
    maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <459b3b5ac1294306893488012a03f1de>:0
    \n"
  stdout: ''
  timestamp: 1659798619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = string.Empty;\n        int maxCount = 0;\n        foreach (string word in words)
    {\n            int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32fccfd2639948119e7e26794af363fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32fccfd2639948119e7e26794af363fa>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = word.Distinct().Count();\n            if (count > maxCount) {\n                max
    = word;\n                maxCount = count;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        string maxCount = \"\";\n        foreach (string word in words)
    {\n            int count = word.ToCharArray().Distinct().Count();\n            if
    (count > maxCount.Length) {\n                maxCount = count;\n                maxWord
    = word;\n            }\n        }\n        return maxWord;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv2jxwzwq.cs(22,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798617
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = word.Distinct().Count();\n            if (count > maxCount) {\n                max
    = word;\n                maxCount = count;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string result
    = \"\";\n        string max = \"\";\n        foreach (string word in words) {\n
    \           int count = 0;\n            foreach (char c in word) {\n                if
    (char.IsLetter(c)) {\n                    count++;\n                }\n            }\n
    \           if (count > max.Length) {\n                max = word;\n            }\n
    \       }\n        if (max.Length > result.Length) {\n            result = max;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77ff7f9704d640a3832a4c0b5b063a6d>:0
    \n"
  stdout: ''
  timestamp: 1659798619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Length;\n            if (maxCount < count) {\n                maxCount
    = count;\n                maxWord = word;\n            }\n        }\n        return
    maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f7bd8ef14c246d5a112561242e189f8>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = 0;\n            foreach (char c in word) {\n                count++;\n
    \           }\n            if (count > maxCount) {\n                maxCount =
    count;\n                maxWord = word;\n            }\n        }\n        return
    maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0630d97124154b3ebc74655ddc597e02>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       foreach (string word in words) {\n            int count = 0;\n            foreach
    (char c in word) {\n                count++;\n            }\n            if (count
    > max.Length) {\n                max = word;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed5beb6b54ff46fd8a4b0ca85609dd0c>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = string.Empty;\n        int maxCount = 0;\n        foreach (string word in words)
    {\n            int count = word.Length;\n            if (count > maxCount) {\n
    \               maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0ecb9a653e3a458c8a76ed2d2e7115c4>:0
    \n"
  stdout: ''
  timestamp: 1659798619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = string.Empty;\n        int maxCount = 0;\n        foreach (string word in words)
    {\n            int count = word.Length;\n            if (count > maxCount) {\n
    \               maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0ecb9a653e3a458c8a76ed2d2e7115c4>:0
    \n"
  stdout: ''
  timestamp: 1659798619
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string result
    = \"\";\n        Dictionary<string, int> charCounts = new Dictionary<string, int>();\n
    \       foreach (string word in words) {\n            charCounts.Add(word, 0);\n
    \       }\n        foreach (string word in words) {\n            foreach (char
    c in word) {\n                charCounts[word] += 1;\n            }\n        }\n
    \       foreach (KeyValuePair<string, int> kvp in charCounts) {\n            if
    (kvp.Value == words.Count) {\n                result = kvp.Key;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a172c4273ad4d319fc9aedcfb7d1f55>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a172c4273ad4d319fc9aedcfb7d1f55>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = string.Empty;\n        int maxCount = 0;\n        foreach (string word in words)
    {\n            int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32fccfd2639948119e7e26794af363fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32fccfd2639948119e7e26794af363fa>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = 0;\n            foreach (char c in word) {\n                if
    (char.IsLetter(c)) {\n                    count++;\n                }\n            }\n
    \           if (count > maxCount) {\n                maxCount = count;\n                maxWord
    = word;\n            }\n        }\n        return maxWord;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b74a0f8e96b438485e3e055a7fb7be0>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string result
    = \"\";\n        foreach (string word in words) {\n            int max = 0;\n
    \           foreach (char c in word) {\n                max = Math.Max(max, words.Count(w
    => w.Contains(c)));\n            }\n            if (max > result.Length) {\n                result
    = word;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <436db9a4372f4bbe8e876b56222bf0c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <436db9a4372f4bbe8e876b56222bf0c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = string.Empty;\n        int maxCount = 0;\n        foreach (string word in words)
    {\n            int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32fccfd2639948119e7e26794af363fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32fccfd2639948119e7e26794af363fa>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = string.Empty;\n        int maxCount = 0;\n        foreach (string word in words)
    {\n            int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32fccfd2639948119e7e26794af363fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32fccfd2639948119e7e26794af363fa>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = string.Empty;\n        int maxCount = 0;\n        foreach (string word in words)
    {\n            int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32fccfd2639948119e7e26794af363fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32fccfd2639948119e7e26794af363fa>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        string maxCount = \"\";\n        foreach (string word in words)
    {\n            int count = word.Length;\n            if (maxCount.Length > count)
    {\n                maxWord = word;\n                maxCount = count;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfrbavb8k.cs(23,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = 0;\n            foreach (char c in word) {\n                count++;\n
    \           }\n            if (count > maxCount) {\n                maxCount =
    count;\n                maxWord = word;\n            }\n        }\n        return
    maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0630d97124154b3ebc74655ddc597e02>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                if (char.IsLetter(c))
    {\n                    count++;\n                }\n            }\n            if
    (count > maxCount) {\n                max = word;\n                maxCount =
    count;\n            }\n        }\n        return max;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <21abb49aa17f458dbef4efc9547e1bc9>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string result
    = \"\";\n        HashSet<string> unique = new HashSet<string>();\n        foreach
    (string word in words) {\n            foreach (char c in word) {\n                if
    (!unique.Contains(c)) {\n                    unique.Add(c);\n                }\n
    \           }\n        }\n        if (unique.Count > words.Count) {\n            result
    = \"\";\n        } else {\n            result = words.OrderBy(x => x.Length).First();\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqf9af_4n.cs(21,38): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpqf9af_4n.cs(22,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659798619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string result
    = \"\";\n        List<string> max = new List<string>();\n        foreach (string
    word in words) {\n            int count = 0;\n            foreach (char c in word)
    {\n                if (char.IsLetter(c)) {\n                    count++;\n                }\n
    \           }\n            if (count > max.Count) {\n                max.Add(word);\n
    \           }\n        }\n        if (max.Count > 0) {\n            foreach (string
    word in max) {\n                foreach (char c in word) {\n                    if
    (char.IsLetter(c)) {\n                        result += c;\n                    }\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9412776bf2084bc8b64c999abbdcde14>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9412776bf2084bc8b64c999abbdcde14>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798620
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        int max = 0;\n
    \       string maxWord = \"\";\n        foreach (string word in words) {\n            int
    uniqueChars = word.Distinct().Count();\n            if (uniqueChars > max) {\n
    \               max = uniqueChars;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ca37983cdbf343e08c926eeddaca30df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ca37983cdbf343e08c926eeddaca30df>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       string maxChar = \"\";\n        foreach (string word in words) {\n            int
    maxCharCount = 0;\n            foreach (char c in word) {\n                if
    (maxCharCount < char.Count(c)) {\n                    maxCharCount = char.Count(c);\n
    \                   maxChar = c;\n                }\n            }\n            if
    (maxCharCount > char.Count(max)) {\n                max = maxChar;\n            }\n
    \       }\n        return max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz3xrs3ho.cs(22,41): error CS0117: ''char'' does not contain a definition
    for ''Count''

    /tmp/tmpz3xrs3ho.cs(23,41): error CS0117: ''char'' does not contain a definition
    for ''Count''

    /tmp/tmpz3xrs3ho.cs(24,31): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpz3xrs3ho.cs(27,37): error CS0117: ''char'' does not contain a definition
    for ''Count''

    '
  timestamp: 1659798619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       string max2 = \"\";\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                count++;\n
    \           }\n            if (count > max.Length) {\n                max = word;\n
    \           }\n            if (count > max2.Length) {\n                max2 =
    word;\n            }\n        }\n        if (max.Length > max2.Length) {\n            return
    max;\n        }\n        return max2;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <45f979fd83f44741a048542b25d5d8b2>:0
    \n"
  stdout: ''
  timestamp: 1659798620
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string result
    = \"\";\n        foreach (string word in words) {\n            int uniqueChars
    = word.Distinct().Count();\n            if (uniqueChars > result.Length) {\n                result
    = word;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7201fe733f7f4619968b7a855d741471>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7201fe733f7f4619968b7a855d741471>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       foreach (string word in words) {\n            int maxChars = word.Length;\n
    \           int maxCharsCount = 0;\n            foreach (char c in word) {\n                if
    (maxCharsCount < maxChars) {\n                    maxCharsCount = maxChars;\n
    \                   max = word;\n                }\n            }\n        }\n
    \       return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa66970c16cf46c7bd98a101d6ea7d80>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa66970c16cf46c7bd98a101d6ea7d80>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798620
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        // Write your
    code here\n        string maxWord = \"\";\n        int maxCount = 0;\n        foreach
    (string word in words) {\n            int count = word.Distinct().Count();\n            if
    (count > maxCount) {\n                maxCount = count;\n                maxWord
    = word;\n            }\n        }\n        return maxWord;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2be9b9f394ee4af7a18cf126f04aea87>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2be9b9f394ee4af7a18cf126f04aea87>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       foreach (string word in words) {\n            int count = 0;\n            foreach
    (char c in word) {\n                count++;\n            }\n            if (count
    > max.Length) {\n                max = word;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed5beb6b54ff46fd8a4b0ca85609dd0c>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        // Write your
    code here\n        string result = \"\";\n        Dictionary<string, int> charCount
    = new Dictionary<string, int>();\n        foreach (string word in words) {\n            foreach
    (char c in word) {\n                if (!charCount.ContainsKey(c)) {\n                    charCount.Add(c,
    1);\n                }\n                else {\n                    charCount[c]++;\n
    \               }\n            }\n        }\n        foreach (KeyValuePair<string,
    int> kvp in charCount) {\n            if (kvp.Value == words.Count) {\n                result
    = kvp.Key;\n                break;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwebxalge.cs(22,44): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpwebxalge.cs(23,35): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpwebxalge.cs(26,31): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659798620
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       string maxChar = \"\";\n        foreach (string word in words) {\n            int
    maxCount = 0;\n            foreach (char c in word) {\n                if (maxCount
    == 0) {\n                    maxCount = 1;\n                    maxChar = c;\n
    \               }\n                else if (maxCount > 1) {\n                    maxCount++;\n
    \               }\n                else {\n                    maxCount = 0;\n
    \               }\n            }\n            if (maxCount > 1) {\n                max
    = word;\n            }\n        }\n        return max;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2h4vkbvd.cs(24,31): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659798620
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = string.Empty;\n        int maxCount = 0;\n        foreach (string word in words)
    {\n            int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32fccfd2639948119e7e26794af363fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32fccfd2639948119e7e26794af363fa>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        string maxWordCount = 0;\n        foreach (string word in words)
    {\n            int wordCount = word.Length;\n            if (wordCount > maxWordCount)
    {\n                maxWord = word;\n                maxWordCount = wordCount;\n
    \           }\n        }\n        return maxWord;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfo3gxg1v.cs(18,31): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    /tmp/tmpfo3gxg1v.cs(21,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    /tmp/tmpfo3gxg1v.cs(23,32): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798620
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       string max2 = \"\";\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                count++;\n
    \           }\n            if (count > max2.Length) {\n                max = word;\n
    \               max2 = word;\n            }\n        }\n        if (max2.Length
    > max.Length) {\n            return max2;\n        }\n        return max;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d7b1d6724b054ed6bdda63c2e32d9244>:0
    \n"
  stdout: ''
  timestamp: 1659798620
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string result
    = \"\";\n        Dictionary<string, int> count = new Dictionary<string, int>();\n
    \       foreach (string word in words) {\n            int count = 0;\n            foreach
    (char c in word) {\n                if (!count.ContainsKey(c)) {\n                    count[c]
    = 1;\n                } else {\n                    count[c]++;\n                }\n
    \           }\n            if (count.Values.Max() == 1) {\n                result
    = word;\n                break;\n            }\n            foreach (char c in
    word) {\n                if (count.ContainsKey(c)) {\n                    count[c]--;\n
    \                   if (count[c] == 0) {\n                        count.Remove(c);\n
    \                   }\n                }\n            }\n        }\n        if
    (count.Count == 0) {\n            result = \"\";\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjv_l2ws2.cs(20,17): error CS0136: A local or parameter named ''count''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpjv_l2ws2.cs(22,28): error CS1061: ''int'' does not contain a definition
    for ''ContainsKey'' and no accessible extension method ''ContainsKey'' accepting
    a first argument of type ''int'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpjv_l2ws2.cs(23,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmpjv_l2ws2.cs(25,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmpjv_l2ws2.cs(28,23): error CS1061: ''int'' does not contain a definition
    for ''Values'' and no accessible extension method ''Values'' accepting a first
    argument of type ''int'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpjv_l2ws2.cs(33,27): error CS1061: ''int'' does not contain a definition
    for ''ContainsKey'' and no accessible extension method ''ContainsKey'' accepting
    a first argument of type ''int'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpjv_l2ws2.cs(34,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmpjv_l2ws2.cs(35,25): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmpjv_l2ws2.cs(36,31): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''value'' of ''CollectionExtensions.Remove<TKey,
    TValue>(IDictionary<TKey, TValue>, TKey, out TValue)''

    '
  timestamp: 1659798620
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        string maxCount = \"\";\n        foreach (string word in words)
    {\n            int count = word.ToCharArray().Distinct().Count();\n            if
    (count > maxCount.Length) {\n                maxCount = count;\n                maxWord
    = word;\n            }\n        }\n        return maxWord;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv2jxwzwq.cs(22,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798617
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string result
    = \"\";\n        HashSet<string> uniqueChars = new HashSet<string>();\n        foreach
    (string word in words) {\n            foreach (char c in word) {\n                if
    (!uniqueChars.Contains(c)) {\n                    uniqueChars.Add(c);\n                }\n
    \           }\n        }\n        foreach (string word in words) {\n            foreach
    (char c in word) {\n                if (uniqueChars.Contains(c)) {\n                    uniqueChars.Remove(c);\n
    \               }\n            }\n        }\n        if (uniqueChars.Count ==
    0) {\n            return \"\";\n        }\n        foreach (string word in words)
    {\n            foreach (char c in word) {\n                if (uniqueChars.Contains(c))
    {\n                    uniqueChars.Remove(c);\n                }\n            }\n
    \       }\n        foreach (string word in words) {\n            foreach (char
    c in word) {\n                if (!uniqueChars.Contains(c)) {\n                    uniqueChars.Add(c);\n
    \               }\n            }\n        }\n        foreach (string word in words)
    {\n            foreach (char c in word) {\n                if (uniqueChars.Contains(c))
    {\n                    uniqueChars.Remove(c);\n                }\n            }\n
    \       }\n        foreach (string word in words) {\n            foreach (char
    c in word) {\n                if (!uniqueChars.Contains(c)) {\n                    uniqueChars.Add(c);\n
    \               }\n            }\n        }\n        foreach (string word in words)
    {\n            foreach (char c in word) {\n                if (uniqueChars.Contains(c))
    {\n                    uniqueChars.Remove(c);\n                }\n            }\n
    \       }\n        foreach (string word in words) {\n            foreach (char
    c in word) {\n                if (!uniqueChars.Contains(c)) {\n                    uniqueChars.Add(c);\n
    \               }\n            }\n        }\n        foreach (string word in words)
    {\n            foreach (char c in word) {\n                if (uniqueChars.Contains(c))
    {\n                    uniqueChars.Remove(c);\n                }\n            }\n
    \       }\n        foreach (string word in words) {\n            foreach (char
    c in word) {\n                if (!uniqueChars.Contains(c)) {\n                    uniqueChars.Add(c);\n
    \               }\n            }\n        }\n        foreach (string word in words)
    {\n            foreach (char c in word) {\n                if (uniqueChars.Contains(c))
    {\n                    uniqueChars.Remove(c);\n                }\n            }\n
    \       }\n        foreach (string word in words) {\n            foreach (char
    c in word) {\n                if (!uniqueChars.Contains(c)) {\n                    uniqueChars.Add(c);\n
    \               }\n            }\n        }\n        foreach (string word in words)
    {\n            foreach (char c in word) {\n                if (uniqueChars.Contains(c))
    {\n                    uniqueChars.Remove(c);\n                }\n            }\n
    \       }\n        foreach (string word in words) {\n            foreach (char
    c in \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxm98h31f.cs(114,31): error CS1525: Invalid expression term ''}''

    /tmp/tmpxm98h31f.cs(114,31): error CS1026: ) expected

    /tmp/tmpxm98h31f.cs(114,31): error CS1002: ; expected

    /tmp/tmpxm98h31f.cs(116,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpxm98h31f.cs(129,2): error CS1513: } expected

    '
  timestamp: 1659798619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = word.Distinct().Count();\n            if (count > maxCount) {\n                max
    = word;\n                maxCount = count;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        int max = 0;\n
    \       string maxWord = \"\";\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                count++;\n
    \           }\n            if (count > max) {\n                max = count;\n
    \               maxWord = word;\n            }\n        }\n        return maxWord;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e5e157701df4d6291d358eeb4c625d9>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = word.Distinct().Count();\n            if (count > maxCount) {\n                max
    = word;\n                maxCount = count;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = 0;\n            foreach (char c in word) {\n                count++;\n
    \           }\n            if (count > maxCount) {\n                maxCount =
    count;\n                maxWord = word;\n            }\n        }\n        return
    maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0630d97124154b3ebc74655ddc597e02>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = string.Empty;\n        int maxCount = 0;\n        foreach (string word in words)
    {\n            int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32fccfd2639948119e7e26794af363fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32fccfd2639948119e7e26794af363fa>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = word.Distinct().Count();\n            if (count > maxCount) {\n                max
    = word;\n                maxCount = count;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string result
    = \"\";\n        Dictionary<string, int> count = new Dictionary<string, int>();\n
    \       foreach (string word in words) {\n            foreach (char c in word)
    {\n                if (!count.ContainsKey(c)) {\n                    count[c]
    = 1;\n                } else {\n                    count[c]++;\n                }\n
    \           }\n        }\n        foreach (KeyValuePair<string, int> kvp in count)
    {\n            if (kvp.Value == words.Count) {\n                result = kvp.Key;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc8sx1lb6.cs(21,40): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpc8sx1lb6.cs(22,27): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpc8sx1lb6.cs(24,27): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659798620
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       foreach (string word in words) {\n            int uniqueChars = word.Distinct().Count();\n
    \           if (uniqueChars > max.Length) {\n                max = word;\n            }\n
    \       }\n        return max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee6fa16d75c145f1ba3cec54fc770044>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee6fa16d75c145f1ba3cec54fc770044>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = string.Empty;\n        int maxCount = 0;\n        foreach (string word in words)
    {\n            int count = word.ToCharArray().Distinct().Count();\n            if
    (count > maxCount) {\n                maxCount = count;\n                maxWord
    = word;\n            }\n        }\n        return maxWord;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b28bd9959b1d4ff5a912bdeadb44f800>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b28bd9959b1d4ff5a912bdeadb44f800>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = word.Distinct().Count();\n            if (count > maxCount) {\n                max
    = word;\n                maxCount = count;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671c61b210be4483aff990427c3715ec>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string result
    = \"\";\n        Dictionary<string, int> charCount = new Dictionary<string, int>();\n
    \       foreach (string word in words) {\n            charCount.Clear();\n            foreach
    (char c in word) {\n                if (!charCount.ContainsKey(c)) {\n                    charCount.Add(c,
    1);\n                } else {\n                    charCount[c]++;\n                }\n
    \           }\n            int maxCount = 0;\n            foreach (KeyValuePair<string,
    int> kvp in charCount) {\n                if (kvp.Value > maxCount) {\n                    maxCount
    = kvp.Value;\n                    result = kvp.Key;\n                }\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgtrs9h6g.cs(22,44): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpgtrs9h6g.cs(23,35): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpgtrs9h6g.cs(25,31): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659798620
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = word.Distinct().Count();\n            if (count > maxCount) {\n                max
    = word;\n                maxCount = count;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bda7c35aa268451c956325d76a7108b9>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       string max2 = \"\";\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                count++;\n
    \           }\n            if (count > max2.Length) {\n                max = word;\n
    \               max2 = word;\n            } else if (count < max2.Length) {\n
    \               max2 = word;\n            }\n        }\n        return max;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c739d0292c4d4782a00669f8ec5c9d5c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c739d0292c4d4782a00669f8ec5c9d5c>:0
    \n"
  stdout: ''
  timestamp: 1659798620
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       string max2 = \"\";\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                if (char.IsLetter(c))
    {\n                    count++;\n                }\n            }\n            if
    (count > max2.Length) {\n                max = word;\n                max2 = max;\n
    \           } else if (count < max2.Length) {\n                max2 = word;\n
    \           }\n        }\n        if (max2.Length > max.Length) {\n            return
    max2;\n        } else {\n            return max;\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <41692cfff2494484b59ec4ee5d61732c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <41692cfff2494484b59ec4ee5d61732c>:0
    \n"
  stdout: ''
  timestamp: 1659798618
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxWord
    = string.Empty;\n        int maxCount = 0;\n        foreach (string word in words)
    {\n            int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32fccfd2639948119e7e26794af363fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32fccfd2639948119e7e26794af363fa>:0
    \n"
  stdout: ''
  timestamp: 1659798618
