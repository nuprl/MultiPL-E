name: HumanEval_116_sort_array
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // In this Kata, you have to sort an array of non-negative integers\
  \ according to\n    // number of ones in their binary representation in ascending\
  \ order.\n    // For similar number of ones, sort based on decimal value.\n    //\
  \ It must be implemented like this:\n    // >>> sort_array([1, 5, 2, 3, 4]) == [1,\
  \ 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
  \    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    public static List<long>\
  \ SortArray(List<long> arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
  \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n\
  \    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,\
  \ (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,\
  \ (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new\
  \ long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
  \ long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new\
  \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new\
  \ long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,\
  \ (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
  \ (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,\
  \ (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,\
  \ (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new\
  \ long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n \
  \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,\
  \ (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
  \ (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
completions: ["        long ones = 0;\n        long zeros = 0;\n        long max =\
    \ 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n         \
    \       ones++;\n            }\n            if (i == 0) {\n                zeros++;\n\
    \            }\n            if (i > max) {\n                max = i;\n       \
    \     }\n        }\n        long onesMax = ones * max;\n        long zerosMax\
    \ = zeros * max;\n        long maxOnes = ones * max;\n        long maxZeros =\
    \ zeros * max;\n        long maxOnesMax = onesMax * max;\n        long maxZerosMax\
    \ = zerosMax * max;\n        long maxOnesMaxMinusOnes = onesMax * max - 1;\n \
    \       long maxZerosMaxMinusOnes = zerosMax * max - 1;\n        long maxOnesMaxMinusOnesMax\
    \ = onesMax * max - maxOnes;\n        long maxZerosMaxMinusOnesMax = zerosMax\
    \ * max - maxZeros;\n        long maxOnesMaxMinusOnesMaxMinusOnes = onesMax *\
    \ max - maxOnesMax;\n        long maxZerosMaxMinusOnesMaxMinusOnes = zerosMax\
    \ * max - maxZerosMax;\n        long maxOnesMaxMinusOnesMaxMinusOnesMax = onesMax\
    \ * max - maxOnesMaxMinusOnes;\n        long maxZerosMaxMinusOnesMaxMinusOnesMax\
    \ = zerosMax * max - maxZerosMaxMinusOnes;\n        long maxOnesMaxMinusOnesMaxMinusOnesMaxMinusOnes\
    \ = onesMax * max - maxOnesMaxMinusOnesMax;\n        long maxZerosMaxMinusOnesMaxMinusOnesMaxMinusOnes\
    \ = zerosMax * max - maxZerosMaxMinusOnesMax;\n        long maxOnesMaxMinusOnesMaxMinusOnesMaxMinusOnesMax\
    \ = onesMax * max - maxOnesMaxMinusOnesMaxMinusOnes;\n        long maxZerosMaxMinusOnesMaxMinusOnesMaxMinusOnesMax\
    \ = zerosMax * max - maxZerosMaxMinusOnesMaxMinusOnes;\n        long maxOnesMaxMinusOnesMaxMinusOnesMaxMinusOnesMaxMinusOnes\
    \ = onesMax * max - maxOnesMaxMinusOne", "        long ones = arr.Sum(x => x &\
    \ 1);\n        long zeros = arr.Sum(x => ~x);\n        long max = Math.Max(ones,\
    \ zeros);\n        long min = Math.Min(ones, zeros);\n        long diff = max\
    \ - min;\n        long diff2 = diff / 2;\n        long diff3 = diff / 3;\n   \
    \     long diff4 = diff / 4;\n        long diff5 = diff / 5;\n        long diff6\
    \ = diff / 6;\n        long diff7 = diff / 7;\n        long diff8 = diff / 8;\n\
    \        long diff9 = diff / 9;\n        long diff10 = diff / 10;\n        long\
    \ diff11 = diff / 11;\n        long diff12 = diff / 12;\n        long diff13 =\
    \ diff / 13;\n        long diff14 = diff / 14;\n        long diff15 = diff / 15;\n\
    \        long diff16 = diff / 16;\n        long diff17 = diff / 17;\n        long\
    \ diff18 = diff / 18;\n        long diff19 = diff / 19;\n        long diff20 =\
    \ diff / 20;\n        long diff21 = diff / 21;\n        long diff22 = diff / 22;\n\
    \        long diff23 = diff / 23;\n        long diff24 = diff / 24;\n        long\
    \ diff25 = diff / 25;\n        long diff26 = diff / 26;\n        long diff27 =\
    \ diff / 27;\n        long diff28 = diff / 28;\n        long diff29 = diff / 29;\n\
    \        long diff30 = diff / 30;\n        long diff31 = diff / 31;\n        long\
    \ diff32 = diff / 32;\n        long diff33 = diff / 33;\n        long diff34 =\
    \ diff / 34;\n        long diff35 = diff / 35;\n        long diff36 = diff / 36;\n\
    \        long diff37 = diff / 37;\n        long diff38 = diff / 38;\n        long\
    \ diff39 = diff / 39;\n        long diff40 = diff / 40;\n        long diff41 =\
    \ diff / 41;\n        long diff42 = diff / 42;\n        long diff43 = diff / 43;\n\
    \        long diff44 = diff / 44;\n        long diff45 = diff / 45;\n        long\
    \ diff46 = diff / 46;\n        long diff47 = diff / 47;\n        long diff48 =\
    \ diff / 48;\n        long diff49 = diff / 49;\n        long diff50 = diff / ",
  "        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  foreach (long i in arr) {\n            if (i == 1) {\n                ones++;\n\
    \            }\n            else if (i == 0) {\n                zeros++;\n   \
    \         }\n            else {\n                max = Math.Max(max, i);\n   \
    \         }\n        }\n        List<long> result = new List<long>();\n      \
    \  if (ones > zeros) {\n            foreach (long i in arr) {\n              \
    \  if (i == 1) {\n                    result.Add(1);\n                }\n    \
    \            else if (i == 0) {\n                    result.Add(0);\n        \
    \        }\n                else {\n                    result.Add(i);\n     \
    \           }\n            }\n        }\n        else {\n            foreach (long\
    \ i in arr) {\n                if (i == 1) {\n                    result.Add(0);\n\
    \                }\n                else if (i == 0) {\n                    result.Add(1);\n\
    \                }\n                else {\n                    result.Add(i);\n\
    \                }\n            }\n        }\n        Array.Sort(result);\n  \
    \      return result;", "        long ones = 0;\n        long zeros = 0;\n   \
    \     long max = 0;\n        foreach (long i in arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            }\n            if (i == 0) {\n     \
    \           zeros++;\n            }\n            if (i > max) {\n            \
    \    max = i;\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n  \
    \      long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n   \
    \     long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n    \
    \    long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n  \
    \      long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n\
    \        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n\
    \        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n\
    \        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n\
    \        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n\
    \        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n\
    \        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n\
    \        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n\
    \        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n\
    \        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n\
    \        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n\
    \        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n\
    \        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n\
    \        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n\
    \        long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n\
    \        long temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n\
    \        long temp61 = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n\
    \        long temp64 = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n\
    \        long temp67 = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n\
    \        long temp70 = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n\
    \        long temp73 = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n\
    \        ", "        long ones = arr.Sum(x => x & 1);\n        long zeros = arr.Sum(x\
    \ => ~x & 1);\n        long maxOnes = arr.Max(x => x & 1);\n        long maxZeros\
    \ = arr.Max(x => ~x & 1);\n        long maxOnesCount = arr.Count(x => x & 1);\n\
    \        long maxZerosCount = arr.Count(x => ~x & 1);\n        long maxOnesSum\
    \ = arr.Sum(x => x & 1);\n        long maxZerosSum = arr.Sum(x => ~x & 1);\n \
    \       long maxOnesSumCount = arr.Count(x => x & 1);\n        long maxZerosSumCount\
    \ = arr.Count(x => ~x & 1);\n        long maxOnesSumSum = arr.Sum(x => x & 1);\n\
    \        long maxZerosSumSum = arr.Sum(x => ~x & 1);\n        long maxOnesSumSumCount\
    \ = arr.Count(x => x & 1);\n        long maxZerosSumSumCount = arr.Count(x =>\
    \ ~x & 1);\n        long maxOnesSumSumSum = arr.Sum(x => x & 1);\n        long\
    \ maxZerosSumSumSum = arr.Sum(x => ~x & 1);\n        long maxOnesSumSumSumCount\
    \ = arr.Count(x => x & 1);\n        long maxZerosSumSumSumCount = arr.Count(x\
    \ => ~x & 1);\n        long maxOnesSumSumSumSum = arr.Sum(x => x & 1);\n     \
    \   long maxZerosSumSumSumSum = arr.Sum(x => ~x & 1);\n        long maxOnesSumSumSumSumCount\
    \ = arr.Count(x => x & 1);\n        long maxZerosSumSumSumSumCount = arr.Count(x\
    \ => ~x & 1);\n        long maxOnesSumSumSumSumSum = arr.Sum(x => x & 1);\n  \
    \      long maxZerosSumSumSumSumSum = arr.Sum(x => ~x & 1);\n        long maxOnesSumSumSumSumSumCount\
    \ = arr.Count(x => x & 1);\n        long maxZerosSumSumSumSumCount = arr.Count(x\
    \ => ~x & 1);\n        long maxOnesSumSumSumSumSumSum = arr.Sum(x => x & 1);\n\
    \        long maxZerosSumSumSumSumSum = arr.Sum(x => ~x & 1);\n        long maxOnesSumSumSumSumSumCount\
    \ = arr.Count(x ", "        long ones = 0;\n        long zeros = 0;\n        long\
    \ max = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n   \
    \             ones++;\n            }\n            if (i == 0) {\n            \
    \    zeros++;\n            }\n            if (i > max) {\n                max\
    \ = i;\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n  \
    \      long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n   \
    \     long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n    \
    \    long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n  \
    \      long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n\
    \        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n\
    \        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n\
    \        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n\
    \        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n\
    \        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n\
    \        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n\
    \        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n\
    \        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n\
    \        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n\
    \        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n\
    \        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n\
    \        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n\
    \        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n\
    \        long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n\
    \        long temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n\
    \        long temp61 = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n\
    \        long temp64 = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n\
    \        long temp67 = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n\
    \        long temp70 = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n\
    \        long temp73 = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n\
    \        ", "        long ones = arr.Sum(x => x & 1);\n        long zeros = arr.Sum(x\
    \ => ~x);\n        long maxOnes = arr.Max(x => x & 1);\n        long maxZeros\
    \ = arr.Max(x => ~x);\n        long maxOnesZeros = maxOnes - maxZeros;\n     \
    \   long maxOnesOnes = maxOnes - ones;\n        long maxOnesTwos = maxOnes - twos(ones);\n\
    \        long maxOnesThrees = maxOnes - threes(ones);\n        long maxOnesFours\
    \ = maxOnes - fours(ones);\n        long maxOnesFives = maxOnes - fives(ones);\n\
    \        long maxOnesSixes = maxOnes - sixes(ones);\n        long maxOnesSevens\
    \ = maxOnes - sevens(ones);\n        long maxOnesEights = maxOnes - eights(ones);\n\
    \        long maxOnesNines = maxOnes - nines(ones);\n        long maxOnesTens\
    \ = maxOnes - tens(ones);\n        long maxOnesElevens = maxOnes - elevens(ones);\n\
    \        long maxOnesTwelves = maxOnes - twelves(ones);\n        long maxOnesThirteens\
    \ = maxOnes - thirteens(ones);\n        long maxOnesFourteens = maxOnes - fourteens(ones);\n\
    \        long maxOnesFifteens = maxOnes - fifteens(ones);\n        long maxOnesSixteens\
    \ = maxOnes - sixteens(ones);\n        long maxOnesSeventeens = maxOnes - seventeens(ones);\n\
    \        long maxOnesEighteens = maxOnes - eighteens(ones);\n        long maxOnesNineteens\
    \ = maxOnes - nineteens(ones);\n        long maxOnesTwenty = maxOnes - twenty(ones);\n\
    \        long maxOnesTwentyOnes = maxOnes - twentyOnes(ones);\n        long maxOnesTwentyTwos\
    \ = maxOnes - twentyTwos(ones);\n        long maxOnesTwentyThrees = maxOnes -\
    \ twentyThrees(ones);\n        long maxOnesTwentyFours = maxOnes - twentyFours(ones);\n\
    \        long maxOnesTwentyFives = maxOnes - twentyFives(ones);\n", "        long\
    \ ones = 0;\n        long zeros = 0;\n        long max = 0;\n        long min\
    \ = 0;\n        foreach (long i in arr) {\n            if (i == 1) ones++;\n \
    \           else if (i == 0) zeros++;\n            else if (i > 0) max = Math.Max(max,\
    \ i);\n            else if (i < 0) min = Math.Min(min, i);\n        }\n      \
    \  List<long> result = new List<long>();\n        if (ones > zeros) {\n      \
    \      long onesMax = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2) + 1)));\n            long onesMin = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(min)\
    \ + 1)));\n            long onesDiff = onesMax - onesMin;\n            long onesDiff2\
    \ = onesDiff / 2;\n            long onesDiff3 = onesDiff2 / 2;\n            long\
    \ onesDiff4 = onesDiff3 / 2;\n            long onesDiff5 = onesDiff4 / 2;\n  \
    \          long onesDiff6 = onesDiff5 / 2;\n            long onesDiff7 = onesDiff6\
    \ / 2;\n            long onesDiff8 = onesDiff7 / 2;\n            long onesDiff9\
    \ = onesDiff8 / 2;\n            long onesDiff10 = onesDiff9 / 2;\n           \
    \ long onesDiff11 = onesDiff10 / 2;\n            long onesDiff12 = onesDiff11\
    \ / 2;\n            long onesDiff13 = onesDiff12 / 2;\n            long onesDiff14\
    \ = onesDiff13 / 2;\n            long onesDiff15 = onesDiff14 / 2;\n         \
    \   long onesDiff16 = onesDiff15 / 2;\n            long onesDiff17 = onesDiff16\
    \ / 2;\n            long onesDiff18 = onesDiff17 / 2;\n            long onesDiff19\
    \ = onesDiff18 / 2;\n            long onesDiff20 = onesDiff19 / 2;\n         \
    \   long onesDiff21 = onesDiff20 / 2;\n            long onesDiff22 = onesDiff21\
    \ / 2;\n            long onesDiff23 = onesDiff22 / 2;\n            long onesDiff24\
    \ = onesDiff23 / 2;\n            long onesDiff25 = onesDiff24 / 2;\n         \
    \   long onesDiff26 = onesDiff25 / 2;\n            long onesDiff27 = onesDiff26\
    \ / 2;\n            long onesDiff28 = onesDiff27 / 2;", "        long ones = 0;\n\
    \        long zeros = 0;\n        long max = 0;\n        foreach (long i in arr)\
    \ {\n            ones += i;\n            zeros -= i;\n            if (ones > max)\
    \ {\n                max = ones;\n            }\n            if (zeros > max)\
    \ {\n                max = zeros;\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in arr) {\n            if\
    \ (i == 1) {\n                result.Add(i);\n            } else {\n         \
    \       result.Add(max - (long)Math.Floor(Math.Log10(i / max)));\n           \
    \ }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        foreach (long i in arr)\
    \ {\n            ones += i;\n        }\n        foreach (long i in arr) {\n  \
    \          zeros += i;\n        }\n        long onesCount = ones;\n        long\
    \ zerosCount = zeros;\n        long onesSum = 0;\n        long zerosSum = 0;\n\
    \        long onesSumCount = 0;\n        long zerosSumCount = 0;\n        long\
    \ onesSumCount2 = 0;\n        long zerosSumCount2 = 0;\n        long onesSumCount3\
    \ = 0;\n        long zerosSumCount3 = 0;\n        long onesSumCount4 = 0;\n  \
    \      long zerosSumCount4 = 0;\n        long onesSumCount5 = 0;\n        long\
    \ zerosSumCount5 = 0;\n        long onesSumCount6 = 0;\n        long zerosSumCount6\
    \ = 0;\n        long onesSumCount7 = 0;\n        long zerosSumCount7 = 0;\n  \
    \      long onesSumCount8 = 0;\n        long zerosSumCount8 = 0;\n        long\
    \ onesSumCount9 = 0;\n        long zerosSumCount9 = 0;\n        long onesSumCount10\
    \ = 0;\n        long zerosSumCount10 = 0;\n        long onesSumCount11 = 0;\n\
    \        long zerosSumCount11 = 0;\n        long onesSumCount12 = 0;\n       \
    \ long zerosSumCount12 = 0;\n        long onesSumCount13 = 0;\n        long zerosSumCount13\
    \ = 0;\n        long onesSumCount14 = 0;\n        long zerosSumCount14 = 0;\n\
    \        long onesSumCount15 = 0;\n        long zerosSumCount15 = 0;\n       \
    \ long onesSumCount16 = 0;\n        long zerosSumCount16 = 0;\n        long onesSumCount17\
    \ = 0;\n        long zerosSumCount17 = 0;\n        long onesSumCount18 = 0;\n\
    \        long zerosSumCount18 = 0;\n        long onesSumCount19 = 0;\n       \
    \ long zerosSumCount19 = 0;\n        long onesSumCount20 = 0;\n        long zerosSumCount20\
    \ = 0;\n        long onesSumCount21 = 0;\n        long zerosSumCount21 = 0;\n\
    \        long onesSumCount22 = 0;\n        long zerosSumCount22 = 0;\n       \
    \ long onesSumCount23 = 0;\n        long zerosSumCount23 = 0;\n        long onesSumCount24\
    \ = 0;\n        long zerosSumCount24 = 0;\n        long onesSumCount25 = 0;\n\
    \        long zerosSumCount25 = 0;\n        long onesSumCount26 = 0;\n       \
    \ long zerosSumCount26 = 0;\n        long ones", "        long ones = 0;\n   \
    \     long zeros = 0;\n        long max = 0;\n        foreach (long n in arr)\
    \ {\n            ones += n & 1;\n            zeros += n >> 1;\n            max\
    \ = Math.Max(max, Math.Abs(ones - zeros));\n        }\n        List<long> result\
    \ = new List<long>();\n        foreach (long n in arr) {\n            ones +=\
    \ n & 1;\n            zeros += n >> 1;\n            if (ones == zeros) {\n   \
    \             result.Add(n);\n            }\n        }\n        Array.Sort(result,\
    \ new Comparison<long>((x, y) => Compare(max, x, y)));\n        return result;",
  "        long ones = arr.Sum(x => x & 1);\n        long zeros = arr.Sum(x => x >>\
    \ 1);\n        if (ones > zeros) {\n            long temp = ones;\n          \
    \  ones = zeros;\n            zeros = temp;\n        }\n        long maxOnes =\
    \ ones;\n        long maxZeros = zeros;\n        long maxDiff = maxOnes - maxZeros;\n\
    \        long maxDiffIndex = -1;\n        long maxDiffValue = maxDiff;\n     \
    \   List<long> result = new List<long>();\n        foreach (long i in arr) {\n\
    \            long diff = i - maxOnes;\n            if (diff > maxDiff) {\n   \
    \             maxDiff = diff;\n                maxDiffIndex = i;\n           \
    \     maxDiffValue = diff;\n            }\n            if (diff == maxDiff) {\n\
    \                result.Add(i);\n            }\n        }\n        if (maxDiffIndex\
    \ != -1) {\n            long diff = maxDiffIndex - maxOnes;\n            long\
    \ diffValue = diff + maxDiffValue;\n            long newDiffValue = maxDiffValue\
    \ - diff;\n            long newDiffIndex = maxDiffIndex - diff;\n            long\
    \ newDiff = maxDiff - diff;\n            long newMaxDiff = maxDiff - newDiff;\n\
    \            long newMaxDiffIndex = maxDiffIndex - newDiff;\n            long\
    \ newMaxDiffValue = maxDiffValue - newDiffValue;\n            while (diff != 0)\
    \ {\n                result.Add(maxDiffIndex);\n                diff -= newDiff;\n\
    \                maxDiffIndex -= newDiffIndex;\n                maxDiffValue -=\
    \ newDiffValue;\n                newDiffValue -= newMaxDiffValue;\n          \
    \      newDiffIndex -= newMaxDiffIndex;\n                newDiff -= newMaxDiff;\n\
    \                newMaxDiffValue -= newMaxDiff;\n                newMaxDiffIndex\
    \ -= newMaxDiffIndex;\n                newMaxDiff -= newMaxDiff;\n           \
    \ }\n        }\n        return result;", "        long ones = 0;\n        long\
    \ zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n     \
    \       if (i == 1) {\n                ones++;\n            }\n            else\
    \ if (i == 0) {\n                zeros++;\n            }\n            else {\n\
    \                if (ones > zeros) {\n                    max = i;\n         \
    \       }\n                else {\n                    max = zeros;\n        \
    \        }\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        foreach (long i in arr) {\n            if (i == 1) {\n              \
    \  result.Add(i);\n            }\n            else if (i == 0) {\n           \
    \     result.Add(max);\n            }\n            else {\n                if\
    \ (ones > zeros) {\n                    result.Add(i);\n                }\n  \
    \              else {\n                    result.Add(max);\n                }\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long ones = 0;\n        long tens = 0;\n      \
    \  long hundreds = 0;\n        long thousands = 0;\n        long total = 0;\n\
    \        foreach (long num in arr) {\n            total += num;\n            if\
    \ (num == 1) {\n                ones++;\n            }\n            else if (num\
    \ == 10) {\n                tens++;\n            }\n            else if (num ==\
    \ 100) {\n                hundreds++;\n            }\n            else if (num\
    \ == 1000) {\n                thousands++;\n            }\n        }\n       \
    \ long onesTotal = ones * ones;\n        long tensTotal = tens * tens;\n     \
    \   long hundredsTotal = hundreds * hundreds;\n        long thousandsTotal = thousands\
    \ * thousands;\n        long totalTotal = total * total;\n        if (onesTotal\
    \ > tensTotal) {\n            long temp = onesTotal;\n            onesTotal =\
    \ tensTotal;\n            tensTotal = temp;\n        }\n        if (onesTotal\
    \ > hundredsTotal) {\n            long temp = onesTotal;\n            onesTotal\
    \ = hundredsTotal;\n            hundredsTotal = temp;\n        }\n        if (onesTotal\
    \ > thousandsTotal) {\n            long temp = onesTotal;\n            onesTotal\
    \ = thousandsTotal;\n            thousandsTotal = temp;\n        }\n        if\
    \ (tensTotal > hundredsTotal) {\n            long temp = tensTotal;\n        \
    \    tensTotal = hundredsTotal;\n            hundredsTotal = temp;\n        }\n\
    \        if (tensTotal > thousandsTotal) {\n            long temp = tensTotal;\n\
    \            tensTotal = thousandsTotal;\n            thousandsTotal = temp;\n\
    \        }\n        if (hundredsTotal > thousandsTotal) {\n            long temp\
    \ = hundredsTotal;\n            hundredsTotal = thousandsTotal;\n            thousandsTotal\
    \ = temp;\n        }\n        long onesTotal2 = onesTotal * onesTotal;\n     \
    \   long tensTotal2 = tensTotal * tensTotal;\n        long hundredsTotal2 = hundredsTotal\
    \ * hundredsTotal;\n        long thousandsTotal2 = thousandsTotal * thousandsTotal;\n\
    \        long totalTotal2 = totalTotal * totalTotal;\n        if (onesTotal2 >\
    \ tensTotal2) {\n            long temp = onesTotal2;\n            ", "       \
    \ List<long> result = new List<long>();\n        long ones = 0;\n        long\
    \ zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n     \
    \       if (i == 1) ones++;\n            else if (i == 0) zeros++;\n         \
    \   else {\n                if (ones > zeros) {\n                    result.Add(i);\n\
    \                    ones--;\n                } else {\n                    result.Add(0);\n\
    \                    zeros--;\n                }\n            }\n            if\
    \ (ones > max) max = ones;\n            if (zeros > max) max = zeros;\n      \
    \  }\n        if (ones > zeros) {\n            while (ones > zeros) {\n      \
    \          result.Add(0);\n                zeros--;\n            }\n        }\n\
    \        if (zeros > max) max = zeros;\n        long onesMax = max;\n        long\
    \ zerosMax = max;\n        long maxOnes = 0;\n        long maxZeros = 0;\n   \
    \     foreach (long i in arr) {\n            if (i == 1) ones++;\n           \
    \ else if (i == 0) zeros++;\n            else {\n                if (ones > zeros)\
    \ {\n                    if (ones > maxOnes) maxOnes = ones;\n               \
    \     result.Add(i);\n                    ones--;\n                } else {\n\
    \                    if (zeros > maxZeros) maxZeros = zeros;\n               \
    \     result.Add(0);\n                    zeros--;\n                }\n      \
    \      }\n        }\n        if (ones > zeros) {\n            while (ones > zeros)\
    \ {\n                if (ones > maxOnes) maxOnes = ones;\n                result.Add(0);\n\
    \                zeros--;\n            }\n        }\n        if (zeros > maxZeros)\
    \ maxZeros = zeros;\n        long onesMaxOnes = maxOnes;\n        long zerosMaxZeros\
    \ = maxZeros;\n        long maxOnesZeros = 0;\n        long maxZerosOnes = 0;\n\
    \        foreach (long i in arr) {\n            if (i == 1) ones++;\n        \
    \    else if (i == 0) zeros++;\n            else {\n                if (ones >\
    \ zeros) {\n                    if (ones > maxOnes) maxOnes = ones;\n        \
    \            if (zeros > maxOnesZeros) maxOnesZeros = ones;\n                \
    \    result.Add(i);\n                    ones--;\n                } else {\n \
    \                   if (zeros > maxZeros) maxZeros = zeros;\n                \
    \    if (ones > maxZerosOnes) maxZerosOnes = ones;\n                    result.Add(0);\n\
    \                    zeros--;\n                }\n            }\n        }\n \
    \       if (ones > zeros) {\n            while (ones > zeros) {\n            \
    \    if (ones > maxOnes) maxOnes = ones;\n                if (zeros > maxOnesZeros)\
    \ maxOnesZeros = ones;\n                result.Add(0);\n                zeros--;\n\
    \            }\n        }\n        if (", "        List<long> result = new List<long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        foreach (long i in arr)\
    \ {\n            if (i == 1) {\n                ones++;\n            }\n     \
    \       else if (i == 0) {\n                zeros++;\n            }\n        \
    \    else {\n                long temp = ones + zeros;\n                ones =\
    \ 0;\n                zeros = 0;\n                result.Add(temp);\n        \
    \    }\n        }\n        return result;", "        long ones = 0;\n        long\
    \ zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n     \
    \       if (i == 1) ones++;\n            else if (i == 0) zeros++;\n         \
    \   else if (i > max) max = i;\n        }\n        List<long> result = new List<long>();\n\
    \        long onesCount = 0;\n        long zerosCount = 0;\n        long maxCount\
    \ = 0;\n        foreach (long i in arr) {\n            if (i == 1) onesCount++;\n\
    \            else if (i == 0) zerosCount++;\n            else if (i > maxCount)\
    \ maxCount = i;\n        }\n        long onesCountInt = Convert.ToInt32(onesCount);\n\
    \        long zerosCountInt = Convert.ToInt32(zerosCount);\n        long maxCountInt\
    \ = Convert.ToInt32(maxCount);\n        long onesCountDecimal = onesCountInt /\
    \ 10;\n        long zerosCountDecimal = zerosCountInt / 10;\n        long maxCountDecimal\
    \ = maxCountInt / 10;\n        long onesCountDecimalInt = Convert.ToInt32(onesCountDecimal);\n\
    \        long zerosCountDecimalInt = Convert.ToInt32(zerosCountDecimal);\n   \
    \     long maxCountDecimalInt = Convert.ToInt32(maxCountDecimal);\n        long\
    \ onesCountDecimalDecimal = onesCountDecimalInt / 10;\n        long zerosCountDecimalDecimal\
    \ = zerosCountDecimalInt / 10;\n        long maxCountDecimalDecimal = maxCountDecimalInt\
    \ / 10;\n        long onesCountDecimalDecimalInt = Convert.ToInt32(onesCountDecimalDecimal);\n\
    \        long zerosCountDecimalDecimalInt = Convert.ToInt32(zerosCountDecimalDecimal);\n\
    \        long maxCountDecimalDecimalInt = Convert.ToInt32(maxCountDecimalDecimal);\n\
    \        long onesCountDecimalDecimalDecimal = onesCountDecimalDecimalInt / 10;\n\
    \        long zerosCountDecimalDecimalDecimal = zerosCountDecimalDecimalInt /\
    \ 10;\n        long maxCountDecimalDecimalDecimal = maxCountDecimalDecimalInt\
    \ / 10;\n        long onesCountDecimalDecimalDecimalInt = Convert.ToInt32(onesCountDecimalDecimalDecimal);\n\
    \        long zerosCountDecimalDecimalDecimalInt = Convert.ToInt32(zerosCountDecimalDecimalDecimal);\n\
    \        long maxCountDecimalDecimalDecimalInt = Convert.ToInt32(maxCountDecimalDecimalDecimal);\n\
    \        long onesCountDecimalDecimalDecimalDecimal = onesCountDecimalDecimalDecimalInt\
    \ / 10;\n        long zerosCountDecimalDecimalDecimalDecimal = zerosCountDecimalDecimalDecimalInt\
    \ / 10;\n        long maxCountDecimalDecimalDecimalDecimal", "        long ones\
    \ = 0;\n        long zeros = 0;\n        long max = 0;\n        long min = 0;\n\
    \        foreach (long i in arr) {\n            if (i == 1) {\n              \
    \  ones++;\n            }\n            else if (i == 0) {\n                zeros++;\n\
    \            }\n            else {\n                if (ones > zeros) {\n    \
    \                max = i;\n                }\n                else {\n       \
    \             min = i;\n                }\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        if (ones > zeros) {\n            result.Add(min);\n\
    \            result.AddRange(arr.Where(i => i == min).OrderBy(i => i).Take(ones\
    \ - 1));\n        }\n        else {\n            result.Add(max);\n          \
    \  result.AddRange(arr.Where(i => i == max).OrderByDescending(i => i).Take(zeros\
    \ - 1));\n        }\n        return result;", "        if (arr.Count < 2) return\
    \ arr;\n        long ones = arr.Sum(x => x & 1);\n        long twos = arr.Sum(x\
    \ => x >> 1);\n        long threes = arr.Sum(x => x >> 2);\n        long fours\
    \ = arr.Sum(x => x >> 3);\n        long fives = arr.Sum(x => x >> 4);\n      \
    \  long sixes = arr.Sum(x => x >> 5);\n        long sevens = arr.Sum(x => x >>\
    \ 6);\n        long eights = arr.Sum(x => x >> 7);\n        long nines = arr.Sum(x\
    \ => x >> 8);\n        long tens = arr.Sum(x => x >> 9);\n        long hundreds\
    \ = arr.Sum(x => x >> 10);\n        long thousands = arr.Sum(x => x >> 11);\n\
    \        long tenThousands = arr.Sum(x => x >> 12);\n        long oneHundreds\
    \ = arr.Sum(x => x >> 13);\n        long oneThousands = arr.Sum(x => x >> 14);\n\
    \        long oneTenThousands = arr.Sum(x => x >> 15);\n        long oneHundredThousands\
    \ = arr.Sum(x => x >> 16);\n        long oneHundredThousandThousands = arr.Sum(x\
    \ => x >> 17);\n        long oneHundredThousandThousandThousands = arr.Sum(x =>\
    \ x >> 18);\n        long oneHundredThousandThousandThousandThousands = arr.Sum(x\
    \ => x >> 19);\n        long oneHundredThousandThousandThousandThousandThousands\
    \ = arr.Sum(x => x >> 20);\n        long oneHundredThousandThousandThousandThousandThousandThousands\
    \ = arr.Sum(x => x >> 21);\n        long oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.Sum(x => x >> 22);\n        long oneHundredThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.Sum(x => x >> 23);\n        long oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.", "        long ones = 0;\n        long zeros = 0;\n        long max\
    \ = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n       \
    \         ones++;\n            }\n            else if (i == 0) {\n           \
    \     zeros++;\n            }\n            else {\n                if (ones >\
    \ zeros) {\n                    max = ones;\n                }\n             \
    \   else {\n                    max = zeros;\n                }\n            }\n\
    \        }\n        List<long> result = new List<long>();\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                result.Add(i);\n   \
    \         }\n            else if (i == 0) {\n                result.Add(0);\n\
    \            }\n            else {\n                if (ones > zeros) {\n    \
    \                result.Add(max);\n                }\n                else {\n\
    \                    result.Add(-max);\n                }\n            }\n   \
    \     }\n        return result;"]
stop_tokens:
- "\n    }\n"
