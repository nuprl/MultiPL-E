name: HumanEval_116_sort_array
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // In this Kata, you have to sort an array of non-negative integers\
  \ according to\n    // number of ones in their binary representation in ascending\
  \ order.\n    // For similar number of ones, sort based on decimal value.\n    //\
  \ It must be implemented like this:\n    // >>> sort_array([1, 5, 2, 3, 4]) == [1,\
  \ 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
  \    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    public static List<long>\
  \ SortArray(List<long> arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
  \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n\
  \    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,\
  \ (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,\
  \ (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new\
  \ long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
  \ long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new\
  \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new\
  \ long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,\
  \ (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
  \ (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,\
  \ (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,\
  \ (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new\
  \ long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n \
  \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,\
  \ (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
  \ (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
completions: ["        long ones = 0;\n        long zeros = 0;\n        long max =\
    \ 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n         \
    \       ones++;\n            }\n            if (i == 0) {\n                zeros++;\n\
    \            }\n            if (i > max) {\n                max = i;\n       \
    \     }\n        }\n        long onesMax = ones * max;\n        long zerosMax\
    \ = zeros * max;\n        long maxOnes = ones * max;\n        long maxZeros =\
    \ zeros * max;\n        long maxOnesMax = onesMax * max;\n        long maxZerosMax\
    \ = zerosMax * max;\n        long maxOnesMaxMinusOnes = onesMax * max - 1;\n \
    \       long maxZerosMaxMinusOnes = zerosMax * max - 1;\n        long maxOnesMaxMinusOnesMax\
    \ = onesMax * max - maxOnes;\n        long maxZerosMaxMinusOnesMax = zerosMax\
    \ * max - maxZeros;\n        long maxOnesMaxMinusOnesMaxMinusOnes = onesMax *\
    \ max - maxOnesMax;\n        long maxZerosMaxMinusOnesMaxMinusOnes = zerosMax\
    \ * max - maxZerosMax;\n        long maxOnesMaxMinusOnesMaxMinusOnesMax = onesMax\
    \ * max - maxOnesMaxMinusOnes;\n        long maxZerosMaxMinusOnesMaxMinusOnesMax\
    \ = zerosMax * max - maxZerosMaxMinusOnes;\n        long maxOnesMaxMinusOnesMaxMinusOnesMaxMinusOnes\
    \ = onesMax * max - maxOnesMaxMinusOnesMax;\n        long maxZerosMaxMinusOnesMaxMinusOnesMaxMinusOnes\
    \ = zerosMax * max - maxZerosMaxMinusOnesMax;\n        long maxOnesMaxMinusOnesMaxMinusOnesMaxMinusOnesMax\
    \ = onesMax * max - maxOnesMaxMinusOnesMaxMinusOnes;\n        long maxZerosMaxMinusOnesMaxMinusOnesMaxMinusOnesMax\
    \ = zerosMax * max - maxZerosMaxMinusOnesMaxMinusOnes;\n        long maxOnesMaxMinusOnesMaxMinusOnesMaxMinusOnesMaxMinusOnes\
    \ = onesMax * max - maxOnesMaxMinusOne", "        long ones = arr.Sum(x => x &\
    \ 1);\n        long zeros = arr.Sum(x => ~x);\n        long max = Math.Max(ones,\
    \ zeros);\n        long min = Math.Min(ones, zeros);\n        long diff = max\
    \ - min;\n        long diff2 = diff / 2;\n        long diff3 = diff / 3;\n   \
    \     long diff4 = diff / 4;\n        long diff5 = diff / 5;\n        long diff6\
    \ = diff / 6;\n        long diff7 = diff / 7;\n        long diff8 = diff / 8;\n\
    \        long diff9 = diff / 9;\n        long diff10 = diff / 10;\n        long\
    \ diff11 = diff / 11;\n        long diff12 = diff / 12;\n        long diff13 =\
    \ diff / 13;\n        long diff14 = diff / 14;\n        long diff15 = diff / 15;\n\
    \        long diff16 = diff / 16;\n        long diff17 = diff / 17;\n        long\
    \ diff18 = diff / 18;\n        long diff19 = diff / 19;\n        long diff20 =\
    \ diff / 20;\n        long diff21 = diff / 21;\n        long diff22 = diff / 22;\n\
    \        long diff23 = diff / 23;\n        long diff24 = diff / 24;\n        long\
    \ diff25 = diff / 25;\n        long diff26 = diff / 26;\n        long diff27 =\
    \ diff / 27;\n        long diff28 = diff / 28;\n        long diff29 = diff / 29;\n\
    \        long diff30 = diff / 30;\n        long diff31 = diff / 31;\n        long\
    \ diff32 = diff / 32;\n        long diff33 = diff / 33;\n        long diff34 =\
    \ diff / 34;\n        long diff35 = diff / 35;\n        long diff36 = diff / 36;\n\
    \        long diff37 = diff / 37;\n        long diff38 = diff / 38;\n        long\
    \ diff39 = diff / 39;\n        long diff40 = diff / 40;\n        long diff41 =\
    \ diff / 41;\n        long diff42 = diff / 42;\n        long diff43 = diff / 43;\n\
    \        long diff44 = diff / 44;\n        long diff45 = diff / 45;\n        long\
    \ diff46 = diff / 46;\n        long diff47 = diff / 47;\n        long diff48 =\
    \ diff / 48;\n        long diff49 = diff / 49;\n        long diff50 = diff / ",
  "        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  foreach (long i in arr) {\n            if (i == 1) {\n                ones++;\n\
    \            }\n            else if (i == 0) {\n                zeros++;\n   \
    \         }\n            else {\n                max = Math.Max(max, i);\n   \
    \         }\n        }\n        List<long> result = new List<long>();\n      \
    \  if (ones > zeros) {\n            foreach (long i in arr) {\n              \
    \  if (i == 1) {\n                    result.Add(1);\n                }\n    \
    \            else if (i == 0) {\n                    result.Add(0);\n        \
    \        }\n                else {\n                    result.Add(i);\n     \
    \           }\n            }\n        }\n        else {\n            foreach (long\
    \ i in arr) {\n                if (i == 1) {\n                    result.Add(0);\n\
    \                }\n                else if (i == 0) {\n                    result.Add(1);\n\
    \                }\n                else {\n                    result.Add(i);\n\
    \                }\n            }\n        }\n        Array.Sort(result);\n  \
    \      return result;", "        long ones = 0;\n        long zeros = 0;\n   \
    \     long max = 0;\n        foreach (long i in arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            }\n            if (i == 0) {\n     \
    \           zeros++;\n            }\n            if (i > max) {\n            \
    \    max = i;\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n  \
    \      long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n   \
    \     long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n    \
    \    long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n  \
    \      long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n\
    \        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n\
    \        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n\
    \        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n\
    \        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n\
    \        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n\
    \        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n\
    \        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n\
    \        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n\
    \        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n\
    \        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n\
    \        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n\
    \        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n\
    \        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n\
    \        long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n\
    \        long temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n\
    \        long temp61 = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n\
    \        long temp64 = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n\
    \        long temp67 = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n\
    \        long temp70 = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n\
    \        long temp73 = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n\
    \        ", "        long ones = arr.Sum(x => x & 1);\n        long zeros = arr.Sum(x\
    \ => ~x & 1);\n        long maxOnes = arr.Max(x => x & 1);\n        long maxZeros\
    \ = arr.Max(x => ~x & 1);\n        long maxOnesCount = arr.Count(x => x & 1);\n\
    \        long maxZerosCount = arr.Count(x => ~x & 1);\n        long maxOnesSum\
    \ = arr.Sum(x => x & 1);\n        long maxZerosSum = arr.Sum(x => ~x & 1);\n \
    \       long maxOnesSumCount = arr.Count(x => x & 1);\n        long maxZerosSumCount\
    \ = arr.Count(x => ~x & 1);\n        long maxOnesSumSum = arr.Sum(x => x & 1);\n\
    \        long maxZerosSumSum = arr.Sum(x => ~x & 1);\n        long maxOnesSumSumCount\
    \ = arr.Count(x => x & 1);\n        long maxZerosSumSumCount = arr.Count(x =>\
    \ ~x & 1);\n        long maxOnesSumSumSum = arr.Sum(x => x & 1);\n        long\
    \ maxZerosSumSumSum = arr.Sum(x => ~x & 1);\n        long maxOnesSumSumSumCount\
    \ = arr.Count(x => x & 1);\n        long maxZerosSumSumSumCount = arr.Count(x\
    \ => ~x & 1);\n        long maxOnesSumSumSumSum = arr.Sum(x => x & 1);\n     \
    \   long maxZerosSumSumSumSum = arr.Sum(x => ~x & 1);\n        long maxOnesSumSumSumSumCount\
    \ = arr.Count(x => x & 1);\n        long maxZerosSumSumSumSumCount = arr.Count(x\
    \ => ~x & 1);\n        long maxOnesSumSumSumSumSum = arr.Sum(x => x & 1);\n  \
    \      long maxZerosSumSumSumSumSum = arr.Sum(x => ~x & 1);\n        long maxOnesSumSumSumSumSumCount\
    \ = arr.Count(x => x & 1);\n        long maxZerosSumSumSumSumCount = arr.Count(x\
    \ => ~x & 1);\n        long maxOnesSumSumSumSumSumSum = arr.Sum(x => x & 1);\n\
    \        long maxZerosSumSumSumSumSum = arr.Sum(x => ~x & 1);\n        long maxOnesSumSumSumSumSumCount\
    \ = arr.Count(x ", "        long ones = 0;\n        long zeros = 0;\n        long\
    \ max = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n   \
    \             ones++;\n            }\n            if (i == 0) {\n            \
    \    zeros++;\n            }\n            if (i > max) {\n                max\
    \ = i;\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n  \
    \      long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n   \
    \     long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n    \
    \    long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n  \
    \      long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n\
    \        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n\
    \        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n\
    \        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n\
    \        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n\
    \        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n\
    \        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n\
    \        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n\
    \        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n\
    \        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n\
    \        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n\
    \        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n\
    \        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n\
    \        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n\
    \        long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n\
    \        long temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n\
    \        long temp61 = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n\
    \        long temp64 = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n\
    \        long temp67 = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n\
    \        long temp70 = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n\
    \        long temp73 = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n\
    \        ", "        long ones = arr.Sum(x => x & 1);\n        long zeros = arr.Sum(x\
    \ => ~x);\n        long maxOnes = arr.Max(x => x & 1);\n        long maxZeros\
    \ = arr.Max(x => ~x);\n        long maxOnesZeros = maxOnes - maxZeros;\n     \
    \   long maxOnesOnes = maxOnes - ones;\n        long maxOnesTwos = maxOnes - twos(ones);\n\
    \        long maxOnesThrees = maxOnes - threes(ones);\n        long maxOnesFours\
    \ = maxOnes - fours(ones);\n        long maxOnesFives = maxOnes - fives(ones);\n\
    \        long maxOnesSixes = maxOnes - sixes(ones);\n        long maxOnesSevens\
    \ = maxOnes - sevens(ones);\n        long maxOnesEights = maxOnes - eights(ones);\n\
    \        long maxOnesNines = maxOnes - nines(ones);\n        long maxOnesTens\
    \ = maxOnes - tens(ones);\n        long maxOnesElevens = maxOnes - elevens(ones);\n\
    \        long maxOnesTwelves = maxOnes - twelves(ones);\n        long maxOnesThirteens\
    \ = maxOnes - thirteens(ones);\n        long maxOnesFourteens = maxOnes - fourteens(ones);\n\
    \        long maxOnesFifteens = maxOnes - fifteens(ones);\n        long maxOnesSixteens\
    \ = maxOnes - sixteens(ones);\n        long maxOnesSeventeens = maxOnes - seventeens(ones);\n\
    \        long maxOnesEighteens = maxOnes - eighteens(ones);\n        long maxOnesNineteens\
    \ = maxOnes - nineteens(ones);\n        long maxOnesTwenty = maxOnes - twenty(ones);\n\
    \        long maxOnesTwentyOnes = maxOnes - twentyOnes(ones);\n        long maxOnesTwentyTwos\
    \ = maxOnes - twentyTwos(ones);\n        long maxOnesTwentyThrees = maxOnes -\
    \ twentyThrees(ones);\n        long maxOnesTwentyFours = maxOnes - twentyFours(ones);\n\
    \        long maxOnesTwentyFives = maxOnes - twentyFives(ones);\n", "        long\
    \ ones = 0;\n        long zeros = 0;\n        long max = 0;\n        long min\
    \ = 0;\n        foreach (long i in arr) {\n            if (i == 1) ones++;\n \
    \           else if (i == 0) zeros++;\n            else if (i > 0) max = Math.Max(max,\
    \ i);\n            else if (i < 0) min = Math.Min(min, i);\n        }\n      \
    \  List<long> result = new List<long>();\n        if (ones > zeros) {\n      \
    \      long onesMax = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2) + 1)));\n            long onesMin = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(min)\
    \ + 1)));\n            long onesDiff = onesMax - onesMin;\n            long onesDiff2\
    \ = onesDiff / 2;\n            long onesDiff3 = onesDiff2 / 2;\n            long\
    \ onesDiff4 = onesDiff3 / 2;\n            long onesDiff5 = onesDiff4 / 2;\n  \
    \          long onesDiff6 = onesDiff5 / 2;\n            long onesDiff7 = onesDiff6\
    \ / 2;\n            long onesDiff8 = onesDiff7 / 2;\n            long onesDiff9\
    \ = onesDiff8 / 2;\n            long onesDiff10 = onesDiff9 / 2;\n           \
    \ long onesDiff11 = onesDiff10 / 2;\n            long onesDiff12 = onesDiff11\
    \ / 2;\n            long onesDiff13 = onesDiff12 / 2;\n            long onesDiff14\
    \ = onesDiff13 / 2;\n            long onesDiff15 = onesDiff14 / 2;\n         \
    \   long onesDiff16 = onesDiff15 / 2;\n            long onesDiff17 = onesDiff16\
    \ / 2;\n            long onesDiff18 = onesDiff17 / 2;\n            long onesDiff19\
    \ = onesDiff18 / 2;\n            long onesDiff20 = onesDiff19 / 2;\n         \
    \   long onesDiff21 = onesDiff20 / 2;\n            long onesDiff22 = onesDiff21\
    \ / 2;\n            long onesDiff23 = onesDiff22 / 2;\n            long onesDiff24\
    \ = onesDiff23 / 2;\n            long onesDiff25 = onesDiff24 / 2;\n         \
    \   long onesDiff26 = onesDiff25 / 2;\n            long onesDiff27 = onesDiff26\
    \ / 2;\n            long onesDiff28 = onesDiff27 / 2;", "        long ones = 0;\n\
    \        long zeros = 0;\n        long max = 0;\n        foreach (long i in arr)\
    \ {\n            ones += i;\n            zeros -= i;\n            if (ones > max)\
    \ {\n                max = ones;\n            }\n            if (zeros > max)\
    \ {\n                max = zeros;\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in arr) {\n            if\
    \ (i == 1) {\n                result.Add(i);\n            } else {\n         \
    \       result.Add(max - (long)Math.Floor(Math.Log10(i / max)));\n           \
    \ }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        foreach (long i in arr)\
    \ {\n            ones += i;\n        }\n        foreach (long i in arr) {\n  \
    \          zeros += i;\n        }\n        long onesCount = ones;\n        long\
    \ zerosCount = zeros;\n        long onesSum = 0;\n        long zerosSum = 0;\n\
    \        long onesSumCount = 0;\n        long zerosSumCount = 0;\n        long\
    \ onesSumCount2 = 0;\n        long zerosSumCount2 = 0;\n        long onesSumCount3\
    \ = 0;\n        long zerosSumCount3 = 0;\n        long onesSumCount4 = 0;\n  \
    \      long zerosSumCount4 = 0;\n        long onesSumCount5 = 0;\n        long\
    \ zerosSumCount5 = 0;\n        long onesSumCount6 = 0;\n        long zerosSumCount6\
    \ = 0;\n        long onesSumCount7 = 0;\n        long zerosSumCount7 = 0;\n  \
    \      long onesSumCount8 = 0;\n        long zerosSumCount8 = 0;\n        long\
    \ onesSumCount9 = 0;\n        long zerosSumCount9 = 0;\n        long onesSumCount10\
    \ = 0;\n        long zerosSumCount10 = 0;\n        long onesSumCount11 = 0;\n\
    \        long zerosSumCount11 = 0;\n        long onesSumCount12 = 0;\n       \
    \ long zerosSumCount12 = 0;\n        long onesSumCount13 = 0;\n        long zerosSumCount13\
    \ = 0;\n        long onesSumCount14 = 0;\n        long zerosSumCount14 = 0;\n\
    \        long onesSumCount15 = 0;\n        long zerosSumCount15 = 0;\n       \
    \ long onesSumCount16 = 0;\n        long zerosSumCount16 = 0;\n        long onesSumCount17\
    \ = 0;\n        long zerosSumCount17 = 0;\n        long onesSumCount18 = 0;\n\
    \        long zerosSumCount18 = 0;\n        long onesSumCount19 = 0;\n       \
    \ long zerosSumCount19 = 0;\n        long onesSumCount20 = 0;\n        long zerosSumCount20\
    \ = 0;\n        long onesSumCount21 = 0;\n        long zerosSumCount21 = 0;\n\
    \        long onesSumCount22 = 0;\n        long zerosSumCount22 = 0;\n       \
    \ long onesSumCount23 = 0;\n        long zerosSumCount23 = 0;\n        long onesSumCount24\
    \ = 0;\n        long zerosSumCount24 = 0;\n        long onesSumCount25 = 0;\n\
    \        long zerosSumCount25 = 0;\n        long onesSumCount26 = 0;\n       \
    \ long zerosSumCount26 = 0;\n        long ones", "        long ones = 0;\n   \
    \     long zeros = 0;\n        long max = 0;\n        foreach (long n in arr)\
    \ {\n            ones += n & 1;\n            zeros += n >> 1;\n            max\
    \ = Math.Max(max, Math.Abs(ones - zeros));\n        }\n        List<long> result\
    \ = new List<long>();\n        foreach (long n in arr) {\n            ones +=\
    \ n & 1;\n            zeros += n >> 1;\n            if (ones == zeros) {\n   \
    \             result.Add(n);\n            }\n        }\n        Array.Sort(result,\
    \ new Comparison<long>((x, y) => Compare(max, x, y)));\n        return result;",
  "        long ones = arr.Sum(x => x & 1);\n        long zeros = arr.Sum(x => x >>\
    \ 1);\n        if (ones > zeros) {\n            long temp = ones;\n          \
    \  ones = zeros;\n            zeros = temp;\n        }\n        long maxOnes =\
    \ ones;\n        long maxZeros = zeros;\n        long maxDiff = maxOnes - maxZeros;\n\
    \        long maxDiffIndex = -1;\n        long maxDiffValue = maxDiff;\n     \
    \   List<long> result = new List<long>();\n        foreach (long i in arr) {\n\
    \            long diff = i - maxOnes;\n            if (diff > maxDiff) {\n   \
    \             maxDiff = diff;\n                maxDiffIndex = i;\n           \
    \     maxDiffValue = diff;\n            }\n            if (diff == maxDiff) {\n\
    \                result.Add(i);\n            }\n        }\n        if (maxDiffIndex\
    \ != -1) {\n            long diff = maxDiffIndex - maxOnes;\n            long\
    \ diffValue = diff + maxDiffValue;\n            long newDiffValue = maxDiffValue\
    \ - diff;\n            long newDiffIndex = maxDiffIndex - diff;\n            long\
    \ newDiff = maxDiff - diff;\n            long newMaxDiff = maxDiff - newDiff;\n\
    \            long newMaxDiffIndex = maxDiffIndex - newDiff;\n            long\
    \ newMaxDiffValue = maxDiffValue - newDiffValue;\n            while (diff != 0)\
    \ {\n                result.Add(maxDiffIndex);\n                diff -= newDiff;\n\
    \                maxDiffIndex -= newDiffIndex;\n                maxDiffValue -=\
    \ newDiffValue;\n                newDiffValue -= newMaxDiffValue;\n          \
    \      newDiffIndex -= newMaxDiffIndex;\n                newDiff -= newMaxDiff;\n\
    \                newMaxDiffValue -= newMaxDiff;\n                newMaxDiffIndex\
    \ -= newMaxDiffIndex;\n                newMaxDiff -= newMaxDiff;\n           \
    \ }\n        }\n        return result;", "        long ones = 0;\n        long\
    \ zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n     \
    \       if (i == 1) {\n                ones++;\n            }\n            else\
    \ if (i == 0) {\n                zeros++;\n            }\n            else {\n\
    \                if (ones > zeros) {\n                    max = i;\n         \
    \       }\n                else {\n                    max = zeros;\n        \
    \        }\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        foreach (long i in arr) {\n            if (i == 1) {\n              \
    \  result.Add(i);\n            }\n            else if (i == 0) {\n           \
    \     result.Add(max);\n            }\n            else {\n                if\
    \ (ones > zeros) {\n                    result.Add(i);\n                }\n  \
    \              else {\n                    result.Add(max);\n                }\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long ones = 0;\n        long tens = 0;\n      \
    \  long hundreds = 0;\n        long thousands = 0;\n        long total = 0;\n\
    \        foreach (long num in arr) {\n            total += num;\n            if\
    \ (num == 1) {\n                ones++;\n            }\n            else if (num\
    \ == 10) {\n                tens++;\n            }\n            else if (num ==\
    \ 100) {\n                hundreds++;\n            }\n            else if (num\
    \ == 1000) {\n                thousands++;\n            }\n        }\n       \
    \ long onesTotal = ones * ones;\n        long tensTotal = tens * tens;\n     \
    \   long hundredsTotal = hundreds * hundreds;\n        long thousandsTotal = thousands\
    \ * thousands;\n        long totalTotal = total * total;\n        if (onesTotal\
    \ > tensTotal) {\n            long temp = onesTotal;\n            onesTotal =\
    \ tensTotal;\n            tensTotal = temp;\n        }\n        if (onesTotal\
    \ > hundredsTotal) {\n            long temp = onesTotal;\n            onesTotal\
    \ = hundredsTotal;\n            hundredsTotal = temp;\n        }\n        if (onesTotal\
    \ > thousandsTotal) {\n            long temp = onesTotal;\n            onesTotal\
    \ = thousandsTotal;\n            thousandsTotal = temp;\n        }\n        if\
    \ (tensTotal > hundredsTotal) {\n            long temp = tensTotal;\n        \
    \    tensTotal = hundredsTotal;\n            hundredsTotal = temp;\n        }\n\
    \        if (tensTotal > thousandsTotal) {\n            long temp = tensTotal;\n\
    \            tensTotal = thousandsTotal;\n            thousandsTotal = temp;\n\
    \        }\n        if (hundredsTotal > thousandsTotal) {\n            long temp\
    \ = hundredsTotal;\n            hundredsTotal = thousandsTotal;\n            thousandsTotal\
    \ = temp;\n        }\n        long onesTotal2 = onesTotal * onesTotal;\n     \
    \   long tensTotal2 = tensTotal * tensTotal;\n        long hundredsTotal2 = hundredsTotal\
    \ * hundredsTotal;\n        long thousandsTotal2 = thousandsTotal * thousandsTotal;\n\
    \        long totalTotal2 = totalTotal * totalTotal;\n        if (onesTotal2 >\
    \ tensTotal2) {\n            long temp = onesTotal2;\n            ", "       \
    \ List<long> result = new List<long>();\n        long ones = 0;\n        long\
    \ zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n     \
    \       if (i == 1) ones++;\n            else if (i == 0) zeros++;\n         \
    \   else {\n                if (ones > zeros) {\n                    result.Add(i);\n\
    \                    ones--;\n                } else {\n                    result.Add(0);\n\
    \                    zeros--;\n                }\n            }\n            if\
    \ (ones > max) max = ones;\n            if (zeros > max) max = zeros;\n      \
    \  }\n        if (ones > zeros) {\n            while (ones > zeros) {\n      \
    \          result.Add(0);\n                zeros--;\n            }\n        }\n\
    \        if (zeros > max) max = zeros;\n        long onesMax = max;\n        long\
    \ zerosMax = max;\n        long maxOnes = 0;\n        long maxZeros = 0;\n   \
    \     foreach (long i in arr) {\n            if (i == 1) ones++;\n           \
    \ else if (i == 0) zeros++;\n            else {\n                if (ones > zeros)\
    \ {\n                    if (ones > maxOnes) maxOnes = ones;\n               \
    \     result.Add(i);\n                    ones--;\n                } else {\n\
    \                    if (zeros > maxZeros) maxZeros = zeros;\n               \
    \     result.Add(0);\n                    zeros--;\n                }\n      \
    \      }\n        }\n        if (ones > zeros) {\n            while (ones > zeros)\
    \ {\n                if (ones > maxOnes) maxOnes = ones;\n                result.Add(0);\n\
    \                zeros--;\n            }\n        }\n        if (zeros > maxZeros)\
    \ maxZeros = zeros;\n        long onesMaxOnes = maxOnes;\n        long zerosMaxZeros\
    \ = maxZeros;\n        long maxOnesZeros = 0;\n        long maxZerosOnes = 0;\n\
    \        foreach (long i in arr) {\n            if (i == 1) ones++;\n        \
    \    else if (i == 0) zeros++;\n            else {\n                if (ones >\
    \ zeros) {\n                    if (ones > maxOnes) maxOnes = ones;\n        \
    \            if (zeros > maxOnesZeros) maxOnesZeros = ones;\n                \
    \    result.Add(i);\n                    ones--;\n                } else {\n \
    \                   if (zeros > maxZeros) maxZeros = zeros;\n                \
    \    if (ones > maxZerosOnes) maxZerosOnes = ones;\n                    result.Add(0);\n\
    \                    zeros--;\n                }\n            }\n        }\n \
    \       if (ones > zeros) {\n            while (ones > zeros) {\n            \
    \    if (ones > maxOnes) maxOnes = ones;\n                if (zeros > maxOnesZeros)\
    \ maxOnesZeros = ones;\n                result.Add(0);\n                zeros--;\n\
    \            }\n        }\n        if (", "        List<long> result = new List<long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        foreach (long i in arr)\
    \ {\n            if (i == 1) {\n                ones++;\n            }\n     \
    \       else if (i == 0) {\n                zeros++;\n            }\n        \
    \    else {\n                long temp = ones + zeros;\n                ones =\
    \ 0;\n                zeros = 0;\n                result.Add(temp);\n        \
    \    }\n        }\n        return result;", "        long ones = 0;\n        long\
    \ zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n     \
    \       if (i == 1) ones++;\n            else if (i == 0) zeros++;\n         \
    \   else if (i > max) max = i;\n        }\n        List<long> result = new List<long>();\n\
    \        long onesCount = 0;\n        long zerosCount = 0;\n        long maxCount\
    \ = 0;\n        foreach (long i in arr) {\n            if (i == 1) onesCount++;\n\
    \            else if (i == 0) zerosCount++;\n            else if (i > maxCount)\
    \ maxCount = i;\n        }\n        long onesCountInt = Convert.ToInt32(onesCount);\n\
    \        long zerosCountInt = Convert.ToInt32(zerosCount);\n        long maxCountInt\
    \ = Convert.ToInt32(maxCount);\n        long onesCountDecimal = onesCountInt /\
    \ 10;\n        long zerosCountDecimal = zerosCountInt / 10;\n        long maxCountDecimal\
    \ = maxCountInt / 10;\n        long onesCountDecimalInt = Convert.ToInt32(onesCountDecimal);\n\
    \        long zerosCountDecimalInt = Convert.ToInt32(zerosCountDecimal);\n   \
    \     long maxCountDecimalInt = Convert.ToInt32(maxCountDecimal);\n        long\
    \ onesCountDecimalDecimal = onesCountDecimalInt / 10;\n        long zerosCountDecimalDecimal\
    \ = zerosCountDecimalInt / 10;\n        long maxCountDecimalDecimal = maxCountDecimalInt\
    \ / 10;\n        long onesCountDecimalDecimalInt = Convert.ToInt32(onesCountDecimalDecimal);\n\
    \        long zerosCountDecimalDecimalInt = Convert.ToInt32(zerosCountDecimalDecimal);\n\
    \        long maxCountDecimalDecimalInt = Convert.ToInt32(maxCountDecimalDecimal);\n\
    \        long onesCountDecimalDecimalDecimal = onesCountDecimalDecimalInt / 10;\n\
    \        long zerosCountDecimalDecimalDecimal = zerosCountDecimalDecimalInt /\
    \ 10;\n        long maxCountDecimalDecimalDecimal = maxCountDecimalDecimalInt\
    \ / 10;\n        long onesCountDecimalDecimalDecimalInt = Convert.ToInt32(onesCountDecimalDecimalDecimal);\n\
    \        long zerosCountDecimalDecimalDecimalInt = Convert.ToInt32(zerosCountDecimalDecimalDecimal);\n\
    \        long maxCountDecimalDecimalDecimalInt = Convert.ToInt32(maxCountDecimalDecimalDecimal);\n\
    \        long onesCountDecimalDecimalDecimalDecimal = onesCountDecimalDecimalDecimalInt\
    \ / 10;\n        long zerosCountDecimalDecimalDecimalDecimal = zerosCountDecimalDecimalDecimalInt\
    \ / 10;\n        long maxCountDecimalDecimalDecimalDecimal", "        long ones\
    \ = 0;\n        long zeros = 0;\n        long max = 0;\n        long min = 0;\n\
    \        foreach (long i in arr) {\n            if (i == 1) {\n              \
    \  ones++;\n            }\n            else if (i == 0) {\n                zeros++;\n\
    \            }\n            else {\n                if (ones > zeros) {\n    \
    \                max = i;\n                }\n                else {\n       \
    \             min = i;\n                }\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        if (ones > zeros) {\n            result.Add(min);\n\
    \            result.AddRange(arr.Where(i => i == min).OrderBy(i => i).Take(ones\
    \ - 1));\n        }\n        else {\n            result.Add(max);\n          \
    \  result.AddRange(arr.Where(i => i == max).OrderByDescending(i => i).Take(zeros\
    \ - 1));\n        }\n        return result;", "        if (arr.Count < 2) return\
    \ arr;\n        long ones = arr.Sum(x => x & 1);\n        long twos = arr.Sum(x\
    \ => x >> 1);\n        long threes = arr.Sum(x => x >> 2);\n        long fours\
    \ = arr.Sum(x => x >> 3);\n        long fives = arr.Sum(x => x >> 4);\n      \
    \  long sixes = arr.Sum(x => x >> 5);\n        long sevens = arr.Sum(x => x >>\
    \ 6);\n        long eights = arr.Sum(x => x >> 7);\n        long nines = arr.Sum(x\
    \ => x >> 8);\n        long tens = arr.Sum(x => x >> 9);\n        long hundreds\
    \ = arr.Sum(x => x >> 10);\n        long thousands = arr.Sum(x => x >> 11);\n\
    \        long tenThousands = arr.Sum(x => x >> 12);\n        long oneHundreds\
    \ = arr.Sum(x => x >> 13);\n        long oneThousands = arr.Sum(x => x >> 14);\n\
    \        long oneTenThousands = arr.Sum(x => x >> 15);\n        long oneHundredThousands\
    \ = arr.Sum(x => x >> 16);\n        long oneHundredThousandThousands = arr.Sum(x\
    \ => x >> 17);\n        long oneHundredThousandThousandThousands = arr.Sum(x =>\
    \ x >> 18);\n        long oneHundredThousandThousandThousandThousands = arr.Sum(x\
    \ => x >> 19);\n        long oneHundredThousandThousandThousandThousandThousands\
    \ = arr.Sum(x => x >> 20);\n        long oneHundredThousandThousandThousandThousandThousandThousands\
    \ = arr.Sum(x => x >> 21);\n        long oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.Sum(x => x >> 22);\n        long oneHundredThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.Sum(x => x >> 23);\n        long oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.", "        long ones = 0;\n        long zeros = 0;\n        long max\
    \ = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n       \
    \         ones++;\n            }\n            else if (i == 0) {\n           \
    \     zeros++;\n            }\n            else {\n                if (ones >\
    \ zeros) {\n                    max = ones;\n                }\n             \
    \   else {\n                    max = zeros;\n                }\n            }\n\
    \        }\n        List<long> result = new List<long>();\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                result.Add(i);\n   \
    \         }\n            else if (i == 0) {\n                result.Add(0);\n\
    \            }\n            else {\n                if (ones > zeros) {\n    \
    \                result.Add(max);\n                }\n                else {\n\
    \                    result.Add(-max);\n                }\n            }\n   \
    \     }\n        return result;", "        long ones = 0;\n        long zeros\
    \ = 0;\n        long max = 0;\n        foreach (long i in arr) {\n           \
    \ if (i == 1) {\n                ones++;\n            }\n            if (i ==\
    \ 0) {\n                zeros++;\n            }\n            if (i > max) {\n\
    \                max = i;\n            }\n        }\n        List<long> result\
    \ = new List<long>();\n        if (ones > zeros) {\n            result.Add(max);\n\
    \            result.AddRange(arr.Where(i => i == max).OrderBy(i => i).ToList());\n\
    \        }\n        if (zeros > ones) {\n            result.AddRange(arr.Where(i\
    \ => i == max).OrderByDescending(i => i).ToList());\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long ones\
    \ = 0;\n        long zeros = 0;\n        foreach (long i in arr) {\n         \
    \   ones += i;\n        }\n        foreach (long i in arr) {\n            zeros\
    \ += i;\n        }\n        ones = ones / 2;\n        zeros = zeros / 2;\n   \
    \     bool isAscending = true;\n        if (zeros < ones) {\n            isAscending\
    \ = false;\n        }\n        long temp = 0;\n        foreach (long i in arr)\
    \ {\n            if (isAscending) {\n                if (i == 1) {\n         \
    \           temp = i;\n                }\n                else {\n           \
    \         if (temp > i) {\n                        temp = i;\n               \
    \     }\n                }\n            }\n            else {\n              \
    \  if (i == 1) {\n                    temp = i;\n                }\n         \
    \       else {\n                    if (temp < i) {\n                        temp\
    \ = i;\n                    }\n                }\n            }\n        }\n \
    \       result.Add(temp);\n        return result;", "        long ones = 0;\n\
    \        long zeros = 0;\n        long max = 0;\n        long min = 0;\n     \
    \   foreach (long i in arr) {\n            if (i == 1) {\n                ones++;\n\
    \            }\n            if (i == 0) {\n                zeros++;\n        \
    \    }\n            if (i > max) {\n                max = i;\n            }\n\
    \            if (i < min) {\n                min = i;\n            }\n       \
    \ }\n        long onesMax = ones * max;\n        long onesMin = ones * min;\n\
    \        long zerosMax = zeros * max;\n        long zerosMin = zeros * min;\n\
    \        long maxOnes = ones * max;\n        long maxZeros = zeros * max;\n  \
    \      long minOnes = ones * min;\n        long minZeros = zeros * min;\n    \
    \    long maxOnesMin = onesMin * max;\n        long maxOnesMax = onesMax * max;\n\
    \        long maxZerosMin = zerosMin * max;\n        long maxZerosMax = zerosMax\
    \ * max;\n        long minOnesMin = onesMin * min;\n        long minOnesMax =\
    \ onesMax * min;\n        long minZerosMin = zerosMin * min;\n        long minZerosMax\
    \ = zerosMax * min;\n        long maxOnesMinMin = onesMin * min;\n        long\
    \ maxOnesMaxMin = onesMax * min;\n        long maxZerosMinMin = zerosMin * min;\n\
    \        long maxZerosMaxMin = zerosMax * min;\n        long minOnesMinMin = onesMin\
    \ * min;\n        long minOnesMaxMin = onesMax * min;\n        long minZerosMinMin\
    \ = zerosMin * min;\n        long minZerosMaxMin = zerosMax * min;\n        long\
    \ maxOnesMinMinMin = onesMin * min;\n        long maxOnesMaxMinMin = onesMax *\
    \ min;\n        long maxZerosMinMinMin = zerosMin * min;\n        long maxZerosMaxMinMin\
    \ = zerosMax * min;\n        long minOnesMinMinMin = onesMin * min;\n        long\
    \ minOnesMaxMinMin = onesMax * min;\n        long minZerosMinMinMin = zerosMin\
    \ * min;\n        long minZerosMaxMinMin = zerosMax * min", "        long ones\
    \ = 0;\n        long zeros = 0;\n        long max = 0;\n        foreach (long\
    \ n in arr) {\n            ones += n;\n            zeros += (long)Math.Abs(n);\n\
    \            if (n > max) {\n                max = n;\n            }\n       \
    \ }\n        long onesMax = ones;\n        long zerosMax = zeros;\n        long\
    \ maxMax = max;\n        long onesMin = ones;\n        long zerosMin = zeros;\n\
    \        long maxMin = max;\n        long onesCur = ones;\n        long zerosCur\
    \ = zeros;\n        long maxCur = max;\n        long onesNext = ones;\n      \
    \  long zerosNext = zeros;\n        long maxNext = max;\n        long onesPrev\
    \ = ones;\n        long zerosPrev = zeros;\n        long maxPrev = max;\n    \
    \    long onesCurPrev = ones;\n        long zerosCurPrev = zeros;\n        long\
    \ maxCurPrev = max;\n        long onesNextPrev = ones;\n        long zerosNextPrev\
    \ = zeros;\n        long maxNextPrev = max;\n        long onesPrevPrev = ones;\n\
    \        long zerosPrevPrev = zeros;\n        long maxPrevPrev = max;\n      \
    \  long onesPrevCur = ones;\n        long zerosPrevCur = zeros;\n        long\
    \ maxPrevCur = max;\n        long onesPrevNext = ones;\n        long zerosPrevNext\
    \ = zeros;\n        long maxPrevNext = max;\n        long onesPrevPrev = ones;\n\
    \        long zerosPrevPrev = zeros;\n        long maxPrevPrev = max;\n      \
    \  long onesPrevCurPrev = ones;\n        long zerosPrevCurPrev = zeros;\n    \
    \    long maxPrevCurPrev = max;\n        long onesPrevNextPrev = ones;\n     \
    \   long zerosPrevNextPrev = zeros;\n        long maxPrevNextPrev = max;\n   \
    \     long onesPrevPrevPrev = ones;\n        long zerosPrevPrevPrev = zeros;\n\
    \        long maxPrevPrevPrev = max;\n        long onesPrevCurCur = ones;\n  \
    \      long zerosPrevCurCur = zeros;\n        long maxPrevCurCur = max;\n    \
    \    long onesPrevNextCur = ones;\n        long zerosPrevNextCur = zeros;\n  \
    \      long maxPrevNextCur = max;\n        long onesPrevPrevCur = ones;\n    \
    \    long zeros", "        long ones = arr.Sum(x => x & 1L);\n        long zeros\
    \ = arr.Sum(x => x >> 1);\n        if (ones > zeros) {\n            return arr.OrderBy(x\
    \ => BitConverter.ToInt64(BitConverter.GetBytes(x), 1)).ToList();\n        }\n\
    \        return arr.OrderBy(x => BitConverter.ToInt64(BitConverter.GetBytes(x),\
    \ 0)).ToList();", "        long ones = 0;\n        long zeros = 0;\n        long\
    \ max = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n   \
    \             ones++;\n            } else {\n                zeros++;\n      \
    \      }\n            if (ones > zeros) {\n                max = i;\n        \
    \    }\n        }\n        List<long> result = new List<long>();\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                result.Add(i);\n\
    \            } else {\n                if (max != 0) {\n                    result.Add(Convert.ToInt64(Math.Pow(2,\
    \ Convert.ToInt32(Math.Log(max, 2)))));\n                }\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long ones = 0;\n        long zeros = 0;\n     \
    \   long max = 0;\n        foreach (long i in arr) {\n            ones += i;\n\
    \            zeros -= i;\n            max = Math.Max(max, i);\n        }\n   \
    \     long onesCount = ones;\n        long zerosCount = zeros;\n        long maxCount\
    \ = max;\n        long onesCountMax = onesCount * maxCount;\n        long zerosCountMax\
    \ = zerosCount * maxCount;\n        long maxCountMax = maxCount * maxCount;\n\
    \        long onesCountMin = onesCount * maxCountMax;\n        long zerosCountMin\
    \ = zerosCount * maxCountMax;\n        long maxCountMin = maxCount * maxCountMax;\n\
    \        long onesCountMaxMin = onesCount * maxCountMin;\n        long zerosCountMaxMin\
    \ = zerosCount * maxCountMin;\n        long maxCountMaxMin = maxCount * maxCountMin;\n\
    \        long onesCountMinMax = onesCount * maxCountMin;\n        long zerosCountMinMax\
    \ = zerosCount * maxCountMin;\n        long maxCountMinMax = maxCount * maxCountMin;\n\
    \        long onesCountMinMin = onesCount * maxCountMinMax;\n        long zerosCountMinMin\
    \ = zerosCount * maxCountMinMax;\n        long maxCountMinMin = maxCount * maxCountMinMax;\n\
    \        long onesCountMinMaxMin = onesCount * maxCountMinMin;\n        long zerosCountMinMaxMin\
    \ = zerosCount * maxCountMinMin;\n        long maxCountMinMinMax = maxCount *\
    \ maxCountMinMin;\n        long onesCountMinMinMax = onesCount * maxCountMinMinMax;\n\
    \        long zerosCountMinMinMax = zerosCount * maxCountMinMinMax;\n        long\
    \ maxCountMinMinMax = maxCount * maxCountMinMinMax;\n        long onesCountMinMinMin\
    \ = onesCount * maxCountMinMinMax;\n        long zerosCountMinMinMin = zerosCount\
    \ * maxCountMinMinMin;\n        long maxCountMinMinMin = maxCount * maxCountMinMinMin;\n\
    \        long onesCountMinMinMax = onesCount * maxCountMinMinMinMax;\n       \
    \ long zerosCountMinMinMinMax = zerosCount * maxCountMinMinMinMax;\n        long ",
  "        List<long> result = new List<long>();\n        long ones = 0;\n       \
    \ long zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n\
    \            ones += i;\n            zeros += (long)Math.Abs(i);\n           \
    \ max = Math.Max(max, Math.Abs(i));\n        }\n        long onesCount = 0;\n\
    \        long zerosCount = 0;\n        long maxCount = 0;\n        foreach (long\
    \ i in arr) {\n            onesCount += i;\n            zerosCount += (long)Math.Abs(i);\n\
    \            maxCount = Math.Max(maxCount, Math.Abs(i));\n        }\n        long\
    \ onesCount2 = onesCount * onesCount;\n        long zerosCount2 = zerosCount *\
    \ zerosCount;\n        long maxCount2 = maxCount * maxCount;\n        long onesCount3\
    \ = onesCount2 * onesCount;\n        long zerosCount3 = zerosCount2 * zerosCount;\n\
    \        long maxCount3 = maxCount2 * maxCount;\n        long onesCount4 = onesCount3\
    \ * onesCount;\n        long zerosCount4 = zerosCount3 * zerosCount;\n       \
    \ long maxCount4 = maxCount3 * maxCount;\n        long onesCount5 = onesCount4\
    \ * onesCount;\n        long zerosCount5 = zerosCount4 * zerosCount;\n       \
    \ long maxCount5 = maxCount4 * maxCount;\n        long onesCount6 = onesCount5\
    \ * onesCount;\n        long zerosCount6 = zerosCount5 * zerosCount;\n       \
    \ long maxCount6 = maxCount5 * maxCount;\n        long onesCount7 = onesCount6\
    \ * onesCount;\n        long zerosCount7 = zerosCount6 * zerosCount;\n       \
    \ long maxCount7 = maxCount6 * maxCount;\n        long onesCount8 = onesCount7\
    \ * onesCount;\n        long zerosCount8 = zerosCount7 * zerosCount;\n       \
    \ long maxCount8 = maxCount7 * maxCount;\n        long onesCount9 = onesCount8\
    \ * onesCount;\n        long zerosCount9 = zerosCount8 * zerosCount;\n       \
    \ long maxCount9 = maxCount8 * maxCount;\n        long onesCount10 = onesCount9\
    \ * onesCount;\n        long zerosCount10 = zerosCount9 * zerosCount;\n      \
    \  long maxCount10 = maxCount9 * maxCount;\n        long onesCount11 = onesCount10\
    \ * onesCount;\n        long zerosCount11 = zerosCount10 * zerosCount;\n     \
    \   long maxCount11 = max", "        long ones = 0;\n        long zeros = 0;\n\
    \        long max = 0;\n        foreach (long i in arr) {\n            if (i ==\
    \ 1) {\n                ones++;\n            }\n            if (i == 0) {\n  \
    \              zeros++;\n            }\n            if (i == -1) {\n         \
    \       max = Math.Max(max, i);\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        if (ones > zeros) {\n            result.AddRange(arr.OrderBy(i\
    \ => Convert.ToInt64(Math.Pow(2, Convert.ToInt64(Math.Log(i)))).ToString()));\n\
    \        }\n        if (ones < zeros) {\n            result.AddRange(arr.OrderByDescending(i\
    \ => Convert.ToInt64(Math.Pow(2, Convert.ToInt64(Math.Log(i)))).ToString()));\n\
    \        }\n        if (ones == zeros) {\n            result.AddRange(arr.OrderBy(i\
    \ => Convert.ToInt64(Math.Pow(2, Convert.ToInt64(Math.Log(i)))).ToString()));\n\
    \        }\n        if (ones > zeros) {\n            result.AddRange(arr.OrderByDescending(i\
    \ => Convert.ToInt64(Math.Pow(2, Convert.ToInt64(Math.Log(i)))).ToString()));\n\
    \        }\n        if (ones < zeros) {\n            result.AddRange(arr.OrderByDescending(i\
    \ => Convert.ToInt64(Math.Pow(2, Convert.ToInt64(Math.Log(i)))).ToString()));\n\
    \        }\n        if (ones == zeros) {\n            result.AddRange(arr.OrderBy(i\
    \ => Convert.ToInt64(Math.Pow(2, Convert.ToInt64(Math.Log(i)))).ToString()));\n\
    \        }\n        if (ones > zeros) {\n            result.AddRange(arr.OrderByDescending(i\
    \ => Convert.ToInt64(Math.Pow(2, Convert.ToInt64(Math.Log(i)))).ToString()));\n\
    \        }\n        if (ones < zeros) {\n            result.AddRange(arr.OrderByDescending(i\
    \ => Convert.ToInt64(Math.Pow(2, Convert.ToInt64(Math.Log(i)))).ToString()));\n\
    \        }\n        if (ones == zeros) {\n            result.AddRange(arr.OrderBy(i\
    \ => Convert.ToInt64(Math.Pow(2, Convert.ToInt64(Math.Log(i)))).ToString()));\n\
    \        }\n        if (ones > zeros) {\n            result.AddRange(arr.OrderByDescending(i\
    \ => Convert.ToInt64(Math.Pow(2, Convert.ToInt64(Math.Log(i)))).ToString()));\n\
    \        }\n        if (ones < zeros) {\n            result.AddRange(arr.OrderByDescending(i\
    \ => Convert.ToInt64(Math.Pow(2, Convert.ToInt64(Math.Log(i)))).ToString()));\n\
    \        }\n        if (ones == zeros) {\n            result.AddRange(arr.OrderBy(i\
    \ => Conver", "        List<long> result = new List<long>();\n        long ones\
    \ = 0;\n        long twos = 0;\n        long threes = 0;\n        long fours =\
    \ 0;\n        long fives = 0;\n        long sixes = 0;\n        long sevens =\
    \ 0;\n        long eights = 0;\n        long nines = 0;\n        long tens = 0;\n\
    \        long hundreds = 0;\n        long thousands = 0;\n        long tenthousands\
    \ = 0;\n        long hundredthousands = 0;\n        long millions = 0;\n     \
    \   long billions = 0;\n        long trillions = 0;\n        long quadrillions\
    \ = 0;\n        long quintillions = 0;\n        long sextillions = 0;\n      \
    \  long septillions = 0;\n        long octillions = 0;\n        long nonillions\
    \ = 0;\n        long decillions = 0;\n        long undecillions = 0;\n       \
    \ long duodecillions = 0;\n        long tredecillions = 0;\n        long quattuordecillions\
    \ = 0;\n        long quindecillions = 0;\n        long sexdecillions = 0;\n  \
    \      long septendecillions = 0;\n        long octodecillions = 0;\n        long\
    \ novemdecillions = 0;\n        long vigintillions = 0;\n        long unvigintillions\
    \ = 0;\n        long duovigintillions = 0;\n        long trevigintillions = 0;\n\
    \        long quattuorvigintillions = 0;\n        long quinvigintillions = 0;\n\
    \        long sexvigintillions = 0;\n        long septenvigintillions = 0;\n \
    \       long octovigintillions = 0;\n        long novemvigintillions = 0;\n  \
    \      long vigintillions = 0;\n        long unvigintillions = 0;\n        long\
    \ duovigintillions = 0;\n        long trevigintillions = 0;\n        long quattuorvigintillions\
    \ = 0;\n        long quinvigintillions = 0;\n        long sexvigintillions = 0;\n\
    \        long septenvigintillions = 0;\n        long octovigintillions = 0;\n\
    \        long novemvigintillions = 0;\n        long vigintillions = 0;\n     \
    \   long unvigintillions = 0;\n        long duovigintillions = 0;\n        long\
    \ trevigintillions = 0;\n        long quattuorvigintillion", "        List<long>\
    \ result = new List<long>();\n        long ones = 0;\n        long zeros = 0;\n\
    \        long max = 0;\n        foreach (long i in arr) {\n            if (i ==\
    \ 1) {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n            if (ones > zeros) {\n                max = ones;\n\
    \            } else {\n                max = zeros;\n            }\n         \
    \   result.Add(i);\n        }\n        long onesMax = ones;\n        long zerosMax\
    \ = zeros;\n        long maxMax = max;\n        long maxMin = max;\n        long\
    \ minMax = max;\n        long minMin = max;\n        long minOnes = ones;\n  \
    \      long minZeros = zeros;\n        long minOnesMax = onesMax;\n        long\
    \ minZerosMax = zerosMax;\n        long minMaxMax = maxMax;\n        long minMaxMin\
    \ = maxMin;\n        long minMinMax = minMax;\n        long minMinMin = minMin;\n\
    \        long minOnesMin = onesMin;\n        long minZerosMin = zerosMin;\n  \
    \      long minOnesMaxMin = onesMaxMin;\n        long minZerosMaxMin = zerosMaxMin;\n\
    \        long minMaxMaxMin = maxMaxMin;\n        long minMaxMinMin = maxMinMin;\n\
    \        long minMinMaxMin = minMaxMin;\n        long minMinMinMin = minMinMin;\n\
    \        long minOnesMinMin = onesMinMin;\n        long minZerosMinMin = zerosMinMin;\n\
    \        long minOnesMaxMinMin = onesMaxMinMin;\n        long minZerosMaxMinMin\
    \ = zerosMaxMinMin;\n        long minMaxMaxMinMin = maxMaxMinMin;\n        long\
    \ minMaxMinMinMin = maxMinMinMinMin;\n        long minMinMaxMinMin = minMaxMinMin;\n\
    \        long minMinMinMinMin = minMinMinMin;\n        long minOnesMinMinMin =\
    \ onesMinMinMin;\n        long minZerosMinMinMin = zerosMinMinMin;\n        long\
    \ minOnesMaxMinMin = onesMaxMinMin;\n        long minZerosMaxMinMin = zerosMaxMinMin;\n\
    \        long minMaxMaxMinMin = maxMaxMinMin;\n        long minMaxMinMinMin =\
    \ maxMinMinMinMin", "        long ones = 0;\n        long zeros = 0;\n       \
    \ long max = 0;\n        long min = 0;\n        foreach (long i in arr) {\n  \
    \          if (i == 1) ones++;\n            else if (i == 0) zeros++;\n      \
    \      else if (i > 0) max = Math.Max(max, i);\n            else if (i < 0) min\
    \ = Math.Min(min, i);\n        }\n        List<long> result = new List<long>();\n\
    \        if (ones > zeros) {\n            long onesMax = Convert.ToInt64(Math.Pow(2,\
    \ Convert.ToInt32(Math.Log(max, 2))) + 1);\n            long onesMin = Convert.ToInt64(Math.Pow(2,\
    \ Convert.ToInt32(Math.Log(min, 2))) - 1);\n            long onesSum = 0;\n  \
    \          long onesSum2 = 0;\n            long onesSum3 = 0;\n            long\
    \ onesSum4 = 0;\n            long onesSum5 = 0;\n            long onesSum6 = 0;\n\
    \            long onesSum7 = 0;\n            long onesSum8 = 0;\n            long\
    \ onesSum9 = 0;\n            long onesSum10 = 0;\n            long onesSum11 =\
    \ 0;\n            long onesSum12 = 0;\n            long onesSum13 = 0;\n     \
    \       long onesSum14 = 0;\n            long onesSum15 = 0;\n            long\
    \ onesSum16 = 0;\n            long onesSum17 = 0;\n            long onesSum18\
    \ = 0;\n            long onesSum19 = 0;\n            long onesSum20 = 0;\n   \
    \         long onesSum21 = 0;\n            long onesSum22 = 0;\n            long\
    \ onesSum23 = 0;\n            long onesSum24 = 0;\n            long onesSum25\
    \ = 0;\n            long onesSum26 = 0;\n            long onesSum27 = 0;\n   \
    \         long onesSum28 = 0;\n            long onesSum29 = 0;\n            long\
    \ onesSum30 = 0;\n            long onesSum31 = 0;\n            long onesSum32\
    \ = 0;\n            long onesSum33 = 0;\n            long onesSum34 = 0;\n   \
    \         long onesSum35 = 0;\n            long onesSum36 = 0;\n            long\
    \ onesSum37 = 0;\n            long onesSum38 = 0;\n            long onesSum39\
    \ = 0;\n            long onesSum40 = 0;\n            long onesSum41 = 0;\n   \
    \         long onesSum42 = 0;\n            long onesSum43 = 0;\n            long\
    \ onesSum44 = 0;\n            long onesSum45 = 0;\n            long onesSum46\
    \ = 0;\n            long onesSum47 = 0;\n            long onesSum48 = 0;\n", " \
    \       long ones = 0;\n        long zeros = 0;\n        long max = 0;\n     \
    \   foreach (long i in arr) {\n            if (i == 1) ones++;\n            else\
    \ if (i == 0) zeros++;\n            else if (i > 0) max = Math.Max(max, i);\n\
    \        }\n        List<long> result = new List<long>();\n        if (ones >\
    \ zeros) {\n            long onesMax = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2))) - 1);\n            long zeroesMax = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2))) - 2);\n            long onesMin = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2))) - 2);\n            long zeroesMin = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2))) - 1);\n            long onesMaxIndex = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2))) - 1) - 1;\n            long zeroesMaxIndex = Convert.ToInt64(Math.Pow(2,\
    \ Convert.ToInt32(Math.Log(max, 2))) - 2) - 1;\n            long onesMinIndex\
    \ = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max, 2))) - 2) - 2;\n\
    \            long zeroesMinIndex = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2))) - 1) - 2;\n            long onesMaxIndex = Convert.ToInt64(Math.Pow(2,\
    \ Convert.ToInt32(Math.Log(max, 2))) - 1) - 1;\n            long zeroesMinIndex\
    \ = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max, 2))) - 2) - 1;\n\
    \            long onesMaxIndex = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2))) - 1) - 1;\n            long zeroesMinIndex = Convert.ToInt64(Math.Pow(2,\
    \ Convert.ToInt32(Math.Log(max, 2))) - 2) - 1;\n            long onesMaxIndex\
    \ = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max, 2))) - 1) - 1;\n\
    \            long zeroesMinIndex = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2))) - 2) - 1;\n            long onesMaxIndex = Convert.ToInt64(Math.Pow(2,\
    \ Convert.ToInt32(Math.Log(max, 2))) - 1) - 1;\n            long zeroesMinIndex\
    \ = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max, 2))) - 2) - 1;\n\
    \            long onesMaxIndex = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(",
  "        List<long> result = new List<long>();\n        long ones = 0;\n       \
    \ long zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n\
    \            if (i == 1) {\n                ones++;\n            }\n         \
    \   if (i == 0) {\n                zeros++;\n            }\n            if (ones\
    \ > zeros) {\n                max = i;\n            }\n        }\n        long\
    \ onesMax = ones;\n        long zerosMax = zeros;\n        long maxMax = max;\n\
    \        long onesMaxCount = 0;\n        long zerosMaxCount = 0;\n        long\
    \ maxMaxCount = 0;\n        long maxCount = 0;\n        long maxCount2 = 0;\n\
    \        long maxCount3 = 0;\n        long maxCount4 = 0;\n        long maxCount5\
    \ = 0;\n        long maxCount6 = 0;\n        long maxCount7 = 0;\n        long\
    \ maxCount8 = 0;\n        long maxCount9 = 0;\n        long maxCount10 = 0;\n\
    \        long maxCount11 = 0;\n        long maxCount12 = 0;\n        long maxCount13\
    \ = 0;\n        long maxCount14 = 0;\n        long maxCount15 = 0;\n        long\
    \ maxCount16 = 0;\n        long maxCount17 = 0;\n        long maxCount18 = 0;\n\
    \        long maxCount19 = 0;\n        long maxCount20 = 0;\n        long maxCount21\
    \ = 0;\n        long maxCount22 = 0;\n        long maxCount23 = 0;\n        long\
    \ maxCount24 = 0;\n        long maxCount25 = 0;\n        long maxCount26 = 0;\n\
    \        long maxCount27 = 0;\n        long maxCount28 = 0;\n        long maxCount29\
    \ = 0;\n        long maxCount30 = 0;\n        long maxCount31 = 0;\n        long\
    \ maxCount32 = 0;\n        long maxCount33 = 0;\n        long maxCount34 = 0;\n\
    \        long maxCount35 = 0;\n        long maxCount36 = 0;\n        long maxCount37\
    \ = 0;\n        long maxCount38 = 0;\n        long maxCount39 = 0;\n        long\
    \ maxCount40 = 0;\n        long maxCount41 = 0;\n        long maxCount42 = 0;\n\
    \        long maxCount43 = 0;\n        long maxCount44 = 0;\n        long maxCount45\
    \ = 0;\n        long maxCount46 = 0;\n        long maxCount47 = 0;\n        long\
    \ maxCount48 = 0;\n        long maxCount49 = 0;\n        long maxCount50 = 0;\n\
    \        long maxCount51 = 0;\n        long maxCount52 = 0;\n        long maxCount53\
    \ = 0;\n        long maxCount54 = 0;\n        long maxCount55 = 0;\n        long\
    \ maxCount56 = 0;\n        long maxCount57 = 0;\n        long maxCount", "   \
    \     long ones = arr.Sum(x => x & 1L);\n        long zeros = arr.Sum(x => ~x\
    \ & 1L);\n        if (ones > zeros) {\n            arr = arr.OrderBy(x => BitConverter.ToInt64(BitConverter.GetBytes(x),\
    \ 0)[0]).ToList();\n        }\n        else {\n            arr = arr.OrderByDescending(x\
    \ => BitConverter.ToInt64(BitConverter.GetBytes(x), 0)[0]).ToList();\n       \
    \ }\n        return arr;", "        if (arr.Count == 0) return arr;\n        long\
    \ ones = 0;\n        long zeros = 0;\n        long max = 0;\n        long min\
    \ = 0;\n        foreach (long i in arr) {\n            ones += i;\n          \
    \  zeros += (long)Math.Abs(i);\n            if (max < i) max = i;\n          \
    \  if (min > i) min = i;\n        }\n        List<long> result = new List<long>();\n\
    \        long onesMax = ones * max;\n        long onesMin = ones * min;\n    \
    \    long zeroMax = zeros * max;\n        long zeroMin = zeros * min;\n      \
    \  long onesDiff = onesMax - onesMin;\n        long zeroDiff = zeroMax - zeroMin;\n\
    \        long onesDiff2 = onesDiff / 2;\n        long zeroDiff2 = zeroDiff / 2;\n\
    \        long onesDiff3 = onesDiff / 3;\n        long zeroDiff3 = zeroDiff / 3;\n\
    \        long onesDiff4 = onesDiff / 4;\n        long zeroDiff4 = zeroDiff / 4;\n\
    \        long onesDiff5 = onesDiff / 5;\n        long zeroDiff5 = zeroDiff / 5;\n\
    \        long onesDiff6 = onesDiff / 6;\n        long zeroDiff6 = zeroDiff / 6;\n\
    \        long onesDiff7 = onesDiff / 7;\n        long zeroDiff7 = zeroDiff / 7;\n\
    \        long onesDiff8 = onesDiff / 8;\n        long zeroDiff8 = zeroDiff / 8;\n\
    \        long onesDiff9 = onesDiff / 9;\n        long zeroDiff9 = zeroDiff / 9;\n\
    \        long onesDiff10 = onesDiff / 10;\n        long zeroDiff10 = zeroDiff\
    \ / 10;\n        long onesDiff11 = onesDiff / 11;\n        long zeroDiff11 = zeroDiff\
    \ / 11;\n        long onesDiff12 = onesDiff / 12;\n        long zeroDiff12 = zeroDiff\
    \ / 12;\n        long onesDiff13 = onesDiff / 13;\n        long zeroDiff13 = zeroDiff\
    \ / 13;\n        long onesDiff14 = onesDiff / 14;\n        long zeroDiff14 = zeroDiff\
    \ / 14;\n        long onesDiff15 = onesDiff / 15;\n        long zeroDiff15 = zeroDiff\
    \ / 15;\n        long onesDiff16 = onesDiff / 16;\n        long zeroDiff16 = zeroDiff\
    \ / 16;\n        long onesDiff17 = onesDiff / 17;\n", "        long ones = arr.Sum(x\
    \ => x & 1);\n        long zeros = arr.Sum(x => x >> 1);\n        if (ones > zeros)\
    \ {\n            return arr.OrderBy(x => x).ToList();\n        }\n        return\
    \ arr.OrderByDescending(x => x).ToList();", "        long ones = 0;\n        long\
    \ zeros = 0;\n        long max = 0;\n        long min = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                ones++;\n          \
    \  }\n            if (i == 0) {\n                zeros++;\n            }\n   \
    \         if (i == -1) {\n                max = Math.Max(max, i);\n          \
    \      min = Math.Min(min, i);\n            }\n        }\n        List<long> result\
    \ = new List<long>();\n        if (ones > zeros) {\n            long temp = ones;\n\
    \            ones = zeros;\n            zeros = temp;\n        }\n        long\
    \ temp = 0;\n        if (ones > 0) {\n            temp = ones;\n            ones\
    \ = 0;\n        }\n        if (zeros > 0) {\n            temp = zeros;\n     \
    \       zeros = 0;\n        }\n        long temp2 = 0;\n        if (ones > 0)\
    \ {\n            temp2 = ones;\n            ones = 0;\n        }\n        if (zeros\
    \ > 0) {\n            temp2 = zeros;\n            zeros = 0;\n        }\n    \
    \    long temp3 = 0;\n        if (ones > 0) {\n            temp3 = ones;\n   \
    \         ones = 0;\n        }\n        if (zeros > 0) {\n            temp3 =\
    \ zeros;\n            zeros = 0;\n        }\n        long temp4 = 0;\n       \
    \ if (ones > 0) {\n            temp4 = ones;\n            ones = 0;\n        }\n\
    \        if (zeros > 0) {\n            temp4 = zeros;\n            zeros = 0;\n\
    \        }\n        long temp5 = 0;\n        if (ones > 0) {\n            temp5\
    \ = ones;\n            ones = 0;\n        }\n        if (zeros > 0) {\n      \
    \      temp5 = zeros;\n            zeros = 0;\n        }\n        long temp6 =\
    \ 0;\n        if (ones > 0) {\n            temp6 = ones;\n            ones = 0;\n\
    \        }\n        if (zeros > 0) {\n            temp6 = zeros;\n           \
    \ zeros = 0;\n        }\n        long temp7 = 0;\n        if (ones > 0) {\n  \
    \          temp7 = ones;\n            ones = 0;\n        }\n        if (zeros\
    \ > 0) {\n            temp7 = zeros;\n            zeros = 0;\n        }\n    \
    \    long temp8 = 0;\n        if (ones > 0) {\n            temp8 = ones;\n   \
    \         ones = 0;\n        }\n        if (zeros > 0) {\n            temp8 =\
    \ zeros;\n            zeros = 0;\n        }\n        long temp9 = 0;\n       \
    \ if (ones > 0) {\n            temp9 = ones;\n            ones = 0;\n        }\n\
    \        if (zeros > 0) {\n            temp9 = zeros;\n            zeros = 0;\n\
    \        }\n        long temp10 = 0;\n        if (ones > 0) {\n            temp10\
    \ = ones;\n            ones = 0;\n        }\n        if (zeros > 0) {\n      \
    \      temp10 = zeros;\n            zeros = 0;\n        }\n        long temp11\
    \ = 0;\n        if (ones > 0) {\n            temp11 = ones;\n            ones\
    \ = 0;\n        }\n        if (zeros > 0) {\n            temp11 = ", "       \
    \ long ones = 0;\n        long zeros = 0;\n        long max = 0;\n        long\
    \ min = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n   \
    \             ones++;\n            }\n            else if (i == 0) {\n       \
    \         zeros++;\n            }\n            else {\n                if (ones\
    \ > zeros) {\n                    max = i;\n                }\n              \
    \  else {\n                    min = i;\n                }\n            }\n  \
    \      }\n        List<long> result = new List<long>();\n        if (ones > zeros)\
    \ {\n            long temp = min;\n            while (ones > zeros) {\n      \
    \          result.Add(temp);\n                ones--;\n                zeros++;\n\
    \                temp = ones;\n            }\n            result.Add(temp);\n\
    \        }\n        else {\n            long temp = max;\n            while (ones\
    \ < zeros) {\n                result.Add(temp);\n                zeros--;\n  \
    \              ones++;\n                temp = zeros;\n            }\n       \
    \     result.Add(temp);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long ones = 0;\n        long zeros = 0;\n\
    \        long max = 0;\n        foreach (long i in arr) {\n            ones +=\
    \ i;\n            zeros -= i;\n            if (ones > max) {\n               \
    \ max = ones;\n            }\n        }\n        long onesMax = max;\n       \
    \ long zeroMax = max;\n        long maxOnes = 0;\n        long maxZeros = 0;\n\
    \        long maxOnesMax = max;\n        long maxZerosMax = max;\n        foreach\
    \ (long i in arr) {\n            onesMax += i;\n            zeroMax -= i;\n  \
    \          if (onesMax > maxOnesMax) {\n                maxOnesMax = onesMax;\n\
    \            }\n            if (zeroMax < maxZerosMax) {\n                maxZerosMax\
    \ = zeroMax;\n            }\n        }\n        long onesMaxMax = maxOnesMax;\n\
    \        long zeroMaxMax = maxZerosMax;\n        long maxOnesMaxMax = maxOnesMax;\n\
    \        long maxZerosMaxMax = maxZerosMax;\n        foreach (long i in arr) {\n\
    \            onesMaxMax += i;\n            zeroMaxMax -= i;\n            if (onesMaxMax\
    \ < maxOnesMaxMax) {\n                maxOnesMaxMax = onesMaxMax;\n          \
    \  }\n            if (zeroMaxMax < maxZerosMaxMax) {\n                maxZerosMaxMax\
    \ = zeroMaxMax;\n            }\n        }\n        long onesMaxMaxMax = maxOnesMaxMax;\n\
    \        long zeroMaxMaxMax = maxZerosMaxMax;\n        long maxOnesMaxMaxMax =\
    \ maxOnesMaxMax;\n        long maxZerosMaxMaxMax = maxZerosMaxMax;\n        foreach\
    \ (long i in arr) {\n            onesMaxMaxMax += i;\n            zeroMaxMaxMax\
    \ -= i;\n            if (onesMaxMaxMax < maxOnesMaxMaxMax) {\n               \
    \ maxOnesMaxMaxMax = onesMaxMaxMax;\n            }\n            if (zeroMaxMaxMax\
    \ < maxZerosMaxMaxMax) {\n                maxZerosMaxMaxMax = zeroMaxMaxMax;\n\
    \            }\n        }\n        long onesMaxMaxMaxMax = maxOnesMaxMaxMax;\n\
    \        long zeroMaxMaxMaxMax = maxZerosMaxMaxMax;\n        long maxOnesMaxMaxMaxMax\
    \ = ", "        List<long> result = new List<long>();\n        long ones = 0;\n\
    \        long zeros = 0;\n        long max = 0;\n        foreach (long i in arr)\
    \ {\n            if (i == 1) {\n                ones++;\n            }\n     \
    \       else if (i == 0) {\n                zeros++;\n            }\n        \
    \    else {\n                if (ones > zeros) {\n                    result.Add(i);\n\
    \                    ones--;\n                }\n                else {\n    \
    \                result.Add(0);\n                    zeros--;\n              \
    \  }\n            }\n            if (ones > max) {\n                max = ones;\n\
    \            }\n            if (zeros > max) {\n                max = zeros;\n\
    \            }\n        }\n        if (ones > zeros) {\n            result.Add(max);\n\
    \        }\n        if (zeros > max) {\n            result.Add(max);\n       \
    \ }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n    \
    \    foreach (long i in arr) {\n            if (i == 1) {\n                ones++;\n\
    \            } else {\n                zeros++;\n            }\n            if\
    \ (ones > zeros) {\n                max = ones;\n            } else {\n      \
    \          max = zeros;\n            }\n            result.Add(i);\n        }\n\
    \        long onesMax = ones;\n        long zerosMax = zeros;\n        long maxMax\
    \ = max;\n        long onesMin = ones;\n        long zerosMin = zeros;\n     \
    \   long maxMin = max;\n        long onesMaxMin = ones;\n        long zerosMaxMin\
    \ = zeros;\n        long maxMaxMin = max;\n        long onesMinMax = ones;\n \
    \       long zerosMinMax = zeros;\n        long maxMinMax = max;\n        long\
    \ onesMaxMinMax = ones;\n        long zerosMaxMinMax = zeros;\n        long maxMaxMinMax\
    \ = max;\n        long onesMinMaxMax = ones;\n        long zerosMinMaxMax = zeros;\n\
    \        long maxMinMaxMax = max;\n        long onesMaxMinMaxMax = ones;\n   \
    \     long zerosMaxMinMaxMax = zeros;\n        long maxMaxMinMaxMax = max;\n \
    \       long onesMinMaxMaxMax = ones;\n        long zerosMinMaxMaxMax = zeros;\n\
    \        long maxMinMaxMaxMax = max;\n        long onesMaxMinMaxMax = ones;\n\
    \        long zerosMinMaxMaxMax = zeros;\n        long maxMaxMinMaxMax = max;\n\
    \        long onesMinMaxMaxMaxMax = ones;\n        long zerosMinMaxMaxMax = zeros;\n\
    \        long maxMinMaxMaxMax = max;\n        long onesMaxMinMaxMaxMax = ones;\n\
    \        long zerosMinMaxMaxMax = zeros;\n        long maxMaxMinMaxMax = max;\n\
    \        long onesMinMaxMaxMaxMax = ones;\n        long zerosMinMaxMaxMax = zeros;\n\
    \        long maxMinMaxMaxMax = max;\n        long onesMaxMinMaxMaxMax = ones;\n\
    \        long zerosMinMaxMaxMax = zeros;\n        long maxMaxMinMaxMax = max;\n\
    \        long onesMinMaxMaxMaxMax = ones;\n        long zerosMinMaxMaxMax = zeros;\n\
    \        long max", "        List<long> result = new List<long>();\n        long\
    \ ones = 0;\n        long zeros = 0;\n        long max = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                ones++;\n          \
    \  }\n            if (i == 0) {\n                zeros++;\n            }\n   \
    \         if (ones > zeros) {\n                result.Add(i);\n              \
    \  max = i;\n            }\n        }\n        if (ones > zeros) {\n         \
    \   result.Add(max);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long ones = 0;\n        long tens = 0;\n\
    \        long hundreds = 0;\n        long thousands = 0;\n        long tenths\
    \ = 0;\n        long hundredths = 0;\n        long thousandths = 0;\n        long\
    \ tenthhundredths = 0;\n        long hundredththousandths = 0;\n        long thousandthhundredths\
    \ = 0;\n        long hundredththousandthhundredths = 0;\n        long thousandthhundredththousandthhundredths\
    \ = 0;\n        long hundredththousandthhundredththousandthhundredths = 0;\n \
    \       long thousandthhundredththousandthhundredththousandthhundredths = 0;\n\
    \        long hundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long thousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long hundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long thousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long hundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long thousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long hundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundred",
  "        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  long min = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n\
    \                ones++;\n            }\n            if (i == 0) {\n         \
    \       zeros++;\n            }\n            if (i > max) {\n                max\
    \ = i;\n            }\n            if (i < min) {\n                min = i;\n\
    \            }\n        }\n        List<long> result = new List<long>();\n   \
    \     long onesMax = 0;\n        long onesMin = 0;\n        long zerosMax = 0;\n\
    \        long zerosMin = 0;\n        long maxOnes = 0;\n        long maxZeros\
    \ = 0;\n        long minOnes = 0;\n        long minZeros = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                if (ones > maxOnes)\
    \ {\n                    maxOnes = ones;\n                }\n                if\
    \ (ones < minOnes) {\n                    minOnes = ones;\n                }\n\
    \                ones++;\n                result.Add(ones);\n            }\n \
    \           if (i == 0) {\n                if (zeros > maxZeros) {\n         \
    \           maxZeros = zeros;\n                }\n                if (zeros <\
    \ minZeros) {\n                    minZeros = zeros;\n                }\n    \
    \            zeros++;\n                result.Add(zeros);\n            }\n   \
    \         if (i > max) {\n                max = i;\n            }\n          \
    \  if (i < min) {\n                min = i;\n            }\n        }\n      \
    \  if (maxOnes > maxZeros) {\n            onesMax = maxOnes;\n            zerosMax\
    \ = maxZeros;\n        }\n        if (minOnes < minZeros) {\n            onesMin\
    \ = minOnes;\n            zerosMin = minZeros;\n        }\n        if (onesMax\
    \ < onesMin) {\n            onesMax = onesMin;\n            zerosMax = onesMin;\n\
    \        }\n        if (zerosMax < zerosMin) {\n            onesMax = zerosMin;\n\
    \            zerosMax = zerosMin;\n        }\n        long onesDiff = onesMax\
    \ - onesMin;\n        long zerosDiff = zerosMax - zerosMin;\n        long onesDiffMax\
    \ = onesMax - maxOnes;\n        long onesDiffMin = onesMin - minOnes;\n      \
    \  long zerosDiffMax = zerosMax - maxZeros;\n        long zerosDiffMin = zerosMin\
    \ - minZeros;\n        long onesDiffMaxMin = onesDiffMax - onesDiffMin;\n    \
    \    long zerosDiffMaxMin = zerosDiffMax - zerosDiffMin;\n        long onesDiffMaxMinMax\
    \ = one", "        long ones = 0;\n        long zeros = 0;\n        long max =\
    \ 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n         \
    \       ones++;\n            }\n            if (i == 0) {\n                zeros++;\n\
    \            }\n            if (i > max) {\n                max = i;\n       \
    \     }\n        }\n        long onesMax = ones * max;\n        long zerosMax\
    \ = zeros * max;\n        long onesMin = ones * min;\n        long zerosMin =\
    \ zeros * min;\n        long onesSum = ones * arr.Sum();\n        long zerosSum\
    \ = zeros * arr.Sum();\n        long onesAvg = ones * arr.Average();\n       \
    \ long zerosAvg = zeros * arr.Average();\n        long onesMedian = ones * arr.Median();\n\
    \        long zerosMedian = zeros * arr.Median();\n        long onesCount = ones\
    \ * arr.Count();\n        long zerosCount = zeros * arr.Count();\n        long\
    \ onesSum2 = ones * arr.Sum(x => x);\n        long zerosSum2 = zeros * arr.Sum(x\
    \ => x);\n        long onesAvg2 = ones * arr.Average(x => x);\n        long zerosAvg2\
    \ = zeros * arr.Average(x => x);\n        long onesMedian2 = ones * arr.Median(x\
    \ => x);\n        long zerosMedian2 = zeros * arr.Median(x => x);\n        long\
    \ onesCount2 = ones * arr.Count(x => x);\n        long zerosCount2 = zeros * arr.Count(x\
    \ => x);\n        long onesSum3 = ones * arr.Sum(x => Math.Pow(x, 2));\n     \
    \   long zerosSum3 = zeros * arr.Sum(x => Math.Pow(x, 2));\n        long onesAvg3\
    \ = ones * arr.Average(x => Math.Pow(x, 2));\n        long zerosAvg3 = zeros *\
    \ arr.Average(x => Math.Pow(x, 2));\n        long onesMedian3 = ones * arr.Median(x\
    \ => Math.Pow(x, 2));\n        long zerosMedian3 = zeros * arr.Median(x => Math.Pow(x,\
    \ 2));\n        long onesCount3 = ones * arr.Count(x => Math.Pow(x, 2));\n   \
    \     long zerosCount3 = zeros * arr.Count(x => Math.Pow(x, 2));\n        long\
    \ onesSum4 = ones * arr.Sum(x => Math.Pow(x, 3));\n        long zerosSum4 = zeros\
    \ * arr.Sum(x => Math.Pow(x, 3));\n        long onesAvg4 = ones * arr.Average(x\
    \ => Math.Pow(x, 3));\n        long zerosAvg", "        var result = new List<long>();\n\
    \        foreach (var item in arr)\n        {\n            var bin = Convert.ToString(item,\
    \ 2);\n            var count = bin.Count(x => x == '1');\n            result.Add(count);\n\
    \        }\n        return result.OrderBy(x => x).ToList();", "        long ones\
    \ = arr.Sum(x => x % 2);\n        long zeros = arr.Sum(x => x == 0);\n       \
    \ long maxOnes = arr.Max(x => x % 2);\n        long maxZeros = arr.Max(x => x\
    \ == 0);\n        long maxOnesZeros = maxOnes - maxZeros;\n        long maxOnesOnes\
    \ = maxOnes - ones;\n        long maxOnesZeroOnes = maxOnes - zeros;\n       \
    \ long maxOnesZeroZeros = maxOnes - maxZeros;\n        long maxOnesOneZeros =\
    \ maxOnes - ones;\n        long maxOnesOneOnes = maxOnes - ones;\n        long\
    \ maxOnesOneZeroOnes = maxOnes - ones;\n        long maxOnesOneZeroZeros = maxOnes\
    \ - ones;\n        long maxOnesOneOneZeros = maxOnes - ones;\n        long maxOnesOneOneOnes\
    \ = maxOnes - ones;\n        long maxOnesOneOneZeroOnes = maxOnes - ones;\n  \
    \      long maxOnesOneOneZeroZeros = maxOnes - ones;\n        long maxOnesOneOneOneZeros\
    \ = maxOnes - ones;\n        long maxOnesOneOneOneOnes = maxOnes - ones;\n   \
    \     long maxOnesOneOneOneZeroOnes = maxOnes - ones;\n        long maxOnesOneOneOneZeroZeros\
    \ = maxOnes - ones;\n        long maxOnesOneOneOneOneZeros = maxOnes - ones;\n\
    \        long maxOnesOneOneOneOneOnes = maxOnes - ones;\n        long maxOnesOneOneOneOneZeroOnes\
    \ = maxOnes - ones;\n        long maxOnesOneOneOneOneZeroZeros = maxOnes - ones;\n\
    \        long maxOnesOneOneOneOneOneZeros = maxOnes - ones;\n        long maxOnesOneOneOneOneOneOnes\
    \ = maxOnes - ones;\n        long maxOnesOneOneOneOneOneZeroOnes = maxOnes - ones;\n\
    \        long maxOnesOneOneOneOneOneZeros = maxOnes - ones;\n        long maxOnesOneOneOneOneOneOnes\
    \ = maxOnes - ones;\n        long maxOnesOneOneOneOneOneZeroOnes = maxOnes - ones;\n\
    \        long maxOnesOneOneOneOneOneOneZeros = maxOnes - ones;\n        long maxOnesOneOneOneOneOneOneOnes\
    \ = maxOne", "        long ones = 0;\n        long zeros = 0;\n        long max\
    \ = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n       \
    \         ones++;\n            }\n            if (i == 0) {\n                zeros++;\n\
    \            }\n            if (i > max) {\n                max = i;\n       \
    \     }\n        }\n        List<long> result = new List<long>();\n        if\
    \ (ones > zeros) {\n            long temp = ones;\n            ones = zeros;\n\
    \            zeros = temp;\n        }\n        long onesMax = ones;\n        long\
    \ zerosMax = zeros;\n        long maxOnes = 0;\n        long maxZeros = 0;\n \
    \       long maxOnesMax = 0;\n        long maxZerosMax = 0;\n        long maxOnesMax2\
    \ = 0;\n        long maxZerosMax2 = 0;\n        long maxOnesMax3 = 0;\n      \
    \  long maxZerosMax3 = 0;\n        long maxOnesMax4 = 0;\n        long maxZerosMax4\
    \ = 0;\n        long maxOnesMax5 = 0;\n        long maxZerosMax5 = 0;\n      \
    \  long maxOnesMax6 = 0;\n        long maxZerosMax6 = 0;\n        long maxOnesMax7\
    \ = 0;\n        long maxZerosMax7 = 0;\n        long maxOnesMax8 = 0;\n      \
    \  long maxZerosMax8 = 0;\n        long maxOnesMax9 = 0;\n        long maxZerosMax9\
    \ = 0;\n        long maxOnesMax10 = 0;\n        long maxZerosMax10 = 0;\n    \
    \    long maxOnesMax11 = 0;\n        long maxZerosMax11 = 0;\n        long maxOnesMax12\
    \ = 0;\n        long maxZerosMax12 = 0;\n        long maxOnesMax13 = 0;\n    \
    \    long maxZerosMax13 = 0;\n        long maxOnesMax14 = 0;\n        long maxZerosMax14\
    \ = 0;\n        long maxOnesMax15 = 0;\n        long maxZerosMax15 = 0;\n    \
    \    long maxOnesMax16 = 0;\n        long maxZerosMax16 = 0;\n        long maxOnesMax17\
    \ = 0;\n        long maxZerosMax17 = 0;\n        long maxOnesMax18 = 0;\n    \
    \    long maxZerosMax18 = 0;\n        long maxOnesMax19 = 0;\n        long maxZerosMax19\
    \ = 0;\n        long maxOnesMax20 = 0;\n        long maxZerosMax20 = 0;\n    \
    \    long maxOnesMax21 = 0;\n        long maxZerosMax21 = 0;\n        long ",
  "        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  foreach (long n in arr) {\n            if (n == 1) ones++;\n            else\
    \ if (n == 0) zeros++;\n            else if (n > max) max = n;\n        }\n  \
    \      List<long> result = new List<long>();\n        long onesMax = ones;\n \
    \       long zerosMax = zeros;\n        long maxMax = max;\n        long onesMin\
    \ = ones;\n        long zerosMin = zeros;\n        long maxMin = max;\n      \
    \  long onesCur = 0;\n        long zerosCur = 0;\n        long maxCur = max;\n\
    \        long onesNext = 0;\n        long zerosNext = 0;\n        long maxNext\
    \ = max;\n        long onesPrev = 0;\n        long zerosPrev = 0;\n        long\
    \ maxPrev = 0;\n        long onesCurMax = 0;\n        long zerosCurMax = 0;\n\
    \        long maxCurMax = max;\n        long onesCurMin = 0;\n        long zerosCurMin\
    \ = 0;\n        long maxCurMin = max;\n        long onesNextMax = 0;\n       \
    \ long zerosNextMax = 0;\n        long maxNextMax = max;\n        long onesNextMin\
    \ = 0;\n        long zerosNextMin = 0;\n        long maxNextMin = max;\n     \
    \   long onesPrevMax = 0;\n        long zerosPrevMax = 0;\n        long maxPrevMax\
    \ = max;\n        long onesPrevMin = 0;\n        long zerosPrevMin = 0;\n    \
    \    long maxPrevMin = max;\n        long onesCurMaxMin = 0;\n        long zerosCurMaxMin\
    \ = 0;\n        long maxCurMaxMin = max;\n        long onesCurMinMax = 0;\n  \
    \      long zerosCurMinMax = 0;\n        long maxCurMinMax = max;\n        long\
    \ onesNextMaxMin = 0;\n        long zerosNextMaxMin = 0;\n        long maxNextMaxMin\
    \ = max;\n        long onesNextMinMax = 0;\n        long zerosNextMinMax = 0;\n\
    \        long maxNextMinMax = max;\n        long onesPrevMaxMin = 0;\n       \
    \ long zerosPrevMaxMin = 0;\n        long maxPrevMaxMin = max;\n        long onesPrevMinMax\
    \ = 0;\n        long zerosPrevMinMax = 0;\n        long maxPrevMinMax = max;\n\
    \        long onesCurMaxMinMinMax = 0;\n        long zerosCurMaxMinMax = 0;\n\
    \        long maxCurMaxMinMax = max;\n        long onesCurMinMaxMin", "      \
    \  long ones = 0;\n        long zeros = 0;\n        long max = 0;\n        long\
    \ min = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n   \
    \             ones++;\n            }\n            if (i == 0) {\n            \
    \    zeros++;\n            }\n            if (i > max) {\n                max\
    \ = i;\n            }\n            if (i < min) {\n                min = i;\n\
    \            }\n        }\n        List<long> result = new List<long>();\n   \
    \     if (ones > zeros) {\n            long temp = 0;\n            long temp2\
    \ = 0;\n            long temp3 = 0;\n            long temp4 = 0;\n           \
    \ long temp5 = 0;\n            long temp6 = 0;\n            long temp7 = 0;\n\
    \            long temp8 = 0;\n            long temp9 = 0;\n            long temp10\
    \ = 0;\n            long temp11 = 0;\n            long temp12 = 0;\n         \
    \   long temp13 = 0;\n            long temp14 = 0;\n            long temp15 =\
    \ 0;\n            long temp16 = 0;\n            long temp17 = 0;\n           \
    \ long temp18 = 0;\n            long temp19 = 0;\n            long temp20 = 0;\n\
    \            long temp21 = 0;\n            long temp22 = 0;\n            long\
    \ temp23 = 0;\n            long temp24 = 0;\n            long temp25 = 0;\n  \
    \          long temp26 = 0;\n            long temp27 = 0;\n            long temp28\
    \ = 0;\n            long temp29 = 0;\n            long temp30 = 0;\n         \
    \   long temp31 = 0;\n            long temp32 = 0;\n            long temp33 =\
    \ 0;\n            long temp34 = 0;\n            long temp35 = 0;\n           \
    \ long temp36 = 0;\n            long temp37 = 0;\n            long temp38 = 0;\n\
    \            long temp39 = 0;\n            long temp40 = 0;\n            long\
    \ temp41 = 0;\n            long temp42 = 0;\n            long temp43 = 0;\n  \
    \          long temp44 = 0;\n            long temp45 = 0;\n            long temp46\
    \ = 0;\n            long temp47 = 0;\n            long temp48 = 0;\n         \
    \   long temp49 = 0;\n            long temp50 = 0;\n            long temp51 =\
    \ 0;\n            long temp52 = 0;\n            long temp53 = 0;\n           \
    \ long temp54 = 0;\n            long temp55 = 0;\n            long temp56 = 0;\n\
    \            long temp57 = 0;\n            long temp58 = 0;\n            long\
    \ temp59 = 0;\n            long temp60 = 0;\n            long temp61 = 0;\n  \
    \          long temp62 = 0;\n            long temp63 = 0;\n            long temp64\
    \ = 0;\n            long temp65 = 0;\n            long temp66 = 0;\n         \
    \   long temp67 = 0;\n            long temp68 = 0;\n            long temp69 =\
    \ 0;\n            long temp70 = 0;\n            long temp71 = 0;\n           \
    \ long temp", "        if (arr.Count < 2) return arr;\n        long ones = 0;\n\
    \        long zeros = 0;\n        long max = 0;\n        foreach (long i in arr)\
    \ {\n            if (i == 1) ones++;\n            else if (i == 0) zeros++;\n\
    \            else if (i > max) max = i;\n        }\n        List<long> result\
    \ = new List<long>();\n        long onesCount = 0;\n        long zerosCount =\
    \ 0;\n        long maxCount = 0;\n        foreach (long i in arr) {\n        \
    \    if (i == 1) onesCount++;\n            else if (i == 0) zerosCount++;\n  \
    \          else if (i > maxCount) maxCount = i;\n        }\n        long onesSum\
    \ = 0;\n        long zerosSum = 0;\n        long maxSum = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) onesSum += i;\n            else if\
    \ (i == 0) zerosSum += i;\n            else if (i > maxSum) maxSum = i;\n    \
    \    }\n        long onesSum2 = onesSum * onesSum;\n        long zerosSum2 = zerosSum\
    \ * zerosSum;\n        long maxSum2 = maxSum * maxSum;\n        long onesSum3\
    \ = onesSum2 * onesSum;\n        long zerosSum3 = zerosSum2 * zerosSum;\n    \
    \    long maxSum3 = maxSum2 * maxSum;\n        long onesSum4 = onesSum3 * onesSum;\n\
    \        long zerosSum4 = zerosSum3 * zerosSum;\n        long maxSum4 = maxSum3\
    \ * maxSum;\n        long onesSum5 = onesSum4 * onesSum;\n        long zerosSum5\
    \ = zerosSum4 * zerosSum;\n        long maxSum5 = maxSum4 * maxSum;\n        long\
    \ onesSum6 = onesSum5 * onesSum;\n        long zerosSum6 = zerosSum5 * zerosSum;\n\
    \        long maxSum6 = maxSum5 * maxSum;\n        long onesSum7 = onesSum6 *\
    \ onesSum;\n        long zerosSum7 = zerosSum6 * zerosSum;\n        long maxSum7\
    \ = maxSum6 * maxSum;\n        long onesSum8 = onesSum7 * onesSum;\n        long\
    \ zerosSum8 = zerosSum7 * zerosSum;\n        long maxSum8 = maxSum7 * maxSum;\n\
    \        long onesSum9 = onesSum8 * onesSum;\n        long zerosSum9 = zerosSum8\
    \ * zerosSum;\n        long maxSum9 = maxSum8 * maxSum;\n        long onesSum10\
    \ = onesSum9 * onesSum;\n        long zeros", "        long ones = 0;\n      \
    \  long zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n\
    \            if (i == 1) {\n                ones++;\n            }\n         \
    \   if (i == 0) {\n                zeros++;\n            }\n            if (i\
    \ > max) {\n                max = i;\n            }\n        }\n        long onesMax\
    \ = ones * max;\n        long zerosMax = zeros * max;\n        long maxOnes =\
    \ ones * max;\n        long maxZeros = zeros * max;\n        long maxOnesMax =\
    \ onesMax * max;\n        long maxZerosMax = zerosMax * max;\n        long maxOnesMaxOnes\
    \ = onesMax * max * max;\n        long maxZerosMaxZeros = zerosMax * max * max;\n\
    \        long maxOnesMaxOnesMax = onesMax * max * max * max;\n        long maxZerosMaxZerosMax\
    \ = zerosMax * max * max * max;\n        long maxOnesMaxOnesMaxOnes = onesMax\
    \ * max * max * max * max;\n        long maxZerosMaxZerosMaxZeros = zerosMax *\
    \ max * max * max * max;\n        long maxOnesMaxOnesMaxOnesMax = onesMax * max\
    \ * max * max * max * max;\n        long maxZerosMaxZerosMaxZerosMax = zerosMax\
    \ * max * max * max * max * max;\n        long maxOnesMaxOnesMaxOnesMaxOnes =\
    \ onesMax * max * max * max * max * max * max;\n        long maxZerosMaxZerosMaxZerosMaxZeros\
    \ = zerosMax * max * max * max * max * max * max;\n        long maxOnesMaxOnesMaxOnesMaxOnesMax\
    \ = onesMax * max * max * max * max * max * max * max;\n        long maxZerosMaxZerosMaxZerosMaxZerosMax\
    \ = zerosMax * max * max * max * max * max * max * max;\n        long maxOnesMaxOnesMaxOnesMaxOnesMaxOnes\
    \ = onesMax * max * max * max * max * max * max * max * max;\n        long maxZerosMaxZerosMaxZerosMaxZerosMaxZeros\
    \ = zerosMax * max * max * ", "        long ones = 0;\n        long zeros = 0;\n\
    \        long max = 0;\n        foreach (long i in arr) {\n            if (i ==\
    \ 1) {\n                ones++;\n            }\n            if (i == 0) {\n  \
    \              zeros++;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        long onesMax = ones;\n        long zerosMax = zeros;\n        long maxMax\
    \ = max;\n        long onesMin = ones;\n        long zerosMin = zeros;\n     \
    \   long maxMin = max;\n        long onesSum = 0;\n        long zerosSum = 0;\n\
    \        long maxSum = 0;\n        long onesAvg = 0;\n        long zerosAvg =\
    \ 0;\n        long maxAvg = 0;\n        long onesDiff = 0;\n        long zerosDiff\
    \ = 0;\n        long maxDiff = 0;\n        long onesSumDiff = 0;\n        long\
    \ zerosSumDiff = 0;\n        long maxSumDiff = 0;\n        long onesAvgDiff =\
    \ 0;\n        long zerosAvgDiff = 0;\n        long maxAvgDiff = 0;\n        long\
    \ onesDiffDiff = 0;\n        long zerosDiffDiff = 0;\n        long maxDiffDiff\
    \ = 0;\n        long onesSumDiffDiff = 0;\n        long zerosSumDiffDiff = 0;\n\
    \        long maxSumDiffDiff = 0;\n        long onesAvgDiffDiff = 0;\n       \
    \ long zerosAvgDiff = 0;\n        long maxAvgDiff = 0;\n        long onesDiffDiffDiff\
    \ = 0;\n        long zerosDiffDiff = 0;\n        long maxDiffDiff = 0;\n     \
    \   long onesSumDiffDiff = 0;\n        long zerosSumDiffDiff = 0;\n        long\
    \ maxSumDiffDiff = 0;\n        long onesAvgDiffDiff = 0;\n        long zerosAvgDiff\
    \ = 0;\n        long maxAvgDiff = 0;\n        long onesDiffDiffDiff = 0;\n   \
    \     long zerosDiffDiff = 0;\n        long maxDiffDiff = 0;\n        long onesSumDiffDiff\
    \ = 0;\n        long zerosSumDiffDiff = 0;\n        long maxSumDiffDiff = 0;\n\
    \        long onesAvgDiffDiff = 0;\n        long zerosAvgDiff = 0;\n        long\
    \ maxAvgDiff = 0;\n        long onesDiffDiffDiff = 0;\n        long zerosDiffDiff\
    \ = 0;\n        long maxDiffDiff = 0;\n        long onesSumDiffDiff = 0;\n   \
    \     long zerosSumDiffDiff = 0;\n        long maxSumDiffDiff = 0;\n        long\
    \ onesAvgDiffDiff = 0;\n        long zerosAvgDiff = 0;\n        long maxAvgDiff\
    \ = 0;\n        long onesDiffDiffDiff = 0;\n        long zeros", "        long\
    \ ones = 0;\n        long zeros = 0;\n        long max = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                ones++;\n          \
    \  }\n            if (i == 0) {\n                zeros++;\n            }\n   \
    \         if (i > max) {\n                max = i;\n            }\n        }\n\
    \        long onesMax = ones > zeros ? ones : zeros;\n        long zerosMax =\
    \ zeros > ones ? zeros : ones;\n        long maxMax = max > onesMax ? max : onesMax;\n\
    \        List<long> result = new List<long>();\n        long onesSum = 0;\n  \
    \      long zerosSum = 0;\n        long maxSum = 0;\n        long onesMaxSum =\
    \ 0;\n        long zerosMaxSum = 0;\n        long maxMaxSum = 0;\n        long\
    \ onesSumMax = 0;\n        long zerosSumMax = 0;\n        long maxSumMax = 0;\n\
    \        long onesMaxSumMax = 0;\n        long zerosMaxSumMax = 0;\n        long\
    \ maxMaxSumMax = 0;\n        long onesSumMaxMax = 0;\n        long zerosSumMaxMax\
    \ = 0;\n        long maxSumMaxMax = 0;\n        long onesMaxSumMaxMax = 0;\n \
    \       long zerosMaxSumMaxMax = 0;\n        long maxMaxSumMaxMax = 0;\n     \
    \   long onesSumMaxMaxMax = 0;\n        long zerosSumMaxMaxMax = 0;\n        long\
    \ maxSumMaxMaxMax = 0;\n        long onesMaxSumMaxMax = 0;\n        long zerosMaxSumMaxMax\
    \ = 0;\n        long maxMaxSumMaxMax = 0;\n        long onesSumMaxMaxMax = 0;\n\
    \        long zerosSumMaxMaxMax = 0;\n        long maxSumMaxMaxMax = 0;\n    \
    \    long onesMaxSumMaxMax = 0;\n        long zerosMaxSumMaxMax = 0;\n       \
    \ long maxMaxSumMaxMax = 0;\n        long onesSumMaxMaxMax = 0;\n        long\
    \ zerosSumMaxMaxMax = 0;\n        long maxSumMaxMaxMax = 0;\n        long onesMaxSumMaxMax\
    \ = 0;\n        long zerosMaxSumMaxMax = 0;\n        long maxMaxSumMaxMax = 0;\n\
    \        long onesSumMaxMaxMax = 0;\n        long zerosSumMaxMaxMax = 0;\n   \
    \     long maxSumMaxMaxMax = 0;\n        long onesMaxSumMaxMax = 0;\n        long\
    \ zerosMaxSumMaxMax = 0;\n        long maxMaxSumMaxMax = 0;\n        long onesSumMaxMaxMax\
    \ = 0;\n        long zerosSumMaxMaxMax = 0;\n        long maxSumMaxMaxMax = 0;\n\
    \        long onesMaxSum", "        List<long> result = new List<long>();\n  \
    \      long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  foreach (long i in arr) {\n            ones += i;\n            zeros -= i;\n\
    \            if (ones > max) {\n                max = ones;\n            }\n \
    \       }\n        long onesCount = 0;\n        long zerosCount = 0;\n       \
    \ long maxCount = 0;\n        foreach (long i in arr) {\n            onesCount\
    \ += i;\n            zerosCount -= i;\n            if (onesCount > maxCount) {\n\
    \                maxCount = onesCount;\n            }\n            if (zerosCount\
    \ > maxCount) {\n                maxCount = zerosCount;\n            }\n     \
    \   }\n        long onesCount2 = 0;\n        long zerosCount2 = 0;\n        long\
    \ maxCount2 = 0;\n        foreach (long i in arr) {\n            onesCount2 +=\
    \ i;\n            zerosCount2 -= i;\n            if (onesCount2 > maxCount2) {\n\
    \                maxCount2 = onesCount2;\n            }\n            if (zerosCount2\
    \ > maxCount2) {\n                maxCount2 = zerosCount2;\n            }\n  \
    \      }\n        long onesCount3 = 0;\n        long zerosCount3 = 0;\n      \
    \  long maxCount3 = 0;\n        foreach (long i in arr) {\n            onesCount3\
    \ += i;\n            zerosCount3 -= i;\n            if (onesCount3 > maxCount3)\
    \ {\n                maxCount3 = onesCount3;\n            }\n            if (zerosCount3\
    \ > maxCount3) {\n                maxCount3 = zerosCount3;\n            }\n  \
    \      }\n        long onesCount4 = 0;\n        long zerosCount4 = 0;\n      \
    \  long maxCount4 = 0;\n        foreach (long i in arr) {\n            onesCount4\
    \ += i;\n            zerosCount4 -= i;\n            if (onesCount4 > maxCount4)\
    \ {\n                maxCount4 = onesCount4;\n            }\n            if (zerosCount4\
    \ > maxCount4) {\n                maxCount4 = zerosCount4;\n            }\n  \
    \      }\n        long onesCount5 = 0;\n        long zerosCount5 = 0;\n      \
    \  long maxCount5 = 0;\n        foreach (long i in arr) {\n            onesCount5\
    \ += i;\n            zerosCount5 -= i;\n            if (onesCount5 > maxCount5)\
    \ {\n                maxCount5 = onesCount5;\n            }\n            if (zerosCount5\
    \ > maxCount5) {\n                maxCount5 = zerosCount5;\n            }\n  \
    \      }\n        long onesCount6 = 0;\n        long zerosCount6 = 0;\n      \
    \  long maxCount6 = 0;\n        foreach (long i in arr) {\n            onesCount6\
    \ += i;\n            zerosCount6", "        long ones = 0;\n        long zeros\
    \ = 0;\n        long max = 0;\n        foreach (long i in arr) {\n           \
    \ if (i == 1) {\n                ones++;\n            }\n            if (i ==\
    \ 0) {\n                zeros++;\n            }\n            if (i > max) {\n\
    \                max = i;\n            }\n        }\n        long onesMax = ones\
    \ * max;\n        long zerosMax = zeros * max;\n        long onesMin = ones *\
    \ min - max;\n        long zerosMin = zeros * min - max;\n        long onesMaxMin\
    \ = onesMax * min;\n        long zerosMaxMin = zerosMax * min;\n        long onesMaxMinZeros\
    \ = onesMaxMin - zerosMax;\n        long zerosMaxMinZeros = zerosMaxMin - zerosMax;\n\
    \        long onesMinZeros = onesMin - zeros;\n        long zerosMinZeros = zerosMin\
    \ - zeros;\n        long onesMinZerosZeros = onesMinZeros - zerosMin;\n      \
    \  long zerosMinZerosZeros = zerosMinZeros - zerosMin;\n        long onesMinZerosZerosZeros\
    \ = onesMinZerosZeros - zerosMinZeros;\n        long zerosMinZerosZerosZeros =\
    \ zerosMinZerosZeros - zerosMinZeros;\n        long onesMinZerosZerosZerosZeros\
    \ = onesMinZerosZerosZeros - zerosMinZerosZeros;\n        long zerosMinZerosZerosZerosZeros\
    \ = zerosMinZerosZerosZeros - zerosMinZerosZeros;\n        long onesMinZerosZerosZerosZerosZeros\
    \ = onesMinZerosZerosZerosZeros - zerosMinZerosZerosZeros;\n        long zerosMinZerosZerosZerosZerosZeros\
    \ = zerosMinZerosZerosZerosZeros - zerosMinZerosZerosZeros;\n        long onesMinZerosZerosZerosZerosZerosZeros\
    \ = onesMinZerosZerosZerosZerosZeros - zerosMinZerosZerosZerosZeros;\n       \
    \ long zerosMinZerosZerosZerosZerosZeros", "        long ones = 0;\n        long\
    \ zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n     \
    \       if (i == 1) {\n                ones++;\n            } else {\n       \
    \         zeros++;\n            }\n            if (ones > zeros) {\n         \
    \       max = i;\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        foreach (long i in arr) {\n            if (i == 1) {\n              \
    \  result.Add(i);\n            } else if (i == 0) {\n                result.Add(max);\n\
    \            } else {\n                result.Add(zeros);\n            }\n   \
    \     }\n        return result;", "        long ones = 0;\n        long zeros\
    \ = 0;\n        long max = 0;\n        long min = 0;\n        foreach (long i\
    \ in arr) {\n            if (i == 1) {\n                ones++;\n            }\n\
    \            if (i == 0) {\n                zeros++;\n            }\n        \
    \    if (i > max) {\n                max = i;\n            }\n            if (i\
    \ < min) {\n                min = i;\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        if (ones > zeros) {\n            result.Add(min);\n\
    \            result.AddRange(arr.Where(i => i == min).OrderBy(i => i).Take(ones\
    \ - 1).ToList());\n            result.Add(max);\n            result.AddRange(arr.Where(i\
    \ => i == max).OrderBy(i => i).Take(zeros - 1).ToList());\n        } else {\n\
    \            result.Add(max);\n            result.AddRange(arr.Where(i => i ==\
    \ max).OrderBy(i => i).Take(ones - 1).ToList());\n            result.Add(min);\n\
    \            result.AddRange(arr.Where(i => i == min).OrderBy(i => i).Take(zeros\
    \ - 1).ToList());\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long ones = 0;\n        long zeros = 0;\n     \
    \   foreach (long i in arr) {\n            if (i == 1) {\n                ones++;\n\
    \            } else {\n                zeros++;\n            }\n        }\n  \
    \      if (ones > zeros) {\n            long maxOnes = ones;\n            long\
    \ maxZeros = zeros;\n            long maxOnesIndex = -1;\n            long maxZerosIndex\
    \ = -1;\n            foreach (long i in arr) {\n                if (i == 1) {\n\
    \                    maxOnesIndex = arr.IndexOf(i);\n                    maxOnes\
    \ = Math.Max(maxOnes, i);\n                } else {\n                    maxZerosIndex\
    \ = arr.IndexOf(i);\n                    maxZeros = Math.Max(maxZeros, i);\n \
    \               }\n            }\n            long maxOnesValue = maxOnes;\n \
    \           long maxZerosValue = maxZeros;\n            long maxOnesIndexValue\
    \ = maxOnesIndex;\n            long maxZerosIndexValue = maxZerosIndex;\n    \
    \        long maxOnesValueIndex = -1;\n            long maxZerosValueIndex = -1;\n\
    \            long maxOnesIndexValueIndex = -1;\n            long maxZerosIndexValueIndex\
    \ = -1;\n            foreach (long i in arr) {\n                if (i == 1) {\n\
    \                    maxOnesValueIndex = arr.IndexOf(i);\n                   \
    \ maxOnesValue = Math.Max(maxOnesValue, i);\n                } else {\n      \
    \              maxZerosValueIndex = arr.IndexOf(i);\n                    maxZerosValue\
    \ = Math.Max(maxZerosValue, i);\n                }\n            }\n          \
    \  long maxOnesValueIndex = arr.IndexOf(maxOnesValue);\n            long maxZerosValueIndex\
    \ = arr.IndexOf(maxZerosValue);\n            long maxOnesIndexValueIndex = arr.IndexOf(maxOnesIndexValue);\n\
    \            long maxZerosIndexValueIndex = arr.IndexOf(maxZerosIndexValue);\n\
    \            long maxOnesValueIndexValue = maxOnesValueIndex;\n            long\
    \ maxZerosValueIndexValue = maxZerosValueIndex;\n            long maxOnesIndexValueIndexValue\
    \ = maxOnesIndexValueIndex;\n            long maxZerosIndexValueIndexValue = maxZerosIndexValueIndex;\n\
    \            long maxOnesValueIndexValueIndex = arr.IndexOf(maxOnesValueIndexValue);\n\
    \            long maxZerosValueIndexValueIndex = arr.IndexOf(maxZerosValueIndexValue);\n\
    \            long maxOnesIndexValueIndexValueIndex = arr.IndexOf(maxOnesIndexValueIndexValue);\n\
    \            long maxZerosIndexValueIndexValueIndex = arr.Index", "        long\
    \ ones = arr.Sum(x => x & 1);\n        long zeros = arr.Sum(x => ~x);\n      \
    \  if (ones == zeros) {\n            return arr;\n        }\n        long maxOnes\
    \ = ones;\n        long maxZeros = zeros;\n        long maxDiff = maxOnes - maxZeros;\n\
    \        long minDiff = maxZeros - maxOnes;\n        long maxDiffIndex = -1;\n\
    \        long minDiffIndex = -1;\n        long maxDiffIndex2 = -1;\n        long\
    \ minDiffIndex2 = -1;\n        long maxDiffIndex3 = -1;\n        long minDiffIndex3\
    \ = -1;\n        long maxDiffIndex4 = -1;\n        long minDiffIndex4 = -1;\n\
    \        long maxDiffIndex5 = -1;\n        long minDiffIndex5 = -1;\n        long\
    \ maxDiffIndex6 = -1;\n        long minDiffIndex6 = -1;\n        long maxDiffIndex7\
    \ = -1;\n        long minDiffIndex7 = -1;\n        long maxDiffIndex8 = -1;\n\
    \        long minDiffIndex8 = -1;\n        long maxDiffIndex9 = -1;\n        long\
    \ minDiffIndex9 = -1;\n        long maxDiffIndex10 = -1;\n        long minDiffIndex10\
    \ = -1;\n        long maxDiffIndex11 = -1;\n        long minDiffIndex11 = -1;\n\
    \        long maxDiffIndex12 = -1;\n        long minDiffIndex12 = -1;\n      \
    \  long maxDiffIndex13 = -1;\n        long minDiffIndex13 = -1;\n        long\
    \ maxDiffIndex14 = -1;\n        long minDiffIndex14 = -1;\n        long maxDiffIndex15\
    \ = -1;\n        long minDiffIndex15 = -1;\n        long maxDiffIndex16 = -1;\n\
    \        long minDiffIndex16 = -1;\n        long maxDiffIndex17 = -1;\n      \
    \  long minDiffIndex17 = -1;\n        long maxDiffIndex18 = -1;\n        long\
    \ minDiffIndex18 = -1;\n        long maxDiffIndex19 = -1;\n        long minDiffIndex19\
    \ = -1;\n        long maxDiffIndex20 = -1;\n        long minDiffIndex20 = -1;\n\
    \        long maxDiffIndex21 = -1;\n        long minDiffIndex21 = -1;\n      \
    \  long maxDiffIndex22 = -1;\n        long minDiffIndex22 = -1;\n        long\
    \ maxDiffIndex23 = -1;\n        long minDiffIndex23 = -1;\n        long maxDiffIndex24\
    \ = -1;\n        long minDiffIndex24 = -1;\n        long maxDiffIndex25 = -1;\n\
    \        long minDiffIndex25 = -1;\n        long maxDiffIndex26 = -1;\n", "  \
    \      long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  long min = long.MaxValue;\n        foreach (long i in arr) {\n            if\
    \ (i == 1) {\n                ones++;\n            }\n            else if (i ==\
    \ 0) {\n                zeros++;\n            }\n            else {\n        \
    \        if (ones > zeros) {\n                    max = i;\n                }\n\
    \                else {\n                    min = i;\n                }\n   \
    \         }\n        }\n        List<long> result = new List<long>();\n      \
    \  if (ones > zeros) {\n            long temp = min;\n            while (ones\
    \ > zeros) {\n                result.Add(temp);\n                ones--;\n   \
    \             zeros++;\n                temp = ones;\n            }\n        \
    \    result.Add(temp);\n        }\n        else {\n            long temp = max;\n\
    \            while (ones < zeros) {\n                result.Add(temp);\n     \
    \           zeros--;\n                ones++;\n                temp = zeros;\n\
    \            }\n            result.Add(temp);\n        }\n        return result;",
  "        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  long min = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n\
    \                ones++;\n            } else if (i == 0) {\n                zeros++;\n\
    \            } else {\n                if (ones > zeros) {\n                 \
    \   max = i;\n                } else {\n                    min = i;\n       \
    \         }\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        if (ones > zeros) {\n            foreach (long i in arr) {\n        \
    \        if (i == 1) {\n                    result.Add(ones);\n              \
    \  } else if (i == 0) {\n                    result.Add(zeros);\n            \
    \    } else {\n                    if (ones > zeros) {\n                     \
    \   if (i == max) {\n                            result.Add(max);\n          \
    \              } else if (i == min) {\n                            result.Add(min);\n\
    \                        } else {\n                            result.Add(i);\n\
    \                        }\n                    } else {\n                   \
    \     if (i == max) {\n                            result.Add(min);\n        \
    \                } else if (i == min) {\n                            result.Add(max);\n\
    \                        } else {\n                            result.Add(i);\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        } else {\n            foreach (long i in arr) {\n           \
    \     if (i == 1) {\n                    result.Add(zeros);\n                }\
    \ else if (i == 0) {\n                    result.Add(ones);\n                }\
    \ else {\n                    if (ones > zeros) {\n                        if\
    \ (i == max) {\n                            result.Add(min);\n               \
    \         } else if (i == min) {\n                            result.Add(max);\n\
    \                        } else {\n                            result.Add(i);\n\
    \                        }\n                    } else {\n                   \
    \     if (i == max) {\n                            result.Add(max);\n        \
    \                } else if (i == min) {\n                            result.Add(min);\n\
    \                        } else {\n                            result.Add(i);\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return result;", "        long ones = 0;\n       \
    \ long zeros = 0;\n        long max = 0;\n        long min = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                ones++;\n    \
    \        }\n            if (i == 0) {\n                zeros++;\n            }\n\
    \            if (i > max) {\n                max = i;\n            }\n       \
    \     if (i < min) {\n                min = i;\n            }\n        }\n   \
    \     long onesMax = ones * max;\n        long zerosMax = zeros * max;\n     \
    \   long onesMin = ones * min;\n        long zerosMin = zeros * min;\n       \
    \ long onesDiff = onesMax - onesMin;\n        long zerosDiff = zerosMax - zerosMin;\n\
    \        long onesDiffMin = onesMax - onesMin;\n        long zerosDiffMin = zerosMax\
    \ - zerosMin;\n        long onesDiffMax = onesMax - onesMin;\n        long zerosDiffMax\
    \ = zerosMax - zerosMin;\n        long onesDiffMinMax = onesMax - onesMin;\n \
    \       long zerosDiffMinMax = zerosMax - zerosMin;\n        long onesDiffMaxMin\
    \ = onesMax - onesMin;\n        long zerosDiffMaxMin = zerosMax - zerosMin;\n\
    \        long onesDiffMinMaxMin = onesMax - onesMin;\n        long zerosDiffMinMaxMin\
    \ = zerosMax - zerosMin;\n        long onesDiffMaxMinMin = onesMax - onesMin;\n\
    \        long zerosDiffMaxMinMin = zerosMax - zerosMin;\n        long onesDiffMinMaxMin\
    \ = onesMax - onesMin;\n        long zerosDiffMinMaxMin = zerosMax - zerosMin;\n\
    \        long onesDiffMaxMinMin = onesMax - onesMin;\n        long zerosDiffMaxMinMin\
    \ = zerosMax - zerosMin;\n        long onesDiffMinMaxMin = onesMax - onesMin;\n\
    \        long zerosDiffMinMaxMin = zerosMax - zerosMin;\n        long onesDiffMaxMinMin\
    \ = onesMax - onesMin;\n        long zerosDiffMaxMinMin = zerosMax - zerosMin;\n\
    \        long onesDiffMinMaxMin = onesMax - onesMin;\n        long zerosDiffMinMaxMin\
    \ = zerosMax - zerosMin;\n        long onesDiffMaxMinMin = onesMax - onesMin;\n\
    \        long ", "        if (arr.Count < 2)\n            return arr;\n      \
    \  long ones = 0;\n        long zeros = 0;\n        long max = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1)\n                ones++;\n      \
    \      else\n                zeros++;\n            if (ones > zeros)\n       \
    \         max = i;\n        }\n        List<long> result = new List<long>();\n\
    \        long onesCount = 0;\n        long zerosCount = 0;\n        long maxCount\
    \ = 0;\n        foreach (long i in arr) {\n            if (i == 1)\n         \
    \       onesCount++;\n            else\n                zerosCount++;\n      \
    \      if (onesCount > zerosCount)\n                maxCount = i;\n        }\n\
    \        if (onesCount > zerosCount)\n            result.Add(maxCount);\n    \
    \    if (onesCount < zerosCount)\n            result.Add(max);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long ones\
    \ = 0;\n        long zeros = 0;\n        long max = 0;\n        long min = 0;\n\
    \        foreach (long i in arr) {\n            if (i == 1) {\n              \
    \  ones++;\n            }\n            else if (i == 0) {\n                zeros++;\n\
    \            }\n            else {\n                if (ones > zeros) {\n    \
    \                max = i;\n                }\n                else {\n       \
    \             min = i;\n                }\n            }\n        }\n        if\
    \ (ones > zeros) {\n            max = ones;\n        }\n        else {\n     \
    \       min = zeros;\n        }\n        long temp;\n        long temp2;\n   \
    \     long temp3;\n        long temp4;\n        long temp5;\n        long temp6;\n\
    \        long temp7;\n        long temp8;\n        long temp9;\n        long temp10;\n\
    \        long temp11;\n        long temp12;\n        long temp13;\n        long\
    \ temp14;\n        long temp15;\n        long temp16;\n        long temp17;\n\
    \        long temp18;\n        long temp19;\n        long temp20;\n        long\
    \ temp21;\n        long temp22;\n        long temp23;\n        long temp24;\n\
    \        long temp25;\n        long temp26;\n        long temp27;\n        long\
    \ temp28;\n        long temp29;\n        long temp30;\n        long temp31;\n\
    \        long temp32;\n        long temp33;\n        long temp34;\n        long\
    \ temp35;\n        long temp36;\n        long temp37;\n        long temp38;\n\
    \        long temp39;\n        long temp40;\n        long temp41;\n        long\
    \ temp42;\n        long temp43;\n        long temp44;\n        long temp45;\n\
    \        long temp46;\n        long temp47;\n        long temp48;\n        long\
    \ temp49;\n        long temp50;\n        long temp51;\n        long temp52;\n\
    \        long temp53;\n        long temp54;\n        long temp55;\n        long\
    \ temp56;\n        long temp57;\n        long temp58;\n        long temp59;\n\
    \        long temp60;\n        long temp61;\n        long temp62;\n        long\
    \ temp63;\n        long temp64;\n        long temp65;\n        long temp66;\n\
    \        long temp67;\n        long temp68;\n        long temp69;\n        long\
    \ temp70;\n        long temp7", "        long ones = arr.Sum(x => x & 1);\n  \
    \      long zeros = arr.Sum(x => ~x);\n        long maxOnes = arr.Max(x => x &\
    \ 1);\n        long maxZeros = arr.Max(x => ~x);\n        long maxOnesZeros =\
    \ maxOnes - maxZeros;\n        long maxOnesOnes = maxOnes - ones;\n        long\
    \ maxOnesOnesZeros = maxOnesOnes - maxZeros;\n        long maxOnesOnesOnes = maxOnesOnes\
    \ - ones;\n        long maxOnesOnesOnesZeros = maxOnesOnesOnes - maxZeros;\n \
    \       long maxOnesOnesOnesOnes = maxOnesOnesOnes - ones;\n        long maxOnesOnesOnesOnesZeros\
    \ = maxOnesOnesOnesOnes - maxZeros;\n        long maxOnesOnesOnesOnesOnes = maxOnesOnesOnesOnes\
    \ - ones;\n        long maxOnesOnesOnesOnesZeros = maxOnesOnesOnesOnesZeros -\
    \ maxZeros;\n        long maxOnesOnesOnesOnesOnes = maxOnesOnesOnesOnesOnes -\
    \ ones;\n        long maxOnesOnesOnesOnesOnesZeros = maxOnesOnesOnesOnesOnesZeros\
    \ - maxZeros;\n        long maxOnesOnesOnesOnesOnesOnes = maxOnesOnesOnesOnesOnesOnes\
    \ - ones;\n        long maxOnesOnesOnesOnesOnesZeros = maxOnesOnesOnesOnesOnesZeros\
    \ - maxZeros;\n        long maxOnesOnesOnesOnesOnesOnes = maxOnesOnesOnesOnesOnesOnes\
    \ - ones;\n        long maxOnesOnesOnesOnesOnesZeros = maxOnesOnesOnesOnesOnesZeros\
    \ - maxZeros;\n        long maxOnesOnesOnesOnesOnesOnes = maxOnesOnesOnesOnesOnesOnes\
    \ - ones;\n        long maxOnesOnesOnesOnesOnesZeros = maxOnesOnesOnesOnesOnesZeros\
    \ - maxZeros;\n        long maxOnesOnesOnesOne", "        long ones = arr.Sum(x\
    \ => x & 1);\n        long zeros = arr.Sum(x => ~x);\n        long maxOnes = arr.Max(x\
    \ => x & 1);\n        long maxZeros = arr.Max(x => ~x);\n        long maxOnesZeros\
    \ = maxOnes - maxZeros;\n        long maxOnesOnes = maxOnes - ones;\n        long\
    \ maxOnesTwos = maxOnes - twos(maxOnes);\n        long maxOnesThrees = maxOnes\
    \ - threes(maxOnes);\n        long maxOnesFours = maxOnes - fours(maxOnes);\n\
    \        long maxOnesFives = maxOnes - fives(maxOnes);\n        long maxOnesSixes\
    \ = maxOnes - sixes(maxOnes);\n        long maxOnesSevens = maxOnes - sevens(maxOnes);\n\
    \        long maxOnesEights = maxOnes - eights(maxOnes);\n        long maxOnesNines\
    \ = maxOnes - nines(maxOnes);\n        long maxOnesTens = maxOnes - tens(maxOnes);\n\
    \        long maxOnesElevens = maxOnes - elevens(maxOnes);\n        long maxOnesTwelves\
    \ = maxOnes - twelves(maxOnes);\n        long maxOnesThirteens = maxOnes - thirteens(maxOnes);\n\
    \        long maxOnesFourteens = maxOnes - fourteens(maxOnes);\n        long maxOnesFifteens\
    \ = maxOnes - fifteens(maxOnes);\n        long maxOnesSixteens = maxOnes - sixteens(maxOnes);\n\
    \        long maxOnesSeventeens = maxOnes - seventeens(maxOnes);\n        long\
    \ maxOnesEighteens = maxOnes - eighteens(maxOnes);\n        long maxOnesNineteens\
    \ = maxOnes - nineteens(maxOnes);\n        long maxOnesTwenty = maxOnes - twenty(maxOnes);\n\
    \        long maxOnesTwentyOnes = maxOnes - twentyOnes(maxOnes);\n        long\
    \ maxOnesTwentyTwos = maxOnes - twentyTwos(maxOnes);\n        long maxOnesTwentyThrees\
    \ = maxOnes - twentyThrees(maxOnes);\n        long maxOnesTwentyFours = maxOnes\
    \ - twentyFours(maxOnes);\n", "        long ones = arr.Sum(x => x & 1);\n    \
    \    long zeros = arr.Sum(x => ~x & 1);\n        if (ones < zeros) {\n       \
    \     arr = arr.OrderBy(x => x).ToList();\n        }\n        else {\n       \
    \     arr = arr.OrderByDescending(x => x).ToList();\n        }\n        return\
    \ arr;", "        List<long> result = new List<long>();\n        long ones = 0;\n\
    \        long zeros = 0;\n        foreach (long n in arr) {\n            ones\
    \ += n;\n            zeros += (~n).ToLong();\n        }\n        if (ones > zeros)\
    \ {\n            long temp = ones;\n            ones = zeros;\n            zeros\
    \ = temp;\n        }\n        long onesCount = 0;\n        long zerosCount = 0;\n\
    \        long maxOnesCount = ones;\n        long maxZerosCount = zeros;\n    \
    \    long maxOnesCountIndex = 0;\n        long maxZerosCountIndex = 0;\n     \
    \   long maxOnesCountValue = 0;\n        long maxZerosCountValue = 0;\n      \
    \  long maxOnesCountValueIndex = 0;\n        long maxZerosCountValueIndex = 0;\n\
    \        long maxOnesCountValueValue = 0;\n        long maxZerosCountValueValue\
    \ = 0;\n        long maxOnesCountValueValueIndex = 0;\n        long maxZerosCountValueValueIndex\
    \ = 0;\n        long maxOnesCountValueValueValue = 0;\n        long maxZerosCountValueValueValue\
    \ = 0;\n        long maxOnesCountValueValueIndex = 0;\n        long maxZerosCountValueValueIndex\
    \ = 0;\n        long maxOnesCountValueValueValue = 0;\n        long maxZerosCountValueValueValue\
    \ = 0;\n        long maxOnesCountValueValueIndex = 0;\n        long maxZerosCountValueValueIndex\
    \ = 0;\n        long maxOnesCountValueValueValue = 0;\n        long maxZerosCountValueValueValue\
    \ = 0;\n        long maxOnesCountValueValueIndex = 0;\n        long maxZerosCountValueValueIndex\
    \ = 0;\n        long maxOnesCountValueValueValue = 0;\n        long maxZerosCountValueValueValue\
    \ = 0;\n        long maxOnesCountValueValueIndex = 0;\n        long maxZerosCountValueValueIndex\
    \ = 0;\n        long maxOnesCountValueValueValue = 0;\n        long maxZerosCountValueValueValue\
    \ = 0;\n        long maxOnesCountValueValueIndex = 0;\n        long maxZerosCountValueValueIndex\
    \ = 0;\n        long maxOnesCountValueValueValue = 0;\n        long maxZerosCountValueValueValue\
    \ = 0;\n        long maxOnesCountValueValueIndex = 0;\n        long maxZerosCountValueValueIndex\
    \ = 0;\n        long maxOnesCountValueValueValue = 0;\n        long maxZerosCountValueValueValue\
    \ = 0;\n        long maxOnesCountValue", "        long ones = 0;\n        long\
    \ zeros = 0;\n        long max = 0;\n        foreach (long n in arr) {\n     \
    \       ones += n;\n            zeros -= n;\n            if (ones > max) max =\
    \ ones;\n        }\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            long ones = n;\n            long zeros = max\
    \ - ones;\n            if (ones == max) result.Add(n);\n            else if (zeros\
    \ == 0) result.Add(ones);\n            else result.Add(zeros);\n        }\n  \
    \      return result;", "        long ones = arr.Sum(x => x & 1);\n        long\
    \ zeros = arr.Sum(x => ~x & 1);\n        if (ones == zeros) {\n            return\
    \ arr.OrderBy(x => x).ToList();\n        }\n        long maxOnes = arr.Max(x =>\
    \ x & 1);\n        long maxZeros = arr.Max(x => ~x & 1);\n        long maxOnesZeros\
    \ = maxOnes - maxZeros;\n        long maxOnesOnes = maxOnes - ones;\n        long\
    \ maxOnesTwos = maxOnes - twos;\n        long maxOnesThrees = maxOnes - threes;\n\
    \        long maxOnesFours = maxOnes - fours;\n        long maxOnesFives = maxOnes\
    \ - fives;\n        long maxOnesSixes = maxOnes - sixes;\n        long maxOnesSevens\
    \ = maxOnes - sevens;\n        long maxOnesEights = maxOnes - eights;\n      \
    \  long maxOnesNines = maxOnes - nines;\n        long maxOnesTens = maxOnes -\
    \ tens;\n        long maxOnesElevens = maxOnes - elevens;\n        long maxOnesTwelves\
    \ = maxOnes - twelves;\n        long maxOnesThirteens = maxOnes - thirteens;\n\
    \        long maxOnesFourteens = maxOnes - fourteens;\n        long maxOnesFifteens\
    \ = maxOnes - fifteens;\n        long maxOnesSixteens = maxOnes - sixteens;\n\
    \        long maxOnesSeventeens = maxOnes - seventeens;\n        long maxOnesEighteens\
    \ = maxOnes - eighteens;\n        long maxOnesNineteens = maxOnes - nineteens;\n\
    \        long maxOnesTwenty = maxOnes - twenty;\n        long maxOnesTwentyOnes\
    \ = maxOnes - twentyOnes;\n        long maxOnesTwentyTwos = maxOnes - twentyTwos;\n\
    \        long maxOnesTwentyThrees = maxOnes - twentyThrees;\n        long maxOnesTwentyFours\
    \ = maxOnes - twentyFours;\n        long maxOnesTwentyFives = maxOnes - twentyFives;\n\
    \        long maxOnesTwentySixes = maxOnes - twentySixes;\n        long ", " \
    \       long ones = 0;\n        long zeros = 0;\n        long max = 0;\n     \
    \   foreach (long i in arr) {\n            ones += i;\n            zeros -= i;\n\
    \            if (ones > max) {\n                max = ones;\n            }\n \
    \           if (zeros > max) {\n                max = zeros;\n            }\n\
    \        }\n        List<long> result = new List<long>();\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                result.Add(i);\n   \
    \         }\n        }\n        long onesCount = 0;\n        long zerosCount =\
    \ 0;\n        foreach (long i in result) {\n            if (i == 1) {\n      \
    \          onesCount++;\n            }\n            if (i == 0) {\n          \
    \      zerosCount++;\n            }\n        }\n        long onesSum = 0;\n  \
    \      long zerosSum = 0;\n        foreach (long i in result) {\n            onesSum\
    \ += i;\n            zerosSum += i;\n        }\n        long onesDiff = onesSum\
    \ - ones;\n        long zerosDiff = zerosSum - zeros;\n        long onesDiff2\
    \ = onesSum - onesCount;\n        long zerosDiff2 = zerosSum - zerosCount;\n \
    \       if (onesDiff > zerosDiff) {\n            long temp = onesDiff;\n     \
    \       onesDiff = zerosDiff;\n            zerosDiff = temp;\n        }\n    \
    \    if (onesDiff2 > zerosDiff2) {\n            long temp = onesDiff2;\n     \
    \       onesDiff2 = zerosDiff2;\n            zerosDiff2 = temp;\n        }\n \
    \       long onesDiff3 = onesDiff / onesCount;\n        long zerosDiff3 = zerosDiff\
    \ / zerosCount;\n        long onesDiff4 = onesDiff2 / onesCount;\n        long\
    \ zerosDiff4 = zerosDiff2 / zerosCount;\n        long onesDiff5 = onesDiff / onesCount;\n\
    \        long zerosDiff5 = zerosDiff / zerosCount;\n        long onesDiff6 = onesDiff2\
    \ / onesCount;\n        long zerosDiff6 = zerosDiff2 / zerosCount;\n        long\
    \ onesDiff7 = onesDiff / onesCount;\n        long zerosDiff7 = zerosDiff / zerosCount;\n\
    \        long onesDiff8 = onesDiff2 / onesCount;\n        long zerosDiff8 = zerosDiff2\
    \ / zerosCount;\n        long onesDiff9 = onesDiff / onesCount;\n        long\
    \ zerosDiff9 = zerosDiff / zerosCount;\n        long onesDiff10 = onesDiff2 /\
    \ onesCount;\n        long zerosDiff10 = zerosDiff2 / zerosCount;", "        List<long>\
    \ result = new List<long>();\n        long ones = 0;\n        long zeros = 0;\n\
    \        foreach (long i in arr) {\n            ones += i;\n        }\n      \
    \  foreach (long i in arr) {\n            zeros += i;\n        }\n        long\
    \ onesCount = ones;\n        long zerosCount = zeros;\n        long onesSum =\
    \ 0;\n        long zerosSum = 0;\n        long onesMax = ones;\n        long zerosMax\
    \ = zeros;\n        long onesMin = ones;\n        long zerosMin = zeros;\n   \
    \     long onesSumMax = ones;\n        long zerosSumMax = zeros;\n        long\
    \ onesSumMin = ones;\n        long zerosSumMin = zeros;\n        long onesSumMaxMin\
    \ = ones;\n        long zerosSumMaxMin = zeros;\n        long onesSumMinMax =\
    \ ones;\n        long zerosSumMinMax = zeros;\n        long onesSumMaxMinMax =\
    \ ones;\n        long zerosSumMaxMinMax = zeros;\n        long onesSumMinMaxMinMax\
    \ = ones;\n        long zerosSumMinMaxMinMax = zeros;\n        long onesSumMinMaxMinMaxMin\
    \ = ones;\n        long zerosSumMinMaxMinMaxMin = zeros;\n        long onesSumMinMaxMinMaxMinMax\
    \ = ones;\n        long zerosSumMinMaxMinMaxMinMax = zeros;\n        long onesSumMinMaxMinMaxMinMaxMin\
    \ = ones;\n        long zerosSumMinMaxMinMaxMinMaxMin = zeros;\n        long onesSumMinMaxMinMaxMinMaxMinMax\
    \ = ones;\n        long zerosSumMinMaxMinMaxMinMaxMinMax = zeros;\n        long\
    \ onesSumMinMaxMinMaxMinMaxMinMaxMin = ones;\n        long zerosSumMinMaxMinMaxMinMaxMinMaxMin\
    \ = zeros;\n        long onesSumMinMaxMinMaxMinMaxMinMaxMinMax = ones;\n     \
    \   long zerosSumMinMaxMinMaxMinMaxMinMaxMinMax = zeros;\n        long onesSumMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = ones;\n        long zerosSumMinMaxMinMaxMinMaxMinMaxMinMax = zeros;\n    \
    \    long onesSumMinMaxMinMaxMinMaxMinMaxMinMaxMin = ones;\n        long zerosSumMinMaxMinMaxMinMaxMinMaxMinMaxMin\
    \ = zeros;\n        long onesSumMin", "        long ones = arr.Sum(x => x & 1);\n\
    \        long zeros = arr.Sum(x => ~x);\n        long max = Math.Max(ones, zeros);\n\
    \        long min = Math.Min(ones, zeros);\n        long mid = max / 2;\n    \
    \    long mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n        long mid4 =\
    \ mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n  \
    \      long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9\
    \ = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n\
    \        long mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long\
    \ mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15\
    \ / 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n   \
    \     long mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21\
    \ = mid20 / 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 /\
    \ 2;\n        long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n     \
    \   long mid26 = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28\
    \ = mid27 / 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 /\
    \ 2;\n        long mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n     \
    \   long mid33 = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long mid35\
    \ = mid34 / 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36 /\
    \ 2;\n        long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n     \
    \   long mid40 = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42\
    \ = mid41 / 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 /\
    \ 2;\n        long mid45 = mid44 / 2;\n        long mid46 = mid45 / 2;\n     \
    \   long mid47 = mid46 / 2;\n        long mid48 = mid47 / ", "        List<long>\
    \ result = new List<long>();\n        long ones = 0;\n        long zeros = 0;\n\
    \        foreach (long num in arr) {\n            ones += num == 1 ? 1 : 0;\n\
    \            zeros += num == 0 ? 1 : 0;\n        }\n        if (ones > zeros)\
    \ {\n            foreach (long num in arr) {\n                if (num == 1) {\n\
    \                    result.Add(num);\n                }\n            }\n    \
    \    } else {\n            foreach (long num in arr) {\n                if (num\
    \ == 0) {\n                    result.Add(num);\n                }\n         \
    \   }\n        }\n        return result;", "        long ones = 0;\n        long\
    \ zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n     \
    \       if (i == 1) {\n                ones++;\n            }\n            if\
    \ (i == 0) {\n                zeros++;\n            }\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        long onesMax\
    \ = ones * max;\n        long zerosMax = zeros * max;\n        long maxOnes =\
    \ ones * max;\n        long maxZeros = zeros * max;\n        long maxOnesMax =\
    \ onesMax * max;\n        long maxZerosMax = zerosMax * max;\n        long maxOnesMaxMinusOnes\
    \ = maxOnesMax - 1;\n        long maxZerosMaxMinusOnes = maxZerosMax - 1;\n  \
    \      long maxOnesMaxMinusOnesMinusOnes = maxOnesMaxMinusOnes - 1;\n        long\
    \ maxZerosMaxMinusOnesMinusOnes = maxZerosMaxMinusOnes - 1;\n        long maxOnesMaxMinusOnesMinusOnesMinusOnes\
    \ = maxOnesMaxMinusOnesMinusOnes - 1;\n        long maxZerosMaxMinusOnesMinusOnesMinusOnes\
    \ = maxZerosMaxMinusOnesMinusOnes - 1;\n        long maxOnesMaxMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = maxOnesMaxMinusOnesMinusOnesMinusOnes - 1;\n        long maxZerosMaxMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = maxZerosMaxMinusOnesMinusOnesMinusOnes - 1;\n        long maxOnesMaxMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = maxOnesMaxMinusOnesMinusOnesMinusOnesMinusOnes - 1;\n        long maxZerosMaxMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = maxZerosMaxMinusOnesMinusOnesMinusOnesMinusOnes - 1;\n        long maxOnesMaxMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = maxOnesMaxMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes - 1;", "        List<long>\
    \ result = new List<long>();\n        long ones = 0;\n        long zeros = 0;\n\
    \        long max = 0;\n        foreach (long num in arr) {\n            ones\
    \ += num;\n            zeros -= num;\n            max = Math.Max(max, Math.Abs(ones));\n\
    \        }\n        long onesMax = max;\n        long zerosMax = max;\n      \
    \  foreach (long num in arr) {\n            onesMax -= num;\n            zerosMax\
    \ += num;\n        }\n        long onesMaxAbs = Math.Abs(onesMax);\n        long\
    \ zerosMaxAbs = Math.Abs(zerosMax);\n        long onesMaxAbsDiff = onesMaxAbs\
    \ - ones;\n        long zerosMaxAbsDiff = zerosMaxAbs - zeros;\n        long onesMaxAbsDiffAbs\
    \ = onesMaxAbsDiff < 0 ? -onesMaxAbsDiff : onesMaxAbsDiff;\n        long zerosMaxAbsDiffAbs\
    \ = zerosMaxAbsDiff < 0 ? -zerosMaxAbsDiff : zerosMaxAbsDiff;\n        long onesMaxAbsDiffAbsDiff\
    \ = onesMaxAbsDiffAbs - onesMaxAbsDiff;\n        long zerosMaxAbsDiffAbsDiff =\
    \ zerosMaxAbsDiffAbs - zerosMaxAbsDiff;\n        long onesMaxAbsDiffAbsDiffAbs\
    \ = onesMaxAbsDiffAbsDiff < 0 ? -onesMaxAbsDiffAbsDiff : onesMaxAbsDiffAbsDiff;\n\
    \        long zerosMaxAbsDiffAbsDiffAbs = zerosMaxAbsDiffAbsDiff < 0 ? -zerosMaxAbsDiffAbsDiff\
    \ : zerosMaxAbsDiffAbsDiff;\n        long onesMaxAbsDiffAbsDiffAbsDiff = onesMaxAbsDiffAbsDiffAbs\
    \ - onesMaxAbsDiffAbsDiff;\n        long zerosMaxAbsDiffAbsDiffAbsDiff = zerosMaxAbsDiffAbsDiffAbs\
    \ - zerosMaxAbsDiffAbsDiff;\n        long onesMaxAbsDiffAbsDiffAbsDiffAbs = onesMaxAbsDiffAbsDiffAbsDiff\
    \ < 0 ? -onesMaxAbsDiffAbsDiffAbsDiff : onesMaxAbsDiffAbsDiffAbsDiff;\n      \
    \  long zerosMaxAbsDiffAbsDiffAbsDiffAbs = zeros", "        long ones = 0;\n \
    \       long zeros = 0;\n        long max = 0;\n        foreach (long i in arr)\
    \ {\n            if (i == 1) {\n                ones++;\n            }\n     \
    \       else if (i == 0) {\n                zeros++;\n            }\n        \
    \    else {\n                if (ones > zeros) {\n                    max = i;\n\
    \                }\n                else {\n                    max = zeros;\n\
    \                }\n            }\n        }\n        List<long> result = new\
    \ List<long>();\n        foreach (long i in arr) {\n            if (i == 1) {\n\
    \                result.Add(i);\n            }\n            else if (i == 0) {\n\
    \                result.Add(max);\n            }\n            else {\n       \
    \         if (ones > zeros) {\n                    result.Add(i);\n          \
    \      }\n                else {\n                    result.Add(max);\n     \
    \           }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long ones = 0;\n        long zeros = 0;\n\
    \        long max = 0;\n        foreach (long i in arr) {\n            if (i ==\
    \ 1) {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n            if (ones > zeros) {\n                max = ones;\n\
    \            } else {\n                max = zeros;\n            }\n         \
    \   result.Add(i);\n        }\n        long onesMax = Convert.ToInt64(Math.Pow(2,\
    \ max));\n        long zerosMax = Convert.ToInt64(Math.Pow(2, max));\n       \
    \ long onesMin = Convert.ToInt64(Math.Pow(2, max - 1));\n        long zerosMin\
    \ = Convert.ToInt64(Math.Pow(2, max - 1));\n        long onesMaxMin = Convert.ToInt64(Math.Pow(2,\
    \ max - 2));\n        long zerosMaxMin = Convert.ToInt64(Math.Pow(2, max - 2));\n\
    \        long onesMaxMin2 = Convert.ToInt64(Math.Pow(2, max - 3));\n        long\
    \ zerosMaxMin2 = Convert.ToInt64(Math.Pow(2, max - 3));\n        long onesMaxMin3\
    \ = Convert.ToInt64(Math.Pow(2, max - 4));\n        long zerosMaxMin3 = Convert.ToInt64(Math.Pow(2,\
    \ max - 4));\n        long onesMaxMin4 = Convert.ToInt64(Math.Pow(2, max - 5));\n\
    \        long zerosMaxMin4 = Convert.ToInt64(Math.Pow(2, max - 5));\n        long\
    \ onesMaxMin5 = Convert.ToInt64(Math.Pow(2, max - 6));\n        long zerosMaxMin5\
    \ = Convert.ToInt64(Math.Pow(2, max - 6));\n        long onesMaxMin6 = Convert.ToInt64(Math.Pow(2,\
    \ max - 7));\n        long zerosMaxMin6 = Convert.ToInt64(Math.Pow(2, max - 7));\n\
    \        long onesMaxMin7 = Convert.ToInt64(Math.Pow(2, max - 8));\n        long\
    \ zerosMaxMin7 = Convert.ToInt64(Math.Pow(2, max - 8));\n        long onesMaxMin8\
    \ = Convert.ToInt64(Math.Pow(2, max - 9));\n        long zerosMaxMin8 = Convert.ToInt64(Math.Pow(2,\
    \ max - 9));\n        long onesMaxMin9 = Convert.ToInt64(Math.Pow(2, max - 10));\n\
    \        long zerosMaxMin9 = Convert.ToInt64(Math.Pow(2, max - 10));\n       \
    \ long onesMaxMin10 = Convert.ToInt64(Math.Pow(2, max - 11));\n        long zerosMaxMin10\
    \ = Convert.ToInt64(Math.Pow(2, max - 11));\n        long one", "        long\
    \ ones = 0;\n        long zeros = 0;\n        long max = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                ones++;\n          \
    \  }\n            if (i == 0) {\n                zeros++;\n            }\n   \
    \         if (i > max) {\n                max = i;\n            }\n        }\n\
    \        List<long> result = new List<long>();\n        if (ones > zeros) {\n\
    \            result.Add(max);\n            result.AddRange(arr.Where(i => i ==\
    \ max).OrderBy(i => i).ToList());\n            result.Add(ones);\n        }\n\
    \        if (zeros > ones) {\n            result.AddRange(arr.Where(i => i ==\
    \ ones).OrderBy(i => i).ToList());\n            result.Add(zeros);\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long ones = 0;\n        long zeros = 0;\n        long max = 0;\n       \
    \ foreach (long i in arr) {\n            ones += i;\n            zeros -= i;\n\
    \            max = Math.Max(max, i);\n        }\n        long onesCount = ones;\n\
    \        long zerosCount = zeros;\n        long maxCount = max;\n        long\
    \ maxCountCount = 0;\n        long maxCountCountCount = 0;\n        long maxCountCountCountCount\
    \ = 0;\n        long maxCountCountCountCountCount = 0;\n        long maxCountCountCountCountCountCount\
    \ = 0;\n        long maxCountCountCountCountCountCountCount = 0;\n        long\
    \ maxCountCountCountCountCountCountCountCount = 0;\n        long maxCountCountCountCountCountCountCountCountCount\
    \ = 0;\n        long maxCountCountCountCountCountCountCountCountCountCount = 0;\n\
    \        long maxCountCountCountCountCountCountCountCountCountCountCount = 0;\n\
    \        long maxCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = 0;\n        long maxCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = 0;\n        long maxCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = 0;\n        long maxCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = 0;\n        long maxCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = 0;\n        long maxCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = 0;\n        long maxCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = 0;\n        long maxCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = 0;\n        long maxCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = 0;\n        long maxCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = 0;\n        long maxCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = 0;\n        long maxCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = 0;\n        long maxCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = 0;\n        long maxCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = 0;\n        long maxCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = 0;\n        long maxCountCountCountCountCountCountCountCountCountCountCountCountCount",
  "        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  foreach (long i in arr) {\n            ones += i;\n            zeros += (long)Math.Abs(i);\n\
    \            if (ones > max) {\n                max = ones;\n            }\n \
    \       }\n        List<long> result = new List<long>();\n        foreach (long\
    \ i in arr) {\n            long onesCount = 0;\n            long zerosCount =\
    \ 0;\n            long maxCount = 0;\n            foreach (long j in arr) {\n\
    \                onesCount += j;\n                zerosCount += (long)Math.Abs(j);\n\
    \                if (onesCount > maxCount) {\n                    maxCount = onesCount;\n\
    \                }\n            }\n            long onesCountInt = onesCount;\n\
    \            long zerosCountInt = zerosCount;\n            long maxCountInt =\
    \ maxCount;\n            long maxInt = 0;\n            if (onesCount > maxCount)\
    \ {\n                maxInt = onesCount;\n            }\n            if (zerosCount\
    \ > maxCount) {\n                maxInt = zerosCount;\n            }\n       \
    \     if (onesCount > maxCount) {\n                maxInt = maxCount;\n      \
    \      }\n            long maxCountLong = maxInt;\n            if (onesCount >\
    \ maxCount) {\n                maxCountLong = onesCount;\n            }\n    \
    \        if (zerosCount > maxCount) {\n                maxCountLong = zerosCount;\n\
    \            }\n            if (onesCount > maxCount) {\n                maxCountLong\
    \ = maxCount;\n            }\n            long maxCountLongInt = maxCountLong;\n\
    \            if (onesCount > maxCount) {\n                maxCountLongInt = onesCount;\n\
    \            }\n            if (zerosCount > maxCount) {\n                maxCountLongInt\
    \ = zerosCount;\n            }\n            if (onesCount > maxCount) {\n    \
    \            maxCountLongInt = maxCount;\n            }\n            long maxCountLongIntInt\
    \ = maxCountLongInt;\n            if (onesCount > maxCount) {\n              \
    \  maxCountLongIntInt = onesCount;\n            }\n            if (zerosCount\
    \ > maxCount) {\n                maxCountLongIntInt = zerosCount;\n          \
    \  }\n            if (onesCount > maxCount) {\n                maxCountLongIntInt\
    \ = maxCount;\n            }\n            long maxCountLongIntIntInt = maxCountLongIntInt;\n\
    \            if (onesCount > maxCount) {\n                maxCountLongIntIntInt\
    \ = onesCount;\n            }\n            if (zerosCount > maxCount) {\n    \
    \            maxCountLongIntIntInt = zeros", "        List<long> result = new\
    \ List<long>();\n        long ones = 0;\n        long zeros = 0;\n        long\
    \ max = 0;\n        long min = 0;\n        foreach (long i in arr) {\n       \
    \     if (i == 1) {\n                ones++;\n            }\n            else\
    \ if (i == 0) {\n                zeros++;\n            }\n            else {\n\
    \                max = Math.Max(max, i);\n                min = Math.Min(min,\
    \ i);\n            }\n        }\n        long onesMax = Convert.ToInt64(Math.Pow(2,\
    \ Math.Log10(ones)));\n        long zerosMax = Convert.ToInt64(Math.Pow(2, Math.Log10(zeros)));\n\
    \        long maxDiff = onesMax - zerosMax;\n        long minDiff = zerosMax -\
    \ onesMax;\n        long maxDiffInt = Convert.ToInt64(Math.Pow(2, Math.Log10(maxDiff)));\n\
    \        long minDiffInt = Convert.ToInt64(Math.Pow(2, Math.Log10(minDiff)));\n\
    \        long maxDiffLong = Convert.ToInt64(Math.Pow(2, Math.Log10(maxDiffInt)));\n\
    \        long minDiffLong = Convert.ToInt64(Math.Pow(2, Math.Log10(minDiffInt)));\n\
    \        long maxDiffLongInt = Convert.ToInt64(Math.Pow(2, Math.Log10(maxDiffLong)));\n\
    \        long minDiffLongInt = Convert.ToInt64(Math.Pow(2, Math.Log10(minDiffLong)));\n\
    \        long maxDiffLongLong = Convert.ToInt64(Math.Pow(2, Math.Log10(maxDiffLongInt)));\n\
    \        long minDiffLongLong = Convert.ToInt64(Math.Pow(2, Math.Log10(minDiffLongInt)));\n\
    \        long maxDiffLongLongInt = Convert.ToInt64(Math.Pow(2, Math.Log10(maxDiffLongLong)));\n\
    \        long minDiffLongLongInt = Convert.ToInt64(Math.Pow(2, Math.Log10(minDiffLongLong)));\n\
    \        long maxDiffLongLongLong = Convert.ToInt64(Math.Pow(2, Math.Log10(maxDiffLongLongInt)));\n\
    \        long minDiffLongLongLong = Convert.ToInt64(Math.Pow(2, Math.Log10(minDiffLongLongInt)));\n\
    \        long maxDiffLongLongLongInt = Convert.ToInt64(Math.Pow(2, Math.Log10(maxDiffLongLongLong)));\n\
    \        long minDiffLongLongLongInt = Convert.ToInt64(Math.Pow(2, Math.Log10(minDiffLongLongLong)));\n\
    \        long maxDiffLongLongLongLong = Convert.ToInt64(Math.Pow(2, Math.Log",
  "        List<long> result = new List<long>();\n        long ones = 0;\n       \
    \ long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n  \
    \      long tenThousands = 0;\n        long oneThousands = 0;\n        long oneHundreds\
    \ = 0;\n        long oneThousandHundreds = 0;\n        long oneHundredThousands\
    \ = 0;\n        long oneThousandHundredThousands = 0;\n        long oneHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandsThousands = 0;\n      \
    \  long oneHundredThousandHundredThousandsThousandsHundreds = 0;\n        long\
    \ oneHundredThousandHundredThousandsThousandsHundredThousands = 0;\n        long\
    \ oneHundredThousandHundredThousandsThousandsHundredThousandsHundreds = 0;\n \
    \       long oneHundredThousandHundredThousandsThousandsHundredThousandsHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandsThousandsHundredThousandsHundredThousandsHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandsThousandsHundredThousandsHundredThousandsHundredThousandsHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandsThousandsHundredThousandsHundredThousandsHundredThousandsHundredThousandsHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandsThousandsHundredThousandsHundredThousandsHundredThousandsHundredThousandsHundredThousandsHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandsThousandsHundredThousandsHundredThousandsHundredThousandsHundredThousandsHundredThousandsHundredThousandsHund",
  "        if (arr.Count == 0) return arr;\n        long ones = arr.Sum(x => x & 1);\n\
    \        long zeros = arr.Sum(x => ~x & 1);\n        long maxOnes = arr.Max(x\
    \ => x & 1);\n        long maxZeros = arr.Max(x => ~x & 1);\n        long maxOnesZeros\
    \ = maxOnes - maxZeros;\n        long maxOnesOnes = maxOnes - ones;\n        long\
    \ maxOnesTwos = maxOnes - twos;\n        long maxOnesThrees = maxOnes - threes;\n\
    \        long maxOnesFours = maxOnes - fours;\n        long maxOnesFives = maxOnes\
    \ - fives;\n        long maxOnesSixes = maxOnes - sixes;\n        long maxOnesSevens\
    \ = maxOnes - sevens;\n        long maxOnesEights = maxOnes - eights;\n      \
    \  long maxOnesNines = maxOnes - nines;\n        long maxOnesTens = maxOnes -\
    \ tens;\n        long maxOnesElevens = maxOnes - elevens;\n        long maxOnesTwelves\
    \ = maxOnes - twelves;\n        long maxOnesThirteens = maxOnes - thirteens;\n\
    \        long maxOnesFourteens = maxOnes - fourteens;\n        long maxOnesFifteens\
    \ = maxOnes - fifteens;\n        long maxOnesSixteens = maxOnes - sixteens;\n\
    \        long maxOnesSeventeens = maxOnes - seventeens;\n        long maxOnesEighteens\
    \ = maxOnes - eighteens;\n        long maxOnesNineteens = maxOnes - nineteens;\n\
    \        long maxOnesTwenty = maxOnes - twenty;\n        long maxOnesTwentyOnes\
    \ = maxOnes - twentyOnes;\n        long maxOnesTwentyTwos = maxOnes - twentyTwos;\n\
    \        long maxOnesTwentyThrees = maxOnes - twentyThrees;\n        long maxOnesTwentyFours\
    \ = maxOnes - twentyFours;\n        long maxOnesTwentyFives = maxOnes - twentyFives;\n\
    \        long maxOnesTwentySixes = maxOnes - twentySixes;\n        long maxOnesTwentySevens\
    \ = max", "        List<long> result = new List<long>();\n        long ones =\
    \ 0;\n        long zeros = 0;\n        long max = 0;\n        long min = 0;\n\
    \        foreach (long i in arr) {\n            ones += i;\n            zeros\
    \ -= i;\n            if (ones > max) {\n                max = ones;\n        \
    \    }\n            if (zeros > min) {\n                min = zeros;\n       \
    \     }\n        }\n        long onesMax = max;\n        long onesMin = min;\n\
    \        long zerosMax = max;\n        long zerosMin = min;\n        long maxOnes\
    \ = 0;\n        long maxZeros = 0;\n        long minOnes = 0;\n        long minZeros\
    \ = 0;\n        foreach (long i in arr) {\n            onesMax += i;\n       \
    \     onesMin -= i;\n            zerosMax -= i;\n            zerosMin -= i;\n\
    \            if (onesMax > maxOnes) {\n                maxOnes = onesMax;\n  \
    \          }\n            if (zerosMax > maxZeros) {\n                maxZeros\
    \ = zerosMax;\n            }\n            if (onesMin > minOnes) {\n         \
    \       minOnes = onesMin;\n            }\n            if (zerosMin > minZeros)\
    \ {\n                minZeros = zerosMin;\n            }\n        }\n        long\
    \ onesMaxMin = maxOnes - minOnes;\n        long zerosMaxMin = maxZeros - minZeros;\n\
    \        long onesMinMax = minOnes - maxOnes;\n        long zerosMinMax = minZeros\
    \ - maxZeros;\n        long onesMaxMinZeros = onesMaxMin - zerosMaxMin;\n    \
    \    long zerosMaxMinZeros = zerosMaxMin - onesMaxMin;\n        long onesMinMaxZeros\
    \ = onesMinMax - zerosMinMax;\n        long zerosMinMaxZeros = zerosMinMax - onesMinMax;\n\
    \        long onesMaxMinOnes = onesMaxMin - onesMinMax;\n        long zerosMaxMinOnes\
    \ = zerosMaxMin - zerosMinMax;\n        long onesMinMaxOnes = onesMinMax - onesMaxMin;\n\
    \        long zerosMinMaxOnes = zerosMinMax - zerosMinMax;\n        long onesMaxMinMinZeros\
    \ = onesMaxMinZeros - onesMinMaxOnes;\n        long zerosMaxMinMinZeros = zerosMaxMinZeros\
    \ - zerosMinMaxOnes;\n        long onesMinMaxMinOnes = onesMaxMinOnes - onesMinMaxMin;\n\
    \        long zerosMaxMinMin", "        long ones = arr.Sum(x => x & 1);\n   \
    \     if (ones == 0)\n            return arr;\n        long zeros = arr.Sum(x\
    \ => x & 1);\n        long maxOnes = arr.Max(x => x & 1);\n        long maxZeros\
    \ = arr.Max(x => x & 1);\n        long maxOnesCount = arr.Count(x => x & 1);\n\
    \        long maxZerosCount = arr.Count(x => x & 1);\n        long maxOnesCount2\
    \ = arr.Count(x => x & 1);\n        long maxZerosCount2 = arr.Count(x => x & 1);\n\
    \        long maxOnesCount3 = arr.Count(x => x & 1);\n        long maxZerosCount3\
    \ = arr.Count(x => x & 1);\n        long maxOnesCount4 = arr.Count(x => x & 1);\n\
    \        long maxZerosCount4 = arr.Count(x => x & 1);\n        long maxOnesCount5\
    \ = arr.Count(x => x & 1);\n        long maxZerosCount5 = arr.Count(x => x & 1);\n\
    \        long maxOnesCount6 = arr.Count(x => x & 1);\n        long maxZerosCount6\
    \ = arr.Count(x => x & 1);\n        long maxOnesCount7 = arr.Count(x => x & 1);\n\
    \        long maxZerosCount7 = arr.Count(x => x & 1);\n        long maxOnesCount8\
    \ = arr.Count(x => x & 1);\n        long maxZerosCount8 = arr.Count(x => x & 1);\n\
    \        long maxOnesCount9 = arr.Count(x => x & 1);\n        long maxZerosCount9\
    \ = arr.Count(x => x & 1);\n        long maxOnesCount10 = arr.Count(x => x & 1);\n\
    \        long maxZerosCount10 = arr.Count(x => x & 1);\n        long maxOnesCount11\
    \ = arr.Count(x => x & 1);\n        long maxZerosCount11 = arr.Count(x => x &\
    \ 1);\n        long maxOnesCount12 = arr.Count(x => x & 1);\n        long maxZerosCount12\
    \ = arr.Count(x => x & 1);\n        long maxOnesCount13 = arr.Count(x => x & 1);\n\
    \        long maxZerosCount13 = arr.Count(x => x & 1);\n        long maxOnesCount14\
    \ = arr.Count(x => x & 1);\n        long maxZerosCount14 = arr.Count(x => x &\
    \ 1);\n        long maxOnesCount15 = arr.Count(x => x ", "        List<long> result\
    \ = new List<long>();\n        long ones = 0;\n        long zeros = 0;\n     \
    \   foreach (long i in arr) {\n            if (i == 1) {\n                ones++;\n\
    \            } else {\n                zeros++;\n            }\n        }\n  \
    \      long maxOnes = ones;\n        long maxZeros = zeros;\n        long maxValue\
    \ = maxOnes > maxZeros ? maxOnes : maxZeros;\n        long minValue = maxOnes\
    \ < maxZeros ? maxOnes : maxZeros;\n        long maxDecimal = maxValue - minValue;\n\
    \        long minDecimal = minValue - minValue;\n        long maxDecimalDecimal\
    \ = maxDecimal / 10;\n        long minDecimalDecimal = minDecimal / 10;\n    \
    \    long maxDecimalDecimalDecimal = maxDecimalDecimal / 10;\n        long minDecimalDecimalDecimal\
    \ = minDecimalDecimal / 10;\n        long maxDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimal\
    \ / 10;\n        long minDecimalDecimalDecimalDecimal = minDecimalDecimalDecimal\
    \ / 10;\n        long maxDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimal\
    \ / 10;\n        long minDecimalDecimalDecimalDecimal = minDecimalDecimalDecimalDecimal\
    \ / 10;\n        long maxDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long minDecimalDecimalDecimalDecimal = minDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long maxDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long minDecimalDecimalDecimalDecimal = minDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long maxDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long minDecimalDecimalDecimalDecimal = minDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long maxDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long minDecimalDecimalDecimalDecimal = minDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long maxDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long minDecimalDecimalDecimalDecimal = minDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long maxDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long minDecimalDecimalDecimalDecimal = minDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long maxDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimalDecim",
  "        List<long> result = new List<long>();\n        long ones = 0;\n       \
    \ long zeros = 0;\n        foreach (long i in arr) {\n            ones += i;\n\
    \        }\n        foreach (long i in arr) {\n            zeros += i;\n     \
    \   }\n        ones = ones - zeros;\n        foreach (long i in arr) {\n     \
    \       if (i == 1) {\n                result.Add(ones);\n            } else {\n\
    \                result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long ones = 0;\n       \
    \ long zeros = 0;\n        foreach (long i in arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        if (ones > zeros) {\n            long temp\
    \ = ones;\n            ones = zeros;\n            zeros = temp;\n        }\n \
    \       long onesCount = 0;\n        long zerosCount = 0;\n        long temp =\
    \ 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n         \
    \       onesCount++;\n            } else {\n                zerosCount++;\n  \
    \          }\n        }\n        if (onesCount > zerosCount) {\n            temp\
    \ = onesCount;\n            onesCount = zerosCount;\n            zerosCount =\
    \ temp;\n        }\n        long onesCount2 = 0;\n        long zerosCount2 = 0;\n\
    \        long temp2 = 0;\n        foreach (long i in arr) {\n            if (i\
    \ == 1) {\n                onesCount2++;\n            } else {\n             \
    \   zerosCount2++;\n            }\n        }\n        if (onesCount2 > zerosCount2)\
    \ {\n            temp2 = onesCount2;\n            onesCount2 = zerosCount2;\n\
    \            zerosCount2 = temp2;\n        }\n        long onesCount3 = 0;\n \
    \       long zerosCount3 = 0;\n        long temp3 = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                onesCount3++;\n    \
    \        } else {\n                zerosCount3++;\n            }\n        }\n\
    \        if (onesCount3 > zerosCount3) {\n            temp3 = onesCount3;\n  \
    \          onesCount3 = zerosCount3;\n            zerosCount3 = temp3;\n     \
    \   }\n        long onesCount4 = 0;\n        long zerosCount4 = 0;\n        long\
    \ temp4 = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n \
    \               onesCount4++;\n            } else {\n                zerosCount4++;\n\
    \            }\n        }\n        if (onesCount4 > zerosCount4) {\n         \
    \   temp4 = onesCount4;\n            onesCount4 = zerosCount4;\n            zerosCount4\
    \ = temp4;\n        }\n        long onesCount5 = 0;\n        long zerosCount5\
    \ = 0;\n        long temp5 = 0;\n        foreach (long i in arr) {\n         \
    \   if (i == 1) {\n                onesCount5++;\n            } else {\n     \
    \           zerosCount5++;\n            }\n        }\n        if (onesCount5 >\
    \ zerosCount5) {\n            temp5 = onesCount5;\n            onesCount5 = zerosCount5;\n\
    \            zerosCount5 = temp5;\n        }\n        long onesCount6 = 0;\n \
    \       long zerosCount6 = 0;\n        long temp6 = 0;\n        foreach (long\
    \ i in arr) {\n", "        long ones = arr.Sum(x => x & 1);\n        long zeros\
    \ = arr.Sum(x => ~x);\n        long maxOnes = arr.Max(x => x & 1);\n        long\
    \ maxZeros = arr.Max(x => ~x);\n        long maxOnesZeros = maxOnes - maxZeros;\n\
    \        long maxOnesOnes = maxOnes - ones;\n        long maxOnesTwos = maxOnes\
    \ - twos(ones);\n        long maxOnesThrees = maxOnes - threes(ones);\n      \
    \  long maxOnesFours = maxOnes - fours(ones);\n        long maxOnesFives = maxOnes\
    \ - fives(ones);\n        long maxOnesSixes = maxOnes - sixes(ones);\n       \
    \ long maxOnesSevens = maxOnes - sevens(ones);\n        long maxOnesEights = maxOnes\
    \ - eights(ones);\n        long maxOnesNines = maxOnes - nines(ones);\n      \
    \  long maxOnesTens = maxOnes - tens(ones);\n        long maxOnesElevens = maxOnes\
    \ - elevens(ones);\n        long maxOnesTwelves = maxOnes - twelves(ones);\n \
    \       long maxOnesThirteens = maxOnes - thirteens(ones);\n        long maxOnesFourteens\
    \ = maxOnes - fourteens(ones);\n        long maxOnesFifteens = maxOnes - fifteens(ones);\n\
    \        long maxOnesSixteens = maxOnes - sixteens(ones);\n        long maxOnesSeventeens\
    \ = maxOnes - seventeens(ones);\n        long maxOnesEighteens = maxOnes - eighteens(ones);\n\
    \        long maxOnesNineteens = maxOnes - nineteens(ones);\n        long maxOnesTwenty\
    \ = maxOnes - twenty(ones);\n        long maxOnesThirty = maxOnes - thirty(ones);\n\
    \        long maxOnesFourty = maxOnes - fourty(ones);\n        long maxOnesFifty\
    \ = maxOnes - fifty(ones);\n        long maxOnesSixty = maxOnes - sixty(ones);\n\
    \        long maxOnesSeventy = maxOnes - seventy(ones);\n        long maxOnesEighty\
    \ = maxOnes - eighty(ones);\n        ", "        List<long> result = new List<long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        foreach (long i in arr)\
    \ {\n            if (i == 1) {\n                ones++;\n            } else {\n\
    \                zeros++;\n            }\n        }\n        long onesCount =\
    \ 0;\n        long zerosCount = 0;\n        long maxOnesCount = ones;\n      \
    \  long maxZeroCount = zeros;\n        long maxOnesCountIndex = 0;\n        long\
    \ maxZeroCountIndex = 0;\n        long maxOnesCountValue = 0;\n        long maxZeroCountValue\
    \ = 0;\n        long maxOnesCountValueIndex = 0;\n        long maxZeroCountValueIndex\
    \ = 0;\n        long maxOnesCountValueValue = 0;\n        long maxZeroCountValueValue\
    \ = 0;\n        long maxOnesCountValueValueIndex = 0;\n        long maxZeroCountValueValueIndex\
    \ = 0;\n        long maxOnesCountValueValueValue = 0;\n        long maxZeroCountValueValueIndex\
    \ = 0;\n        long maxOnesCountValueValueValue = 0;\n        long maxZeroCountValueValueIndex\
    \ = 0;\n        long maxOnesCountValueValueValue = 0;\n        long maxZeroCountValueValueIndex\
    \ = 0;\n        long maxOnesCountValueValueValue = 0;\n        long maxZeroCountValueValueIndex\
    \ = 0;\n        long maxOnesCountValueValueValue = 0;\n        long maxZeroCountValueValueIndex\
    \ = 0;\n        long maxOnesCountValueValueValue = 0;\n        long maxZeroCountValueValueIndex\
    \ = 0;\n        long maxOnesCountValueValueValue = 0;\n        long maxZeroCountValueValueIndex\
    \ = 0;\n        long maxOnesCountValueValueValue = 0;\n        long maxZeroCountValueValueIndex\
    \ = 0;\n        long maxOnesCountValueValueValue = 0;\n        long maxZeroCountValueValueIndex\
    \ = 0;\n        long maxOnesCountValueValueValue = 0;\n        long maxZeroCountValueValueIndex\
    \ = 0;\n        long maxOnesCountValueValueValue = 0;\n        long maxZeroCountValueValueIndex\
    \ = 0;\n        long maxOnesCountValueValueValue = 0;\n        long maxZeroCountValueValueIndex\
    \ = 0;\n        long maxOnesCountValueValueValue = 0;\n        long maxZeroCountValueValueIndex\
    \ = 0;\n        long maxOnesCountValueValueValue = 0;\n        long maxZeroCountValueValueIndex\
    \ = 0;\n        long maxOnesCountValueValueValue = 0;\n        long maxZeroCountValueValueIndex\
    \ = 0;\n        long maxOnesCountValueValueValue = 0;\n        long maxZeroCountValueValueIndex\
    \ = 0;\n        long maxOnesCountValue", "        long ones = 0;\n        long\
    \ zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n     \
    \       ones += i;\n            zeros += (long)Math.Abs(i);\n            if (ones\
    \ > max) {\n                max = ones;\n            }\n            if (zeros\
    \ > max) {\n                max = zeros;\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in arr) {\n            long\
    \ ones = i;\n            long zeros = Math.Abs(i);\n            long diff = ones\
    \ - zeros;\n            if (diff > max) {\n                diff = max;\n     \
    \       }\n            result.Add(diff);\n        }\n        return result;",
  "        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  foreach (long i in arr) {\n            ones += i;\n            zeros += (long)Math.Abs(i);\n\
    \            if (max < zeros) {\n                max = zeros;\n            }\n\
    \        }\n        long onesCount = ones;\n        long zerosCount = zeros;\n\
    \        long maxCount = max;\n        List<long> result = new List<long>();\n\
    \        foreach (long i in arr) {\n            long onesCountNew = onesCount;\n\
    \            long zerosCountNew = zerosCount;\n            long maxCountNew =\
    \ maxCount;\n            onesCount -= i;\n            zerosCount += (long)Math.Abs(i);\n\
    \            if (maxCount < zerosCount) {\n                maxCount = zerosCount;\n\
    \            }\n            if (onesCount < 0) {\n                onesCountNew\
    \ = -onesCount;\n            }\n            if (zerosCount < 0) {\n          \
    \      zerosCountNew = -zerosCount;\n            }\n            if (maxCount <\
    \ 0) {\n                maxCountNew = -maxCount;\n            }\n            if\
    \ (onesCountNew > maxCountNew) {\n                result.Add(i);\n           \
    \ } else if (zerosCountNew > maxCountNew) {\n                result.Add(-i);\n\
    \            } else {\n                result.Add(-onesCountNew);\n          \
    \  }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long total = 0;\n        foreach (long i\
    \ in arr) {\n            total += i;\n            if (i > 0)\n               \
    \ ones += i;\n            if (i > 10)\n                tens += i;\n          \
    \  if (i > 100)\n                hundreds += i;\n            if (i > 1000)\n \
    \               thousands += i;\n        }\n        long onesTotal = ones * ones;\n\
    \        long tensTotal = tens * tens;\n        long hundredsTotal = hundreds\
    \ * hundreds;\n        long thousandsTotal = thousands * thousands;\n        long\
    \ totalTotal = total * total;\n        long onesTotal2 = onesTotal * ones;\n \
    \       long tensTotal2 = tensTotal * tens;\n        long hundredsTotal2 = hundredsTotal\
    \ * hundreds;\n        long thousandsTotal2 = thousandsTotal * thousands;\n  \
    \      long totalTotal2 = totalTotal * total;\n        long onesTotal3 = onesTotal\
    \ * ones;\n        long tensTotal3 = tensTotal * tens;\n        long hundredsTotal3\
    \ = hundredsTotal * hundreds;\n        long thousandsTotal3 = thousandsTotal *\
    \ thousands;\n        long totalTotal3 = totalTotal * total;\n        long onesTotal4\
    \ = onesTotal * ones;\n        long tensTotal4 = tensTotal * tens;\n        long\
    \ hundredsTotal4 = hundredsTotal * hundreds;\n        long thousandsTotal4 = thousandsTotal\
    \ * thousands;\n        long totalTotal4 = totalTotal * total;\n        long onesTotal5\
    \ = onesTotal * ones;\n        long tensTotal5 = tensTotal * tens;\n        long\
    \ hundredsTotal5 = hundredsTotal * hundreds;\n        long thousandsTotal5 = thousandsTotal\
    \ * thousands;\n        long totalTotal5 = totalTotal * total;\n        long onesTotal6\
    \ = onesTotal * ones;\n        long tensTotal6 = tensTotal * tens;\n        long\
    \ hundredsTotal6 = hundredsTotal * hundreds;\n        long thousandsTotal6 = thousandsTotal\
    \ * thousands;\n        long totalTotal6 = totalTotal * total;\n        long onesTotal7\
    \ = onesTotal * ones;\n        long tensTotal", "        long ones = arr.Sum(x\
    \ => x & 1);\n        long zeros = arr.Sum(x => ~x);\n        long maxOnes = arr.Max(x\
    \ => x & 1);\n        long maxZeros = arr.Max(x => ~x);\n        long maxOnesZeros\
    \ = maxOnes - maxZeros;\n        long maxOnesOnes = maxOnes - ones;\n        long\
    \ maxOnesTwos = maxOnes - twos(ones);\n        long maxOnesThrees = maxOnes -\
    \ threes(ones);\n        long maxOnesFours = maxOnes - fours(ones);\n        long\
    \ maxOnesFives = maxOnes - fives(ones);\n        long maxOnesSixes = maxOnes -\
    \ sixes(ones);\n        long maxOnesSevens = maxOnes - sevens(ones);\n       \
    \ long maxOnesEights = maxOnes - eights(ones);\n        long maxOnesNines = maxOnes\
    \ - nines(ones);\n        long maxOnesTens = maxOnes - tens(ones);\n        long\
    \ maxOnesElevens = maxOnes - elevens(ones);\n        long maxOnesTwelves = maxOnes\
    \ - twelves(ones);\n        long maxOnesThirteens = maxOnes - thirteens(ones);\n\
    \        long maxOnesFourteens = maxOnes - fourteens(ones);\n        long maxOnesFifteens\
    \ = maxOnes - fifteens(ones);\n        long maxOnesSixteens = maxOnes - sixteens(ones);\n\
    \        long maxOnesSeventeens = maxOnes - seventeens(ones);\n        long maxOnesEighteens\
    \ = maxOnes - eighteens(ones);\n        long maxOnesNineteens = maxOnes - nineteens(ones);\n\
    \        long maxOnesTwenty = maxOnes - twenty(ones);\n        long maxOnesTwentyOnes\
    \ = maxOnes - twentyOnes(ones);\n        long maxOnesTwentyTwos = maxOnes - twentyTwos(ones);\n\
    \        long maxOnesTwentyThrees = maxOnes - twentyThrees(ones);\n        long\
    \ maxOnesTwentyFours = maxOnes - twentyFours(ones);\n        long maxOnesTwentyFives\
    \ = maxOnes - twentyFives(ones);\n", "        List<long> result = new List<long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n    \
    \    foreach (long i in arr) {\n            ones += i;\n            zeros -= i;\n\
    \            if (ones > max) {\n                max = ones;\n            }\n \
    \       }\n        long onesMax = max;\n        long zeroMax = max;\n        foreach\
    \ (long i in arr) {\n            onesMax += i;\n            zeroMax -= i;\n  \
    \          if (onesMax > max) {\n                max = onesMax;\n            }\n\
    \            if (zeroMax < max) {\n                max = zeroMax;\n          \
    \  }\n        }\n        long onesMax2 = max;\n        long zeroMax2 = max;\n\
    \        foreach (long i in arr) {\n            onesMax2 += i;\n            zeroMax2\
    \ -= i;\n            if (onesMax2 > max) {\n                max = onesMax2;\n\
    \            }\n            if (zeroMax2 < max) {\n                max = zeroMax2;\n\
    \            }\n        }\n        long onesMax3 = max;\n        long zeroMax3\
    \ = max;\n        foreach (long i in arr) {\n            onesMax3 += i;\n    \
    \        zeroMax3 -= i;\n            if (onesMax3 > max) {\n                max\
    \ = onesMax3;\n            }\n            if (zeroMax3 < max) {\n            \
    \    max = zeroMax3;\n            }\n        }\n        long onesMax4 = max;\n\
    \        long zeroMax4 = max;\n        foreach (long i in arr) {\n           \
    \ onesMax4 += i;\n            zeroMax4 -= i;\n            if (onesMax4 > max)\
    \ {\n                max = onesMax4;\n            }\n            if (zeroMax4\
    \ < max) {\n                max = zeroMax4;\n            }\n        }\n      \
    \  long onesMax5 = max;\n        long zeroMax5 = max;\n        foreach (long i\
    \ in arr) {\n            onesMax5 += i;\n            zeroMax5 -= i;\n        \
    \    if (onesMax5 > max) {\n                max = onesMax5;\n            }\n \
    \           if (zeroMax5 < max) {\n                max = zeroMax5;\n         \
    \   }\n        }\n        long onesMax6 = max;\n        long zeroMax6 = max;\n\
    \        foreach (long i in arr) {\n            onesMax6 += i;\n            zeroMax6\
    \ -= i;\n            if (onesMax6 > max) {\n                max = onesMax6;\n\
    \            }\n            if (zeroMax6 < max) {\n                max = zeroMax6;\n\
    \            }\n        }\n        long onesMax7 = max;\n        ", "        List<long>\
    \ result = new List<long>();\n        long ones = 0;\n        long zeros = 0;\n\
    \        foreach (long i in arr) {\n            if (i == 1) {\n              \
    \  ones++;\n            }\n            else if (i == 0) {\n                zeros++;\n\
    \            }\n            else {\n                result.Add(i);\n         \
    \   }\n        }\n        if (ones > zeros) {\n            result.Sort();\n  \
    \      }\n        else {\n            result.Sort();\n            result.Reverse();\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        foreach (long i in arr)\
    \ {\n            if (i == 1) {\n                ones++;\n            }\n     \
    \       else {\n                zeros++;\n            }\n        }\n        if\
    \ (ones > zeros) {\n            long temp = ones;\n            ones = zeros;\n\
    \            zeros = temp;\n        }\n        long onesCount = 0;\n        long\
    \ zerosCount = 0;\n        long temp = 0;\n        foreach (long i in arr) {\n\
    \            if (i == 1) {\n                onesCount++;\n            }\n    \
    \        else {\n                zerosCount++;\n            }\n        }\n   \
    \     long onesCountTemp = 0;\n        long zerosCountTemp = 0;\n        long\
    \ temp2 = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n \
    \               onesCountTemp++;\n            }\n            else {\n        \
    \        zerosCountTemp++;\n            }\n        }\n        long onesCountTemp2\
    \ = 0;\n        long zerosCountTemp2 = 0;\n        long temp3 = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                onesCountTemp2++;\n\
    \            }\n            else {\n                zerosCountTemp2++;\n     \
    \       }\n        }\n        long onesCountTemp3 = 0;\n        long zerosCountTemp3\
    \ = 0;\n        long temp4 = 0;\n        foreach (long i in arr) {\n         \
    \   if (i == 1) {\n                onesCountTemp3++;\n            }\n        \
    \    else {\n                zerosCountTemp3++;\n            }\n        }\n  \
    \      long onesCountTemp4 = 0;\n        long zerosCountTemp4 = 0;\n        long\
    \ temp5 = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n \
    \               onesCountTemp4++;\n            }\n            else {\n       \
    \         zerosCountTemp4++;\n            }\n        }\n        long onesCountTemp5\
    \ = 0;\n        long zerosCountTemp5 = 0;\n        long temp6 = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                onesCountTemp5++;\n\
    \            }\n            else {\n                zerosCountTemp5++;\n     \
    \       }\n        }\n        long onesCountTemp6 = 0;\n        long zerosCountTemp6\
    \ = 0;\n        long temp7 = 0;\n        foreach (long i in arr) {\n         \
    \   if (i == 1) {\n                onesCountTemp6++;\n            }\n        \
    \    else {\n                zerosCountTemp6++;\n            }\n        }\n  \
    \      long onesCountTemp7 = 0;\n        long zerosCountTemp7 = 0;\n        long\
    \ temp8 = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n \
    \               onesCountTemp7++;\n            }\n            else {\n       \
    \         zerosCountTemp7++;\n            }\n        }\n        long onesCountTemp8",
  "        long ones = arr.Sum(x => x & 1);\n        long zeros = arr.Sum(x => ~x);\n\
    \        long maxOnes = arr.Max(x => x & 1);\n        long maxZeros = arr.Max(x\
    \ => ~x);\n        long maxOnesCount = arr.Count(x => x & 1 == 1);\n        long\
    \ maxZerosCount = arr.Count(x => ~x == 0);\n        long maxOnesCount2 = arr.Count(x\
    \ => x & 1 == 1);\n        long maxZerosCount2 = arr.Count(x => ~x == 0);\n  \
    \      long maxOnesCount3 = arr.Count(x => x & 1 == 1);\n        long maxZerosCount3\
    \ = arr.Count(x => ~x == 0);\n        long maxOnesCount4 = arr.Count(x => x &\
    \ 1 == 1);\n        long maxZerosCount4 = arr.Count(x => ~x == 0);\n        long\
    \ maxOnesCount5 = arr.Count(x => x & 1 == 1);\n        long maxZerosCount5 = arr.Count(x\
    \ => ~x == 0);\n        long maxOnesCount6 = arr.Count(x => x & 1 == 1);\n   \
    \     long maxZerosCount6 = arr.Count(x => ~x == 0);\n        long maxOnesCount7\
    \ = arr.Count(x => x & 1 == 1);\n        long maxZerosCount7 = arr.Count(x =>\
    \ ~x == 0);\n        long maxOnesCount8 = arr.Count(x => x & 1 == 1);\n      \
    \  long maxZerosCount8 = arr.Count(x => ~x == 0);\n        long maxOnesCount9\
    \ = arr.Count(x => x & 1 == 1);\n        long maxZerosCount9 = arr.Count(x =>\
    \ ~x == 0);\n        long maxOnesCount10 = arr.Count(x => x & 1 == 1);\n     \
    \   long maxZerosCount10 = arr.Count(x => ~x == 0);\n        long maxOnesCount11\
    \ = arr.Count(x => x & 1 == 1);\n        long maxZerosCount11 = arr.Count(x =>\
    \ ~x == 0);\n        long maxOnesCount12 = arr.Count(x => x & 1 == 1);\n     \
    \   long maxZerosCount12 = arr.Count(x => ~x == 0);\n        long maxOnesCount13\
    \ = arr.Count(x => x & 1 == 1);\n        long maxZerosCount13 = arr.Count(x =>\
    \ ~x == 0);\n        long maxOnesCount14 = arr.Count(x => x & 1 == 1);\n     \
    \   long maxZerosCount14 = arr.Count(x => ~x == 0);\n        long maxOnesCount15\
    \ = arr.Count(", "        long ones = 0;\n        long zeros = 0;\n        long\
    \ max = 0;\n        foreach (long n in arr) {\n            if (n == 1) ones++;\n\
    \            else if (n == 0) zeros++;\n            max = Math.Max(max, n);\n\
    \        }\n        long onesCount = 0;\n        long zerosCount = 0;\n      \
    \  long maxCount = 0;\n        foreach (long n in arr) {\n            if (n ==\
    \ 1) onesCount++;\n            else if (n == 0) zerosCount++;\n            maxCount\
    \ = Math.Max(maxCount, n);\n        }\n        List<long> result = new List<long>();\n\
    \        if (onesCount > zerosCount) {\n            foreach (long n in arr) {\n\
    \                if (n == 1) onesCount--;\n                else if (n == 0) zerosCount--;\n\
    \                maxCount = Math.Max(maxCount, n);\n            }\n          \
    \  foreach (long n in arr) {\n                if (n == 1) ones++;\n          \
    \      else if (n == 0) zeros++;\n                max = Math.Max(max, n);\n  \
    \          }\n        }\n        if (onesCount < zerosCount) {\n            foreach\
    \ (long n in arr) {\n                if (n == 1) ones++;\n                else\
    \ if (n == 0) zeros--;\n                max = Math.Max(max, n);\n            }\n\
    \            foreach (long n in arr) {\n                if (n == 1) onesCount++;\n\
    \                else if (n == 0) zerosCount--;\n                maxCount = Math.Max(maxCount,\
    \ n);\n            }\n        }\n        long onesCount2 = 0;\n        long zerosCount2\
    \ = 0;\n        long maxCount2 = 0;\n        foreach (long n in arr) {\n     \
    \       if (n == 1) onesCount2++;\n            else if (n == 0) zerosCount2++;\n\
    \            maxCount2 = Math.Max(maxCount2, n);\n        }\n        long onesCount3\
    \ = 0;\n        long zerosCount3 = 0;\n        long maxCount3 = 0;\n        foreach\
    \ (long n in arr) {\n            if (n == 1) onesCount3++;\n            else if\
    \ (n == 0) zerosCount3++;\n            maxCount3 = Math.Max(maxCount3, n);\n \
    \       }\n        if (onesCount > zerosCount) {\n            foreach (long n\
    \ in arr) {\n                if (n == 1) onesCount--;\n                else if\
    \ (n == 0) zeros--;\n                max = Math.Max(max, n);\n            }\n\
    \            foreach (long n in arr) {\n                if (n == 1) ones++;\n\
    \                else if (n == 0) zeros--;\n                max = Math.Max(max,\
    \ n);\n            }\n        }\n        if (onesCount < zerosCount) {\n     \
    \       foreach (long n in arr) {\n                if (n == 1) ones++;\n     \
    \           else if (n == 0) zeros++;\n                max = Math.Max(max, n);\n\
    \            }\n            foreach (long n in arr) {\n                if (n ==\
    \ 1) onesCount++;\n                else if (n == ", "        long ones = 0;\n\
    \        long zeros = 0;\n        List<long> result = new List<long>();\n    \
    \    foreach (long i in arr) {\n            if (i == 1) {\n                ones++;\n\
    \            }\n            else if (i == 0) {\n                zeros++;\n   \
    \         }\n            else {\n                result.Add(i);\n            }\n\
    \        }\n        if (ones > zeros) {\n            result.Sort();\n        }\n\
    \        else {\n            result.Sort();\n            result.Reverse();\n \
    \       }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n    \
    \    long min = 0;\n        foreach (long i in arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            }\n            else if (i == 0) {\n\
    \                zeros++;\n            }\n            else {\n               \
    \ max = Math.Max(max, i);\n                min = Math.Min(min, i);\n         \
    \   }\n        }\n        if (ones > zeros) {\n            long temp;\n      \
    \      long temp2;\n            long temp3;\n            long temp4;\n       \
    \     long temp5;\n            long temp6;\n            long temp7;\n        \
    \    long temp8;\n            long temp9;\n            long temp10;\n        \
    \    long temp11;\n            long temp12;\n            long temp13;\n      \
    \      long temp14;\n            long temp15;\n            long temp16;\n    \
    \        long temp17;\n            long temp18;\n            long temp19;\n  \
    \          long temp20;\n            long temp21;\n            long temp22;\n\
    \            long temp23;\n            long temp24;\n            long temp25;\n\
    \            long temp26;\n            long temp27;\n            long temp28;\n\
    \            long temp29;\n            long temp30;\n            long temp31;\n\
    \            long temp32;\n            long temp33;\n            long temp34;\n\
    \            long temp35;\n            long temp36;\n            long temp37;\n\
    \            long temp38;\n            long temp39;\n            long temp40;\n\
    \            long temp41;\n            long temp42;\n            long temp43;\n\
    \            long temp44;\n            long temp45;\n            long temp46;\n\
    \            long temp47;\n            long temp48;\n            long temp49;\n\
    \            long temp50;\n            long temp51;\n            long temp52;\n\
    \            long temp53;\n            long temp54;\n            long temp55;\n\
    \            long temp56;\n            long temp57;\n            long temp58;\n\
    \            long temp59;\n            long temp60;\n            long temp61;\n\
    \            long temp62;\n            long temp63;\n            long temp64;\n\
    \            long temp65;\n            long temp66;\n            long temp67;\n\
    \            long temp68;\n            long temp69;\n            long temp70;\n\
    \            long temp71;\n            long temp72;\n            long temp73;\n\
    \            long temp74;\n            ", "        long ones = 0;\n        long\
    \ zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n     \
    \       if (i == 1) {\n                ones++;\n            }\n            if\
    \ (i == 0) {\n                zeros++;\n            }\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        List<long> result\
    \ = new List<long>();\n        if (ones > zeros) {\n            long onesMax =\
    \ ones;\n            long zerosMax = zeros;\n            long maxMax = max;\n\
    \            while (onesMax > zerosMax && maxMax > 0) {\n                result.Add(maxMax);\n\
    \                onesMax -= maxMax;\n                zerosMax -= maxMax;\n   \
    \             maxMax -= maxMax;\n            }\n            while (zerosMax >\
    \ onesMax && maxMax > 0) {\n                result.Add(maxMax);\n            \
    \    zerosMax -= maxMax;\n                onesMax -= maxMax;\n               \
    \ maxMax -= maxMax;\n            }\n            while (onesMax > 0 && maxMax >\
    \ 0) {\n                result.Add(maxMax);\n                onesMax -= maxMax;\n\
    \                maxMax -= maxMax;\n            }\n            while (zerosMax\
    \ > 0 && maxMax > 0) {\n                result.Add(maxMax);\n                zerosMax\
    \ -= maxMax;\n                maxMax -= maxMax;\n            }\n        }\n  \
    \      else {\n            long onesMax = zeros;\n            long zerosMax =\
    \ ones;\n            long maxMax = max;\n            while (onesMax > zerosMax\
    \ && maxMax > 0) {\n                result.Add(maxMax);\n                onesMax\
    \ -= maxMax;\n                zerosMax -= maxMax;\n                maxMax -= maxMax;\n\
    \            }\n            while (zerosMax > onesMax && maxMax > 0) {\n     \
    \           result.Add(maxMax);\n                zerosMax -= maxMax;\n       \
    \         onesMax -= maxMax;\n                maxMax -= maxMax;\n            }\n\
    \            while (onesMax > 0 && maxMax > 0) {\n                result.Add(maxMax);\n\
    \                onesMax -= maxMax;\n                maxMax -= maxMax;\n     \
    \       }\n            while (zerosMax > 0 && maxMax > 0) {\n                result.Add(maxMax);\n\
    \                zerosMax -= maxMax;\n                maxMax -= maxMax;\n    \
    \        }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long ones = 0;\n        long zeros = 0;\n        long\
    \ max = 0;\n        foreach (long n in arr) {\n            if (n == 1) ones++;\n\
    \            else if (n == 0) zeros++;\n            else if (ones > zeros) {\n\
    \                max = Math.Max(max, ones);\n                result.Add(max);\n\
    \                ones = 0;\n            }\n            else if (zeros > ones)\
    \ {\n                max = Math.Max(max, zeros);\n                result.Add(max);\n\
    \                zeros = 0;\n            }\n        }\n        if (ones > zeros)\
    \ {\n            max = Math.Max(max, ones);\n            result.Add(max);\n  \
    \      }\n        if (zeros > ones) {\n            max = Math.Max(max, zeros);\n\
    \            result.Add(max);\n        }\n        return result;", "        long\
    \ ones = 0;\n        long zeros = 0;\n        long max = 0;\n        long min\
    \ = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n       \
    \         ones++;\n            } else if (i == 0) {\n                zeros++;\n\
    \            } else {\n                if (ones > zeros) {\n                 \
    \   max = i;\n                } else if (ones < zeros) {\n                   \
    \ min = i;\n                }\n            }\n        }\n        List<long> result\
    \ = new List<long>();\n        if (ones > zeros) {\n            foreach (long\
    \ i in arr) {\n                if (i == 1) {\n                    result.Add(1);\n\
    \                } else if (i == 0) {\n                    result.Add(0);\n  \
    \              } else {\n                    if (min > max) {\n              \
    \          result.Add(i);\n                    } else if (min < max) {\n     \
    \                   result.Add(0);\n                    }\n                }\n\
    \            }\n        } else if (ones < zeros) {\n            foreach (long\
    \ i in arr) {\n                if (i == 1) {\n                    result.Add(0);\n\
    \                } else if (i == 0) {\n                    result.Add(1);\n  \
    \              } else {\n                    if (min > max) {\n              \
    \          result.Add(0);\n                    } else if (min < max) {\n     \
    \                   result.Add(i);\n                    }\n                }\n\
    \            }\n        } else {\n            foreach (long i in arr) {\n    \
    \            if (i == 1) {\n                    result.Add(1);\n             \
    \   } else if (i == 0) {\n                    result.Add(0);\n               \
    \ } else {\n                    if (min > max) {\n                        result.Add(i);\n\
    \                    } else if (min < max) {\n                        result.Add(0);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long ones\
    \ = 0;\n        long tens = 0;\n        long hundreds = 0;\n        long thousands\
    \ = 0;\n        long ten_thousands = 0;\n        long hundred_thousands = 0;\n\
    \        long millions = 0;\n        long billions = 0;\n        long trillions\
    \ = 0;\n        long quadrillions = 0;\n        long quintillions = 0;\n     \
    \   long sextillions = 0;\n        long septillions = 0;\n        long octillions\
    \ = 0;\n        long nonillions = 0;\n        long decillions = 0;\n        long\
    \ undecillions = 0;\n        long duodecillions = 0;\n        long tredecillions\
    \ = 0;\n        long quattuordecillions = 0;\n        long quindecillions = 0;\n\
    \        long sexdecillions = 0;\n        long septendecillions = 0;\n       \
    \ long octodecillions = 0;\n        long novemdecillions = 0;\n        long vigintillions\
    \ = 0;\n        long unvigintillions = 0;\n        long duovigintillions = 0;\n\
    \        long trevigintillions = 0;\n        long quattuorvigintillions = 0;\n\
    \        long quinvigintillions = 0;\n        long sexvigintillions = 0;\n   \
    \     long septenvigintillions = 0;\n        long octovigintillions = 0;\n   \
    \     long novemvigintillions = 0;\n        long vigintillions = 0;\n        long\
    \ unvigintillions = 0;\n        long duovigintillions = 0;\n        long trevigintillions\
    \ = 0;\n        long quattuorvigintillions = 0;\n        long quinvigintillions\
    \ = 0;\n        long sexvigintillions = 0;\n        long septenvigintillions =\
    \ 0;\n        long octovigintillions = 0;\n        long novemvigintillions = 0;\n\
    \        long vigintillions = 0;\n        long unvigintillions = 0;\n        long\
    \ duovigintillions = 0;\n        long trevigintillions = 0;\n        long quattuorvigintillions\
    \ = 0;\n        long quinvigintillions = 0;\n        long sexvigintillions = 0;\n\
    \        long septenvigintillions = 0;\n        long octovigintillions = 0;",
  "        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  foreach (long i in arr) {\n            if (i == 1) ones++;\n            if\
    \ (i == 0) zeros++;\n            if (i > max) max = i;\n        }\n        long\
    \ onesMax = ones;\n        long zerosMax = zeros;\n        long maxMax = max;\n\
    \        long onesMin = ones;\n        long zerosMin = zeros;\n        long maxMin\
    \ = max;\n        long onesSum = 0;\n        long zerosSum = 0;\n        long\
    \ maxSum = 0;\n        long onesAvg = 0;\n        long zerosAvg = 0;\n       \
    \ long maxAvg = 0;\n        long onesDiff = 0;\n        long zerosDiff = 0;\n\
    \        long maxDiff = 0;\n        long onesDiffAvg = 0;\n        long zerosDiffAvg\
    \ = 0;\n        long maxDiffAvg = 0;\n        long onesDiffSum = 0;\n        long\
    \ zerosDiffSum = 0;\n        long maxDiffSum = 0;\n        long onesDiffAvgSum\
    \ = 0;\n        long zerosDiffAvgSum = 0;\n        long maxDiffAvgSum = 0;\n \
    \       long onesDiffSumAvg = 0;\n        long zerosDiffSumAvg = 0;\n        long\
    \ maxDiffSumAvg = 0;\n        long onesDiffAvgSumAvg = 0;\n        long zerosDiffAvgSumAvg\
    \ = 0;\n        long maxDiffAvgSumAvg = 0;\n        long onesDiffSumAvgSum = 0;\n\
    \        long zerosDiffSumAvgSum = 0;\n        long maxDiffAvgSumAvg = 0;\n  \
    \      long onesDiffSumAvgSumAvg = 0;\n        long zerosDiffSumAvgSumAvg = 0;\n\
    \        long maxDiffAvgSumAvgSum = 0;\n        long onesDiffSumAvgSumAvg = 0;\n\
    \        long zerosDiffSumAvgSumAvg = 0;\n        long maxDiffAvgSumAvgSum = 0;\n\
    \        long onesDiffSumAvgSumAvgSum = 0;\n        long zerosDiffSumAvgSumAvg\
    \ = 0;\n        long maxDiffAvgSumAvgSum = 0;\n        long onesDiffSumAvgSumAvgSum\
    \ = 0;\n        long zerosDiffSumAvgSumAvg = 0;\n        long maxDiffAvgSumAvgSum\
    \ = 0;\n        long onesDiffSumAvgSumAvgSum = 0;\n        long zerosDiffSumAvgSumAvg\
    \ = 0;\n        long maxDiffAvgSumAvgSum = 0;\n        long onesDiffSumAvgSumAvgSum\
    \ = 0;\n        long zerosDiffSumAvgSumAvg = 0;\n        long maxDiffAvgSumAvgSum\
    \ = 0;\n        long onesDiffSumAvgSumAvgSum = 0;\n        long zerosDiffSumAvgSumAvg\
    \ = 0;", "        var result = new List<long>();\n        foreach (var i in arr)\
    \ {\n            int count = 0;\n            while (i != 0) {\n              \
    \  count += i & 1;\n                i >>= 1;\n            }\n            result.Add(count);\n\
    \        }\n        return result.OrderBy(x => x).ToList();", "        long ones\
    \ = arr.Sum(x => x & 1L);\n        long zeros = arr.Sum(x => x >> 1);\n      \
    \  if (ones > zeros) {\n            return arr.OrderBy(x => x).ToList();\n   \
    \     }\n        return arr.OrderByDescending(x => x).ToList();", "        List<long>\
    \ result = new List<long>();\n        long ones = 0;\n        long zeros = 0;\n\
    \        foreach (long i in arr) {\n            ones += i;\n        }\n      \
    \  foreach (long i in arr) {\n            zeros += i;\n        }\n        long\
    \ onesCount = ones;\n        long zerosCount = zeros;\n        long onesSum =\
    \ 0;\n        long zerosSum = 0;\n        foreach (long i in arr) {\n        \
    \    onesSum += i;\n        }\n        foreach (long i in arr) {\n           \
    \ zerosSum += i;\n        }\n        long onesSumCount = onesSum;\n        long\
    \ zerosSumCount = zerosSum;\n        long onesSumCount2 = onesSumCount * onesCount;\n\
    \        long zerosSumCount2 = zerosSumCount * zerosCount;\n        long onesSumCount3\
    \ = onesSumCount2 * onesCount;\n        long zerosSumCount3 = zerosSumCount2 *\
    \ zerosCount;\n        long onesSumCount4 = onesSumCount3 * onesCount;\n     \
    \   long zerosSumCount4 = zerosSumCount3 * zerosCount;\n        long onesSumCount5\
    \ = onesSumCount4 * onesCount;\n        long zerosSumCount5 = zerosSumCount4 *\
    \ zerosCount;\n        long onesSumCount6 = onesSumCount5 * onesCount;\n     \
    \   long zerosSumCount6 = zerosSumCount5 * zerosCount;\n        long onesSumCount7\
    \ = onesSumCount6 * onesCount;\n        long zerosSumCount7 = zerosSumCount6 *\
    \ zerosCount;\n        long onesSumCount8 = onesSumCount7 * onesCount;\n     \
    \   long zerosSumCount8 = zerosSumCount7 * zerosCount;\n        long onesSumCount9\
    \ = onesSumCount8 * onesCount;\n        long zerosSumCount9 = zerosSumCount8 *\
    \ zerosCount;\n        long onesSumCount10 = onesSumCount9 * onesCount;\n    \
    \    long zerosSumCount10 = zerosSumCount9 * zerosCount;\n        long onesSumCount11\
    \ = onesSumCount10 * onesCount;\n        long zerosSumCount11 = zerosSumCount10\
    \ * zerosCount;\n        long onesSumCount12 = onesSumCount11 * onesCount;\n \
    \       long zerosSumCount12 = zerosSumCount11 * zerosCount;\n        long onesSumCount13\
    \ = onesSumCount12 * onesCount;\n        long zerosSumCount13 = zerosSumCount12\
    \ * zerosCount;", "        long ones = 0;\n        long zeros = 0;\n        long\
    \ max = 0;\n        long min = 0;\n        foreach (long i in arr) {\n       \
    \     ones += i;\n            zeros -= i;\n            max = Math.Max(max, i);\n\
    \            min = Math.Min(min, i);\n        }\n        long onesCount = ones;\n\
    \        long zerosCount = zeros;\n        long maxCount = max;\n        long\
    \ minCount = min;\n        long onesCount2 = onesCount * onesCount;\n        long\
    \ zerosCount2 = zerosCount * zerosCount;\n        long maxCount2 = maxCount *\
    \ maxCount;\n        long minCount2 = minCount * minCount;\n        long onesCount3\
    \ = onesCount2 * onesCount;\n        long zerosCount3 = zerosCount2 * zerosCount;\n\
    \        long maxCount3 = maxCount2 * maxCount;\n        long minCount3 = minCount2\
    \ * minCount;\n        long onesCount4 = onesCount3 * onesCount;\n        long\
    \ zerosCount4 = zerosCount3 * zerosCount;\n        long maxCount4 = maxCount3\
    \ * maxCount;\n        long minCount4 = minCount3 * minCount;\n        long onesCount5\
    \ = onesCount4 * onesCount;\n        long zerosCount5 = zerosCount4 * zerosCount;\n\
    \        long maxCount5 = maxCount4 * maxCount;\n        long minCount5 = minCount4\
    \ * minCount;\n        long onesCount6 = onesCount5 * onesCount;\n        long\
    \ zerosCount6 = zerosCount5 * zerosCount;\n        long maxCount6 = maxCount5\
    \ * maxCount;\n        long minCount6 = minCount5 * minCount;\n        long onesCount7\
    \ = onesCount6 * onesCount;\n        long zerosCount7 = zerosCount6 * zerosCount;\n\
    \        long maxCount7 = maxCount6 * maxCount;\n        long minCount7 = minCount6\
    \ * minCount;\n        long onesCount8 = onesCount7 * onesCount;\n        long\
    \ zerosCount8 = zerosCount7 * zerosCount;\n        long maxCount8 = maxCount7\
    \ * maxCount;\n        long minCount8 = minCount7 * minCount;\n        long onesCount9\
    \ = onesCount8 * onesCount;\n        long zerosCount9 = zerosCount8 * zerosCount;\n\
    \        long maxCount9 = maxCount8 * maxCount;\n        long minCount9 = minCount8\
    \ * minCount;\n        long onesCount10 = onesCount9 * onesCount;", "        List<long>\
    \ result = new List<long>();\n        long ones = 0;\n        long zeros = 0;\n\
    \        long max = 0;\n        foreach (long i in arr) {\n            ones +=\
    \ i;\n            zeros -= i;\n            if (ones > max) {\n               \
    \ max = ones;\n            }\n            if (zeros > max) {\n               \
    \ max = zeros;\n            }\n        }\n        long onesCount = 0;\n      \
    \  long zerosCount = 0;\n        long maxCount = 0;\n        foreach (long i in\
    \ arr) {\n            onesCount += i;\n            zerosCount -= i;\n        \
    \    if (onesCount > maxCount) {\n                maxCount = onesCount;\n    \
    \        }\n            if (zerosCount > maxCount) {\n                maxCount\
    \ = zerosCount;\n            }\n        }\n        long onesCount2 = 0;\n    \
    \    long zerosCount2 = 0;\n        long maxCount2 = 0;\n        foreach (long\
    \ i in arr) {\n            onesCount2 += i;\n            zerosCount2 -= i;\n \
    \           if (onesCount2 > maxCount2) {\n                maxCount2 = onesCount2;\n\
    \            }\n            if (zerosCount2 > maxCount2) {\n                maxCount2\
    \ = zerosCount2;\n            }\n        }\n        long onesCount3 = 0;\n   \
    \     long zerosCount3 = 0;\n        long maxCount3 = 0;\n        foreach (long\
    \ i in arr) {\n            onesCount3 += i;\n            zerosCount3 -= i;\n \
    \           if (onesCount3 > maxCount3) {\n                maxCount3 = onesCount3;\n\
    \            }\n            if (zerosCount3 > maxCount3) {\n                maxCount3\
    \ = zerosCount3;\n            }\n        }\n        long onesCount4 = 0;\n   \
    \     long zerosCount4 = 0;\n        long maxCount4 = 0;\n        foreach (long\
    \ i in arr) {\n            onesCount4 += i;\n            zerosCount4 -= i;\n \
    \           if (onesCount4 > maxCount4) {\n                maxCount4 = onesCount4;\n\
    \            }\n            if (zerosCount4 > maxCount4) {\n                maxCount4\
    \ = zerosCount4;\n            }\n        }\n        long onesCount5 = 0;\n   \
    \     long zerosCount5 = 0;\n        long maxCount5 = 0;\n        foreach (long\
    \ i in arr) {\n            onesCount5 += i;\n            zerosCount5 -= i;\n \
    \           if (onesCount5 > maxCount5) {\n                maxCount5 = onesCount5;\n\
    \            }\n            if (zerosCount5 > maxCount5) {\n                maxCount5\
    \ = zerosCount5;\n            }\n        }\n        long onesCount6 = 0;\n   \
    \     long zerosCount6 = 0;\n        long maxCount6 = 0;\n        foreach (long\
    \ i in arr) {", "        var result = new List<long>();\n        foreach (var\
    \ item in arr) {\n            var binary = Convert.ToString(item, 2);\n      \
    \      var count = binary.Count(c => c == '1');\n            result.Add(count);\n\
    \        }\n        return result.OrderBy(x => x).ToList();", "        List<long>\
    \ result = new List<long>();\n        long ones = 0;\n        long zeros = 0;\n\
    \        foreach (long i in arr) {\n            if (i == 1) {\n              \
    \  ones++;\n            }\n            if (i == 0) {\n                zeros++;\n\
    \            }\n        }\n        if (ones > zeros) {\n            int onesIndex\
    \ = arr.FindIndex(i => i == 1);\n            int zerosIndex = arr.FindIndex(i\
    \ => i == 0);\n            int onesIndex = arr.FindIndex(i => i == 1);\n     \
    \       int zerosIndex = arr.FindIndex(i => i == 0);\n            int onesIndex\
    \ = arr.FindIndex(i => i == 1);\n            int zerosIndex = arr.FindIndex(i\
    \ => i == 0);\n            int onesIndex = arr.FindIndex(i => i == 1);\n     \
    \       int zerosIndex = arr.FindIndex(i => i == 0);\n            int onesIndex\
    \ = arr.FindIndex(i => i == 1);\n            int zerosIndex = arr.FindIndex(i\
    \ => i == 0);\n            int onesIndex = arr.FindIndex(i => i == 1);\n     \
    \       int zerosIndex = arr.FindIndex(i => i == 0);\n            int onesIndex\
    \ = arr.FindIndex(i => i == 1);\n            int zerosIndex = arr.FindIndex(i\
    \ => i == 0);\n            int onesIndex = arr.FindIndex(i => i == 1);\n     \
    \       int zerosIndex = arr.FindIndex(i => i == 0);\n            int onesIndex\
    \ = arr.FindIndex(i => i == 1);\n            int zerosIndex = arr.FindIndex(i\
    \ => i == 0);\n            int onesIndex = arr.FindIndex(i => i == 1);\n     \
    \       int zerosIndex = arr.FindIndex(i => i == 0);\n            int onesIndex\
    \ = arr.FindIndex(i => i == 1);\n            int zerosIndex = arr.FindIndex(i\
    \ => i == 0);\n            int onesIndex = arr.FindIndex(i => i == 1);\n     \
    \       int zerosIndex = arr.FindIndex(i => i == 0);\n            int onesIndex\
    \ = arr.FindIndex(i => i == 1);\n            int zerosIndex = arr.FindIndex(i\
    \ => i == 0);\n            int onesIndex = arr.FindIndex(i => i == 1);\n     \
    \       int zerosIndex = arr.FindIndex(i => i == 0);\n            int onesIndex\
    \ = arr.FindIndex(i => i == 1);\n            int zerosIndex = arr.FindIndex(i\
    \ => i == 0);\n            int onesIndex = arr.FindIndex(i => i == 1);\n     \
    \       int zerosIndex = arr.FindIndex(i => i == 0);\n            int onesIndex\
    \ = arr.FindIndex(i => i == 1);\n            int zerosIndex = arr.FindIndex(i\
    \ => i == 0);\n            int onesIndex = arr.FindIndex(i => i == 1);\n     \
    \       int zerosIndex = arr.FindIndex(i => i == 0);\n            int onesIndex\
    \ = arr.", "        long ones = 0;\n        long zeros = 0;\n        long max\
    \ = 0;\n        long min = 0;\n        foreach (long i in arr) {\n           \
    \ if (i == 1) {\n                ones++;\n            }\n            if (i ==\
    \ 0) {\n                zeros++;\n            }\n            if (i > max) {\n\
    \                max = i;\n            }\n            if (i < min) {\n       \
    \         min = i;\n            }\n        }\n        List<long> result = new\
    \ List<long>();\n        if (ones > zeros) {\n            result.Add(min);\n \
    \           result.AddRange(arr.Where(i => i == min).OrderBy(i => i).Take(ones\
    \ - 1).ToList());\n            result.Add(max);\n            result.AddRange(arr.Where(i\
    \ => i == max).OrderBy(i => i).Take(zeros - 1).ToList());\n        }\n       \
    \ if (ones < zeros) {\n            result.AddRange(arr.Where(i => i == min).OrderBy(i\
    \ => i).Take(zeros - 1).ToList());\n            result.Add(max);\n           \
    \ result.AddRange(arr.Where(i => i == max).OrderBy(i => i).Take(ones - 1).ToList());\n\
    \        }\n        if (ones == zeros) {\n            result.AddRange(arr.Where(i\
    \ => i == min).OrderBy(i => i).Take(ones - 1).ToList());\n            result.AddRange(arr.Where(i\
    \ => i == max).OrderBy(i => i).Take(ones - 1).ToList());\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long ones\
    \ = 0;\n        long zeros = 0;\n        long max = 0;\n        long min = 0;\n\
    \        foreach (long i in arr) {\n            ones += i;\n            zeros\
    \ -= i;\n            if (ones > max) {\n                max = ones;\n        \
    \    }\n            if (zeros > min) {\n                min = zeros;\n       \
    \     }\n        }\n        long onesMax = max - min;\n        long onesMin =\
    \ min - max;\n        long onesSum = onesMax + onesMin;\n        long onesDiff\
    \ = onesSum - ones;\n        long zeroSum = zeros - onesSum;\n        long zeroDiff\
    \ = zeroSum - zeros;\n        long onesDiffSum = onesDiff + zeroDiff;\n      \
    \  long onesDiffDiff = onesDiffSum - onesDiff;\n        long onesDiffDiffSum =\
    \ onesDiffDiff + zeroDiff;\n        long onesDiffDiffDiff = onesDiffDiffSum -\
    \ onesDiffDiff;\n        long onesDiffDiffDiffSum = onesDiffDiffDiff + zeroDiff;\n\
    \        long onesDiffDiffDiffDiff = onesDiffDiffDiffSum - onesDiffDiffDiff;\n\
    \        long onesDiffDiffDiffDiffSum = onesDiffDiffDiffDiff + zeroDiff;\n   \
    \     long onesDiffDiffDiffDiffDiff = onesDiffDiffDiffDiffSum - onesDiffDiffDiffDiff;\n\
    \        long onesDiffDiffDiffDiffDiffSum = onesDiffDiffDiffDiffDiff + zeroDiff;\n\
    \        long onesDiffDiffDiffDiffDiffDiff = onesDiffDiffDiffDiffDiffSum - onesDiffDiffDiffDiffDiff;\n\
    \        long onesDiffDiffDiffDiffDiffDiffSum = onesDiffDiffDiffDiffDiffDiff +\
    \ zeroDiff;\n        long onesDiffDiffDiffDiffDiffDiffDiff = onesDiffDiffDiffDiffDiffDiffSum\
    \ - onesDiffDiffDiffDiffDiffDiff;\n        long onesDiffDiffDiffDiffDiffDiffDiffSum\
    \ = onesDiffDiffDiffDiffDiffDiffDiff + zeroDiff;\n        long onesDiffDiffDiffDiffDiffDiffDiffDiff\
    \ = onesDiffDiffDiffDiffDiffDiffDiffSum - onesDiffDiffDiffDiffDiffDiffDiff;\n\
    \        long onesDiffDiffDiffDiffDiffDiffDiffDiffSum = onesDiffDiffDiffDiffDiffDiffDiffDiffDiff\
    \ + zeroDiff", "        List<long> result = new List<long>();\n        long ones\
    \ = 0;\n        long zeros = 0;\n        foreach (long n in arr) {\n         \
    \   if (n == 1)\n                ones++;\n            else\n                zeros++;\n\
    \        }\n        long onesCount = 0;\n        long zerosCount = 0;\n      \
    \  long maxOnesCount = ones;\n        long maxZeroCount = zeros;\n        long\
    \ maxOnesCountInt = maxOnesCount;\n        long maxZeroCountInt = maxZeroCount;\n\
    \        long maxOnesCountLong = maxOnesCount;\n        long maxZeroCountLong\
    \ = maxZeroCount;\n        long maxOnesCountLongInt = maxOnesCount;\n        long\
    \ maxZeroCountLongInt = maxZeroCount;\n        long maxOnesCountLongLong = maxOnesCount;\n\
    \        long maxZeroCountLongLong = maxZeroCount;\n        long maxOnesCountLongLongInt\
    \ = maxOnesCount;\n        long maxZeroCountLongLongInt = maxZeroCount;\n    \
    \    long maxOnesCountLongLongLong = maxOnesCount;\n        long maxZeroCountLongLongLong\
    \ = maxZeroCount;\n        long maxOnesCountLongLongLongInt = maxOnesCount;\n\
    \        long maxZeroCountLongLongLongInt = maxZeroCount;\n        long maxOnesCountLongLongLongLong\
    \ = maxOnesCount;\n        long maxZeroCountLongLongLongLong = maxZeroCount;\n\
    \        long maxOnesCountLongLongLongLongInt = maxOnesCount;\n        long maxZeroCountLongLongLongLongInt\
    \ = maxZeroCount;\n        long maxOnesCountLongLongLongLongLong = maxOnesCount;\n\
    \        long maxZeroCountLongLongLongLongLong = maxZeroCount;\n        long maxOnesCountLongLongLongLongLongInt\
    \ = maxOnesCount;\n        long maxZeroCountLongLongLongLongLongInt = maxZeroCount;\n\
    \        long maxOnesCountLongLongLongLongLongLong = maxOnesCount;\n        long\
    \ maxZeroCountLongLongLongLongLongLong = maxZeroCount;\n        long maxOnesCountLongLongLongLongLongLongInt\
    \ = maxOnesCount;\n        long maxZeroCountLongLongLongLongLongLongInt = maxZeroCount;\n\
    \        long maxOnesCountLongLongLongLongLongLongLong = maxOnesCount;\n     \
    \   long maxZeroCountLongLong", "        List<long> result = new List<long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        foreach (long i in arr)\
    \ {\n            if (i == 1) {\n                ones++;\n            }\n     \
    \       else {\n                zeros++;\n            }\n        }\n        if\
    \ (ones > zeros) {\n            int onesCount = 0;\n            int zerosCount\
    \ = 0;\n            foreach (long i in arr) {\n                if (i == 1) {\n\
    \                    onesCount++;\n                }\n                else {\n\
    \                    zerosCount++;\n                }\n            }\n       \
    \     int onesCountInt = Convert.ToInt32(Math.Pow(2, onesCount));\n          \
    \  int zerosCountInt = Convert.ToInt32(Math.Pow(2, zerosCount));\n           \
    \ int onesCountDecimal = onesCountInt - 1;\n            int zerosCountDecimal\
    \ = zerosCountInt - 1;\n            int onesCountDecimalInt = Convert.ToInt32(Math.Pow(2,\
    \ onesCountDecimal));\n            int zerosCountDecimalInt = Convert.ToInt32(Math.Pow(2,\
    \ zerosCountDecimal));\n            int onesCountDecimalDecimal = onesCountDecimalInt\
    \ - 1;\n            int zerosCountDecimalDecimal = zerosCountDecimalInt - 1;\n\
    \            int onesCountDecimalDecimalInt = Convert.ToInt32(Math.Pow(2, onesCountDecimalDecimal));\n\
    \            int zerosCountDecimalDecimalInt = Convert.ToInt32(Math.Pow(2, zerosCountDecimalDecimal));\n\
    \            int onesCountDecimalDecimalDecimal = onesCountDecimalDecimalInt -\
    \ 1;\n            int zerosCountDecimalDecimalDecimal = zerosCountDecimalDecimalInt\
    \ - 1;\n            int onesCountDecimalDecimalDecimalInt = Convert.ToInt32(Math.Pow(2,\
    \ onesCountDecimalDecimalDecimal));\n            int zerosCountDecimalDecimalDecimalInt\
    \ = Convert.ToInt32(Math.Pow(2, zerosCountDecimalDecimalDecimal));\n         \
    \   int onesCountDecimalDecimalDecimalDecimal = onesCountDecimalDecimalDecimalInt\
    \ - 1;\n            int zerosCountDecimalDecimalDecimalDecimal = zerosCountDecimalDecimalDecimalInt\
    \ - 1;\n            int onesCountDecimalDecimalDecimalDecimalInt = Convert.ToInt32(Math.Pow(2,\
    \ onesCountDecimalDecimalDecimalDecimal));\n            int zerosCountDecimalDecimalDecimalDecimalInt\
    \ = Convert.ToInt32(Math.Pow(2, zerosCountDecimalDecimalDecimalDecimal));\n  \
    \          int onesCountDecimalDecimalDecimalDecimalDecimal = onesCountDecimalDecimalDecimalDecimalDecimalInt\
    \ - 1;\n            int zerosCountDecimalDecimalDecimalDecimalDecimal = zerosCountDecimalDecimalDecimalDecimalDecimalInt\
    \ - 1;\n            int onesCountDecimalDecimalDecimalDecimalDecimalInt = ", " \
    \       long ones = arr.Sum(x => x & 1);\n        long zeros = arr.Sum(x => ~x);\n\
    \        long maxOnes = arr.Max(x => x & 1);\n        long maxZeros = arr.Max(x\
    \ => ~x);\n        long maxOnesZeros = maxOnes - maxZeros;\n        long maxOnesOnes\
    \ = maxOnes - ones;\n        long maxOnesTwos = maxOnes - twos;\n        long\
    \ maxOnesThrees = maxOnes - threes;\n        long maxOnesFours = maxOnes - fours;\n\
    \        long maxOnesFives = maxOnes - fives;\n        long maxOnesSixes = maxOnes\
    \ - sixes;\n        long maxOnesSevens = maxOnes - sevens;\n        long maxOnesEights\
    \ = maxOnes - eights;\n        long maxOnesNines = maxOnes - nines;\n        long\
    \ maxOnesTens = maxOnes - tens;\n        long maxOnesElevens = maxOnes - elevens;\n\
    \        long maxOnesTwelves = maxOnes - twelves;\n        long maxOnesThirteens\
    \ = maxOnes - thirteens;\n        long maxOnesFourteens = maxOnes - fourteens;\n\
    \        long maxOnesFifteens = maxOnes - fifteens;\n        long maxOnesSixteens\
    \ = maxOnes - sixteens;\n        long maxOnesSeventeens = maxOnes - seventeens;\n\
    \        long maxOnesEighteens = maxOnes - eighteens;\n        long maxOnesNineteens\
    \ = maxOnes - nineteens;\n        long maxOnesTwenty = maxOnes - twenty;\n   \
    \     long maxOnesTwentyOnes = maxOnes - twentyOnes;\n        long maxOnesTwentyTwos\
    \ = maxOnes - twentyTwos;\n        long maxOnesTwentyThrees = maxOnes - twentyThrees;\n\
    \        long maxOnesTwentyFours = maxOnes - twentyFours;\n        long maxOnesTwentyFives\
    \ = maxOnes - twentyFives;\n        long maxOnesTwentySixes = maxOnes - twentySixes;\n\
    \        long maxOnesTwentySevens = maxOnes - twentySevens;\n        long maxOne",
  "        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  foreach (long i in arr) {\n            if (i == 1) ones++;\n            else\
    \ if (i == 0) zeros++;\n            else if (i > max) max = i;\n        }\n  \
    \      List<long> result = new List<long>();\n        long onesMax = 0;\n    \
    \    long zerosMax = 0;\n        long maxMax = 0;\n        long min = 0;\n   \
    \     long maxMin = 0;\n        long minMax = 0;\n        foreach (long i in arr)\
    \ {\n            if (i == 1) onesMax++;\n            else if (i == 0) zerosMax++;\n\
    \            else if (i > maxMax) maxMax = i;\n            else if (i < min) min\
    \ = i;\n            else if (i < minMax) minMax = i;\n            else if (i >\
    \ maxMin) maxMin = i;\n        }\n        long onesMaxMax = 0;\n        long zerosMaxMax\
    \ = 0;\n        long maxMaxMax = 0;\n        long minMaxMax = 0;\n        long\
    \ maxMinMax = 0;\n        long minMaxMin = 0;\n        long maxMinMin = 0;\n \
    \       long minMaxMin = 0;\n        long maxMinMin = 0;\n        long minMaxMin\
    \ = 0;\n        long maxMinMin = 0;\n        long minMaxMin = 0;\n        long\
    \ maxMinMin = 0;\n        long minMaxMin = 0;\n        long maxMinMin = 0;\n \
    \       long minMaxMin = 0;\n        long maxMinMin = 0;\n        long minMaxMin\
    \ = 0;\n        long maxMinMin = 0;\n        long minMaxMin = 0;\n        long\
    \ maxMinMin = 0;\n        long minMaxMin = 0;\n        long maxMinMin = 0;\n \
    \       long minMaxMin = 0;\n        long maxMinMin = 0;\n        long minMaxMin\
    \ = 0;\n        long maxMinMin = 0;\n        long minMaxMin = 0;\n        long\
    \ maxMinMin = 0;\n        long minMaxMin = 0;\n        long maxMinMin = 0;\n \
    \       long minMaxMin = 0;\n        long maxMinMin = 0;\n        long minMaxMin\
    \ = 0;\n        long maxMinMin = 0;\n        long minMaxMin = 0;\n        long\
    \ maxMinMin = 0;\n        long minMaxMin = 0;\n        long maxMinMin = 0;\n \
    \       long minMaxMin = 0;\n        long maxMinMin = 0;\n        long minMaxMin\
    \ = 0;\n        long maxMinMin = 0;\n        long minMaxMin = 0;\n        long\
    \ maxMinMin = 0;\n        long minMaxMin = 0;\n        long maxMinMin = 0;\n \
    \       long minMaxMin = 0;\n        long maxMinMin = 0;\n        long minMaxMin\
    \ = 0;\n        long max", "        long ones = 0;\n        long zeros = 0;\n\
    \        long max = 0;\n        long min = 0;\n        foreach (long i in arr)\
    \ {\n            if (i == 1) {\n                ones++;\n            }\n     \
    \       if (i == 0) {\n                zeros++;\n            }\n            if\
    \ (i > max) {\n                max = i;\n            }\n            if (i < min)\
    \ {\n                min = i;\n            }\n        }\n        long onesMax\
    \ = ones * max;\n        long onesMin = ones * min;\n        long zerosMax = zeros\
    \ * max;\n        long zerosMin = zeros * min;\n        long onesMinMax = onesMin\
    \ + onesMax;\n        long zerosMinMax = zerosMin + zerosMax;\n        long onesMinMaxMin\
    \ = onesMin + onesMax + onesMinMax;\n        long zerosMinMaxMin = zerosMin +\
    \ zerosMax + zerosMinMax;\n        long onesMinMaxMinMinMax = onesMin + onesMax\
    \ + onesMinMax + zerosMin + zerosMax + zerosMinMax;\n        long zerosMinMaxMinMax\
    \ = zerosMin + zerosMax + zerosMinMax + onesMin + onesMax + onesMinMax + zerosMin\
    \ + zerosMax + zerosMinMax;\n        long onesMinMaxMinMaxMinMax = onesMin + onesMax\
    \ + onesMinMax + zerosMin + zerosMax + zerosMinMax + onesMin + onesMax + onesMinMax\
    \ + zerosMin + zerosMax + zerosMinMax;\n        long zerosMinMaxMinMaxMinMax =\
    \ zerosMin + zerosMax + zerosMinMax + onesMin + onesMax + onesMinMax + zerosMin\
    \ + zerosMax + zerosMinMax + onesMin + onesMax + onesMinMax + zerosMin + zerosMax\
    \ + zerosMinMax;\n        long onesMinMaxMinMaxMinMaxMinMax = onesMin + onesMax\
    \ + onesMinMax + zerosMin + zerosMax + zerosMinMax + onesMin + onesMax + onesMinMax\
    \ + zerosMin + zerosMax + zerosMinMax + onesMin + onesMax + onesMinMax + zerosMin\
    \ + zerosMax + zerosMinMax;\n        long zerosMinMaxMinMaxMinMaxMinMax = zerosMin\
    \ + zerosMax + zerosMinMax + onesMin + onesMax + onesMinMax + zerosMin + zerosMax\
    \ + zerosMinMax + ", "        long ones = 0;\n        long zeros = 0;\n      \
    \  long max = 0;\n        foreach (long n in arr) {\n            if (n == 1) ones++;\n\
    \            else if (n == 0) zeros++;\n            else max = Math.Max(max, n);\n\
    \        }\n        List<long> result = new List<long>();\n        long onesCount\
    \ = 0;\n        long zerosCount = 0;\n        long maxCount = 0;\n        foreach\
    \ (long n in arr) {\n            if (n == 1) onesCount++;\n            else if\
    \ (n == 0) zerosCount++;\n            else maxCount = Math.Max(maxCount, n);\n\
    \        }\n        if (onesCount > zerosCount) {\n            long onesSum =\
    \ 0;\n            long zerosSum = 0;\n            long maxSum = 0;\n         \
    \   foreach (long n in arr) {\n                if (n == 1) onesSum += 1;\n   \
    \             else if (n == 0) zerosSum += 1;\n                else maxSum = Math.Max(maxSum,\
    \ n);\n            }\n            long onesSum2 = onesSum * onesCount;\n     \
    \       long zerosSum2 = zerosSum * zerosCount;\n            long maxSum2 = maxSum\
    \ * maxCount;\n            long onesSum3 = onesSum * onesSum2;\n            long\
    \ zerosSum3 = zerosSum * zerosSum2;\n            long maxSum3 = maxSum * maxSum2;\n\
    \            long onesSum4 = onesSum3 * onesSum3;\n            long zerosSum4\
    \ = zerosSum3 * zerosSum3;\n            long maxSum4 = maxSum3 * maxSum3;\n  \
    \          long onesSum5 = onesSum4 * onesSum4;\n            long zerosSum5 =\
    \ zerosSum4 * zerosSum4;\n            long maxSum5 = maxSum4 * maxSum4;\n    \
    \        long onesSum6 = onesSum5 * onesSum5;\n            long zerosSum6 = zerosSum5\
    \ * zerosSum5;\n            long maxSum6 = maxSum5 * maxSum5;\n            long\
    \ onesSum7 = onesSum6 * onesSum6;\n            long zerosSum7 = zerosSum6 * zerosSum6;\n\
    \            long maxSum7 = maxSum6 * maxSum6;\n            long onesSum8 = onesSum7\
    \ * onesSum7;\n            long zerosSum8 = zerosSum7 * zerosSum7;\n         \
    \   long maxSum8 = maxSum7 * maxSum7;\n            long onesSum9 = onesSum8 *\
    \ onesSum8;\n            long zerosSum9 = zerosSum8 * zerosSum8;\n           \
    \ long maxSum9 = maxSum8 * maxSum8;\n            long onesSum10 = onesSum9 * onesSum9;\n\
    \            long ", "        var result = new List<long>();\n        foreach\
    \ (var item in arr) {\n            var binary = Convert.ToString(item, 2);\n \
    \           var count = binary.Count(c => c == '1');\n            result.Add(count);\n\
    \        }\n        return result.OrderBy(x => x).ToList();", "        List<long>\
    \ result = new List<long>();\n        long ones = 0;\n        long zeros = 0;\n\
    \        long max = 0;\n        foreach (long n in arr) {\n            if (n ==\
    \ 1)\n                ones++;\n            else\n                zeros++;\n  \
    \          if (ones > zeros)\n                max = ones;\n            else\n\
    \                max = zeros;\n        }\n        long onesMax = max / ones;\n\
    \        long zerosMax = max / zeros;\n        long onesMin = onesMax * ones;\n\
    \        long zerosMin = zerosMax * zeros;\n        long onesMax2 = onesMax *\
    \ ones;\n        long zerosMax2 = zerosMax * zeros;\n        long onesMin2 = onesMin\
    \ * ones;\n        long zerosMin2 = zerosMin * zeros;\n        long onesMax3 =\
    \ onesMax2 * ones;\n        long zerosMax3 = zerosMax2 * zeros;\n        long\
    \ onesMin3 = onesMin2 * ones;\n        long zerosMin3 = zerosMin2 * zeros;\n \
    \       long onesMax4 = onesMax3 * ones;\n        long zerosMax4 = zerosMax3 *\
    \ zeros;\n        long onesMin4 = onesMin3 * ones;\n        long zerosMin4 = zerosMin3\
    \ * zeros;\n        long onesMax5 = onesMax4 * ones;\n        long zerosMax5 =\
    \ zerosMax4 * zeros;\n        long onesMin5 = onesMin4 * ones;\n        long zerosMin5\
    \ = zerosMin4 * zeros;\n        long onesMax6 = onesMax5 * ones;\n        long\
    \ zerosMax6 = zerosMax5 * zeros;\n        long onesMin6 = onesMin5 * ones;\n \
    \       long zerosMin6 = zerosMin5 * zeros;\n        long onesMax7 = onesMax6\
    \ * ones;\n        long zerosMax7 = zerosMax6 * zeros;\n        long onesMin7\
    \ = onesMin6 * ones;\n        long zerosMin7 = zerosMin6 * zeros;\n        long\
    \ onesMax8 = onesMax7 * ones;\n        long zerosMax8 = zerosMax7 * zeros;\n \
    \       long onesMin8 = onesMin7 * ones;\n        long zerosMin8 = zerosMin7 *\
    \ zeros;\n        long onesMax9 = onesMax8 * ones;\n        long zerosMax9 = zerosMax8\
    \ * zeros;\n        long onesMin9 = onesMin8 * ones;\n        long zerosMin9 =\
    \ zerosMin8 * zeros;\n        long onesMax10 = onesMax9", "        long ones =\
    \ arr.Sum(x => x & 1);\n        long zeros = arr.Sum(x => ~x);\n        long max\
    \ = Math.Max(ones, zeros);\n        long min = Math.Min(ones, zeros);\n      \
    \  long max2 = Math.Max(max, min);\n        long min2 = Math.Min(max, min);\n\
    \        long max3 = Math.Max(max2, min2);\n        long min3 = Math.Min(max2,\
    \ min2);\n        long max4 = Math.Max(max3, min3);\n        long min4 = Math.Min(max3,\
    \ min3);\n        long max5 = Math.Max(max4, min4);\n        long min5 = Math.Min(max4,\
    \ min4);\n        long max6 = Math.Max(max5, min5);\n        long min6 = Math.Min(max5,\
    \ min5);\n        long max7 = Math.Max(max6, min6);\n        long min7 = Math.Min(max6,\
    \ min6);\n        long max8 = Math.Max(max7, min7);\n        long min8 = Math.Min(max7,\
    \ min7);\n        long max9 = Math.Max(max8, min8);\n        long min9 = Math.Min(max8,\
    \ min8);\n        long max10 = Math.Max(max9, min9);\n        long min10 = Math.Min(max9,\
    \ min9);\n        long max11 = Math.Max(max10, min10);\n        long min11 = Math.Min(max10,\
    \ min10);\n        long max12 = Math.Max(max11, min11);\n        long min12 =\
    \ Math.Min(max11, min11);\n        long max13 = Math.Max(max12, min12);\n    \
    \    long min13 = Math.Min(max12, min12);\n        long max14 = Math.Max(max13,\
    \ min13);\n        long min14 = Math.Min(max13, min13);\n        long max15 =\
    \ Math.Max(max14, min14);\n        long min15 = Math.Min(max14, min14);\n    \
    \    long max16 = Math.Max(max15, min15);\n        long min16 = Math.Min(max15,\
    \ min15);\n        long max17 = Math.Max(max16, min16);\n        long min17 =\
    \ Math.Min(max16, min16);\n        long max18 = Math.Max(max17, min17);\n    \
    \    long min18 = Math.Min(max17, min17);\n        long max19 = Math.Max(max18,\
    \ min18);\n        long min19 = Math.Min(max18, min18);\n        long max20 =\
    \ Math.Max(max19, min19);\n        long min20 = Math.Min(max19, min19);\n    \
    \    long max21 = Math.Max", "        List<long> result = new List<long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n    \
    \    foreach (long i in arr) {\n            if (i == 1) {\n                ones++;\n\
    \            } else {\n                zeros++;\n            }\n            if\
    \ (ones > zeros) {\n                max = i;\n            }\n        }\n     \
    \   long onesCount = 0;\n        long zerosCount = 0;\n        long maxCount =\
    \ 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n         \
    \       onesCount++;\n            } else {\n                zerosCount++;\n  \
    \          }\n            if (onesCount > zerosCount) {\n                maxCount\
    \ = i;\n            }\n        }\n        long onesCount2 = 0;\n        long zerosCount2\
    \ = 0;\n        long maxCount2 = 0;\n        foreach (long i in arr) {\n     \
    \       if (i == 1) {\n                onesCount2++;\n            } else {\n \
    \               zerosCount2++;\n            }\n            if (onesCount2 > zerosCount2)\
    \ {\n                maxCount2 = i;\n            }\n        }\n        long onesCount3\
    \ = 0;\n        long zerosCount3 = 0;\n        long maxCount3 = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                onesCount3++;\n\
    \            } else {\n                zerosCount3++;\n            }\n       \
    \     if (onesCount3 > zerosCount3) {\n                maxCount3 = i;\n      \
    \      }\n        }\n        long onesCount4 = 0;\n        long zerosCount4 =\
    \ 0;\n        long maxCount4 = 0;\n        foreach (long i in arr) {\n       \
    \     if (i == 1) {\n                onesCount4++;\n            } else {\n   \
    \             zerosCount4++;\n            }\n            if (onesCount4 > zerosCount4)\
    \ {\n                maxCount4 = i;\n            }\n        }\n        long onesCount5\
    \ = 0;\n        long zerosCount5 = 0;\n        long maxCount5 = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                onesCount5++;\n\
    \            } else {\n                zerosCount5++;\n            }\n       \
    \     if (onesCount5 > zerosCount5) {\n                maxCount5 = i;\n      \
    \      }\n        }\n        long onesCount6 = 0;\n        long zerosCount6 =\
    \ 0;\n        long maxCount6 = 0;\n        foreach (long i in arr) {\n       \
    \     if (i == 1) {\n                onesCount6++;\n            } else {\n   \
    \             zerosCount6++;\n            }\n            if (onesCount6 > zerosCount6)\
    \ {\n                maxCount6 = i;\n            }\n        }\n        long onesCount7\
    \ = 0;\n        long zerosCount7 = 0;\n        long maxCount7 = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                onesCount7++;\n\
    \            } else {\n                zerosCount", "        List<long> result\
    \ = new List<long>();\n        long ones = 0;\n        long zeros = 0;\n     \
    \   long max = 0;\n        foreach (long n in arr) {\n            if (n == 1)\
    \ ones++;\n            else if (n == 0) zeros++;\n            else if (n > max)\
    \ max = n;\n        }\n        long onesMax = ones * max;\n        long zerosMax\
    \ = zeros * max;\n        long onesMin = ones * min - max;\n        long zerosMin\
    \ = zeros * min - max;\n        long onesSum = ones * sum;\n        long zerosSum\
    \ = zeros * sum;\n        long onesAvg = ones * avg;\n        long zerosAvg =\
    \ zeros * avg;\n        long onesMedian = ones * median;\n        long zerosMedian\
    \ = zeros * median;\n        long onesStd = ones * std;\n        long zerosStd\
    \ = zeros * std;\n        long onesVariance = ones * variance;\n        long zerosVariance\
    \ = zeros * variance;\n        long onesSumOfSquares = ones * sumOfSquares;\n\
    \        long zerosSumOfSquares = zeros * sumOfSquares;\n        long onesSumOfSquaresDiff\
    \ = ones * sumOfSquaresDiff;\n        long zerosSumOfSquaresDiff = zeros * sumOfSquaresDiff;\n\
    \        long onesSumOfSquaresDiffSquare = ones * sumOfSquaresDiffSquare;\n  \
    \      long zerosSumOfSquaresDiffSquare = zeros * sumOfSquaresDiffSquare;\n  \
    \      long onesSumOfSquaresDiffSquareDiff = ones * sumOfSquaresDiffSquareDiff;\n\
    \        long zerosSumOfSquaresDiffSquareDiff = zeros * sumOfSquaresDiffSquareDiff;\n\
    \        long onesSumOfSquaresDiffSquareDiffSquare = ones * sumOfSquaresDiffSquareDiffSquare;\n\
    \        long zerosSumOfSquaresDiffSquareDiffSquare = zeros * sumOfSquaresDiffSquareDiffSquare;\n\
    \        long onesSumOfSquaresDiffSquareDiffSquareDiff = ones * sumOfSquaresDiffSquareDiffSquareDiff;\n\
    \        long zerosSumOfSquaresDiffSquareDiffSquareDiff = zeros * sumOfSquaresDiffSquareDiffSquareDiff;\n\
    \        long onesSumOfSquaresDiffSquareDiffSquareDiffSquare = ones * sumOfSquaresDiffSquareDiffSquareDiffSquare;\n\
    \        long zerosSumOfSquaresDiffSquareDiffSquareDiffSquare = zeros * ", " \
    \       List<long> result = new List<long>();\n        long ones = 0;\n      \
    \  long zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n\
    \            if (i == 1) {\n                ones++;\n            }\n         \
    \   if (i == 0) {\n                zeros++;\n            }\n            if (i\
    \ == -1) {\n                max++;\n            }\n        }\n        long onesMax\
    \ = ones * max;\n        long zerosMax = zeros * max;\n        long onesMin =\
    \ ones * max;\n        long zerosMin = zeros * max;\n        long onesMaxMin =\
    \ onesMax * min;\n        long zerosMaxMin = zerosMax * min;\n        long onesMinMin\
    \ = onesMin * min;\n        long zerosMinMin = zerosMin * min;\n        long onesMaxMinMin\
    \ = onesMaxMin * min;\n        long zerosMaxMinMin = zerosMaxMin * min;\n    \
    \    long onesMinMinMin = onesMinMin * min;\n        long zerosMinMinMin = zerosMinMin\
    \ * min;\n        long onesMaxMinMin = onesMaxMinMin * min;\n        long zerosMaxMinMin\
    \ = zerosMaxMinMin * min;\n        long onesMinMinMin = onesMinMinMin * min;\n\
    \        long zerosMinMinMin = zerosMinMinMin * min;\n        long onesMaxMinMin\
    \ = onesMaxMinMin * min;\n        long zerosMaxMinMin = zerosMaxMinMin * min;\n\
    \        long onesMinMinMin = onesMinMinMin * min;\n        long zerosMinMinMin\
    \ = zerosMinMinMin * min;\n        long onesMaxMinMin = onesMaxMinMin * min;\n\
    \        long zerosMaxMinMin = zerosMaxMinMin * min;\n        long onesMinMinMin\
    \ = onesMinMinMin * min;\n        long zerosMinMinMin = zerosMinMinMin * min;\n\
    \        long onesMaxMinMin = onesMaxMinMin * min;\n        long zerosMaxMinMin\
    \ = zerosMaxMinMin * min;\n        long onesMinMinMin = onesMinMinMin * min;\n\
    \        long zerosMinMinMin = zerosMinMinMin * min;\n        long onesMaxMinMin\
    \ = onesMaxMinMin * min;\n        long zerosMaxMinMin = zerosMaxMinMin * min;\n\
    \        long onesMin", "        long ones = 0;\n        long zeros = 0;\n   \
    \     long max = 0;\n        long min = 0;\n        foreach (long i in arr) {\n\
    \            if (i == 1) {\n                ones++;\n            }\n         \
    \   if (i == 0) {\n                zeros++;\n            }\n            if (i\
    \ > max) {\n                max = i;\n            }\n            if (i < min)\
    \ {\n                min = i;\n            }\n        }\n        long onesMax\
    \ = Convert.ToInt64(Math.Pow(2, ones));\n        long zerosMax = Convert.ToInt64(Math.Pow(2,\
    \ zeros));\n        long maxDiff = onesMax - zerosMax;\n        long minDiff =\
    \ zerosMax - onesMax;\n        long maxDiffInt = Convert.ToInt64(Math.Pow(2, maxDiff));\n\
    \        long minDiffInt = Convert.ToInt64(Math.Pow(2, minDiff));\n        long\
    \ maxDiffLong = Convert.ToInt64(Math.Pow(2, maxDiff));\n        long minDiffLong\
    \ = Convert.ToInt64(Math.Pow(2, minDiff));\n        long maxDiffLongInt = Convert.ToInt64(Math.Pow(2,\
    \ maxDiff));\n        long minDiffLongInt = Convert.ToInt64(Math.Pow(2, minDiff));\n\
    \        long maxDiffLongLong = Convert.ToInt64(Math.Pow(2, maxDiff));\n     \
    \   long minDiffLongLong = Convert.ToInt64(Math.Pow(2, minDiff));\n        long\
    \ maxDiffLongLongInt = Convert.ToInt64(Math.Pow(2, maxDiff));\n        long minDiffLongLongInt\
    \ = Convert.ToInt64(Math.Pow(2, minDiff));\n        long maxDiffLongLongLong =\
    \ Convert.ToInt64(Math.Pow(2, maxDiff));\n        long minDiffLongLongLong = Convert.ToInt64(Math.Pow(2,\
    \ minDiff));\n        long maxDiffLongLongLongInt = Convert.ToInt64(Math.Pow(2,\
    \ maxDiff));\n        long minDiffLongLongLongInt = Convert.ToInt64(Math.Pow(2,\
    \ minDiff));\n        long maxDiffLongLongLongLong = Convert.ToInt64(Math.Pow(2,\
    \ maxDiff));\n        long minDiffLongLongLongLong = Convert.ToInt64(Math.Pow(2,\
    \ minDiff));\n        long maxDiffLongLongLongLongInt = Convert.ToInt64(Math.Pow(2,\
    \ maxDiff));\n        long minDiffLongLongLongLongInt = Convert.ToInt64(Math.Pow(2,\
    \ minDiff));\n        long maxDiffLongLongLongLongLong = Convert.ToInt64(Math.Pow(2,\
    \ maxDiff));\n        long min", "        List<long> result = new List<long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        foreach (long i in arr) {\n            if\
    \ (i % 2 == 0) {\n                ones++;\n            }\n            else if\
    \ (i % 10 == 0) {\n                tens++;\n            }\n            else if\
    \ (i % 100 == 0) {\n                hundreds++;\n            }\n            else\
    \ if (i % 1000 == 0) {\n                thousands++;\n            }\n        \
    \    else {\n                result.Add(i);\n            }\n        }\n      \
    \  if (ones > 0) {\n            result.Add(ones);\n        }\n        if (tens\
    \ > 0) {\n            result.Add(tens);\n        }\n        if (hundreds > 0)\
    \ {\n            result.Add(hundreds);\n        }\n        if (thousands > 0)\
    \ {\n            result.Add(thousands);\n        }\n        return result;", " \
    \       long ones = arr.Sum(x => x & 1);\n        long zeros = arr.Sum(x => ~x\
    \ & 1);\n        if (ones < zeros) {\n            return arr.OrderBy(x => x).ToList();\n\
    \        }\n        return arr.OrderByDescending(x => Convert.ToInt64(Math.Pow(2,\
    \ Convert.ToInt64(Math.Log(x, 2)))).ToString()).ToList();", "        long ones\
    \ = 0;\n        long zeros = 0;\n        long max = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                ones++;\n          \
    \  }\n            else if (i == 0) {\n                zeros++;\n            }\n\
    \            else {\n                if (ones > zeros) {\n                   \
    \ max = i;\n                }\n                else {\n                    max\
    \ = zeros;\n                }\n            }\n        }\n        List<long> result\
    \ = new List<long>();\n        foreach (long i in arr) {\n            if (i ==\
    \ 1) {\n                result.Add(i);\n            }\n            else if (i\
    \ == 0) {\n                result.Add(max);\n            }\n            else {\n\
    \                if (ones > zeros) {\n                    result.Add(i);\n   \
    \             }\n                else {\n                    result.Add(max);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long ones = 0;\n        long\
    \ zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n     \
    \       if (i == 1) {\n                ones++;\n            }\n            else\
    \ if (i == 0) {\n                zeros++;\n            }\n            else {\n\
    \                max = Math.Max(max, i);\n            }\n        }\n        if\
    \ (ones > zeros) {\n            result.Add(max);\n            result.AddRange(arr.Where(i\
    \ => i == 1).OrderBy(i => i).ToList());\n        }\n        else if (zeros > ones)\
    \ {\n            result.AddRange(arr.Where(i => i == 0).OrderBy(i => i).ToList());\n\
    \            result.Add(max);\n        }\n        else {\n            result.AddRange(arr);\n\
    \        }\n        return result;", "        long ones = 0;\n        long zeros\
    \ = 0;\n        long max = 0;\n        foreach (long n in arr) {\n           \
    \ if (n == 1) ones++;\n            else if (n == 0) zeros++;\n            else\
    \ if (n > max) max = n;\n        }\n        long onesMax = ones * max;\n     \
    \   long zerosMax = zeros * max;\n        long onesMin = ones * min - 1;\n   \
    \     long zerosMin = zeros * min - 1;\n        long onesMinMax = onesMin * max;\n\
    \        long zerosMinMax = zerosMin * max;\n        long onesMaxMin = onesMax\
    \ * min;\n        long zerosMaxMin = zerosMax * min;\n        long onesMaxMinMax\
    \ = onesMaxMin * max;\n        long zerosMaxMinMax = zerosMaxMin * max;\n    \
    \    long onesMaxMinMaxMin = onesMaxMinMax * min;\n        long zerosMaxMinMaxMin\
    \ = zerosMaxMinMax * min;\n        long onesMaxMinMaxMinMax = onesMaxMinMaxMin\
    \ * max;\n        long zerosMaxMinMaxMinMax = zerosMaxMinMaxMin * max;\n     \
    \   long onesMaxMinMaxMinMaxMin = onesMaxMinMaxMinMax * min;\n        long zerosMaxMinMaxMinMax\
    \ = zerosMaxMinMaxMinMax * min;\n        long onesMaxMinMaxMinMaxMinMax = onesMaxMinMaxMinMaxMin\
    \ * max * min;\n        long zerosMaxMinMaxMinMaxMinMax = zerosMaxMinMaxMinMaxMin\
    \ * max * min;\n        long onesMaxMinMaxMinMaxMinMaxMin = onesMaxMinMaxMinMaxMinMax\
    \ * min;\n        long zerosMaxMinMaxMinMaxMinMax = zerosMaxMinMaxMinMaxMinMax\
    \ * min;\n        long onesMaxMinMaxMinMaxMinMaxMinMax = onesMaxMinMaxMinMaxMinMaxMinMax\
    \ * min;\n        long zerosMaxMinMaxMinMaxMinMaxMin = zerosMaxMinMaxMinMaxMinMax\
    \ * min;\n        long onesMaxMinMaxMinMaxMinMaxMinMax = onesMaxMinMaxMinMaxMinMaxMinMax\
    \ * min;\n        long zerosMaxMinMaxMinMaxMinMaxMinMax = zerosMaxMinMaxMinMaxMinMaxMinMax\
    \ * min;\n        long onesMaxMinMaxMinMaxMinMaxMinMaxMin = onesMaxMin", "   \
    \     long ones = 0;\n        long zeros = 0;\n        long max = 0;\n       \
    \ long min = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n\
    \                ones++;\n            }\n            else if (i == 0) {\n    \
    \            zeros++;\n            }\n            else {\n                if (ones\
    \ > zeros) {\n                    max = i;\n                }\n              \
    \  else {\n                    min = i;\n                }\n            }\n  \
    \      }\n        List<long> result = new List<long>();\n        if (ones > zeros)\
    \ {\n            foreach (long i in arr) {\n                if (i == 1) {\n  \
    \                  result.Add(i);\n                }\n                else if\
    \ (i == 0) {\n                    result.Add(0);\n                }\n        \
    \        else {\n                    if (min > max) {\n                      \
    \  result.Add(i);\n                    }\n                    else {\n       \
    \                 result.Add(0);\n                    }\n                }\n \
    \           }\n        }\n        else {\n            foreach (long i in arr)\
    \ {\n                if (i == 1) {\n                    result.Add(0);\n     \
    \           }\n                else if (i == 0) {\n                    result.Add(i);\n\
    \                }\n                else {\n                    if (min > max)\
    \ {\n                        result.Add(0);\n                    }\n         \
    \           else {\n                        result.Add(i);\n                 \
    \   }\n                }\n            }\n        }\n        return result;", " \
    \       long ones = 0;\n        long zeros = 0;\n        long max = 0;\n     \
    \   foreach (long i in arr) {\n            if (i == 1) {\n                ones++;\n\
    \            }\n            if (i == 0) {\n                zeros++;\n        \
    \    }\n            if (i > max) {\n                max = i;\n            }\n\
    \        }\n        long onesMax = ones * max;\n        long zerosMax = zeros\
    \ * max;\n        long onesMin = ones * min;\n        long zerosMin = zeros *\
    \ min;\n        long onesMaxMin = onesMax * min;\n        long zerosMaxMin = zerosMax\
    \ * min;\n        long onesMaxMinZeros = onesMaxMin - ones;\n        long zerosMaxMinZeros\
    \ = zerosMaxMin - zeros;\n        long onesMaxMinOnes = onesMaxMin - onesMin;\n\
    \        long zerosMaxMinOnes = zerosMaxMin - zerosMin;\n        long onesMaxMinOnesZeros\
    \ = onesMaxMinZeros - ones;\n        long zerosMaxMinOnesZeros = zerosMaxMinZeros\
    \ - zeros;\n        long onesMaxMinOnesZerosZeros = onesMaxMinOnesZeros - ones;\n\
    \        long zerosMaxMinOnesZerosZeros = zerosMaxMinOnesZeros - zeros;\n    \
    \    long onesMaxMinOnesZerosZerosZeros = onesMaxMinOnesZerosZeros - ones;\n \
    \       long zerosMaxMinOnesZerosZerosZeros = zerosMaxMinOnesZerosZeros - zeros;\n\
    \        long onesMaxMinOnesZerosZerosZerosZeros = onesMaxMinOnesZerosZerosZeros\
    \ - ones;\n        long zerosMaxMinOnesZerosZerosZerosZeros = zerosMaxMinOnesZerosZerosZeros\
    \ - zeros;\n        long onesMaxMinOnesZerosZerosZerosZerosZeros = onesMaxMinOnesZerosZerosZerosZeros\
    \ - ones;\n        long zerosMaxMinOnesZerosZerosZerosZerosZeros = zerosMaxMinOnesZerosZerosZerosZeros\
    \ - zeros;\n        long onesMaxMinOnesZerosZerosZerosZerosZerosZeros = onesMaxMinOnesZer",
  "        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  long min = 0;\n        foreach (long i in arr) {\n            if (i == 1) ones++;\n\
    \            else if (i == 0) zeros++;\n            else if (i > 0) max = Math.Max(max,\
    \ i);\n            else if (i < 0) min = Math.Min(min, i);\n        }\n      \
    \  long onesMax = ones * max;\n        long zerosMax = zeros * max;\n        long\
    \ onesMin = ones * min;\n        long zerosMin = zeros * min;\n        long onesDiff\
    \ = onesMax - onesMin;\n        long zerosDiff = zerosMax - zerosMin;\n      \
    \  long onesDiffMin = onesMax - onesMin;\n        long zerosDiffMin = zerosMax\
    \ - zerosMin;\n        long onesDiffMax = onesMax - onesMin;\n        long zerosDiffMax\
    \ = zerosMax - zerosMin;\n        long onesDiffMinMax = onesMax - onesMin;\n \
    \       long zerosDiffMinMax = zerosMax - zerosMin;\n        long onesDiffMinMaxDiff\
    \ = onesMax - onesMin;\n        long zerosDiffMinMaxDiff = zerosMax - zerosMin;\n\
    \        long onesDiffMinMaxDiffMin = onesMax - onesMin;\n        long zerosDiffMinMaxDiffMin\
    \ = zerosMax - zerosMin;\n        long onesDiffMinMaxDiffMax = onesMax - onesMin;\n\
    \        long zerosDiffMinMaxDiffMax = zerosMax - zerosMin;\n        long onesDiffMinMaxDiffMinMax\
    \ = onesMax - onesMin;\n        long zerosDiffMinMaxDiffMinMax = zerosMax - zerosMin;\n\
    \        long onesDiffMinMaxDiffMinMaxDiff = onesMax - onesMin;\n        long\
    \ zerosDiffMinMaxDiffMinMaxDiff = zerosMax - zerosMin;\n        long onesDiffMinMaxDiffMinMaxDiffMin\
    \ = onesMax - onesMin;\n        long zerosDiffMinMaxDiffMinMaxDiffMin = zerosMax\
    \ - zerosMin;\n        long onesDiffMinMaxDiffMinMaxDiffMax = onesMax - onesMin;\n\
    \        long zerosDiffMinMaxDiffMinMaxDiffMax = zerosMax - zerosMin;\n      \
    \  long onesDiffMinMaxDiffMinMaxDiffMinMax = onesMax - onesMin;\n        long\
    \ zerosDiffMin", "        List<long> result = new List<long>();\n        long\
    \ ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n        long\
    \ thousands = 0;\n        long total = 0;\n        foreach (long n in arr) {\n\
    \            total += n;\n            if (n < 0) n *= -1;\n            if (n ==\
    \ 1) ones++;\n            else if (n == 10) tens++;\n            else if (n ==\
    \ 100) hundreds++;\n            else if (n == 1000) thousands++;\n        }\n\
    \        long onesCount = ones;\n        long tensCount = tens;\n        long\
    \ hundredsCount = hundreds;\n        long thousandsCount = thousands;\n      \
    \  long totalCount = total;\n        if (onesCount > onesCountCount) {\n     \
    \       onesCount = onesCountCount;\n        }\n        if (tensCount > tensCountCount)\
    \ {\n            tensCount = tensCountCount;\n        }\n        if (hundredsCount\
    \ > hundredsCountCount) {\n            hundredsCount = hundredsCountCount;\n \
    \       }\n        if (thousandsCount > thousandsCountCount) {\n            thousandsCount\
    \ = thousandsCountCount;\n        }\n        if (onesCount > 1) {\n          \
    \  onesCount /= 10;\n        }\n        if (tensCount > 1) {\n            tensCount\
    \ /= 10;\n        }\n        if (hundredsCount > 1) {\n            hundredsCount\
    \ /= 10;\n        }\n        if (thousandsCount > 1) {\n            thousandsCount\
    \ /= 10;\n        }\n        if (onesCount > 1) {\n            onesCount *= 10;\n\
    \        }\n        if (tensCount > 1) {\n            tensCount *= 10;\n     \
    \   }\n        if (hundredsCount > 1) {\n            hundredsCount *= 10;\n  \
    \      }\n        if (thousandsCount > 1) {\n            thousandsCount *= 10;\n\
    \        }\n        long onesCountDecimal = onesCount;\n        long tensCountDecimal\
    \ = tensCount;\n        long hundredsCountDecimal = hundredsCount;\n        long\
    \ thousandsCountDecimal = thousandsCount;\n        long totalCountDecimal = totalCount;\n\
    \        long onesCountDecimalDecimal = onesCountDecimal;\n        long tensCountDecimalDecimal\
    \ = tensCountDecimal;\n        long hundredsCountDecimalDecimal = hundredsCountDecimal;\n\
    \        long thousandsCountDecimalDecimal = thousandsCountDecimal;\n        long\
    \ totalCountDecimalDecimal = totalCountDecimal;\n        long onesCountDecimal",
  "        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  foreach (long i in arr) {\n            if (i == 1) {\n                ones++;\n\
    \            }\n            if (i == 0) {\n                zeros++;\n        \
    \    }\n            if (i > max) {\n                max = i;\n            }\n\
    \        }\n        List<long> result = new List<long>();\n        if (ones >\
    \ zeros) {\n            result.Add(max);\n            result.AddRange(arr.Where(i\
    \ => i == max).OrderBy(i => i).ToList());\n            result.AddRange(arr.Where(i\
    \ => i == max).OrderByDescending(i => i).ToList());\n        } else {\n      \
    \      result.AddRange(arr.Where(i => i == max).OrderByDescending(i => i).ToList());\n\
    \            result.Add(max);\n            result.AddRange(arr.Where(i => i ==\
    \ max).OrderBy(i => i).ToList());\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long ones = 0;\n        long\
    \ zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n     \
    \       ones += i;\n            zeros -= i;\n            if (ones > max) {\n \
    \               max = ones;\n            }\n        }\n        long onesMax =\
    \ max;\n        long zeroMax = max;\n        long maxOnes = 0;\n        long maxZeros\
    \ = 0;\n        long maxOnesMax = max;\n        long maxZerosMax = max;\n    \
    \    foreach (long i in arr) {\n            onesMax += i;\n            zeroMax\
    \ -= i;\n            if (onesMax < maxOnesMax) {\n                maxOnesMax =\
    \ onesMax;\n            }\n            if (zeroMax < maxZerosMax) {\n        \
    \        maxZerosMax = zeroMax;\n            }\n        }\n        long onesMaxMinusOnes\
    \ = maxOnesMax - 1;\n        long zeroMaxMinusOnes = maxZerosMax - 1;\n      \
    \  long maxOnesMinusOnes = maxOnesMax - 1;\n        long maxZerosMinusOnes = maxZerosMax\
    \ - 1;\n        long maxOnesMinusOnesMax = maxOnesMax - maxOnes;\n        long\
    \ maxZerosMinusOnesMax = maxZerosMax - maxZeros;\n        long maxOnesMinusOnesMaxMinusOnes\
    \ = maxOnesMax - maxOnes - 1;\n        long maxZerosMinusOnesMaxMinusOnes = maxZerosMax\
    \ - maxZeros - 1;\n        long maxOnesMinusOnesMaxMinusOnesMax = maxOnesMax -\
    \ maxOnes - maxOnes;\n        long maxZerosMinusOnesMaxMinusOnesMax = maxZerosMax\
    \ - maxZeros - maxZeros;\n        long maxOnesMinusOnesMaxMinusOnesMaxMinusOnes\
    \ = maxOnesMax - maxOnes - maxOnes - 1;\n        long maxZerosMinusOnesMaxMinusOnesMaxMinusOnes\
    \ = maxZerosMax - maxZeros - maxZeros - 1;\n        long maxOnesMinusOnesMaxMinusOnesMaxMinusOnesMax\
    \ = maxOnesMax - maxOnes - maxOnes - maxOnes - 1;\n        long maxZerosMinusOnesMax",
  "        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  foreach (long i in arr) {\n            if (i == 1) {\n                ones++;\n\
    \            } else {\n                zeros++;\n            }\n            if\
    \ (ones > zeros) {\n                max = i;\n            }\n        }\n     \
    \   List<long> result = new List<long>();\n        foreach (long i in arr) {\n\
    \            if (i == 1) {\n                result.Add(i);\n            } else\
    \ if (i == 0) {\n                result.Add(max);\n            } else {\n    \
    \            result.Add(zeros);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long ones = 0;\n       \
    \ long zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n\
    \            if (i == 1) {\n                ones++;\n            }\n         \
    \   if (i == 0) {\n                zeros++;\n            }\n            if (i\
    \ == -1) {\n                max = Math.Max(max, ones);\n                ones =\
    \ 0;\n            }\n            if (i == -2) {\n                max = Math.Max(max,\
    \ zeros);\n                zeros = 0;\n            }\n        }\n        if (ones\
    \ > zeros) {\n            max = Math.Max(max, ones);\n        }\n        if (zeros\
    \ > ones) {\n            max = Math.Max(max, zeros);\n        }\n        long\
    \ onesCount = 0;\n        long zerosCount = 0;\n        long maxCount = 0;\n \
    \       long maxCount2 = 0;\n        long maxCount3 = 0;\n        long maxCount4\
    \ = 0;\n        long maxCount5 = 0;\n        long maxCount6 = 0;\n        long\
    \ maxCount7 = 0;\n        long maxCount8 = 0;\n        long maxCount9 = 0;\n \
    \       long maxCount10 = 0;\n        long maxCount11 = 0;\n        long maxCount12\
    \ = 0;\n        long maxCount13 = 0;\n        long maxCount14 = 0;\n        long\
    \ maxCount15 = 0;\n        long maxCount16 = 0;\n        long maxCount17 = 0;\n\
    \        long maxCount18 = 0;\n        long maxCount19 = 0;\n        long maxCount20\
    \ = 0;\n        long maxCount21 = 0;\n        long maxCount22 = 0;\n        long\
    \ maxCount23 = 0;\n        long maxCount24 = 0;\n        long maxCount25 = 0;\n\
    \        long maxCount26 = 0;\n        long maxCount27 = 0;\n        long maxCount28\
    \ = 0;\n        long maxCount29 = 0;\n        long maxCount30 = 0;\n        long\
    \ maxCount31 = 0;\n        long maxCount32 = 0;\n        long maxCount33 = 0;\n\
    \        long maxCount34 = 0;\n        long maxCount35 = 0;\n        long maxCount36\
    \ = 0;\n        long maxCount37 = 0;\n        long maxCount38 = 0;\n        long\
    \ maxCount39 = 0;\n        long maxCount40 = 0;\n        long maxCount41 = 0;\n\
    \        long maxCount42 = 0;\n        long maxCount43 = 0;\n        long maxCount44\
    \ = 0;\n        long maxCount45 = 0;\n        long maxCount46 = 0;\n        long\
    \ maxCount47 = 0;\n        long maxCount48 = 0;\n        long maxCount49 = 0;\n\
    \        long maxCount50 = 0;\n        long maxCount51 = 0;\n        long maxCount52\
    \ = 0;\n        long maxCount53 = 0;\n        long maxCount54", "        List<long>\
    \ result = new List<long>();\n        long ones = 0;\n        long zeros = 0;\n\
    \        long max = 0;\n        foreach (long i in arr) {\n            if (i ==\
    \ 1) {\n                ones++;\n            }\n            else if (i == 0) {\n\
    \                zeros++;\n            }\n            else {\n               \
    \ if (ones > zeros) {\n                    result.Add(i);\n                }\n\
    \                else {\n                    result.Add(-i);\n               \
    \ }\n            }\n            if (ones > max) {\n                max = ones;\n\
    \            }\n            if (zeros > max) {\n                max = zeros;\n\
    \            }\n        }\n        if (ones > zeros) {\n            result.Add(max);\n\
    \        }\n        else {\n            result.Add(-max);\n        }\n       \
    \ return result;", "        if (arr.Count < 2) {\n            return arr;\n  \
    \      }\n        long ones = arr.Where(x => x == 1).Count();\n        long zeros\
    \ = arr.Where(x => x == 0).Count();\n        long maxOnes = arr.Where(x => x ==\
    \ 1).Max();\n        long maxZeros = arr.Where(x => x == 0).Max();\n        long\
    \ maxOnesZeros = maxOnes - maxZeros;\n        long maxOnesOnes = maxOnes - ones;\n\
    \        long maxZeroOnes = maxZeros - ones;\n        long maxZeroZeros = maxZeros\
    \ - zeros;\n        long maxOnesOnesZeros = maxOnesOnes - maxZeroOnes;\n     \
    \   long maxOnesOnesOnes = maxOnesOnes - ones;\n        long maxOnesOnesZerosZeros\
    \ = maxOnesOnesZeros - maxOnesOnesOnes;\n        long maxOnesOnesOnesZeros = maxOnesOnesOnes\
    \ - ones;\n        long maxOnesOnesOnesOnes = maxOnesOnesOnes - ones;\n      \
    \  long maxOnesOnesOnesZerosZeros = maxOnesOnesZerosZeros - maxOnesOnesOnesOnes;\n\
    \        long maxOnesOnesOnesOnesZeros = maxOnesOnesOnesZeros - ones;\n      \
    \  long maxOnesOnesOnesOnesZeros = maxOnesOnesOnesZerosZeros - maxOnesOnesOnesOnesOnes;\n\
    \        long maxOnesOnesOnesOnesOnes = maxOnesOnesOnesOnesZeros - ones;\n   \
    \     long maxOnesOnesOnesOnesOnesZeros = maxOnesOnesOnesOnesOnesZeros - ones;\n\
    \        long maxOnesOnesOnesOnesOnesZeros = maxOnesOnesOnesOnesOnesZeros - ones;\n\
    \        long maxOnesOnesOnesOnesOnesOnes = maxOnesOnesOnesOnesOnesOnesZeros -\
    \ ones;\n        long maxOnesOnesOnesOnesOnesZeros = maxOnesOnesOnesOnesOnesOnesZeros\
    \ - ones;\n        long maxOnesOnesOnesOnesOnesOnesZeros = maxOnesOnesOnesOnesOnesOnesOnesZero",
  "        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  foreach (long i in arr) {\n            if (i == 1) {\n                ones++;\n\
    \            }\n            if (i == 0) {\n                zeros++;\n        \
    \    }\n            if (i > max) {\n                max = i;\n            }\n\
    \        }\n        List<long> result = new List<long>();\n        long onesCount\
    \ = 0;\n        long zerosCount = 0;\n        long maxCount = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                onesCount++;\n\
    \            }\n            if (i == 0) {\n                zerosCount++;\n   \
    \         }\n            if (i > max) {\n                maxCount = i;\n     \
    \       }\n        }\n        long onesCountMax = onesCount > maxCount ? onesCount\
    \ : maxCount;\n        long zerosCountMax = zerosCount > maxCount ? zerosCount\
    \ : maxCount;\n        long onesCountMin = onesCount < maxCount ? onesCount :\
    \ maxCount;\n        long zerosCountMin = zerosCount < maxCount ? zerosCount :\
    \ maxCount;\n        long onesCountMaxMin = onesCountMax < maxCount ? onesCountMax\
    \ : maxCount;\n        long zerosCountMaxMin = zerosCountMax < maxCount ? zerosCountMax\
    \ : maxCount;\n        long onesCountMinMax = onesCountMin > maxCount ? onesCountMin\
    \ : maxCount;\n        long zerosCountMinMax = zerosCountMin > maxCount ? zerosCountMin\
    \ : maxCount;\n        long onesCountMinMaxMin = onesCountMinMax < maxCount ?\
    \ onesCountMinMax : maxCount;\n        long zerosCountMinMaxMin = zerosCountMinMax\
    \ < maxCount ? zerosCountMinMax : maxCount;\n        long onesCountMinMaxMinMin\
    \ = onesCountMinMaxMin > maxCount ? onesCountMinMaxMin : maxCount;\n        long\
    \ zerosCountMinMaxMin = zerosCountMinMaxMin > maxCount ? zerosCountMinMaxMin :\
    \ maxCount;\n        long onesCountMinMaxMinMin = onesCountMinMaxMinMax < maxCount\
    \ ? onesCountMinMaxMinMax : maxCount;\n        long zerosCountMinMaxMin = zerosCountMinMaxMinMax\
    \ < maxCount ? zerosCountMinMaxMin : maxCount;\n        long onesCountMinMaxMinMin\
    \ = onesCountMinMaxMinMax < maxCount ? onesCountMinMaxMinMax : maxCount;\n   \
    \     long ", "        long ones = 0;\n        long zeros = 0;\n        long max\
    \ = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n       \
    \         ones++;\n            }\n            if (i == 0) {\n                zeros++;\n\
    \            }\n            if (i > max) {\n                max = i;\n       \
    \     }\n        }\n        long onesMax = ones;\n        long zerosMax = zeros;\n\
    \        long maxMax = max;\n        long onesMin = ones;\n        long zerosMin\
    \ = zeros;\n        long maxMin = max;\n        long onesMaxMin = ones;\n    \
    \    long zerosMaxMin = zeros;\n        long maxMaxMin = max;\n        long onesMinMax\
    \ = ones;\n        long zerosMinMax = zeros;\n        long maxMinMax = max;\n\
    \        long onesMaxMinMax = ones;\n        long zerosMaxMinMax = zeros;\n  \
    \      long maxMaxMinMax = max;\n        List<long> result = new List<long>();\n\
    \        foreach (long i in arr) {\n            if (i == 1) {\n              \
    \  if (ones > onesMax) {\n                    onesMax = ones;\n              \
    \  }\n                ones--;\n            }\n            if (i == 0) {\n    \
    \            if (zeros > zerosMax) {\n                    zerosMax = zeros;\n\
    \                }\n                zeros--;\n            }\n            if (i\
    \ > max) {\n                if (max > maxMax) {\n                    maxMax =\
    \ max;\n                }\n                max--;\n            }\n           \
    \ if (i < min) {\n                if (min < minMin) {\n                    minMin\
    \ = min;\n                }\n                min--;\n            }\n         \
    \   if (i > max) {\n                if (max > maxMax) {\n                    maxMax\
    \ = max;\n                }\n                max--;\n            }\n         \
    \   if (i < min) {\n                if (min < minMin) {\n                    minMin\
    \ = min;\n                }\n                min--;\n            }\n         \
    \   if (i > max) {\n                if (max > maxMax) {\n                    maxMax\
    \ = max;\n                }\n                max--;\n            }\n         \
    \   if (i < min) {\n                if (min < minMin) {\n                    minMin\
    \ = min;\n                }\n                min--;\n            }\n         \
    \   if (i > max) {\n                if (max > maxMax) {\n                    maxMax\
    \ = max;\n                }\n                max--;\n            }\n         \
    \   if (i < min) {\n                if (min < minMin) {\n                    minMin\
    \ = min;\n                }\n                min--;\n            }\n         \
    \   if (i > max) {\n                if (max > maxMax) {\n                    maxMax\
    \ = max;\n                }\n                max--;\n            }\n         \
    \   if (i < min) {", "        long ones = arr.Sum(x => x & 1);\n        long zeros\
    \ = arr.Sum(x => ~x & 1);\n        long max = Math.Max(ones, zeros);\n       \
    \ long min = Math.Min(ones, zeros);\n        long diff = max - min;\n        long\
    \ diff2 = diff / 2;\n        long diff3 = diff / 3;\n        long diff4 = diff\
    \ / 4;\n        long diff5 = diff / 5;\n        long diff6 = diff / 6;\n     \
    \   long diff7 = diff / 7;\n        long diff8 = diff / 8;\n        long diff9\
    \ = diff / 9;\n        long diff10 = diff / 10;\n        long diff11 = diff /\
    \ 11;\n        long diff12 = diff / 12;\n        long diff13 = diff / 13;\n  \
    \      long diff14 = diff / 14;\n        long diff15 = diff / 15;\n        long\
    \ diff16 = diff / 16;\n        long diff17 = diff / 17;\n        long diff18 =\
    \ diff / 18;\n        long diff19 = diff / 19;\n        long diff20 = diff / 20;\n\
    \        long diff21 = diff / 21;\n        long diff22 = diff / 22;\n        long\
    \ diff23 = diff / 23;\n        long diff24 = diff / 24;\n        long diff25 =\
    \ diff / 25;\n        long diff26 = diff / 26;\n        long diff27 = diff / 27;\n\
    \        long diff28 = diff / 28;\n        long diff29 = diff / 29;\n        long\
    \ diff30 = diff / 30;\n        long diff31 = diff / 31;\n        long diff32 =\
    \ diff / 32;\n        long diff33 = diff / 33;\n        long diff34 = diff / 34;\n\
    \        long diff35 = diff / 35;\n        long diff36 = diff / 36;\n        long\
    \ diff37 = diff / 37;\n        long diff38 = diff / 38;\n        long diff39 =\
    \ diff / 39;\n        long diff40 = diff / 40;\n        long diff41 = diff / 41;\n\
    \        long diff42 = diff / 42;\n        long diff43 = diff / 43;\n        long\
    \ diff44 = diff / 44;\n        long diff45 = diff / 45;\n        long diff46 =\
    \ diff / 46;\n        long diff47 = diff / 47;\n        long diff48 = diff / 48;\n\
    \        long diff49 = diff / 49;\n        long diff50 = ", "        long ones\
    \ = 0;\n        long zeros = 0;\n        long max = 0;\n        long min = 0;\n\
    \        foreach (long i in arr) {\n            if (i == 1) {\n              \
    \  ones++;\n            }\n            if (i == 0) {\n                zeros++;\n\
    \            }\n            if (i > max) {\n                max = i;\n       \
    \     }\n            if (i < min) {\n                min = i;\n            }\n\
    \        }\n        List<long> result = new List<long>();\n        if (ones >\
    \ zeros) {\n            result.Add(min);\n            result.AddRange(arr.Where(i\
    \ => i == min).OrderBy(i => i).Take(ones - 1));\n            result.Add(max);\n\
    \            result.AddRange(arr.Where(i => i == max).OrderBy(i => i).Take(zeros\
    \ - 1));\n        }\n        if (zeros > ones) {\n            result.Add(min);\n\
    \            result.AddRange(arr.Where(i => i == min).OrderBy(i => i).Take(zeros\
    \ - 1));\n            result.Add(max);\n            result.AddRange(arr.Where(i\
    \ => i == max).OrderBy(i => i).Take(ones - 1));\n        }\n        return result;",
  "        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  foreach (long i in arr) {\n            if (i == 1) {\n                ones++;\n\
    \            }\n            if (i == 0) {\n                zeros++;\n        \
    \    }\n            if (i > max) {\n                max = i;\n            }\n\
    \        }\n        List<long> result = new List<long>();\n        if (ones >\
    \ zeros) {\n            long temp = 0;\n            long temp2 = 0;\n        \
    \    long temp3 = 0;\n            long temp4 = 0;\n            long temp5 = 0;\n\
    \            long temp6 = 0;\n            long temp7 = 0;\n            long temp8\
    \ = 0;\n            long temp9 = 0;\n            long temp10 = 0;\n          \
    \  long temp11 = 0;\n            long temp12 = 0;\n            long temp13 = 0;\n\
    \            long temp14 = 0;\n            long temp15 = 0;\n            long\
    \ temp16 = 0;\n            long temp17 = 0;\n            long temp18 = 0;\n  \
    \          long temp19 = 0;\n            long temp20 = 0;\n            long temp21\
    \ = 0;\n            long temp22 = 0;\n            long temp23 = 0;\n         \
    \   long temp24 = 0;\n            long temp25 = 0;\n            long temp26 =\
    \ 0;\n            long temp27 = 0;\n            long temp28 = 0;\n           \
    \ long temp29 = 0;\n            long temp30 = 0;\n            long temp31 = 0;\n\
    \            long temp32 = 0;\n            long temp33 = 0;\n            long\
    \ temp34 = 0;\n            long temp35 = 0;\n            long temp36 = 0;\n  \
    \          long temp37 = 0;\n            long temp38 = 0;\n            long temp39\
    \ = 0;\n            long temp40 = 0;\n            long temp41 = 0;\n         \
    \   long temp42 = 0;\n            long temp43 = 0;\n            long temp44 =\
    \ 0;\n            long temp45 = 0;\n            long temp46 = 0;\n           \
    \ long temp47 = 0;\n            long temp48 = 0;\n            long temp49 = 0;\n\
    \            long temp50 = 0;\n            long temp51 = 0;\n            long\
    \ temp52 = 0;\n            long temp53 = 0;\n            long temp54 = 0;\n  \
    \          long temp55 = 0;\n            long temp56 = 0;\n            long temp57\
    \ = 0;\n            long temp58 = 0;\n            long temp59 = 0;\n         \
    \   long temp60 = 0;\n            long temp61 = 0;\n            long temp62 =\
    \ 0;\n            long temp63 = 0;\n            long temp64 = 0;\n           \
    \ long temp65 = 0;\n            long temp66 = 0;\n            long temp67 = 0;\n\
    \            long temp68 = 0;\n            long temp69 = 0;\n            long\
    \ temp70 = 0;\n            long temp71 = 0;\n            long temp72 = 0;\n  \
    \          long temp73 = 0;\n            long temp74 = 0;\n            ", "  \
    \      long ones = arr.Sum(x => x & 1);\n        long zeros = arr.Sum(x => ~x);\n\
    \        long maxOnes = arr.Max(x => x & 1);\n        long maxZeros = arr.Max(x\
    \ => ~x);\n        long maxOnesCount = arr.Count(x => x & 1 == 1);\n        long\
    \ maxZerosCount = arr.Count(x => ~x == 0);\n        long maxOnesDecimal = arr.Max(x\
    \ => Convert.ToInt64(Math.Pow(2, x)));\n        long maxZerosDecimal = arr.Max(x\
    \ => Convert.ToInt64(Math.Pow(2, x)));\n        long maxOnesDecimalCount = arr.Count(x\
    \ => Convert.ToInt64(Math.Pow(2, x)) == maxOnesDecimal);\n        long maxZerosDecimalCount\
    \ = arr.Count(x => Convert.ToInt64(Math.Pow(2, x)) == maxZerosDecimal);\n    \
    \    long maxOnesDecimalCount2 = arr.Count(x => Convert.ToInt64(Math.Pow(2, x))\
    \ == maxOnesDecimal);\n        long maxZerosDecimalCount2 = arr.Count(x => Convert.ToInt64(Math.Pow(2,\
    \ x)) == maxZerosDecimal);\n        long maxOnesDecimalCount3 = arr.Count(x =>\
    \ Convert.ToInt64(Math.Pow(2, x)) == maxOnesDecimal);\n        long maxZerosDecimalCount3\
    \ = arr.Count(x => Convert.ToInt64(Math.Pow(2, x)) == maxZerosDecimal);\n    \
    \    long maxOnesDecimalCount4 = arr.Count(x => Convert.ToInt64(Math.Pow(2, x))\
    \ == maxOnesDecimal);\n        long maxZerosDecimalCount4 = arr.Count(x => Convert.ToInt64(Math.Pow(2,\
    \ x)) == maxZerosDecimal);\n        long maxOnesDecimalCount5 = arr.Count(x =>\
    \ Convert.ToInt64(Math.Pow(2, x)) == maxOnesDecimal);\n        long maxZerosDecimalCount5\
    \ = arr.Count(x => Convert.ToInt64(Math.Pow(2, x)) == maxZerosDecimal);\n    \
    \    long maxOnesDecimalCount6 = arr.Count(x => Convert.ToInt64(Math.Pow(2, x))\
    \ == maxOnesDecimal);\n        long maxZerosDecimalCount6 = arr.Count(x => Convert.ToInt64(Math.Pow(2,\
    \ x)) == maxZerosDecimal);\n        long maxOnesDecimalCount7 = arr.Count(x =>\
    \ Convert.ToInt64(Math.Pow(2, x)) == maxOnesDecimal);\n        long maxZerosDecimalCount7\
    \ = ", "        var result = new List<long>();\n        foreach (var item in arr)\
    \ {\n            var binary = Convert.ToString(item, 2);\n            var count\
    \ = binary.Count(c => c == '1');\n            result.Add(count);\n        }\n\
    \        return result.OrderBy(x => x).ToList();", "        List<long> result\
    \ = new List<long>();\n        long ones = 0;\n        long zeros = 0;\n     \
    \   long max = 0;\n        foreach (long i in arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            }\n            else if (i == 0) {\n\
    \                zeros++;\n            }\n            else {\n               \
    \ max = Math.Max(max, Math.Max(ones, zeros));\n                ones = 0;\n   \
    \             zeros = 0;\n            }\n        }\n        max = Math.Max(max,\
    \ Math.Max(ones, zeros));\n        ones = 0;\n        zeros = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                ones++;\n    \
    \        }\n            else if (i == 0) {\n                zeros++;\n       \
    \     }\n            else {\n                max = Math.Max(max, Math.Max(ones,\
    \ zeros));\n                ones = 0;\n                zeros = 0;\n          \
    \  }\n        }\n        max = Math.Max(max, Math.Max(ones, zeros));\n       \
    \ ones = 0;\n        zeros = 0;\n        foreach (long i in arr) {\n         \
    \   if (i == 1) {\n                ones++;\n            }\n            else if\
    \ (i == 0) {\n                zeros++;\n            }\n            else {\n  \
    \              max = Math.Max(max, Math.Max(ones, zeros));\n                ones\
    \ = 0;\n                zeros = 0;\n            }\n        }\n        max = Math.Max(max,\
    \ Math.Max(ones, zeros));\n        ones = 0;\n        zeros = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                ones++;\n    \
    \        }\n            else if (i == 0) {\n                zeros++;\n       \
    \     }\n            else {\n                max = Math.Max(max, Math.Max(ones,\
    \ zeros));\n                ones = 0;\n                zeros = 0;\n          \
    \  }\n        }\n        max = Math.Max(max, Math.Max(ones, zeros));\n       \
    \ ones = 0;\n        zeros = 0;\n        foreach (long i in arr) {\n         \
    \   if (i == 1) {\n                ones++;\n            }\n            else if\
    \ (i == 0) {\n                zeros++;\n            }\n            else {\n  \
    \              max = Math.Max(max, Math.Max(ones, zeros));\n                ones\
    \ = 0;\n                zeros = 0;\n            }\n        }\n        max = Math.Max(max,\
    \ Math.Max(ones, zeros));\n        ones = 0;\n        zeros = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                ones++;\n    \
    \        }\n            else if (i == 0) {\n                zeros++;\n       \
    \     }\n            else {\n                max = Math.Max(max, Math.Max(ones,\
    \ zeros));\n                ones = 0;\n                zeros = 0;\n          \
    \  }\n        }\n        max = Math.Max(max, Math.Max(ones, zeros));\n       \
    \ ones = 0;\n        zeros = 0;\n        foreach (long i in arr) {\n         \
    \   if (i == 1) {\n                one", "        long ones = arr.Sum(x => x &\
    \ 1);\n        long zeros = arr.Sum(x => ~x);\n        long max = Math.Max(ones,\
    \ zeros);\n        long min = Math.Min(ones, zeros);\n        long diff = max\
    \ - min;\n        long zeroOnes = zeros - ones;\n        long onesDiff = ones\
    \ - zeros;\n        long zeroOnesDiff = zeroOnes - ones;\n        long onesZeroOnesDiff\
    \ = onesDiff;\n        long zeroOnesDiffDiff = zeroOnesDiff;\n        long onesZeroOnesDiffDiff\
    \ = onesZeroOnesDiff;\n        long onesZeroOnesDiffDiffDiff = onesZeroOnesDiffDiff;\n\
    \        long onesZeroOnesDiffDiffDiffDiff = onesZeroOnesDiffDiffDiff;\n     \
    \   long onesZeroOnesDiffDiffDiffDiffDiff = onesZeroOnesDiffDiffDiffDiffDiff;\n\
    \        long onesZeroOnesDiffDiffDiffDiffDiffDiff = onesZeroOnesDiffDiffDiffDiffDiffDiff;\n\
    \        long onesZeroOnesDiffDiffDiffDiffDiffDiffDiff = onesZeroOnesDiffDiffDiffDiffDiffDiffDiff;\n\
    \        long onesZeroOnesDiffDiffDiffDiffDiffDiffDiffDiff = onesZeroOnesDiffDiffDiffDiffDiffDiffDiffDiff;\n\
    \        long onesZeroOnesDiffDiffDiffDiffDiffDiffDiffDiff = onesZeroOnesDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n\
    \        long onesZeroOnesDiffDiffDiffDiffDiffDiffDiffDiffDiff = onesZeroOnesDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n\
    \        long onesZeroOnesDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = onesZeroOnesDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n\
    \        long onesZeroOnesDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = onesZeroOnesDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n\
    \        long onesZeroOnesDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = onesZeroOnesDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n\
    \        long onesZeroOnesDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = onesZeroOnesDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n\
    \        long onesZeroOne", "        List<long> result = new List<long>();\n \
    \       long ones = 0;\n        long zeros = 0;\n        long max = 0;\n     \
    \   foreach (long i in arr) {\n            ones += i;\n            zeros -= i;\n\
    \            if (ones > max) {\n                max = ones;\n            }\n \
    \       }\n        long onesMax = max;\n        long zeroMax = max;\n        foreach\
    \ (long i in arr) {\n            onesMax -= i;\n            zeroMax -= i;\n  \
    \          if (onesMax < 0) {\n                onesMax = 0;\n            }\n \
    \           if (zeroMax < 0) {\n                zeroMax = 0;\n            }\n\
    \        }\n        long onesMax2 = onesMax;\n        long zeroMax2 = zeroMax;\n\
    \        long onesMax3 = onesMax;\n        long zeroMax3 = zeroMax;\n        long\
    \ onesMax4 = onesMax;\n        long zeroMax4 = zeroMax;\n        long onesMax5\
    \ = onesMax;\n        long zeroMax5 = zeroMax;\n        long onesMax6 = onesMax;\n\
    \        long zeroMax6 = zeroMax;\n        long onesMax7 = onesMax;\n        long\
    \ zeroMax7 = zeroMax;\n        long onesMax8 = onesMax;\n        long zeroMax8\
    \ = zeroMax;\n        long onesMax9 = onesMax;\n        long zeroMax9 = zeroMax;\n\
    \        long onesMax10 = onesMax;\n        long zeroMax10 = zeroMax;\n      \
    \  long onesMax11 = onesMax;\n        long zeroMax11 = zeroMax;\n        long\
    \ onesMax12 = onesMax;\n        long zeroMax12 = zeroMax;\n        long onesMax13\
    \ = onesMax;\n        long zeroMax13 = zeroMax;\n        long onesMax14 = onesMax;\n\
    \        long zeroMax14 = zeroMax;\n        long onesMax15 = onesMax;\n      \
    \  long zeroMax15 = zeroMax;\n        long onesMax16 = onesMax;\n        long\
    \ zeroMax16 = zeroMax;\n        long onesMax17 = onesMax;\n        long zeroMax17\
    \ = zeroMax;\n        long onesMax18 = onesMax;\n        long zeroMax18 = zeroMax;\n\
    \        long onesMax19 = onesMax;\n        long zeroMax19 = zeroMax;\n      \
    \  long onesMax20 = onesMax;\n        long zero", "        long ones = 0;\n  \
    \      long zeros = 0;\n        long max = 0;\n        foreach (long i in arr)\
    \ {\n            if (i == 1) {\n                ones++;\n            }\n     \
    \       if (i == 0) {\n                zeros++;\n            }\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        long onesMax = 0;\n        long zerosMax\
    \ = 0;\n        long maxMax = 0;\n        long maxMin = 0;\n        long minMax\
    \ = 0;\n        long minMin = 0;\n        long maxOnes = 0;\n        long maxZeros\
    \ = 0;\n        long maxOnesMax = 0;\n        long maxZerosMax = 0;\n        long\
    \ maxMaxMax = 0;\n        long maxMinMax = 0;\n        long minMaxMax = 0;\n \
    \       long minMinMax = 0;\n        long maxOnesMin = 0;\n        long maxZerosMin\
    \ = 0;\n        long maxOnesMaxMin = 0;\n        long maxZerosMaxMin = 0;\n  \
    \      long maxMaxMaxMin = 0;\n        long maxMinMaxMin = 0;\n        long minMaxMaxMin\
    \ = 0;\n        long minMinMaxMin = 0;\n        long maxOnesMinMin = 0;\n    \
    \    long maxZerosMinMin = 0;\n        long maxOnesMaxMinMin = 0;\n        long\
    \ maxZerosMaxMinMin = 0;\n        long maxMaxMaxMin = 0;\n        long maxMinMaxMin\
    \ = 0;\n        long minMaxMaxMin = 0;\n        long minMinMaxMin = 0;\n     \
    \   long maxOnesMinMinMin = 0;\n        long maxZerosMinMinMin = 0;\n        long\
    \ maxOnesMaxMinMin = 0;\n        long maxZerosMaxMinMin = 0;\n        long maxMaxMaxMin\
    \ = 0;\n        long maxMinMaxMin = 0;\n        long minMaxMaxMin = 0;\n     \
    \   long minMinMaxMin = 0;\n        long maxOnesMinMinMin = 0;\n        long maxZerosMinMinMin\
    \ = 0;\n        long maxOnesMaxMinMin = 0;\n        long maxZerosMaxMinMin = 0;\n\
    \        long maxMaxMaxMin = 0;\n        long maxMinMaxMin = 0;\n        long\
    \ minMaxMaxMin = 0;\n        long minMinMaxMin = 0;\n        long maxOnesMinMinMin\
    \ = 0;\n        long maxZerosMinMinMin = 0;\n        long maxOnesMaxMinMin = 0;\n\
    \        long maxZerosMaxMinMin = 0;\n        long maxMaxMaxMin = 0;\n       \
    \ long maxMinMaxMin = 0;\n        long minMaxMaxMin", "        List<long> result\
    \ = new List<long>();\n        long ones = 0;\n        long zeros = 0;\n     \
    \   foreach (long n in arr) {\n            ones += n;\n            zeros += (n\
    \ != 0);\n        }\n        if (ones > zeros) {\n            foreach (long n\
    \ in arr) {\n                if (n != 0)\n                    result.Add(n);\n\
    \            }\n            foreach (long n in arr) {\n                if (n ==\
    \ 0)\n                    result.Add(-ones);\n            }\n        } else {\n\
    \            foreach (long n in arr) {\n                if (n != 0)\n        \
    \            result.Add(-ones);\n            }\n            foreach (long n in\
    \ arr) {\n                if (n == 0)\n                    result.Add(zeros);\n\
    \            }\n        }\n        return result;", "        long ones = 0;\n\
    \        long zeros = 0;\n        long max = 0;\n        foreach (long i in arr)\
    \ {\n            if (i == 1) {\n                ones++;\n            }\n     \
    \       else if (i == 0) {\n                zeros++;\n            }\n        \
    \    else {\n                if (ones > zeros) {\n                    max = i;\n\
    \                }\n                else {\n                    max = zeros;\n\
    \                }\n            }\n        }\n        List<long> result = new\
    \ List<long>();\n        foreach (long i in arr) {\n            if (i == 1) {\n\
    \                result.Add(ones);\n            }\n            else if (i == 0)\
    \ {\n                result.Add(zeros);\n            }\n            else {\n \
    \               if (ones > zeros) {\n                    result.Add(i);\n    \
    \            }\n                else {\n                    result.Add(zeros);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   long ones = 0;\n        long zeros = 0;\n        long max = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                ones++;\n    \
    \        }\n            if (i == 0) {\n                zeros++;\n            }\n\
    \            if (i > max) {\n                max = i;\n            }\n       \
    \ }\n        long onesMax = ones * max;\n        long zerosMax = zeros * max;\n\
    \        long onesMin = ones * min;\n        long zerosMin = zeros * min;\n  \
    \      long onesDiff = onesMax - onesMin;\n        long zerosDiff = zerosMax -\
    \ zerosMin;\n        long onesDiffMax = onesMax * max;\n        long zerosDiffMax\
    \ = zerosMax * max;\n        long onesDiffMin = onesMax * min;\n        long zerosDiffMin\
    \ = zerosMax * min;\n        long onesDiffMinMax = onesMax * max * min;\n    \
    \    long zerosDiffMinMax = zerosMax * max * min;\n        long onesDiffMinMaxDiff\
    \ = onesMax * max * min * min;\n        long zerosDiffMinMaxDiff = zerosMax *\
    \ max * min * min;\n        long onesDiffMinMaxDiffMax = onesMax * max * min *\
    \ max;\n        long zerosDiffMinMaxDiffMax = zerosMax * max * min * max;\n  \
    \      long onesDiffMinMaxDiffMaxDiff = onesMax * max * min * max * min;\n   \
    \     long zerosDiffMinMaxDiffMaxDiff = zerosMax * max * min * max * min;\n  \
    \      long onesDiffMinMaxDiffMaxDiffMax = onesMax * max * min * max * max;\n\
    \        long zerosDiffMinMaxDiffMaxDiffMax = zerosMax * max * min * max * max;\n\
    \        long onesDiffMinMaxDiffMaxDiffMaxDiff = onesMax * max * min * max * max\
    \ * min;\n        long zerosDiffMinMaxDiffMaxDiffMaxDiff = zerosMax * max * min\
    \ * max * max * min;\n        long onesDiffMinMaxDiffMaxDiffMaxDiffMax = onesMax\
    \ * max * min * max * max * max * min;\n        long zerosDiffMinMaxDiffMaxDiffMaxDiffMax\
    \ = zerosMax * max * min * max * max * max * min;\n        long onesDiffMinMaxDiffMaxDiffMaxDiffMaxDiff\
    \ = ones", "        long ones = 0;\n        long zeros = 0;\n        long max\
    \ = 0;\n        long min = 0;\n        foreach (long i in arr) {\n           \
    \ if (i == 1) {\n                ones++;\n            }\n            if (i ==\
    \ 0) {\n                zeros++;\n            }\n            if (i > max) {\n\
    \                max = i;\n            }\n            if (i < min) {\n       \
    \         min = i;\n            }\n        }\n        List<long> result = new\
    \ List<long>();\n        if (ones > zeros) {\n            long onesMax = Convert.ToInt64(Math.Pow(2,\
    \ Math.Log(ones, 2)));\n            long zerosMax = Convert.ToInt64(Math.Pow(2,\
    \ Math.Log(zeros, 2)));\n            long onesMin = Convert.ToInt64(Math.Pow(2,\
    \ Math.Log(ones, 2) - 1));\n            long zerosMin = Convert.ToInt64(Math.Pow(2,\
    \ Math.Log(zeros, 2) - 1));\n            long onesMaxMin = Convert.ToInt64(Math.Pow(2,\
    \ Math.Log(ones, 2) - 2));\n            long zerosMaxMin = Convert.ToInt64(Math.Pow(2,\
    \ Math.Log(zeros, 2) - 2));\n            long onesMaxMinMin = Convert.ToInt64(Math.Pow(2,\
    \ Math.Log(ones, 2) - 3));\n            long zerosMaxMinMin = Convert.ToInt64(Math.Pow(2,\
    \ Math.Log(zeros, 2) - 3));\n            long onesMaxMinMinMin = Convert.ToInt64(Math.Pow(2,\
    \ Math.Log(ones, 2) - 4));\n            long zerosMaxMinMinMin = Convert.ToInt64(Math.Pow(2,\
    \ Math.Log(zeros, 2) - 4));\n            long onesMaxMinMinMin = Convert.ToInt64(Math.Pow(2,\
    \ Math.Log(ones, 2) - 5));\n            long zerosMaxMinMinMin = Convert.ToInt64(Math.Pow(2,\
    \ Math.Log(zeros, 2) - 5));\n            long onesMaxMinMinMinMin = Convert.ToInt64(Math.Pow(2,\
    \ Math.Log(ones, 2) - 6));\n            long zerosMaxMinMinMinMin = Convert.ToInt64(Math.Pow(2,\
    \ Math.Log(zeros, 2) - 6));\n            long onesMaxMinMinMinMin = Convert.ToInt64(Math.Pow(2,\
    \ Math.Log(ones, 2) - 7));\n            long zerosMaxMinMinMinMin = Convert.ToInt64(Math.Pow(2,\
    \ Math.Log(zeros, 2) - 7));\n            long onesMaxMinMinMinMin = Convert.ToInt64(Math.Pow(2,\
    \ Math.Log(ones, 2) - 8));\n            long zerosMaxMinMinMinMin = Convert.ToInt64(Math.Pow(2,\
    \ Math.Log(zeros, 2) - 8));\n            ", "        if (arr.Count == 0) return\
    \ arr;\n        long ones = arr.Sum(x => x & 1);\n        long zeros = arr.Sum(x\
    \ => ~x & 1);\n        long maxOnes = arr.Max(x => x & 1);\n        long maxZeros\
    \ = arr.Max(x => ~x & 1);\n        long maxOnesZeros = maxOnes - maxZeros;\n \
    \       long maxOnesOnes = maxOnes - ones;\n        long maxOnesTwos = maxOnes\
    \ - twos;\n        long maxOnesThrees = maxOnes - threes;\n        long maxOnesFours\
    \ = maxOnes - fours;\n        long maxOnesFives = maxOnes - fives;\n        long\
    \ maxOnesSixes = maxOnes - sixes;\n        long maxOnesSevens = maxOnes - sevens;\n\
    \        long maxOnesEights = maxOnes - eights;\n        long maxOnesNines = maxOnes\
    \ - nines;\n        long maxOnesTens = maxOnes - tens;\n        long maxOnesElevens\
    \ = maxOnes - elevens;\n        long maxOnesTwelves = maxOnes - twelves;\n   \
    \     long maxOnesThirteens = maxOnes - thirteens;\n        long maxOnesFourteens\
    \ = maxOnes - fourteens;\n        long maxOnesFifteens = maxOnes - fifteens;\n\
    \        long maxOnesSixteens = maxOnes - sixteens;\n        long maxOnesSeventeens\
    \ = maxOnes - seventeens;\n        long maxOnesEighteens = maxOnes - eighteens;\n\
    \        long maxOnesNineteens = maxOnes - nineteens;\n        long maxOnesTwenty\
    \ = maxOnes - twenty;\n        long maxOnesTwentyOnes = maxOnes - twentyOnes;\n\
    \        long maxOnesTwentyTwos = maxOnes - twentyTwos;\n        long maxOnesTwentyThrees\
    \ = maxOnes - twentyThrees;\n        long maxOnesTwentyFours = maxOnes - twentyFours;\n\
    \        long maxOnesTwentyFives = maxOnes - twentyFives;\n        long maxOnesTwentySixes\
    \ = maxOnes - twentySixes;\n        long maxOnesTwentySevens = max", "       \
    \ long ones = 0;\n        long zeros = 0;\n        long max = 0;\n        long\
    \ min = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n   \
    \             ones++;\n            }\n            if (i == 0) {\n            \
    \    zeros++;\n            }\n            if (i > max) {\n                max\
    \ = i;\n            }\n            if (i < min) {\n                min = i;\n\
    \            }\n        }\n        long onesMax = ones * max;\n        long onesMin\
    \ = ones * min;\n        long zerosMax = zeros * max;\n        long zerosMin =\
    \ zeros * min;\n        long maxDiff = onesMax - zerosMax;\n        long minDiff\
    \ = onesMin - zerosMin;\n        long maxDiffMin = zerosMax - onesMin;\n     \
    \   long maxDiffMax = zerosMin - onesMax;\n        long maxDiffMinMax = maxDiff\
    \ + maxDiffMin + maxDiffMax;\n        long maxDiffMinMaxMin = maxDiffMin + maxDiffMax;\n\
    \        long maxDiffMinMaxMinMinMax = maxDiffMin + maxDiffMax + maxDiffMinMax;\n\
    \        long maxDiffMinMaxMinMaxMin = maxDiffMin + maxDiffMax + maxDiffMin;\n\
    \        long maxDiffMinMaxMinMaxMinMax = maxDiffMin + maxDiffMax + maxDiffMin\
    \ + maxDiffMax;\n        long maxDiffMinMaxMinMaxMinMaxMin = maxDiffMin + maxDiffMax\
    \ + maxDiffMin + maxDiffMax + maxDiffMinMax;\n        long maxDiffMinMaxMinMaxMinMaxMin\
    \ = maxDiffMin + maxDiffMax + maxDiffMin + maxDiffMax + maxDiffMin + maxDiffMax;\n\
    \        long maxDiffMinMaxMinMaxMinMaxMinMax = maxDiffMin + maxDiffMax + maxDiffMin\
    \ + maxDiffMax + maxDiffMin + maxDiffMax + maxDiffMinMax;\n        long maxDiffMinMaxMinMaxMinMaxMinMaxMin\
    \ = maxDiffMin + maxDiffMax + maxDiffMin + maxDiffMax + maxDiffMin + maxDiffMax\
    \ + maxDiffMin + maxDiffMax;\n        long maxDiffMinMaxMinMaxMinMaxMinMaxMin\
    \ = maxDiffMin + maxDiffMax + maxDiffMin + maxDiffMax + maxDiffMin + maxDiffMax\
    \ + maxDiffMin + maxDiffMax + maxDiffMinMax;\n        long maxDiffMinMaxMinMaxMinMaxMinMaxMin\
    \ = maxDiffMin + max", "        List<long> result = new List<long>();\n      \
    \  long ones = 0;\n        long zeros = 0;\n        foreach (long i in arr) {\n\
    \            ones += i;\n        }\n        foreach (long i in arr) {\n      \
    \      zeros += i;\n        }\n        long onesCount = ones;\n        long zerosCount\
    \ = zeros;\n        long onesSum = 0;\n        long zerosSum = 0;\n        long\
    \ onesMax = 0;\n        long zerosMax = 0;\n        long onesMin = 0;\n      \
    \  long zerosMin = 0;\n        long onesSum2 = 0;\n        long zerosSum2 = 0;\n\
    \        long onesMax2 = 0;\n        long zerosMax2 = 0;\n        long onesMin2\
    \ = 0;\n        long zerosMin2 = 0;\n        long onesSum3 = 0;\n        long\
    \ zerosSum3 = 0;\n        long onesMax3 = 0;\n        long zerosMax3 = 0;\n  \
    \      long onesMin3 = 0;\n        long zerosMin3 = 0;\n        long onesSum4\
    \ = 0;\n        long zerosSum4 = 0;\n        long onesMax4 = 0;\n        long\
    \ zerosMax4 = 0;\n        long onesMin4 = 0;\n        long zerosMin4 = 0;\n  \
    \      long onesSum5 = 0;\n        long zerosSum5 = 0;\n        long onesMax5\
    \ = 0;\n        long zerosMax5 = 0;\n        long onesMin5 = 0;\n        long\
    \ zerosMin5 = 0;\n        long onesSum6 = 0;\n        long zerosSum6 = 0;\n  \
    \      long onesMax6 = 0;\n        long zerosMax6 = 0;\n        long onesMin6\
    \ = 0;\n        long zerosMin6 = 0;\n        long onesSum7 = 0;\n        long\
    \ zerosSum7 = 0;\n        long onesMax7 = 0;\n        long zerosMax7 = 0;\n  \
    \      long onesMin7 = 0;\n        long zerosMin7 = 0;\n        long onesSum8\
    \ = 0;\n        long zerosSum8 = 0;\n        long onesMax8 = 0;\n        long\
    \ zerosMax8 = 0;\n        long onesMin8 = 0;\n        long zerosMin8 = 0;\n  \
    \      long onesSum9 = 0;\n        long zerosSum9 = 0;\n        long onesMax9\
    \ = 0;\n        long zerosMax9 = 0;\n        long onesMin9 = 0;\n        long\
    \ zerosMin9 = 0;\n        long onesSum10 = 0;\n        long zerosSum10 = 0;\n\
    \        long onesMax10 = 0;\n        long zerosMax10 = 0;\n        long onesMin10\
    \ = 0;\n        long zerosMin10 = 0;\n        long onesSum11 = 0;\n        long\
    \ zerosSum11 = 0;\n        long onesMax11 = 0;\n        long zerosMax11 = 0;",
  "        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  foreach (long i in arr) {\n            if (i == 1) {\n                ones++;\n\
    \            }\n            if (i == 0) {\n                zeros++;\n        \
    \    }\n            if (i > max) {\n                max = i;\n            }\n\
    \        }\n        List<long> result = new List<long>();\n        long temp =\
    \ 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n\
    \        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n \
    \       long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n \
    \       long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n\
    \        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n\
    \        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n\
    \        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n\
    \        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n\
    \        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n\
    \        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n\
    \        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n\
    \        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n\
    \        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n\
    \        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n\
    \        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n\
    \        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n\
    \        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n\
    \        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n\
    \        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n\
    \        long temp59 = 0;\n        long temp60 = 0;\n        long temp61 = 0;\n\
    \        long temp62 = 0;\n        long temp63 = 0;\n        long temp64 = 0;\n\
    \        long temp65 = 0;\n        long temp66 = 0;\n        long temp67 = 0;\n\
    \        long temp68 = 0;\n        long temp69 = 0;\n        long temp70 = 0;\n\
    \        long temp71 = 0;\n        long temp72 = 0;\n        long temp73 = 0;\n\
    \        long temp74 = 0;\n        long temp75 = 0;\n        ", "        List<long>\
    \ result = new List<long>();\n        long ones = 0;\n        long zeros = 0;\n\
    \        long max = 0;\n        foreach (long i in arr) {\n            if (i ==\
    \ 1) {\n                ones++;\n            }\n            else if (i == 0) {\n\
    \                zeros++;\n            }\n            else {\n               \
    \ if (ones > zeros) {\n                    result.Add(i);\n                }\n\
    \                else {\n                    result.Add(-i);\n               \
    \ }\n            }\n            if (ones > max) {\n                max = ones;\n\
    \            }\n            if (zeros > max) {\n                max = zeros;\n\
    \            }\n        }\n        long onesMax = max;\n        long zerosMax\
    \ = max;\n        foreach (long i in arr) {\n            if (i == 1) {\n     \
    \           ones--;\n            }\n            else if (i == 0) {\n         \
    \       zeros--;\n            }\n            else {\n                if (onesMax\
    \ < zeros) {\n                    result.Add(i);\n                }\n        \
    \        else {\n                    result.Add(-i);\n                }\n    \
    \        }\n            if (onesMax < max) {\n                max = onesMax;\n\
    \            }\n            if (zerosMax < max) {\n                max = zerosMax;\n\
    \            }\n        }\n        return result;", "        long ones = 0;\n\
    \        long zeros = 0;\n        List<long> result = new List<long>();\n    \
    \    foreach (long i in arr) {\n            if (i == 1) {\n                ones++;\n\
    \            }\n            else if (i == 0) {\n                zeros++;\n   \
    \         }\n            else {\n                result.Add(i);\n            }\n\
    \        }\n        if (ones > zeros) {\n            result.Sort();\n        }\n\
    \        else {\n            result.Sort();\n            result.Reverse();\n \
    \       }\n        return result;", "        long ones = 0;\n        long zeros\
    \ = 0;\n        long max = 0;\n        foreach (long i in arr) {\n           \
    \ if (i == 1) {\n                ones++;\n            }\n            if (i ==\
    \ 0) {\n                zeros++;\n            }\n            if (i > max) {\n\
    \                max = i;\n            }\n        }\n        long onesMax = ones\
    \ * max;\n        long zerosMax = zeros * max;\n        long onesMin = ones *\
    \ min;\n        long zerosMin = zeros * min;\n        long onesAvg = ones * arr.Average();\n\
    \        long zerosAvg = zeros * arr.Average();\n        long onesMedian = ones\
    \ * arr.Median();\n        long zerosMedian = zeros * arr.Median();\n        long\
    \ onesMedianAvg = ones * arr.Median(x => x);\n        long zerosMedianAvg = zeros\
    \ * arr.Median(x => x);\n        long onesMedianMedian = ones * arr.Median(x =>\
    \ x, x => x);\n        long zerosMedianMedian = zeros * arr.Median(x => x, x =>\
    \ x);\n        long onesMedianMedianAvg = ones * arr.Median(x => x, x => x, x\
    \ => x);\n        long zerosMedianMedianAvg = zeros * arr.Median(x => x, x =>\
    \ x, x => x);\n        long onesMedianMedianMedian = ones * arr.Median(x => x,\
    \ x => x, x => x, x => x);\n        long zerosMedianMedianMedian = zeros * arr.Median(x\
    \ => x, x => x, x => x, x => x);\n        long onesMedianMedianMedianAvg = ones\
    \ * arr.Median(x => x, x => x, x => x, x => x, x => x);\n        long zerosMedianMedianMedianAvg\
    \ = zeros * arr.Median(x => x, x => x, x => x, x => x, x => x);\n        long\
    \ onesMedianMedianMedianMedian = ones * arr.Median(x => x, x => x, x => x, x =>\
    \ x, x => x, x => x);\n        long zerosMedianMedianMedianMedian = zeros * arr.Median(x\
    \ => x, x => x, x => x, x => x, x => x, x => x);\n        long onesMedianMedianMedianMedianAvg\
    \ = ones * arr.Median(x => x, x => x, x => x, x => x, x => ", "        long ones\
    \ = 0;\n        long zeros = 0;\n        long max = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                ones++;\n          \
    \  }\n            if (i == 0) {\n                zeros++;\n            }\n   \
    \         if (i > max) {\n                max = i;\n            }\n        }\n\
    \        List<long> result = new List<long>();\n        long ones_count = ones\
    \ + zeros;\n        long zeros_count = zeros;\n        long max_count = max;\n\
    \        long max_ones_count = ones_count;\n        long max_zeros_count = zeros_count;\n\
    \        long max_max_count = max_count;\n        long max_max_ones_count = max_ones_count;\n\
    \        long max_max_zeros_count = max_zeros_count;\n        long max_max_max_count\
    \ = max_max_count;\n        long max_max_max_ones_count = max_max_ones_count;\n\
    \        long max_max_max_zeros_count = max_max_zeros_count;\n        long max_max_max_max_count\
    \ = max_max_max_count;\n        long max_max_max_max_ones_count = max_max_max_ones_count;\n\
    \        long max_max_max_zeros_count = max_max_max_zeros_count;\n        long\
    \ max_max_max_max_count = max_max_max_max_count;\n        long max_max_max_max_ones_count\
    \ = max_max_max_max_ones_count;\n        long max_max_max_zeros_count = max_max_max_zeros_count;\n\
    \        long max_max_max_max_count = max_max_max_max_count;\n        long max_max_max_max_ones_count\
    \ = max_max_max_max_ones_count;\n        long max_max_max_zeros_count = max_max_max_zeros_count;\n\
    \        long max_max_max_max_count = max_max_max_max_count;\n        long max_max_max_max_ones_count\
    \ = max_max_max_max_ones_count;\n        long max_max_max_zeros_count = max_max_max_zeros_count;\n\
    \        long max_max_max_max_count = max_max_max_max_count;\n        long max_max_max_max_ones_count\
    \ = max_max_max_max_ones_count;\n        long max_max_max_zeros_count = max_max_max_zeros_count;\n\
    \        long max_max_max_max_count = max_max_max_max_count;\n        long max_max_max_max_ones_count\
    \ = max_max_max_max_ones_count;\n        long max_max_max_zeros_count = max_max_max_zeros_count;\n\
    \        long max_max_max_max_count = max_max_max_max_count;\n        long max_max_max_max_ones_count\
    \ = max_max_max_max_ones_count;\n        long max_max_max_zeros_count = max_max_max_zeros_count;\n\
    \        long max_max_max_max_count = max_max_max_max_count;\n        long max_max_max_",
  "        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  foreach (long i in arr) {\n            if (i == 1) {\n                ones++;\n\
    \            }\n            else if (i == 0) {\n                zeros++;\n   \
    \         }\n            else {\n                if (ones > zeros) {\n       \
    \             max = ones;\n                }\n                else {\n       \
    \             max = zeros;\n                }\n            }\n        }\n    \
    \    List<long> result = new List<long>();\n        foreach (long i in arr) {\n\
    \            if (i == 1) {\n                result.Add(i);\n            }\n  \
    \          else if (i == 0) {\n                result.Add(0);\n            }\n\
    \            else {\n                if (ones > zeros) {\n                   \
    \ result.Add(i);\n                }\n                else {\n                \
    \    result.Add(0);\n                }\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long ones\
    \ = 0;\n        long zeros = 0;\n        long max = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                ones++;\n          \
    \  }\n            if (i == 0) {\n                zeros++;\n            }\n   \
    \         if (ones > zeros) {\n                max = i;\n            }\n     \
    \   }\n        long onesMax = ones;\n        long zerosMax = zeros;\n        long\
    \ maxMax = max;\n        long onesMaxMax = onesMax;\n        long zerosMaxMax\
    \ = zerosMax;\n        long maxMaxMax = maxMax;\n        long onesMaxMaxMax =\
    \ onesMaxMax;\n        long zerosMaxMaxMax = zerosMaxMax;\n        long maxMaxMaxMax\
    \ = maxMaxMaxMax;\n        long onesMaxMaxMaxMax = onesMaxMaxMaxMax;\n       \
    \ long zerosMaxMaxMaxMax = zerosMaxMaxMaxMax;\n        long maxMaxMaxMaxMax =\
    \ maxMaxMaxMaxMax;\n        long onesMaxMaxMaxMaxMax = onesMaxMaxMaxMaxMax;\n\
    \        long zerosMaxMaxMaxMaxMax = zerosMaxMaxMaxMaxMax;\n        long maxMaxMaxMaxMaxMax\
    \ = maxMaxMaxMaxMaxMax;\n        long onesMaxMaxMaxMaxMaxMax = onesMaxMaxMaxMaxMaxMax;\n\
    \        long zerosMaxMaxMaxMaxMax = zerosMaxMaxMaxMaxMax;\n        long maxMaxMaxMaxMaxMax\
    \ = maxMaxMaxMaxMaxMax;\n        long onesMaxMaxMaxMaxMaxMax = onesMaxMaxMaxMaxMaxMax;\n\
    \        long zerosMaxMaxMaxMaxMaxMax = zerosMaxMaxMaxMaxMaxMax;\n        long\
    \ maxMaxMaxMaxMaxMaxMax = maxMaxMaxMaxMaxMaxMax;\n        long onesMaxMaxMaxMaxMaxMaxMax\
    \ = onesMaxMaxMaxMaxMaxMaxMax;\n        long zerosMaxMaxMaxMaxMaxMax = zerosMaxMaxMaxMaxMaxMax;\n\
    \        long maxMaxMaxMaxMaxMaxMax = maxMaxMaxMaxMaxMaxMax;\n        long onesMaxMaxMaxMaxMaxMaxMax\
    \ = onesMaxMaxMaxMaxMaxMaxMax;\n        long zerosMaxMaxMaxMaxMaxMax = zerosMaxMaxMaxMaxMaxMaxMax;\n\
    \        long maxMaxMaxMaxMaxMaxMaxMax = maxMaxMaxMaxMaxMaxMaxMaxMax;\n      \
    \  long onesMaxMaxMaxMaxMax", "        var result = new List<long>();\n      \
    \  var ones = new List<long>();\n        var zeros = new List<long>();\n     \
    \   foreach (var item in arr) {\n            if (item == 1) {\n              \
    \  ones.Add(item);\n            } else {\n                zeros.Add(item);\n \
    \           }\n        }\n        if (ones.Count > zeros.Count) {\n          \
    \  foreach (var item in ones) {\n                result.Add(item);\n         \
    \   }\n        } else {\n            foreach (var item in zeros) {\n         \
    \       result.Add(item);\n            }\n        }\n        return result;",
  "        long ones = arr.Sum(x => x & 1L);\n        if (ones == 0) return arr;\n\
    \        long maxOnes = arr.Max(x => x & 1L);\n        if (maxOnes == 0) return\
    \ arr;\n        long maxOnesCount = arr.Count(x => x & 1L);\n        long maxOnesCount2\
    \ = maxOnesCount * maxOnesCount;\n        long maxOnesCount3 = maxOnesCount2 *\
    \ maxOnesCount;\n        long maxOnesCount4 = maxOnesCount3 * maxOnesCount;\n\
    \        long maxOnesCount5 = maxOnesCount4 * maxOnesCount;\n        long maxOnesCount6\
    \ = maxOnesCount5 * maxOnesCount;\n        long maxOnesCount7 = maxOnesCount6\
    \ * maxOnesCount;\n        long maxOnesCount8 = maxOnesCount7 * maxOnesCount;\n\
    \        long maxOnesCount9 = maxOnesCount8 * maxOnesCount;\n        long maxOnesCount10\
    \ = maxOnesCount9 * maxOnesCount;\n        long maxOnesCount11 = maxOnesCount10\
    \ * maxOnesCount;\n        long maxOnesCount12 = maxOnesCount11 * maxOnesCount;\n\
    \        long maxOnesCount13 = maxOnesCount12 * maxOnesCount;\n        long maxOnesCount14\
    \ = maxOnesCount13 * maxOnesCount;\n        long maxOnesCount15 = maxOnesCount14\
    \ * maxOnesCount;\n        long maxOnesCount16 = maxOnesCount15 * maxOnesCount;\n\
    \        long maxOnesCount17 = maxOnesCount16 * maxOnesCount;\n        long maxOnesCount18\
    \ = maxOnesCount17 * maxOnesCount;\n        long maxOnesCount19 = maxOnesCount18\
    \ * maxOnesCount;\n        long maxOnesCount20 = maxOnesCount19 * maxOnesCount;\n\
    \        long maxOnesCount21 = maxOnesCount20 * maxOnesCount;\n        long maxOnesCount22\
    \ = maxOnesCount21 * maxOnesCount;\n        long maxOnesCount23 = maxOnesCount22\
    \ * maxOnesCount;\n        long maxOnesCount24 = maxOnesCount23 * maxOnesCount;\n\
    \        long maxOnesCount", "        List<long> result = new List<long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        foreach (long i in arr)\
    \ {\n            ones += i;\n            zeros += (long)Math.Pow(2, (int)Math.Log10(i));\n\
    \        }\n        long onesMax = ones;\n        long zerosMax = zeros;\n   \
    \     long onesMin = ones;\n        long zerosMin = zeros;\n        long onesMaxIndex\
    \ = 0;\n        long zerosMaxIndex = 0;\n        long onesMinIndex = 0;\n    \
    \    long zerosMinIndex = 0;\n        long onesMaxIndex2 = 0;\n        long zerosMaxIndex2\
    \ = 0;\n        long onesMinIndex2 = 0;\n        long zerosMinIndex2 = 0;\n  \
    \      long onesMaxIndex3 = 0;\n        long zerosMaxIndex3 = 0;\n        long\
    \ onesMinIndex3 = 0;\n        long zerosMinIndex3 = 0;\n        long onesMaxIndex4\
    \ = 0;\n        long zerosMaxIndex4 = 0;\n        long onesMinIndex4 = 0;\n  \
    \      long zerosMinIndex4 = 0;\n        long onesMaxIndex5 = 0;\n        long\
    \ zerosMaxIndex5 = 0;\n        long onesMinIndex5 = 0;\n        long zerosMinIndex5\
    \ = 0;\n        long onesMaxIndex6 = 0;\n        long zerosMaxIndex6 = 0;\n  \
    \      long onesMinIndex6 = 0;\n        long zerosMinIndex6 = 0;\n        long\
    \ onesMaxIndex7 = 0;\n        long zerosMaxIndex7 = 0;\n        long onesMinIndex7\
    \ = 0;\n        long zerosMinIndex7 = 0;\n        long onesMaxIndex8 = 0;\n  \
    \      long zerosMaxIndex8 = 0;\n        long onesMinIndex8 = 0;\n        long\
    \ zerosMinIndex8 = 0;\n        long onesMaxIndex9 = 0;\n        long zerosMaxIndex9\
    \ = 0;\n        long onesMinIndex9 = 0;\n        long zerosMinIndex9 = 0;\n  \
    \      long onesMaxIndex10 = 0;\n        long zerosMaxIndex10 = 0;\n        long\
    \ onesMinIndex10 = 0;\n        long zerosMinIndex10 = 0;\n        long onesMaxIndex11\
    \ = 0;\n        long zerosMaxIndex11 = 0;\n        long onesMinIndex11 = 0;\n\
    \        long zerosMinIndex11 = 0;\n        long onesMaxIndex12 = 0;\n       \
    \ long zerosMaxIndex12 = 0;\n        long onesMinIndex12 = 0;\n        long zerosMinIndex12\
    \ = 0;\n        long onesMaxIndex13 = 0;\n        long zerosMaxIndex13 = 0;\n\
    \        long onesMinIndex13 = 0;\n        long zerosMinIndex13 = 0;\n       \
    \ long onesMaxIndex14", "        long ones = 0;\n        long zeros = 0;\n   \
    \     long max = 0;\n        foreach (long i in arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            }\n            if (i == 0) {\n     \
    \           zeros++;\n            }\n            if (i > max) {\n            \
    \    max = i;\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        if (ones > zeros) {\n            result.Add(max);\n            result.AddRange(arr.Where(i\
    \ => i == max).OrderBy(i => i).ToList());\n        }\n        if (zeros > ones)\
    \ {\n            result.AddRange(arr.Where(i => i == max).OrderByDescending(i\
    \ => i).ToList());\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long ones = 0;\n        long zeros = 0;\n     \
    \   foreach (long i in arr) {\n            if (i == 1) {\n                ones++;\n\
    \            } else {\n                zeros++;\n            }\n        }\n  \
    \      long onesCount = ones;\n        long zerosCount = zeros;\n        long\
    \ onesCountMax = ones;\n        long zerosCountMax = zeros;\n        long onesCountMin\
    \ = ones;\n        long zerosCountMin = zeros;\n        long onesCountMaxMin =\
    \ ones;\n        long zerosCountMaxMin = zeros;\n        long onesCountMaxMin2\
    \ = ones;\n        long zerosCountMaxMin2 = zeros;\n        long onesCountMaxMin3\
    \ = ones;\n        long zerosCountMaxMin3 = zeros;\n        long onesCountMaxMin4\
    \ = ones;\n        long zerosCountMaxMin4 = zeros;\n        long onesCountMaxMin5\
    \ = ones;\n        long zerosCountMaxMin5 = zeros;\n        long onesCountMaxMin6\
    \ = ones;\n        long zerosCountMaxMin6 = zeros;\n        long onesCountMaxMin7\
    \ = ones;\n        long zerosCountMaxMin7 = zeros;\n        long onesCountMaxMin8\
    \ = ones;\n        long zerosCountMaxMin8 = zeros;\n        long onesCountMaxMin9\
    \ = ones;\n        long zerosCountMaxMin9 = zeros;\n        long onesCountMaxMin10\
    \ = ones;\n        long zerosCountMaxMin10 = zeros;\n        long onesCountMaxMin11\
    \ = ones;\n        long zerosCountMaxMin11 = zeros;\n        long onesCountMaxMin12\
    \ = ones;\n        long zerosCountMaxMin12 = zeros;\n        long onesCountMaxMin13\
    \ = ones;\n        long zerosCountMaxMin13 = zeros;\n        long onesCountMaxMin14\
    \ = ones;\n        long zerosCountMaxMin14 = zeros;\n        long onesCountMaxMin15\
    \ = ones;\n        long zerosCountMaxMin15 = zeros;\n        long onesCountMaxMin16\
    \ = ones;\n        long zerosCountMaxMin16 = zeros;\n        long onesCountMaxMin17\
    \ = ones;\n        long zerosCountMaxMin17 = zeros;\n        long onesCountMaxMin18\
    \ = ones;\n        long zerosCountMaxMin18 = zeros;\n        long onesCountMaxMin19\
    \ = ones;\n        long zerosCountMaxMin19 = zeros;\n", "        List<long> result\
    \ = new List<long>();\n        long ones = 0;\n        long zeros = 0;\n     \
    \   long max = 0;\n        foreach (long num in arr) {\n            ones += num;\n\
    \            zeros -= num;\n            if (ones > max) {\n                max\
    \ = ones;\n            }\n            if (zeros > max) {\n                max\
    \ = zeros;\n            }\n        }\n        long onesCount = 0;\n        long\
    \ zerosCount = 0;\n        long maxCount = 0;\n        foreach (long num in arr)\
    \ {\n            onesCount += num;\n            zerosCount -= num;\n         \
    \   if (onesCount > maxCount) {\n                maxCount = onesCount;\n     \
    \       }\n            if (zerosCount > maxCount) {\n                maxCount\
    \ = zerosCount;\n            }\n        }\n        long onesCount2 = 0;\n    \
    \    long zerosCount2 = 0;\n        long maxCount2 = 0;\n        foreach (long\
    \ num in arr) {\n            onesCount2 += num;\n            zerosCount2 -= num;\n\
    \            if (onesCount2 > maxCount2) {\n                maxCount2 = onesCount2;\n\
    \            }\n            if (zerosCount2 > maxCount2) {\n                maxCount2\
    \ = zerosCount2;\n            }\n        }\n        long onesCount3 = 0;\n   \
    \     long zerosCount3 = 0;\n        long maxCount3 = 0;\n        foreach (long\
    \ num in arr) {\n            onesCount3 += num;\n            zerosCount3 -= num;\n\
    \            if (onesCount3 > maxCount3) {\n                maxCount3 = onesCount3;\n\
    \            }\n            if (zerosCount3 > maxCount3) {\n                maxCount3\
    \ = zerosCount3;\n            }\n        }\n        long onesCount4 = 0;\n   \
    \     long zerosCount4 = 0;\n        long maxCount4 = 0;\n        foreach (long\
    \ num in arr) {\n            onesCount4 += num;\n            zerosCount4 -= num;\n\
    \            if (onesCount4 > maxCount4) {\n                maxCount4 = onesCount4;\n\
    \            }\n            if (zerosCount4 > maxCount4) {\n                maxCount4\
    \ = zerosCount4;\n            }\n        }\n        long onesCount5 = 0;\n   \
    \     long zerosCount5 = 0;\n        long maxCount5 = 0;\n        foreach (long\
    \ num in arr) {\n            onesCount5 += num;\n            zerosCount5 -= num;\n\
    \            if (onesCount5 > maxCount5) {\n                maxCount5 = onesCount5;\n\
    \            }\n            if (zerosCount5 > maxCount5) {\n                maxCount5\
    \ = zerosCount5;\n            }\n        }\n        long onesCount6 = 0;\n   \
    \     long ", "        long ones = 0;\n        long zeros = 0;\n        long max\
    \ = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n       \
    \         ones++;\n            }\n            if (i == 0) {\n                zeros++;\n\
    \            }\n            if (i > max) {\n                max = i;\n       \
    \     }\n        }\n        long onesMax = ones * max;\n        long zerosMax\
    \ = zeros * max;\n        long maxOnes = ones * max;\n        long maxZeros =\
    \ zeros * max;\n        long maxOnesMax = onesMax * max;\n        long maxZerosMax\
    \ = zerosMax * max;\n        long maxOnesMaxOnes = onesMax * max * max;\n    \
    \    long maxZerosMaxZeros = zerosMax * max * max;\n        long maxOnesMaxOnesMax\
    \ = onesMax * max * max * max;\n        long maxZerosMaxZerosMax = zerosMax *\
    \ max * max * max;\n        long maxOnesMaxOnesMaxZeros = onesMax * max * max\
    \ * max * max;\n        long maxZerosMaxZerosMaxZeros = zerosMax * max * max *\
    \ max * max;\n        long maxOnesMaxOnesMaxOnesMax = onesMax * max * max * max\
    \ * max * max;\n        long maxZerosMaxZerosMaxOnesMax = zerosMax * max * max\
    \ * max * max * max;\n        long maxOnesMaxOnesMaxZerosMax = onesMax * max *\
    \ max * max * max * max * max;\n        long maxZerosMaxZerosMaxZerosMax = zerosMax\
    \ * max * max * max * max * max * max;\n        long maxOnesMaxOnesMaxOnesMaxZeros\
    \ = onesMax * max * max * max * max * max * max * max;\n        long maxZerosMaxZerosMaxZerosMaxZeros\
    \ = zerosMax * max * max * max * max * max * max * max;\n        long maxOnesMaxOnesMaxOnesMaxOnesMax\
    \ = onesMax * max * max * max * max * max * max * max * max;\n        long maxZerosMaxZerosMaxZerosMaxOnesMax\
    \ = zerosMax * max * max * max * max * max * max * max * ", "        long ones\
    \ = 0;\n        long zeros = 0;\n        long max = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                ones++;\n          \
    \  }\n            if (i == 0) {\n                zeros++;\n            }\n   \
    \         if (i > max) {\n                max = i;\n            }\n        }\n\
    \        long onesMax = ones * max;\n        long zerosMax = zeros * max;\n  \
    \      long maxOnes = ones * max;\n        long maxZeros = zeros * max;\n    \
    \    long maxOnesMax = onesMax * max;\n        long maxZerosMax = zerosMax * max;\n\
    \        long maxOnesMaxMinusOnes = onesMax * max - 1;\n        long maxZerosMaxMinusOnes\
    \ = zerosMax * max - 1;\n        long maxOnesMaxMinusOnesMinusOnes = onesMax *\
    \ max - 1 - 1;\n        long maxZerosMaxMinusOnesMinusOnes = zerosMax * max -\
    \ 1 - 1;\n        long maxOnesMaxMinusOnesMinusOnesMinusOnes = onesMax * max -\
    \ 1 - 1 - 1;\n        long maxZerosMaxMinusOnesMinusOnesMinusOnes = zerosMax *\
    \ max - 1 - 1 - 1;\n        long maxOnesMaxMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = onesMax * max - 1 - 1 - 1 - 1;\n        long maxZerosMaxMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = zerosMax * max - 1 - 1 - 1 - 1;\n        long maxOnesMaxMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = onesMax * max - 1 - 1 - 1 - 1 - 1 - 1;\n        long maxZerosMaxMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = zerosMax * max - 1 - 1 - 1 - 1 - 1 - 1;\n        long maxOnesMaxMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = onesMax * max - 1 - 1 - 1 - 1 - 1 - 1 - 1;\n        long maxZerosMaxMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = zerosMax * max - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\n        long maxOnesMaxMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinus",
  "        long ones = 0;\n        long zeros = 0;\n        List<long> result = new\
    \ List<long>();\n        foreach (long i in arr) {\n            ones += i;\n \
    \       }\n        foreach (long i in arr) {\n            zeros += i;\n      \
    \  }\n        long onesCount = ones;\n        long zerosCount = zeros;\n     \
    \   long onesSum = 0;\n        long zerosSum = 0;\n        long onesSum2 = 0;\n\
    \        long zerosSum2 = 0;\n        long onesSum3 = 0;\n        long zerosSum3\
    \ = 0;\n        long onesSum4 = 0;\n        long zerosSum4 = 0;\n        long\
    \ onesSum5 = 0;\n        long zerosSum5 = 0;\n        long onesSum6 = 0;\n   \
    \     long zerosSum6 = 0;\n        long onesSum7 = 0;\n        long zerosSum7\
    \ = 0;\n        long onesSum8 = 0;\n        long zerosSum8 = 0;\n        long\
    \ onesSum9 = 0;\n        long zerosSum9 = 0;\n        long onesSum10 = 0;\n  \
    \      long zerosSum10 = 0;\n        long onesSum11 = 0;\n        long zerosSum11\
    \ = 0;\n        long onesSum12 = 0;\n        long zerosSum12 = 0;\n        long\
    \ onesSum13 = 0;\n        long zerosSum13 = 0;\n        long onesSum14 = 0;\n\
    \        long zerosSum14 = 0;\n        long onesSum15 = 0;\n        long zerosSum15\
    \ = 0;\n        long onesSum16 = 0;\n        long zerosSum16 = 0;\n        long\
    \ onesSum17 = 0;\n        long zerosSum17 = 0;\n        long onesSum18 = 0;\n\
    \        long zerosSum18 = 0;\n        long onesSum19 = 0;\n        long zerosSum19\
    \ = 0;\n        long onesSum20 = 0;\n        long zerosSum20 = 0;\n        long\
    \ onesSum21 = 0;\n        long zerosSum21 = 0;\n        long onesSum22 = 0;\n\
    \        long zerosSum22 = 0;\n        long onesSum23 = 0;\n        long zerosSum23\
    \ = 0;\n        long onesSum24 = 0;\n        long zerosSum24 = 0;\n        long\
    \ onesSum25 = 0;\n        long zerosSum25 = 0;\n        long onesSum26 = 0;\n\
    \        long zerosSum26 = 0;\n        long onesSum27 = 0;\n        long zerosSum27\
    \ = 0;\n        long onesSum28 = 0;\n        long zerosSum28 = 0;\n        long\
    \ onesSum29 = 0;\n        long zerosSum29 = 0;\n        long onesSum30 = 0;\n\
    \        long zerosSum30 = 0;\n        long onesSum31 = 0;\n        ", "     \
    \   long ones = 0;\n        long zeros = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long i in arr) {\n            if (i == 1) {\n              \
    \  ones++;\n            }\n            else if (i == 0) {\n                zeros++;\n\
    \            }\n            else {\n                long temp = ones;\n      \
    \          ones = zeros;\n                zeros = temp;\n                result.Add(i);\n\
    \            }\n        }\n        if (ones > zeros) {\n            result.Sort();\n\
    \        }\n        else {\n            result.Sort((x, y) => Convert.ToInt64(Math.Pow(Convert.ToDouble(x),\
    \ 2)) - Convert.ToInt64(Math.Pow(Convert.ToDouble(y), 2)));\n        }\n     \
    \   return result;", "        long ones = 0;\n        long zeros = 0;\n      \
    \  long max = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n\
    \                ones++;\n            }\n            else if (i == 0) {\n    \
    \            zeros++;\n            }\n            else {\n                if (ones\
    \ > zeros) {\n                    max = i;\n                }\n              \
    \  else {\n                    max = zeros;\n                }\n            }\n\
    \        }\n        List<long> result = new List<long>();\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                result.Add(i);\n   \
    \         }\n            else if (i == 0) {\n                result.Add(zeros);\n\
    \            }\n            else {\n                if (ones > zeros) {\n    \
    \                result.Add(max);\n                }\n                else {\n\
    \                    result.Add(zeros);\n                }\n            }\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        foreach (long i in arr)\
    \ {\n            if (i == 1) {\n                ones++;\n            }\n     \
    \       if (i == 0) {\n                zeros++;\n            }\n        }\n  \
    \      if (ones > zeros) {\n            long temp = ones;\n            ones =\
    \ zeros;\n            zeros = temp;\n        }\n        long max = 0;\n      \
    \  long min = 0;\n        long max2 = 0;\n        long min2 = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                max++;\n     \
    \       }\n            if (i == 0) {\n                min++;\n            }\n\
    \            if (i == max) {\n                max2 = i;\n            }\n     \
    \       if (i == min) {\n                min2 = i;\n            }\n        }\n\
    \        long temp = 0;\n        if (max2 > min2) {\n            temp = max2;\n\
    \            max2 = min2;\n            min2 = temp;\n        }\n        long temp2\
    \ = 0;\n        if (max2 > min) {\n            temp2 = max2;\n            max2\
    \ = min;\n            min = temp2;\n        }\n        long temp3 = 0;\n     \
    \   if (max2 > max) {\n            temp3 = max2;\n            max2 = max;\n  \
    \          max = temp3;\n        }\n        long temp4 = 0;\n        if (min2\
    \ > min) {\n            temp4 = min2;\n            min2 = min;\n            min\
    \ = temp4;\n        }\n        long temp5 = 0;\n        if (min2 > max) {\n  \
    \          temp5 = min2;\n            min2 = max;\n            max = temp5;\n\
    \        }\n        long temp6 = 0;\n        if (min2 > max2) {\n            temp6\
    \ = min2;\n            min2 = max2;\n            max2 = temp6;\n        }\n  \
    \      long temp7 = 0;\n        if (max2 > max) {\n            temp7 = max2;\n\
    \            max2 = max;\n            max = temp7;\n        }\n        long temp8\
    \ = 0;\n        if (min2 > min) {\n            temp8 = min2;\n            min2\
    \ = min;\n            min = temp8;\n        }\n        long temp9 = 0;\n     \
    \   if (min2 > max) {\n            temp9 = min2;\n            min2 = max;\n  \
    \          max = temp9;\n        }\n        long temp10 = 0;\n        if (max2\
    \ > max2) {\n            temp10 = max2;\n            max2 = max2;\n          \
    \  max2 = temp10;\n        }\n        long temp11 = 0;\n        if (max2 > max)\
    \ {\n            temp11 = max2;\n            max2 = max;\n            max = temp11;\n\
    \        }\n        long temp12 = 0;\n        if (min2 > min) {\n            temp12\
    \ = min2;\n            min2 = min;\n            min = temp12;\n        }\n   \
    \     ", "        long ones = arr.Sum(x => x & 1);\n        long zeros = arr.Sum(x\
    \ => ~x);\n        long maxOnes = arr.Max(x => x & 1);\n        long maxZeros\
    \ = arr.Max(x => ~x);\n        long maxOnesZeros = maxOnes - maxZeros;\n     \
    \   long maxOnesOnes = maxOnes - ones;\n        long maxOnesTwos = maxOnes - twos(maxOnes);\n\
    \        long maxOnesThrees = maxOnes - threes(maxOnes);\n        long maxOnesFours\
    \ = maxOnes - fours(maxOnes);\n        long maxOnesFives = maxOnes - fives(maxOnes);\n\
    \        long maxOnesSixes = maxOnes - sixes(maxOnes);\n        long maxOnesSevens\
    \ = maxOnes - sevens(maxOnes);\n        long maxOnesEights = maxOnes - eights(maxOnes);\n\
    \        long maxOnesNines = maxOnes - nines(maxOnes);\n        long maxOnesTens\
    \ = maxOnes - tens(maxOnes);\n        long maxOnesElevens = maxOnes - elevens(maxOnes);\n\
    \        long maxOnesTwelves = maxOnes - twelves(maxOnes);\n        long maxOnesThirteens\
    \ = maxOnes - thirteens(maxOnes);\n        long maxOnesFourteens = maxOnes - fourteens(maxOnes);\n\
    \        long maxOnesFifteens = maxOnes - fifteens(maxOnes);\n        long maxOnesSixteens\
    \ = maxOnes - sixteens(maxOnes);\n        long maxOnesSeventeens = maxOnes - seventeens(maxOnes);\n\
    \        long maxOnesEighteens = maxOnes - eighteens(maxOnes);\n        long maxOnesNineteens\
    \ = maxOnes - nineteens(maxOnes);\n        long maxOnesTwenty = maxOnes - twenty(maxOnes);\n\
    \        long maxOnesTwentyOnes = maxOnes - twentyOnes(maxOnes);\n        long\
    \ maxOnesTwentyTwos = maxOnes - twentyTwos(maxOnes);\n        long maxOnesTwentyThrees\
    \ = maxOnes - twentyThrees(maxOnes);\n        long maxOnesTwentyFours = maxOnes\
    \ - twentyFours(maxOnes);\n", "        List<long> result = new List<long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n    \
    \    foreach (long i in arr) {\n            ones += i;\n            zeros -= i;\n\
    \            if (ones > max) {\n                max = ones;\n            }\n \
    \           if (zeros > max) {\n                max = zeros;\n            }\n\
    \        }\n        long onesCount = 0;\n        long zerosCount = 0;\n      \
    \  long maxCount = 0;\n        foreach (long i in arr) {\n            onesCount\
    \ += i;\n            zerosCount -= i;\n            if (onesCount > maxCount) {\n\
    \                maxCount = onesCount;\n            }\n            if (zerosCount\
    \ > maxCount) {\n                maxCount = zerosCount;\n            }\n     \
    \   }\n        long onesCount2 = 0;\n        long zerosCount2 = 0;\n        long\
    \ maxCount2 = 0;\n        foreach (long i in arr) {\n            onesCount2 +=\
    \ i;\n            zerosCount2 -= i;\n            if (onesCount2 > maxCount2) {\n\
    \                maxCount2 = onesCount2;\n            }\n            if (zerosCount2\
    \ > maxCount2) {\n                maxCount2 = zerosCount2;\n            }\n  \
    \      }\n        long onesCount3 = 0;\n        long zerosCount3 = 0;\n      \
    \  long maxCount3 = 0;\n        foreach (long i in arr) {\n            onesCount3\
    \ += i;\n            zerosCount3 -= i;\n            if (onesCount3 > maxCount3)\
    \ {\n                maxCount3 = onesCount3;\n            }\n            if (zerosCount3\
    \ > maxCount3) {\n                maxCount3 = zerosCount3;\n            }\n  \
    \      }\n        long onesCount4 = 0;\n        long zerosCount4 = 0;\n      \
    \  long maxCount4 = 0;\n        foreach (long i in arr) {\n            onesCount4\
    \ += i;\n            zerosCount4 -= i;\n            if (onesCount4 > maxCount4)\
    \ {\n                maxCount4 = onesCount4;\n            }\n            if (zerosCount4\
    \ > maxCount4) {\n                maxCount4 = zerosCount4;\n            }\n  \
    \      }\n        long onesCount5 = 0;\n        long zerosCount5 = 0;\n      \
    \  long maxCount5 = 0;\n        foreach (long i in arr) {\n            onesCount5\
    \ += i;\n            zerosCount5 -= i;\n            if (onesCount5 > maxCount5)\
    \ {\n                maxCount5 = onesCount5;\n            }\n            if (zerosCount5\
    \ > maxCount5) {\n                maxCount5 = zerosCount5;\n            }\n  \
    \      }\n        long onesCount6 = 0;\n        long zerosCount6 = 0;\n      \
    \  long maxCount6 = 0;\n        foreach (long i in arr) {", "        long ones\
    \ = 0;\n        long zeros = 0;\n        long max = 0;\n        long min = 0;\n\
    \        foreach (long i in arr) {\n            if (i == 1) {\n              \
    \  ones++;\n            }\n            if (i == 0) {\n                zeros++;\n\
    \            }\n            if (i > max) {\n                max = i;\n       \
    \     }\n            if (i < min) {\n                min = i;\n            }\n\
    \        }\n        List<long> result = new List<long>();\n        if (ones >\
    \ zeros) {\n            long onesMax = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(ones,\
    \ 2))) - 1);\n            long zerosMax = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(zeros,\
    \ 2))) - 1);\n            long onesMin = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(ones,\
    \ 2))) + 1);\n            long zerosMin = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(zeros,\
    \ 2))) + 1);\n            long onesMax2 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(onesMax,\
    \ 2))) - 1);\n            long zerosMax2 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(zerosMax,\
    \ 2))) - 1);\n            long onesMin2 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(onesMin,\
    \ 2))) + 1);\n            long zerosMin2 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(zerosMin,\
    \ 2))) + 1);\n            long onesMax3 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(onesMax2,\
    \ 2))) - 1);\n            long zerosMax3 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(zerosMax2,\
    \ 2))) - 1);\n            long onesMin3 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(onesMin2,\
    \ 2))) + 1);\n            long zerosMin3 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(zerosMin2,\
    \ 2))) + 1);\n            long onesMax4 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(onesMax3,\
    \ 2))) - 1);\n            long zerosMax4 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(zerosMax3,\
    \ 2))) - 1);\n            long onesMin4 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(onesMin3,\
    \ 2))) + 1);\n            long zerosMin4 = Convert.ToInt", "        long ones\
    \ = 0;\n        long zeros = 0;\n        long max = 0;\n        foreach (long\
    \ n in arr) {\n            if (n == 1) ones++;\n            else if (n == 0) zeros++;\n\
    \            else if (n > max) max = n;\n        }\n        long onesMax = ones\
    \ == 0 ? 0 : ones / max;\n        long zerosMax = zeros == 0 ? 0 : zeros / max;\n\
    \        long onesMin = ones == 0 ? 0 : ones % max;\n        long zerosMin = zeros\
    \ == 0 ? 0 : zeros % max;\n        List<long> result = new List<long>();\n   \
    \     foreach (long n in arr) {\n            if (n == 1) result.Add(n);\n    \
    \        else if (n == 0) result.Add(0);\n            else if (n > max) result.Add(n);\n\
    \            else if (n < min) result.Add(0);\n            else if (n == max)\
    \ {\n                if (onesMax < zerosMax) {\n                    result.Add(n);\n\
    \                    result.Add(onesMax);\n                }\n               \
    \ else if (onesMax < zerosMin) {\n                    result.Add(n);\n       \
    \             result.Add(zerosMax);\n                }\n                else {\n\
    \                    result.Add(n);\n                    result.Add(zerosMin);\n\
    \                }\n            }\n            else if (n == min) {\n        \
    \        if (onesMin < zerosMin) {\n                    result.Add(n);\n     \
    \               result.Add(onesMin);\n                }\n                else\
    \ if (onesMin < zerosMax) {\n                    result.Add(n);\n            \
    \        result.Add(zerosMin);\n                }\n                else {\n  \
    \                  result.Add(n);\n                    result.Add(zerosMax);\n\
    \                }\n            }\n            else {\n                if (onesMax\
    \ < zerosMax) {\n                    result.Add(n);\n                    result.Add(onesMax);\n\
    \                }\n                else if (onesMax < zerosMin) {\n         \
    \           result.Add(n);\n                    result.Add(zerosMax);\n      \
    \          }\n                else {\n                    result.Add(n);\n   \
    \                 result.Add(zerosMin);\n                }\n            }\n  \
    \      }\n        return result;", "        long ones = 0;\n        long zeros\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long i\
    \ in arr) {\n            if (i == 1)\n                ones++;\n            else\n\
    \                zeros++;\n        }\n        if (ones > zeros) {\n          \
    \  long temp = 0;\n            foreach (long i in arr)\n                if (i\
    \ == 1)\n                    temp++;\n            long temp = temp / ones;\n \
    \           foreach (long i in arr)\n                if (i == 1)\n           \
    \         temp--;\n            foreach (long i in arr)\n                if (i\
    \ == 1)\n                    result.Add(i);\n            foreach (long i in arr)\n\
    \                if (i == 1)\n                    result.Add(temp);\n        \
    \    foreach (long i in arr)\n                if (i == 1)\n                  \
    \  result.Add(-temp);\n            foreach (long i in arr)\n                if\
    \ (i == 1)\n                    result.Add(-i);\n            foreach (long i in\
    \ arr)\n                if (i == 1)\n                    result.Add(-temp);\n\
    \            foreach (long i in arr)\n                if (i == 1)\n          \
    \          result.Add(-i);\n            foreach (long i in arr)\n            \
    \    if (i == 1)\n                    result.Add(-temp);\n            foreach\
    \ (long i in arr)\n                if (i == 1)\n                    result.Add(-i);\n\
    \            foreach (long i in arr)\n                if (i == 1)\n          \
    \          result.Add(-temp);\n            foreach (long i in arr)\n         \
    \       if (i == 1)\n                    result.Add(-i);\n            foreach\
    \ (long i in arr)\n                if (i == 1)\n                    result.Add(-temp);\n\
    \            foreach (long i in arr)\n                if (i == 1)\n          \
    \          result.Add(-i);\n            foreach (long i in arr)\n            \
    \    if (i == 1)\n                    result.Add(-temp);\n            foreach\
    \ (long i in arr)\n                if (i == 1)\n                    result.Add(-i);\n\
    \            foreach (long i in arr)\n                if (i == 1)\n          \
    \          result.Add(-temp);\n            foreach (long i in arr)\n         \
    \       if (i == 1)\n                    result.Add(-i);\n            foreach\
    \ (long i in arr)\n                if (i == 1)\n                    result.Add(-temp);\n\
    \            foreach (long i in arr)\n                if (i == 1)\n          \
    \          result.Add(-i);\n            foreach (long i in arr)\n            \
    \    if (i == 1)\n                    result.Add(-temp);\n            foreach\
    \ (long i in arr)\n                if (i == 1)\n                    result.Add(-i);\n\
    \            foreach (long i in arr)\n                if (i == 1)\n          \
    \          result.Add(-temp);\n            foreach (long i in arr)\n         \
    \       if (i == 1)\n                    result.Add(-i);\n            foreach\
    \ (long i in arr)\n                if (i == 1)\n                    result.Add(-temp);\n\
    \            foreach (long i in arr)\n                if (i == 1)\n          \
    \          result.Add(-i);\n            foreach (long i in arr)\n            \
    \    if (i == 1)\n                    result.Add(-temp);\n            foreach\
    \ (long i in arr)\n                if (i == 1)", "        long ones = arr.Sum(x\
    \ => x & 1);\n        long zeros = arr.Sum(x => ~x);\n        long maxOnes = arr.Max(x\
    \ => x & 1);\n        long maxZeros = arr.Max(x => ~x);\n        long maxOnesZeros\
    \ = maxOnes - maxZeros;\n        long maxOnesOnes = maxOnes - ones;\n        long\
    \ maxOnesTwos = maxOnes - twos;\n        long maxOnesThrees = maxOnes - threes;\n\
    \        long maxOnesFours = maxOnes - fours;\n        long maxOnesFives = maxOnes\
    \ - fives;\n        long maxOnesSixes = maxOnes - sixes;\n        long maxOnesSevens\
    \ = maxOnes - sevens;\n        long maxOnesEights = maxOnes - eights;\n      \
    \  long maxOnesNines = maxOnes - nines;\n        long maxOnesTens = maxOnes -\
    \ tens;\n        long maxOnesElevens = maxOnes - elevens;\n        long maxOnesTwelves\
    \ = maxOnes - twelves;\n        long maxOnesThirteens = maxOnes - thirteens;\n\
    \        long maxOnesFourteens = maxOnes - fourteens;\n        long maxOnesFifteens\
    \ = maxOnes - fifteens;\n        long maxOnesSixteens = maxOnes - sixteens;\n\
    \        long maxOnesSeventeens = maxOnes - seventeens;\n        long maxOnesEighteens\
    \ = maxOnes - eighteens;\n        long maxOnesNineteens = maxOnes - nineteens;\n\
    \        long maxOnesTwenty = maxOnes - twenty;\n        long maxOnesTwentyOnes\
    \ = maxOnes - twentyOnes;\n        long maxOnesTwentyTwos = maxOnes - twentyTwos;\n\
    \        long maxOnesTwentyThrees = maxOnes - twentyThrees;\n        long maxOnesTwentyFours\
    \ = maxOnes - twentyFours;\n        long maxOnesTwentyFives = maxOnes - twentyFives;\n\
    \        long maxOnesTwentySixes = maxOnes - twentySixes;\n        long maxOnesTwentySevens\
    \ = maxOnes - twentySevens;\n        long maxOne", "        long ones = 0;\n \
    \       long zeros = 0;\n        List<long> result = new List<long>();\n     \
    \   foreach (long i in arr) {\n            if (i == 1) ones++;\n            else\
    \ if (i == 0) zeros++;\n            else result.Add(i);\n        }\n        if\
    \ (ones > zeros) {\n            int index = Array.BinarySearch(arr.ToArray(),\
    \ ones);\n            Array.Reverse(arr.ToArray(), index, arr.Count - index);\n\
    \            Array.Reverse(result.ToArray(), index, result.Count - index);\n \
    \       }\n        return result;", "        long ones = 0;\n        long zeros\
    \ = 0;\n        long max = 0;\n        foreach (long i in arr) {\n           \
    \ if (i == 1) {\n                ones++;\n            } else {\n             \
    \   zeros++;\n            }\n            if (ones > zeros) {\n               \
    \ max = i;\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        foreach (long i in arr) {\n            if (i == 1) {\n              \
    \  result.Add(i);\n            } else if (i == 0) {\n                result.Add(max);\n\
    \            } else {\n                result.Add(zeros);\n            }\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n    \
    \    foreach (long num in arr) {\n            if (num == 1) ones++;\n        \
    \    else if (num == 0) zeros++;\n            else if (ones > zeros) {\n     \
    \           max = Math.Max(max, ones);\n                result.Add(num);\n   \
    \             ones = 0;\n            } else if (zeros > ones) {\n            \
    \    max = Math.Max(max, zeros);\n                result.Add(num);\n         \
    \       zeros = 0;\n            }\n        }\n        if (ones > zeros) {\n  \
    \          max = Math.Max(max, ones);\n            result.Add(num);\n        }\
    \ else if (zeros > ones) {\n            max = Math.Max(max, zeros);\n        \
    \    result.Add(num);\n        }\n        return result.OrderBy(x => x).ToList();",
  "        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  long min = 0;\n        foreach (long n in arr) {\n            if (n == 1) ones++;\n\
    \            else if (n == 0) zeros++;\n            else if (n > max) max = n;\n\
    \            else if (n < min) min = n;\n        }\n        long onesMax = ones\
    \ * max;\n        long onesMin = ones * min;\n        long zerosMax = zeros *\
    \ max;\n        long zerosMin = zeros * min;\n        long maxOnes = ones * max;\n\
    \        long maxZeros = zeros * max;\n        long minOnes = ones * min;\n  \
    \      long minZeros = zeros * min;\n        long maxOnesMin = onesMin * max;\n\
    \        long maxOnesMax = onesMax * max;\n        long maxZerosMin = zerosMin\
    \ * max;\n        long maxZerosMax = zerosMax * max;\n        long minOnesMin\
    \ = onesMin * min;\n        long minOnesMax = onesMax * min;\n        long minZerosMin\
    \ = zerosMin * min;\n        long minZerosMax = zerosMax * min;\n        long\
    \ maxOnesMinMin = onesMin * minOnes;\n        long maxOnesMaxMin = onesMax * minOnes;\n\
    \        long maxZerosMinMin = zerosMin * minOnes;\n        long maxZerosMaxMin\
    \ = zerosMax * minOnes;\n        long minOnesMinMin = onesMin * minOnes;\n   \
    \     long minOnesMaxMin = onesMax * minOnes;\n        long minZerosMinMin = zerosMin\
    \ * minOnes;\n        long minZerosMaxMin = zerosMax * minOnes;\n        long\
    \ maxOnesMinMax = onesMin * maxOnes;\n        long maxOnesMaxMax = onesMax * maxOnes;\n\
    \        long maxZerosMinMax = zerosMin * maxOnes;\n        long maxZerosMaxMax\
    \ = zerosMax * maxOnes;\n        long minOnesMinMax = onesMin * minOnes;\n   \
    \     long minOnesMaxMax = onesMax * minOnes;\n        long minZerosMinMax = zerosMin\
    \ * minOnes;\n        long minZerosMaxMax = zerosMax * minOnes;\n        long\
    \ max", "        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n\
    \        long min = 0;\n        foreach (long i in arr) {\n            if (i ==\
    \ 1) ones++;\n            if (i == 0) zeros++;\n            if (i > max) max =\
    \ i;\n            if (i < min) min = i;\n        }\n        long onesMax = ones\
    \ * max;\n        long zerosMax = zeros * max;\n        long onesMin = ones *\
    \ min;\n        long zerosMin = zeros * min;\n        long onesMaxMin = onesMax\
    \ * min;\n        long zerosMaxMin = zerosMax * min;\n        long onesMinMax\
    \ = onesMin * max;\n        long zerosMinMax = zerosMin * max;\n        long onesMinMaxMin\
    \ = onesMinMax * min;\n        long zerosMinMaxMin = zerosMinMax * min;\n    \
    \    long onesMinMaxMinMax = onesMinMaxMin * max;\n        long zerosMinMaxMinMax\
    \ = zerosMinMaxMin * max;\n        long onesMinMaxMinMaxMin = onesMinMaxMinMax\
    \ * min;\n        long zerosMinMaxMinMaxMin = zerosMinMaxMinMax * min;\n     \
    \   long onesMinMaxMinMaxMinMax = onesMinMaxMinMaxMin * max * min;\n        long\
    \ zerosMinMaxMinMaxMin = zerosMinMaxMinMax * min;\n        long onesMinMaxMinMaxMinMax\
    \ = onesMinMaxMinMaxMinMax * min;\n        long zerosMinMaxMinMaxMin = zerosMinMaxMinMaxMin\
    \ * min;\n        long onesMinMaxMinMaxMinMax = onesMinMaxMinMaxMinMax * min;\n\
    \        long zerosMinMaxMinMaxMinMax = zerosMinMaxMinMaxMinMax * min;\n     \
    \   long onesMinMaxMinMaxMinMaxMin = onesMinMaxMinMaxMinMaxMinMax * min;\n   \
    \     long zerosMinMaxMinMaxMinMax = zerosMinMaxMinMaxMinMax * min;\n        long\
    \ onesMinMaxMinMaxMinMaxMin = onesMinMaxMinMaxMinMaxMinMax * min;\n        long\
    \ zerosMinMaxMinMaxMinMax = zerosMinMaxMinMaxMinMax * min;\n        long onesMinMaxMinMaxMinMaxMin\
    \ = onesMinMaxMinMaxMinMaxMinMax * min;\n        long zerosMinMaxMinMaxMinMaxMin\
    \ = zeros", "        List<long> result = new List<long>();\n        long ones\
    \ = 0;\n        long zeros = 0;\n        long max = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                ones++;\n          \
    \  }\n            if (i == 0) {\n                zeros++;\n            }\n   \
    \         if (i == max) {\n                max = i;\n            }\n        }\n\
    \        long onesMax = ones * max;\n        long zerosMax = zeros * max;\n  \
    \      long onesMin = ones * min - onesMax;\n        long zerosMin = zeros * min\
    \ - zerosMax;\n        long onesMin2 = ones * min * min;\n        long zerosMin2\
    \ = zeros * min * min;\n        long onesMin3 = ones * min * min * min;\n    \
    \    long zerosMin3 = zeros * min * min * min;\n        long onesMin4 = ones *\
    \ min * min * min * min;\n        long zerosMin4 = zeros * min * min * min * min;\n\
    \        long onesMin5 = ones * min * min * min * min * min;\n        long zerosMin5\
    \ = zeros * min * min * min * min * min;\n        long onesMin6 = ones * min *\
    \ min * min * min * min * min;\n        long zerosMin6 = zeros * min * min * min\
    \ * min * min * min;\n        long onesMin7 = ones * min * min * min * min * min\
    \ * min * min;\n        long zerosMin7 = zeros * min * min * min * min * min *\
    \ min * min;\n        long onesMin8 = ones * min * min * min * min * min * min\
    \ * min * min;\n        long zerosMin8 = zeros * min * min * min * min * min *\
    \ min * min * min;\n        long onesMin9 = ones * min * min * min * min * min\
    \ * min * min * min * min;\n        long zerosMin9 = zeros * min * min * min *\
    \ min * min * min * min * min * min;\n        long onesMin10 = ones * min * min\
    \ * min * min * min * min * min * min * min * min;\n        long zerosMin10 =\
    \ zeros * min * min * min * min * min * min * min * min * min * min;\n       \
    \ long onesMin11 = ones * min * min * min * min * min * min * min * min * min\
    \ * min * ", "        long ones = arr.Sum(x => x & 1);\n        long zeros = arr.Sum(x\
    \ => ~x);\n        long maxOnes = arr.Max(x => x & 1);\n        long maxZeros\
    \ = arr.Max(x => ~x);\n        long maxOnesZeros = maxOnes - maxZeros;\n     \
    \   long maxOnesOnes = maxZeros - maxOnes;\n        long maxOnesTwos = maxOnesOnes\
    \ - maxOnesZeros;\n        long maxOnesThrees = maxOnesTwos - maxOnesOnes;\n \
    \       long maxOnesFours = maxOnesThrees - maxOnesTwos;\n        long maxOnesFives\
    \ = maxOnesFours - maxOnesThrees;\n        long maxOnesSixes = maxOnesFives -\
    \ maxOnesFours;\n        long maxOnesSevens = maxOnesSixes - maxOnesFives;\n \
    \       long maxOnesEights = maxOnesSevens - maxOnesSixes;\n        long maxOnesNines\
    \ = maxOnesEights - maxOnesSevens;\n        long maxOnesTens = maxOnesNines -\
    \ maxOnesEights;\n        long maxOnesElevens = maxOnesTens - maxOnesNines;\n\
    \        long maxOnesTwelves = maxOnesElevens - maxOnesTens;\n        long maxOnesThirteens\
    \ = maxOnesTwelves - maxOnesElevens;\n        long maxOnesFourteens = maxOnesThirteens\
    \ - maxOnesTwelves;\n        long maxOnesFifteens = maxOnesFourteens - maxOnesThirteens;\n\
    \        long maxOnesSixteens = maxOnesFifteens - maxOnesFourteens;\n        long\
    \ maxOnesSeventeens = maxOnesSixteens - maxOnesFifteens;\n        long maxOnesEighteens\
    \ = maxOnesSeventeens - maxOnesSixteens;\n        long maxOnesNineteens = maxOnesEighteens\
    \ - maxOnesSeventeens;\n        long maxOnesTwenty = maxOnesNineteens - maxOnesEighteens;\n\
    \        long maxOnesTwentyOnes = maxOnesTwenty - maxOnesTwenty;\n        long ",
  "        List<long> result = new List<long>();\n        long ones = 0;\n       \
    \ long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n  \
    \      long tenthousands = 0;\n        long hundredthousands = 0;\n        long\
    \ millions = 0;\n        long billions = 0;\n        long trillions = 0;\n   \
    \     long quadrillions = 0;\n        long quintillions = 0;\n        long sextillions\
    \ = 0;\n        long septillions = 0;\n        long octillions = 0;\n        long\
    \ nonillions = 0;\n        long decillions = 0;\n        long undecillions = 0;\n\
    \        long duodecillions = 0;\n        long tredecillions = 0;\n        long\
    \ quattuordecillions = 0;\n        long quindecillions = 0;\n        long sexdecillions\
    \ = 0;\n        long septendecillions = 0;\n        long octodecillions = 0;\n\
    \        long novemdecillions = 0;\n        long vigintillions = 0;\n        long\
    \ unvigintillions = 0;\n        long duovigintillions = 0;\n        long trevigintillions\
    \ = 0;\n        long quattuorvigintillions = 0;\n        long quinvigintillions\
    \ = 0;\n        long sexvigintillions = 0;\n        long septenvigintillions =\
    \ 0;\n        long octovigintillions = 0;\n        long novemvigintillions = 0;\n\
    \        long vigintillion = 0;\n        long unvigintillion = 0;\n        long\
    \ duovigintillion = 0;\n        long trevigintillion = 0;\n        long quattuorvigintillion\
    \ = 0;\n        long quinvigintillion = 0;\n        long sexvigintillion = 0;\n\
    \        long septenvigintillion = 0;\n        long octovigintillion = 0;\n  \
    \      long novemvigintillion = 0;\n        long vigintillions = 0;\n        long\
    \ unvigintillions = 0;\n        long duovigintillions = 0;\n        long trevigintillions\
    \ = 0;\n        long quattuorvigintillions = 0;\n        long quinvigintillions\
    \ = 0;\n        long sexvigintillions = 0;\n        long septenvigintillions =\
    \ 0;\n        long octovigintillions = 0;\n", "        long ones = 0;\n      \
    \  long zeros = 0;\n        long max = 0;\n        long min = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                ones++;\n    \
    \        }\n            if (i == 0) {\n                zeros++;\n            }\n\
    \            if (i > max) {\n                max = i;\n            }\n       \
    \     if (i < min) {\n                min = i;\n            }\n        }\n   \
    \     long onesMax = ones * max;\n        long zerosMax = zeros * max;\n     \
    \   long onesMin = ones * min;\n        long zerosMin = zeros * min;\n       \
    \ long onesAvg = ones * ones / arr.Count;\n        long zerosAvg = zeros * ones\
    \ / arr.Count;\n        long onesDiff = onesMax - onesMin;\n        long zerosDiff\
    \ = zerosMax - zerosMin;\n        long onesDiffAvg = onesAvg - onesDiff;\n   \
    \     long zerosDiffAvg = zerosAvg - zerosDiff;\n        long onesDiffAvg = onesAvg\
    \ - onesDiff;\n        long zerosDiffAvg = zerosAvg - zerosDiff;\n        long\
    \ onesDiffAvg = onesAvg - onesDiff;\n        long zerosDiffAvg = zerosAvg - zerosDiff;\n\
    \        long onesDiffAvg = onesAvg - onesDiff;\n        long zerosDiffAvg = zerosAvg\
    \ - zerosDiff;\n        long onesDiffAvg = onesAvg - onesDiff;\n        long zerosDiffAvg\
    \ = zerosAvg - zerosDiff;\n        long onesDiffAvg = onesAvg - onesDiff;\n  \
    \      long zerosDiffAvg = zerosAvg - zerosDiff;\n        long onesDiffAvg = onesAvg\
    \ - onesDiff;\n        long zerosDiffAvg = zerosAvg - zerosDiff;\n        long\
    \ onesDiffAvg = onesAvg - onesDiff;\n        long zerosDiffAvg = zerosAvg - zerosDiff;\n\
    \        long onesDiffAvg = onesAvg - onesDiff;\n        long zerosDiffAvg = zerosAvg\
    \ - zerosDiff;\n        long onesDiffAvg = onesAvg - onesDiff;\n        long zerosDiffAvg\
    \ = zerosAvg - zerosDiff;\n        long onesDiffAvg = onesAvg - onesDiff;\n  \
    \      long zerosDiffAvg = zerosAvg - zerosDiff;\n        long onesDiffAvg = onesAvg\
    \ - onesDiff;\n        long zerosDiffAvg = zerosAvg - ", "        long ones =\
    \ 0;\n        long zeros = 0;\n        long max = 0;\n        long min = 0;\n\
    \        foreach (long i in arr) {\n            if (i == 1) {\n              \
    \  ones++;\n            }\n            if (i == 0) {\n                zeros++;\n\
    \            }\n            if (i == -1) {\n                max = Math.Max(max,\
    \ i);\n                min = Math.Min(min, i);\n            }\n        }\n   \
    \     long onesCount = ones;\n        long zerosCount = zeros;\n        long maxCount\
    \ = max;\n        long minCount = min;\n        long maxOnesCount = Math.Max(onesCount,\
    \ zerosCount);\n        long minOnesCount = Math.Min(onesCount, zerosCount);\n\
    \        long maxZeroCount = Math.Max(zerosCount, onesCount);\n        long minZeroCount\
    \ = Math.Min(zerosCount, onesCount);\n        long maxOnesMinZeroCount = Math.Max(onesCount,\
    \ zerosCount);\n        long minOnesMinZeroCount = Math.Min(onesCount, zerosCount);\n\
    \        long maxZeroMinOnesCount = Math.Max(zerosCount, onesCount);\n       \
    \ long minZeroMinOnesCount = Math.Min(zerosCount, onesCount);\n        long maxOnesMinOnesCount\
    \ = Math.Max(onesCount, onesCount);\n        long minOnesMinOnesCount = Math.Min(onesCount,\
    \ onesCount);\n        long maxZeroMinOnesMinOnesCount = Math.Max(zerosCount,\
    \ onesCount);\n        long minZeroMinOnesMinOnesCount = Math.Min(zerosCount,\
    \ onesCount);\n        long maxOnesMinOnesMinOnesCount = Math.Max(onesCount, onesCount);\n\
    \        long minOnesMinOnesMinOnesCount = Math.Min(onesCount, onesCount);\n \
    \       long maxZeroMinOnesMinOnesMinOnesCount = Math.Max(zerosCount, onesCount);\n\
    \        long minZeroMinOnesMinOnesMinOnesCount = Math.Min(zerosCount, onesCount);\n\
    \        long maxOnesMinOnesMinOnesMinOnesCount = Math.Max(onesCount, onesCount);\n\
    \        long minOnesMinOnesMinOnesMinOnesCount = Math.Min(onesCount, onesCount);\n\
    \        long maxZeroMinOnesMinOnesMinOnesMinOnesCount = Math.Max(zerosCount,\
    \ onesCount);\n        long min", "        long ones = 0;\n        long zeros\
    \ = 0;\n        long max = 0;\n        foreach (long i in arr) {\n           \
    \ if (i == 1) {\n                ones++;\n            }\n            if (i ==\
    \ 0) {\n                zeros++;\n            }\n            if (i > max) {\n\
    \                max = i;\n            }\n        }\n        List<long> result\
    \ = new List<long>();\n        if (ones > zeros) {\n            long temp = ones;\n\
    \            ones = zeros;\n            zeros = temp;\n        }\n        long\
    \ temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4\
    \ = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 =\
    \ 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 =\
    \ 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13\
    \ = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16\
    \ = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19\
    \ = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22\
    \ = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25\
    \ = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28\
    \ = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31\
    \ = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34\
    \ = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37\
    \ = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40\
    \ = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43\
    \ = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46\
    \ = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49\
    \ = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52\
    \ = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55\
    \ = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58\
    \ = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61\
    \ = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long temp64\
    \ = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long temp67\
    \ = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long temp70\
    \ = 0;\n        long temp71 = 0;"]
stop_tokens:
- "\n    }\n"
