name: HumanEval_0_has_close_elements
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Check if in given list of numbers, are any two numbers closer\
  \ to each other than\n    // given threshold.\n    // >>> has_close_elements([1.0,\
  \ 2.0, 3.0], 0.5)\n    // False\n    // >>> has_close_elements([1.0, 2.8, 3.0, 4.0,\
  \ 5.0, 2.0], 0.3)\n    // True\n    public static bool HasCloseElements(List<float>\
  \ numbers, float threshold) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(HasCloseElements((new\
  \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f,\
  \ (float)2.2f})), (0.3f)) == (true));\n    Debug.Assert(HasCloseElements((new List<float>(new\
  \ float[]{(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})),\
  \ (0.05f)) == (false));\n    Debug.Assert(HasCloseElements((new List<float>(new\
  \ float[]{(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.95f))\
  \ == (true));\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f,\
  \ (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.8f)) == (false));\n\
  \    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
  \ (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.1f)) == (true));\n \
  \   Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.1f, (float)2.2f,\
  \ (float)3.1f, (float)4.1f, (float)5.1f})), (1.0f)) == (true));\n    Debug.Assert(HasCloseElements((new\
  \ List<float>(new float[]{(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})),\
  \ (0.5f)) == (false));\n    }\n\n}\n"
completions: ["        float minDiff = float.MaxValue;\n        float minDiffIndex\
    \ = -1;\n        float minDiffValue = float.MaxValue;\n        float minDiffValueIndex\
    \ = -1;\n        for (int i = 0; i < numbers.Count; i++) {\n            float\
    \ diff = numbers[i] - threshold;\n            if (diff < minDiff) {\n        \
    \        minDiff = diff;\n                minDiffIndex = i;\n                minDiffValue\
    \ = numbers[i];\n                minDiffValueIndex = i;\n            } else if\
    \ (diff == minDiff) {\n                if (numbers[i] > minDiffValue) {\n    \
    \                minDiffValue = numbers[i];\n                    minDiffValueIndex\
    \ = i;\n                }\n            }\n        }\n        return minDiffIndex\
    \ != -1;", "        float sum = 0;\n        foreach (float number in numbers)\
    \ {\n            sum += number;\n        }\n        float average = sum / numbers.Count;\n\
    \        foreach (float number in numbers) {\n            float difference = average\
    \ - number;\n            if (difference < threshold) {\n                return\
    \ true;\n            }\n        }\n        return false;", "        float sum\
    \ = 0;\n        foreach (float number in numbers) {\n            sum += number;\n\
    \        }\n        float average = sum / numbers.Count;\n        foreach (float\
    \ number in numbers) {\n            float difference = average - number;\n   \
    \         if (difference < threshold) {\n                return true;\n      \
    \      }\n        }\n        return false;", "        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += number;\n        }\n\
    \        float average = sum / numbers.Count;\n        float sumSquare = 0;\n\
    \        foreach (float number in numbers) {\n            sumSquare += Math.Pow(number\
    \ - average, 2);\n        }\n        float averageSquare = sumSquare / numbers.Count;\n\
    \        return averageSquare < Math.Pow(threshold, 2);", "        float smallestDifference\
    \ = float.MaxValue;\n        float smallestDifferenceIndex = 0;\n        float\
    \ smallestDifferenceValue = float.MaxValue;\n        float smallestDifferenceValueIndex\
    \ = 0;\n        for (int i = 0; i < numbers.Count; i++) {\n            float currentDifference\
    \ = numbers[i] - numbers[smallestDifferenceIndex];\n            if (currentDifference\
    \ < smallestDifference) {\n                smallestDifference = currentDifference;\n\
    \                smallestDifferenceIndex = i;\n                smallestDifferenceValue\
    \ = numbers[i];\n                smallestDifferenceValueIndex = i;\n         \
    \   } else if (currentDifference < threshold) {\n                smallestDifferenceIndex\
    \ = i;\n                smallestDifferenceValue = numbers[i];\n              \
    \  smallestDifferenceValueIndex = i;\n            }\n        }\n        return\
    \ smallestDifferenceIndex != smallestDifferenceValueIndex;", "        float sum\
    \ = 0;\n        foreach (float number in numbers) {\n            sum += number;\n\
    \        }\n        float average = sum / numbers.Count;\n        float difference\
    \ = average - threshold;\n        bool result = false;\n        foreach (float\
    \ number in numbers) {\n            float difference = number - threshold;\n \
    \           float distance = Math.Abs(difference);\n            if (distance <\
    \ difference) {\n                result = true;\n                break;\n    \
    \        }\n        }\n        return result;", "        float sum = 0;\n    \
    \    foreach (float number in numbers) {\n            sum += number;\n       \
    \ }\n        float average = sum / numbers.Count;\n        float sum2 = 0;\n \
    \       foreach (float number in numbers) {\n            sum2 += Math.Abs(number\
    \ - average);\n        }\n        return sum2 <= threshold;", "        float sum\
    \ = 0;\n        foreach (float number in numbers) {\n            sum += number;\n\
    \        }\n        float average = sum / numbers.Count;\n        float difference\
    \ = 0;\n        foreach (float number in numbers) {\n            difference +=\
    \ Math.Abs(number - average);\n        }\n        return difference < threshold;",
  "        float smallest = Math.Min(numbers.Min(), numbers.Max());\n        float\
    \ largest = Math.Max(numbers.Min(), numbers.Max());\n        float diff = largest\
    \ - smallest;\n        float threshold = Math.Abs(threshold);\n        float threshold\
    \ = threshold * threshold;\n        float sum = 0;\n        foreach (float number\
    \ in numbers) {\n            sum += number;\n        }\n        float average\
    \ = sum / numbers.Count;\n        float sumOfSquares = 0;\n        foreach (float\
    \ number in numbers) {\n            sumOfSquares += Math.Pow(number - average,\
    \ 2);\n        }\n        float averageOfSquares = sumOfSquares / numbers.Count;\n\
    \        float sumOfDifferences = 0;\n        foreach (float number in numbers)\
    \ {\n            sumOfDifferences += Math.Pow(number - smallest, 2);\n       \
    \ }\n        float averageOfDifferences = sumOfDifferences / numbers.Count;\n\
    \        bool result = false;\n        if (diff < threshold) {\n            result\
    \ = true;\n        }\n        if (diff < averageOfSquares - threshold) {\n   \
    \         result = true;\n        }\n        if (diff < averageOfDifferences -\
    \ threshold) {\n            result = true;\n        }\n        return result;",
  "        float minDiff = float.MaxValue;\n        float minDiffIndex = -1;\n   \
    \     for (int i = 0; i < numbers.Count - 1; i++) {\n            float diff =\
    \ numbers[i + 1] - numbers[i];\n            if (diff < minDiff) {\n          \
    \      minDiff = diff;\n                minDiffIndex = i;\n            }\n   \
    \     }\n        if (minDiffIndex == -1) {\n            return false;\n      \
    \  }\n        float diff = numbers[minDiffIndex + 1] - numbers[minDiffIndex];\n\
    \        if (diff < threshold) {\n            return true;\n        }\n      \
    \  return false;", "        float smallest = numbers.Min();\n        float largest\
    \ = numbers.Max();\n        float diff = largest - smallest;\n        float threshold\
    \ = Math.Abs(threshold);\n        float diffThreshold = diff / numbers.Count;\n\
    \        float diffThresholdSquared = diffThreshold * diffThreshold;\n       \
    \ float diffThresholdCubed = diffThreshold * diffThreshold * diffThreshold;\n\
    \        float diffThresholdCubedSquared = diffThresholdSquared * diffThresholdSquared;\n\
    \        float diffThresholdCubedCubed = diffThresholdSquared * diffThresholdSquared\
    \ * diffThreshold;\n        float diffThresholdCubedCubedSquared = diffThresholdCubedSquared\
    \ * diffThresholdSquared;\n        float diffThresholdCubedCubedCubed = diffThresholdCubedSquared\
    \ * diffThresholdSquared * diffThreshold;\n        float diffThresholdCubedCubedCubedSquared\
    \ = diffThresholdCubedCubedSquared * diffThresholdSquared * diffThresholdSquared;\n\
    \        float diffThresholdCubedCubedCubedCubed = diffThresholdCubedCubedSquared\
    \ * diffThresholdSquared * diffThresholdSquared * diffThreshold;\n        float\
    \ diffThresholdCubedCubedCubedCubedSquared = diffThresholdCubedCubedSquared *\
    \ diffThresholdSquared * diffThresholdSquared * diffThresholdSquared * diffThreshold;\n\
    \        float diffThresholdCubedCubedCubedCubedCubed = diffThresholdCubedCubedSquared\
    \ * diffThresholdSquared * diffThresholdSquared * diffThresholdSquared * diffThresholdSquared\
    \ * diffThreshold;\n        float diffThresholdCubedCubedCubedCubedCubedSquared\
    \ = diffThresholdCubedCubedCubedSquared * diffThresholdSquared * diffThresholdSquared\
    \ * diffThresholdSquared * diffThresholdSquared * diffThresholdSquared * diffThreshold;\n\
    \        float diffThresholdCubedCubedCubedCubedCubedCubed = diffThresholdCubedCubedCubedSquared\
    \ * diffThresholdSquared * diffThresholdSquared * diffThresholdSquared * diffThresholdSquared\
    \ * diffThresholdSquared * diffThresholdSquared * diffThreshold;\n        float\
    \ diffThresholdCubedCubedCubedCubedCubedCubedSquared = diffThresholdCubedCubedCubedCubedSquared\
    \ * diffThresholdSquared * diffThreshold", "        float minDiff = float.MaxValue;\n\
    \        float minDiffIndex = -1;\n        for (int i = 0; i < numbers.Count -\
    \ 1; i++) {\n            float diff = numbers[i + 1] - numbers[i];\n         \
    \   if (diff < minDiff) {\n                minDiff = diff;\n                minDiffIndex\
    \ = i;\n            }\n        }\n        return minDiff < threshold;", "    \
    \    float smallest = Math.Min(numbers[0], numbers[1]);\n        float largest\
    \ = Math.Max(numbers[0], numbers[1]);\n        float diff = largest - smallest;\n\
    \        if (diff <= threshold) {\n            return false;\n        }\n    \
    \    List<float> closeElements = new List<float>();\n        float closeElementsSum\
    \ = 0;\n        for (int i = 0; i < numbers.Count; i++) {\n            float current\
    \ = numbers[i];\n            float diff = current - smallest;\n            if\
    \ (diff <= threshold) {\n                closeElementsSum += diff;\n         \
    \       closeElements.Add(current);\n            }\n        }\n        if (closeElementsSum\
    \ < threshold) {\n            return false;\n        }\n        return true;",
  "        float min = numbers.Min();\n        float max = numbers.Max();\n      \
    \  float diff = max - min;\n        float threshold = threshold * diff;\n    \
    \    float sum = 0;\n        foreach (float number in numbers) {\n           \
    \ sum += number;\n        }\n        float average = sum / numbers.Count;\n  \
    \      bool result = false;\n        foreach (float number in numbers) {\n   \
    \         float diff = number - average;\n            if (diff < threshold) {\n\
    \                result = true;\n                break;\n            }\n     \
    \   }\n        return result;", "        if (numbers.Count < 2) {\n          \
    \  return false;\n        }\n        float sum = 0;\n        float min = numbers[0];\n\
    \        float max = numbers[0];\n        for (int i = 0; i < numbers.Count; i++)\
    \ {\n            sum += numbers[i];\n            if (numbers[i] > max) {\n   \
    \             max = numbers[i];\n            }\n            if (numbers[i] < min)\
    \ {\n                min = numbers[i];\n            }\n        }\n        float\
    \ diff = max - min;\n        if (diff < threshold) {\n            return false;\n\
    \        }\n        float sum2 = 0;\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            sum2 += Math.Pow(numbers[i] - min, 2);\n        }\n    \
    \    float diff2 = sum2 - sum * sum / numbers.Count;\n        if (diff2 < threshold)\
    \ {\n            return false;\n        }\n        return true;", "        float\
    \ sum = 0;\n        foreach (float number in numbers) {\n            sum += number;\n\
    \        }\n        float average = sum / numbers.Count;\n        float difference\
    \ = average - threshold;\n        float sumOfDifferences = 0;\n        foreach\
    \ (float number in numbers) {\n            sumOfDifferences += Math.Abs(number\
    \ - average);\n        }\n        return sumOfDifferences < difference;", "  \
    \      float min = numbers.Min();\n        float max = numbers.Max();\n      \
    \  float diff = max - min;\n        float threshold = threshold * diff;\n    \
    \    float sum = 0;\n        foreach (float number in numbers) {\n           \
    \ sum += number;\n        }\n        float average = sum / numbers.Count;\n  \
    \      foreach (float number in numbers) {\n            float diff = number -\
    \ average;\n            if (diff < threshold) {\n                return true;\n\
    \            }\n        }\n        return false;", "        float sum = 0;\n \
    \       float min = numbers.Min();\n        float max = numbers.Max();\n     \
    \   foreach (float number in numbers) {\n            sum += number;\n        \
    \    if (number < min) {\n                min = number;\n            }\n     \
    \       if (number > max) {\n                max = number;\n            }\n  \
    \      }\n        if (sum < threshold) {\n            return false;\n        }\n\
    \        float average = sum / numbers.Count;\n        foreach (float number in\
    \ numbers) {\n            if (Math.Abs(number - average) < threshold) {\n    \
    \            return true;\n            }\n        }\n        return false;", " \
    \       if (numbers == null || numbers.Count < 2) {\n            return false;\n\
    \        }\n        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float diff = max - min;\n        float threshold = threshold * diff;\n\
    \        float sum = 0;\n        float sum2 = 0;\n        foreach (float number\
    \ in numbers) {\n            sum += number;\n            sum2 += number * number;\n\
    \        }\n        float average = sum / numbers.Count;\n        float average2\
    \ = sum2 / numbers.Count;\n        float averageDiff = average2 - average;\n \
    \       return averageDiff < threshold;", "        float sum = 0;\n        foreach\
    \ (float number in numbers) {\n            sum += number;\n        }\n       \
    \ float average = sum / numbers.Count;\n        float sumOfSquares = 0;\n    \
    \    foreach (float number in numbers) {\n            sumOfSquares += Math.Pow(number\
    \ - average, 2);\n        }\n        float averageOfSquares = sumOfSquares / numbers.Count;\n\
    \        float difference = average - threshold;\n        float differenceOfSquares\
    \ = Math.Pow(difference - average, 2);\n        return averageOfSquares <= differenceOfSquares;"]
stop_tokens:
- "\n    }\n"
