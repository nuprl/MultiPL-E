name: HumanEval_59_largest_prime_factor
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not\
  \ a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
  \    // 2\n    public static long LargestPrimeFactor(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
  \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
  \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
  \ == (29L));\n    }\n\n}\n"
completions: ["        long factor = 2;\n        while (factor < n) {\n          \
    \  if (n % factor == 0) {\n                factor++;\n            }\n        \
    \    else {\n                while (n % factor == 0) {\n                    factor++;\n\
    \                }\n                break;\n            }\n        }\n       \
    \ return factor;", "        long maxFactor = n;\n        long maxFactorPrime =\
    \ 2;\n        while (maxFactorPrime * maxFactorPrime <= maxFactor) {\n       \
    \     long newMaxFactor = maxFactorPrime + 1;\n            long newMaxFactorPrime\
    \ = 2;\n            while (newMaxFactorPrime * newMaxFactorPrime <= newMaxFactor)\
    \ {\n                if (n % newMaxFactorPrime == 0) {\n                    maxFactor\
    \ = newMaxFactor;\n                    maxFactorPrime = newMaxFactorPrime;\n \
    \                   break;\n                }\n                newMaxFactorPrime++;\n\
    \            }\n        }\n        return maxFactor;", "        long p = 2;\n\
    \        while (p < n) {\n            if (n % p == 0) {\n                n = n\
    \ / p;\n            } else {\n                p = p + 1;\n            }\n    \
    \    }\n        return n;", "        long maxFactor = 1;\n        long currentFactor\
    \ = 2;\n        while (n > 1) {\n            while (n % currentFactor == 0) {\n\
    \                maxFactor = currentFactor;\n                currentFactor++;\n\
    \            }\n            n/=currentFactor;\n            currentFactor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = 1;\n       \
    \ long maxFactorPrime = 2;\n        long maxFactorPrimePrime = 3;\n        long\
    \ maxFactorPrimePrimePrime = 4;\n        long maxFactorPrimePrimePrimePrime =\
    \ 5;\n        long maxFactorPrimePrimePrimePrime = 6;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 7;\n        long maxFactorPrimePrimePrimePrimePrime = 8;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 9;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 10;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 11;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 12;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 13;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 14;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 15;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 16;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 17;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 18;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 19;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 20;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 21;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 22;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 23;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 24;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 25;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 26;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 27;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 28;\n   \
    \     long maxFactor", "        long factor = 2;\n        while (n > 1) {\n  \
    \          if (n % factor == 0) {\n                n = n / factor;\n         \
    \   } else {\n                factor++;\n            }\n        }\n        return\
    \ factor;", "        long maxFactor = n;\n        long factor = 2;\n        while\
    \ (factor <= maxFactor) {\n            if (n % factor == 0) {\n              \
    \  maxFactor = n / factor;\n            } else {\n                factor++;\n\
    \            }\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor < maxFactor) {\n     \
    \       if (n % factor == 0) {\n                maxFactor = n / factor;\n    \
    \        } else {\n                factor++;\n            }\n        }\n     \
    \   return maxFactor;", "        long maxFactor = n;\n        long maxFactorPrime\
    \ = 1;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        if (n % factor == 0) {\n                long primeFactor = factor;\n\
    \                while (n % primeFactor == 0) {\n                    n /= primeFactor;\n\
    \                    maxFactorPrime = primeFactor;\n                }\n      \
    \      }\n            factor++;\n        }\n        return maxFactorPrime;", " \
    \       long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n        }\n \
    \       return maxFactor;", "        long largestPrimeFactor = n;\n        long\
    \ factor = 2;\n        while (factor <= largestPrimeFactor) {\n            if\
    \ (n % factor == 0) {\n                largestPrimeFactor = factor;\n        \
    \    }\n            factor++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            long testFactor = factor;\n            while (testFactor\
    \ <= maxFactor) {\n                if (n % testFactor == 0) {\n              \
    \      maxFactor = testFactor;\n                    break;\n                }\n\
    \                testFactor++;\n            }\n            factor++;\n       \
    \ }\n        return maxFactor;", "        long maxFactor = n;\n        long maxFactorPrime\
    \ = 2;\n        long maxFactorPrimePrime = 2;\n        long maxFactorPrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 2;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 2;\n     \
    \   long maxFactorPrimePrimePrimePrimePrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n  \
    \      long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n    \
    \    long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n      \
    \  long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePri",
  "        long largestPrimeFactor = 1;\n        long currentPrime = 2;\n        while\
    \ (currentPrime < n) {\n            long currentPrimeFactor = currentPrime;\n\
    \            while (currentPrimeFactor % currentPrime == 0) {\n              \
    \  currentPrimeFactor++;\n            }\n            if (currentPrimeFactor >\
    \ largestPrimeFactor) {\n                largestPrimeFactor = currentPrimeFactor;\n\
    \            }\n            currentPrime++;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = n;\n        long i = 2;\n        while (largestPrimeFactor\
    \ % i == 0) {\n            largestPrimeFactor /= i;\n            i++;\n      \
    \  }\n        return largestPrimeFactor;", "        long factor = 2;\n       \
    \ while (factor < n) {\n            if (n % factor == 0) {\n                factor++;\n\
    \            }\n            else {\n                while (n % factor == 0) {\n\
    \                    factor++;\n                }\n                break;\n  \
    \          }\n        }\n        return factor;", "        long largestPrimeFactor\
    \ = n;\n        long currentPrime = 2;\n        while (currentPrime < largestPrimeFactor)\
    \ {\n            bool isPrime = true;\n            for (int i = 2; i <= Math.Sqrt(currentPrime);\
    \ i++) {\n                if (n % i == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime) {\n                largestPrimeFactor = currentPrime;\n          \
    \  }\n            currentPrime++;\n        }\n        return largestPrimeFactor;",
  "        long factor = 2;\n        while (n > 1) {\n            if (n % factor ==\
    \ 0) {\n                n = n / factor;\n            } else {\n              \
    \  factor++;\n            }\n        }\n        return factor;", "        long\
    \ maxFactor = n;\n        long factor = 2;\n        while (factor < maxFactor)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long max = 2;\n        long cur = 3;\n        while (cur * cur <= n) {\n\
    \            if (n % cur == 0) {\n                long tmp = (long) Math.Sqrt(cur);\n\
    \                while (n % tmp == 0) {\n                    n /= tmp;\n     \
    \           }\n                if (n > max) {\n                    max = n;\n\
    \                }\n            }\n            cur++;\n        }\n        return\
    \ max;", "        long maxPrime = 2;\n        long maxFactor = 1;\n        long\
    \ currentPrime = 2;\n        long currentFactor = 1;\n        while (n > 1) {\n\
    \            while (n % currentPrime == 0) {\n                currentPrime++;\n\
    \            }\n            while (n % currentFactor == 0) {\n               \
    \ currentFactor++;\n            }\n            if (currentPrime > maxPrime) {\n\
    \                maxPrime = currentPrime;\n            }\n            if (currentFactor\
    \ > maxFactor) {\n                maxFactor = currentFactor;\n            }\n\
    \            n /= currentPrime;\n            n /= currentFactor;\n        }\n\
    \        return maxPrime;", "        long maxPrime = 2;\n        long maxFactor\
    \ = 1;\n        while (n > 1) {\n            long testPrime = TestPrime(n);\n\
    \            if (testPrime > maxPrime) {\n                maxPrime = testPrime;\n\
    \                maxFactor = n;\n            }\n            n /= testPrime;\n\
    \        }\n        return maxFactor;", "        long maxFactor = 1;\n       \
    \ long currentFactor = 2;\n        while (n > 1) {\n            while (n % currentFactor\
    \ == 0) {\n                maxFactor = currentFactor;\n                n /= currentFactor;\n\
    \            }\n            currentFactor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long maxFactorPrime = 2;\n        long maxFactorPrimePrime\
    \ = 3;\n        long maxFactorPrimePrimePrime = 4;\n        long maxFactorPrimePrimePrimePrime\
    \ = 5;\n        long maxFactorPrimePrimePrimePrime = 6;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 7;\n        long maxFactorPrimePrimePrimePrimePrime = 8;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 9;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 10;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 11;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 12;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 13;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 14;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 15;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 16;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 17;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 18;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 19;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 20;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 21;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 22;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 23;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 24;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 25;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 26;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 27;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 28;\n   \
    \     long maxFactor", "        long maxFactor = n;\n        long factor = 2;\n\
    \        while (factor < maxFactor) {\n            if (n % factor == 0) {\n  \
    \              maxFactor = n / factor;\n            } else {\n               \
    \ factor++;\n            }\n        }\n        return maxFactor;", "        long\
    \ maxFactor = n;\n        long factor = 2;\n        while (factor <= maxFactor)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = n / factor;\n\
    \            } else {\n                factor++;\n            }\n        }\n \
    \       return maxFactor;", "        long maxFactor = 1;\n        long factor\
    \ = 2;\n        while (factor <= n) {\n            if (n % factor == 0) {\n  \
    \              maxFactor = factor;\n            }\n            factor++;\n   \
    \     }\n        return maxFactor;", "        long maxPrime = 2;\n        long\
    \ maxFactor = 1;\n        long prime = 2;\n        long factor = 2;\n        while\
    \ (n > 1) {\n            if (n % prime == 0) {\n                factor++;\n  \
    \          }\n            if (factor > maxFactor) {\n                maxFactor\
    \ = factor;\n                maxPrime = prime;\n            }\n            prime++;\n\
    \            n /= prime;\n        }\n        return maxPrime;", "        long\
    \ maxFactor = n;\n        long factor = 2;\n        while (factor < maxFactor)\
    \ {\n            while (n % factor == 0) {\n                n /= factor;\n   \
    \         }\n            if (n == 1) {\n                break;\n            }\n\
    \            factor++;\n        }\n        return factor;", "        long maxPrime\
    \ = 1;\n        long maxFactor = 2;\n        while (n > 1) {\n            long\
    \ testPrime = TestPrime(n);\n            if (testPrime > maxPrime) {\n       \
    \         maxPrime = testPrime;\n                maxFactor = n;\n            }\n\
    \            n /= testPrime;\n        }\n        return maxFactor;", "       \
    \ long maxPrime = 2;\n        long maxFactor = 1;\n        long prime = 2;\n \
    \       while (n > 1) {\n            while (n % prime == 0) {\n              \
    \  maxFactor = prime;\n                maxPrime = prime;\n                n /=\
    \ prime;\n            }\n            prime++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = 1;\n        long currentPrime = 2;\n        while\
    \ (currentPrime < n) {\n            if (n % currentPrime == 0) {\n           \
    \     largestPrimeFactor = currentPrime;\n                break;\n           \
    \ }\n            currentPrime++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n        }\n \
    \       return maxFactor;", "        long largestPrimeFactor = n;\n        long\
    \ largestPrimeFactorOfN = 1;\n        long largestPrimeFactorOfNPlus1 = 2;\n \
    \       bool isPrime = true;\n        long primeFactorOfN = 1;\n        long primeFactorOfNPlus1\
    \ = 2;\n        bool isPrime = true;\n        long primeFactorOfN = 1;\n     \
    \   long primeFactorOfNPlus1 = 2;\n        bool isPrime = true;\n        long\
    \ primeFactorOfN = 1;\n        long primeFactorOfNPlus1 = 2;\n        bool isPrime\
    \ = true;\n        long primeFactorOfN = 1;\n        long primeFactorOfNPlus1\
    \ = 2;\n        bool isPrime = true;\n        long primeFactorOfN = 1;\n     \
    \   long primeFactorOfNPlus1 = 2;\n        bool isPrime = true;\n        long\
    \ primeFactorOfN = 1;\n        long primeFactorOfNPlus1 = 2;\n        bool isPrime\
    \ = true;\n        long primeFactorOfN = 1;\n        long primeFactorOfNPlus1\
    \ = 2;\n        bool isPrime = true;\n        long primeFactorOfN = 1;\n     \
    \   long primeFactorOfNPlus1 = 2;\n        bool isPrime = true;\n        long\
    \ primeFactorOfN = 1;\n        long primeFactorOfNPlus1 = 2;\n        bool isPrime\
    \ = true;\n        long primeFactorOfN = 1;\n        long primeFactorOfNPlus1\
    \ = 2;\n        bool isPrime = true;\n        long primeFactorOfN = 1;\n     \
    \   long primeFactorOfNPlus1 = 2;\n        bool isPrime = true;\n        long\
    \ primeFactorOfN = 1;\n        long primeFactorOfNPlus1 = 2;\n        bool isPrime\
    \ = true;\n        long primeFactorOfN = 1;\n        long primeFactorOfNPlus1\
    \ = 2;\n        bool isPrime = true;\n        long primeFactorOfN = 1;\n     \
    \   long primeFactorOfNPlus1 = 2;\n        bool isPrime = true;\n        long\
    \ primeFactorOfN = 1;\n        long primeFactorOfNPlus1 = 2;\n        bool isPrime\
    \ = true;\n        long primeFactorOfN = 1;\n        long primeFactorOfNPlus1\
    \ = 2;\n        bool isPrime = true;\n        long primeFactorOfN = 1;\n     \
    \   long primeFactorOfNPlus1 = 2;\n        bool isPrime = true;\n        long\
    \ primeFactorOfN = 1;\n        long primeFactorOfNPlus1 = 2;\n        bool isPrime\
    \ = true;\n        long primeFactorOfN = 1;\n        long primeFactorOfNPlus1\
    \ = 2;\n        bool is", "        long factor = 2;\n        while (n > 1) {\n\
    \            if (n % factor == 0) {\n                factor++;\n            }\n\
    \            n /= factor;\n        }\n        return factor;", "        long factor\
    \ = 2;\n        while (factor < n) {\n            if (n % factor == 0) {\n   \
    \             factor++;\n            }\n            else {\n                while\
    \ (n % factor == 0) {\n                    factor++;\n                }\n    \
    \            break;\n            }\n        }\n        return factor;", "    \
    \    long maxFactor = 1;\n        long maxFactorPrime = 2;\n        long maxFactorPrimePrime\
    \ = 3;\n        long maxFactorPrimePrimePrime = 4;\n        long maxFactorPrimePrimePrimePrime\
    \ = 5;\n        long maxFactorPrimePrimePrimePrime = 6;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 7;\n        long maxFactorPrimePrimePrimePrimePrime = 8;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 9;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 10;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 11;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 12;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 13;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 14;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 15;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 16;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 17;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 18;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 19;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 20;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 21;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 22;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 23;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 24;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 25;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 26;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 27;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 28;\n   \
    \     long maxFactor", "        long maxFactor = 1;\n        long currentFactor\
    \ = 2;\n        while (n > 1) {\n            while (n % currentFactor == 0) {\n\
    \                maxFactor = currentFactor;\n                currentFactor++;\n\
    \            }\n            n--;\n        }\n        return maxFactor;", "   \
    \     long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxPrime = 1;\n    \
    \    long maxFactor = 2;\n        while (n > 1) {\n            long testPrime\
    \ = TestPrime(n);\n            if (testPrime == 1) {\n                return n;\n\
    \            }\n            long testFactor = TestFactor(n, testPrime);\n    \
    \        if (testFactor > maxFactor) {\n                maxFactor = testFactor;\n\
    \                maxPrime = testPrime;\n            }\n            n = testPrime;\n\
    \        }\n        return maxPrime;", "        long maxFactor = 1;\n        long\
    \ maxFactorPrime = 2;\n        long maxFactorPrimePrime = 3;\n        long maxFactorPrimePrimePrime\
    \ = 4;\n        long maxFactorPrimePrimePrimePrime = 5;\n        long maxFactorPrimePrimePrimePrime\
    \ = 6;\n        long maxFactorPrimePrimePrimePrimePrime = 7;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 8;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 9;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 10;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 11;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 12;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrime = 13;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 14;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 15;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 16;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 17;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 18;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 19;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 20;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 21;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 22;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 23;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 24;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 25;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 26;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 27;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 28;\n        long maxFactor",
  "        long p = 2;\n        while (p < n) {\n            if (n % p == 0) {\n \
    \               n = n / p;\n            } else {\n                p = p * 2;\n\
    \            }\n        }\n        return n;", "        long maxFactor = n;\n\
    \        long factor = 2;\n        while (factor <= maxFactor) {\n           \
    \ if (n % factor == 0) {\n                maxFactor = n / factor;\n          \
    \  } else {\n                factor++;\n            }\n        }\n        return\
    \ maxFactor;", "        long maxFactor = n;\n        long factor = 2;\n      \
    \  while (factor < maxFactor) {\n            if (n % factor == 0) {\n        \
    \        maxFactor = n / factor;\n            } else {\n                factor++;\n\
    \            }\n        }\n        return maxFactor;", "        long maxPrime\
    \ = 2;\n        long maxFactor = 1;\n        long currentPrime = 2;\n        long\
    \ currentFactor = 1;\n        while (n > 1) {\n            currentPrime = 2;\n\
    \            currentFactor = 1;\n            while (n > 1) {\n               \
    \ if (n % currentPrime == 0) {\n                    currentFactor = currentPrime;\n\
    \                    break;\n                }\n                currentPrime++;\n\
    \            }\n            if (currentFactor > maxFactor) {\n               \
    \ maxFactor = currentFactor;\n                maxPrime = currentPrime;\n     \
    \       }\n            n--;\n        }\n        return maxPrime;", "        long\
    \ largestPrimeFactor = n;\n        long prime = 2;\n        while (prime < largestPrimeFactor)\
    \ {\n            long test = (largestPrimeFactor % prime);\n            if (test\
    \ == 0) {\n                largestPrimeFactor = prime;\n            }\n      \
    \      else {\n                prime++;\n            }\n        }\n        return\
    \ largestPrimeFactor;", "        long maxFactor = n;\n        long factor = 2;\n\
    \        while (factor <= maxFactor) {\n            while (n % factor == 0) {\n\
    \                n /= factor;\n            }\n            if (n > 1) {\n     \
    \           maxFactor = factor;\n            }\n            factor++;\n      \
    \  }\n        return maxFactor;", "        long maxFactor = 1;\n        long currentFactor\
    \ = 2;\n        while (n > 1) {\n            while (n % currentFactor == 0) {\n\
    \                maxFactor = currentFactor;\n                currentFactor++;\n\
    \            }\n            n/=currentFactor;\n            currentFactor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = 1;\n       \
    \ long maxFactorPrime = 2;\n        long maxFactorPrimePrime = 3;\n        long\
    \ maxFactorPrimePrimePrime = 4;\n        long maxFactorPrimePrimePrimePrime =\
    \ 5;\n        long maxFactorPrimePrimePrimePrime = 6;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 7;\n        long maxFactorPrimePrimePrimePrimePrime = 8;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 9;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 10;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 11;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 12;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 13;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 14;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 15;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 16;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 17;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 18;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 19;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 20;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 21;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 22;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 23;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 24;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 25;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 26;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 27;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 28;\n   \
    \     long maxFactor", "        long maxPrime = 2;\n        long maxFactor = 1;\n\
    \        long factor = 2;\n        while (factor <= n / 2) {\n            if (n\
    \ % factor == 0) {\n                maxFactor = factor;\n            }\n     \
    \       factor++;\n        }\n        while (maxPrime < maxFactor) {\n       \
    \     if (n % maxPrime == 0) {\n                maxPrime = maxFactor;\n      \
    \      }\n            maxPrime++;\n            maxFactor++;\n        }\n     \
    \   return maxPrime;", "        long maxFactor = n;\n        long maxFactorPrime\
    \ = 2;\n        long maxFactorPrimePrime = 2;\n        long maxFactorPrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 2;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 2;\n       \
    \ long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n    \
    \    long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        ", "        long maxFactor = 1;\n        long currentFactor =\
    \ 2;\n        while (n > 1) {\n            while (n % currentFactor == 0) {\n\
    \                maxFactor = currentFactor;\n                currentFactor++;\n\
    \            }\n            n--;\n        }\n        return maxFactor;", "   \
    \     long largestPrimeFactor = n;\n        long largestPrimeFactor2 = n;\n  \
    \      long largestPrimeFactor3 = n;\n        long largestPrimeFactor4 = n;\n\
    \        long largestPrimeFactor5 = n;\n        long largestPrimeFactor6 = n;\n\
    \        long largestPrimeFactor7 = n;\n        long largestPrimeFactor8 = n;\n\
    \        long largestPrimeFactor9 = n;\n        long largestPrimeFactor10 = n;\n\
    \        long largestPrimeFactor11 = n;\n        long largestPrimeFactor12 = n;\n\
    \        long largestPrimeFactor13 = n;\n        long largestPrimeFactor14 = n;\n\
    \        long largestPrimeFactor15 = n;\n        long largestPrimeFactor16 = n;\n\
    \        long largestPrimeFactor17 = n;\n        long largestPrimeFactor18 = n;\n\
    \        long largestPrimeFactor19 = n;\n        long largestPrimeFactor20 = n;\n\
    \        long largestPrimeFactor21 = n;\n        long largestPrimeFactor22 = n;\n\
    \        long largestPrimeFactor23 = n;\n        long largestPrimeFactor24 = n;\n\
    \        long largestPrimeFactor25 = n;\n        long largestPrimeFactor26 = n;\n\
    \        long largestPrimeFactor27 = n;\n        long largestPrimeFactor28 = n;\n\
    \        long largestPrimeFactor29 = n;\n        long largestPrimeFactor30 = n;\n\
    \        long largestPrimeFactor31 = n;\n        long largestPrimeFactor32 = n;\n\
    \        long largestPrimeFactor33 = n;\n        long largestPrimeFactor34 = n;\n\
    \        long largestPrimeFactor35 = n;\n        long largestPrimeFactor36 = n;\n\
    \        long largestPrimeFactor37 = n;\n        long largestPrimeFactor38 = n;\n\
    \        long largestPrimeFactor39 = n;\n        long largestPrimeFactor40 = n;\n\
    \        long largestPrimeFactor41 = n;\n        long largestPrimeFactor42 = n;\n\
    \        long largestPrimeFactor43 = n;\n        long largestPrimeFactor44 = n;\n\
    \        long largestPrimeFactor45 = n;\n        long largestPrimeFactor46 = n;\n\
    \        long largestPrimeFactor47 = n;\n        long largestPrimeFactor", " \
    \       long max = 2;\n        long p = 2;\n        while (p < n) {\n        \
    \    if (n % p == 0) {\n                max = p;\n            }\n            p++;\n\
    \        }\n        return max;", "        long maxFactor = n;\n        long factor\
    \ = 2;\n        while (factor < maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactor = n / factor;\n            } else {\n         \
    \       factor++;\n            }\n        }\n        return maxFactor;", "   \
    \     long maxFactor = 1;\n        long currentFactor = 2;\n        while (n >\
    \ 1) {\n            while (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n                currentFactor++;\n            }\n        \
    \    n/=currentFactor;\n            currentFactor++;\n        }\n        return\
    \ maxFactor;", "        long maxFactor = 1;\n        long factor = 2;\n      \
    \  while (factor < n) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long max = 2;\n        long p = 2;\n        while (p < n) {\n         \
    \   while (n % p == 0) {\n                max = p;\n            }\n          \
    \  p++;\n        }\n        return max;", "        long max = 2;\n        long\
    \ factor = 2;\n        while (n > 1) {\n            if (n % factor == 0) {\n \
    \               max = factor;\n            }\n            factor++;\n        \
    \    while (n % factor == 0) {\n                n /= factor;\n            }\n\
    \        }\n        return max;", "        long maxFactor = 1;\n        long currentFactor\
    \ = 2;\n        while (n > 1) {\n            while (n % currentFactor == 0) {\n\
    \                maxFactor = currentFactor;\n                currentFactor++;\n\
    \            }\n            n/=currentFactor;\n            currentFactor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = 1;\n       \
    \ long factor = 2;\n        while (factor < n) {\n            if (n % factor ==\
    \ 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = 1;\n       \
    \ long maxFactorPrime = 2;\n        long maxFactorPrimePrime = 3;\n        long\
    \ maxFactorPrimePrimePrime = 4;\n        long maxFactorPrimePrimePrimePrime =\
    \ 5;\n        long maxFactorPrimePrimePrimePrime = 6;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 7;\n        long maxFactorPrimePrimePrimePrimePrime = 8;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 9;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 10;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 11;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 12;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 13;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 14;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 15;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 16;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 17;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 18;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 19;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 20;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 21;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 22;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 23;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 24;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 25;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 26;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 27;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 28;\n   \
    \     long maxFactor", "        long factor = 2;\n        while (factor < n) {\n\
    \            if (n % factor == 0) {\n                n = n / factor;\n       \
    \         factor++;\n            }\n            else {\n                factor++;\n\
    \            }\n        }\n        return factor;", "        long maxFactor =\
    \ 1;\n        long currentFactor = 2;\n        while (currentFactor <= n / 2)\
    \ {\n            if (n % currentFactor == 0) {\n                maxFactor = currentFactor;\n\
    \            }\n            currentFactor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (n\
    \ > 1) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n            n\
    \ /= currentFactor;\n        }\n        return maxFactor;", "        long p =\
    \ 2;\n        while (p < n) {\n            if (n % p == 0) {\n               \
    \ n = n / p;\n            } else {\n                p = p + 1;\n            }\n\
    \        }\n        return n;", "        long maxFactor = n;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactor = n / factor;\n            } else {\n         \
    \       factor++;\n            }\n        }\n        return maxFactor;", "   \
    \     long maxFactor = n;\n        long factor = 2;\n        while (factor < maxFactor)\
    \ {\n            while (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long p = 2;\n        while (p < n) {\n            if (n % p == 0) return\
    \ p;\n            p += 2;\n        }\n        return n;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        if (n % factor == 0) {\n                maxFactor = n / factor;\n   \
    \         } else {\n                factor++;\n            }\n        }\n    \
    \    return maxFactor;", "        long factor = 2;\n        while (n > 1) {\n\
    \            if (n % factor == 0) {\n                n = n / factor;\n       \
    \     } else {\n                factor++;\n            }\n        }\n        return\
    \ factor;", "        long largestPrimeFactor = 1;\n        long currentPrime =\
    \ 2;\n        while (n > 1) {\n            while (n % currentPrime == 0) {\n \
    \               largestPrimeFactor = currentPrime;\n                n /= currentPrime;\n\
    \            }\n            currentPrime++;\n        }\n        return largestPrimeFactor;",
  "        long factor = 2;\n        while (n > 1) {\n            if (n % factor ==\
    \ 0) {\n                factor++;\n            }\n            n /= factor;\n \
    \       }\n        return factor;", "        long maxPrime = 2;\n        long\
    \ maxFactor = 1;\n        long currentPrime = 2;\n        while (n > 1) {\n  \
    \          long currentFactor = n % currentPrime;\n            if (currentFactor\
    \ == 0) {\n                currentPrime++;\n            } else {\n           \
    \     currentPrime = currentFactor;\n            }\n            maxFactor = Math.Max(maxFactor,\
    \ currentPrime);\n            n = n / currentPrime;\n        }\n        return\
    \ maxFactor;", "        long maxFactor = n;\n        long factor = 2;\n      \
    \  while (factor <= maxFactor) {\n            if (n % factor == 0) {\n       \
    \         maxFactor = n / factor;\n            } else {\n                factor++;\n\
    \            }\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor < maxFactor) {\n     \
    \       if (n % factor == 0) {\n                maxFactor = n / factor;\n    \
    \        } else {\n                factor++;\n            }\n        }\n     \
    \   return maxFactor;", "        long maxFactor = 1;\n        long factor = 2;\n\
    \        while (factor < n) {\n            if (n % factor == 0) {\n          \
    \      maxFactor = factor;\n            }\n            factor++;\n        }\n\
    \        return maxFactor;", "        long max = 2;\n        long factor = 2;\n\
    \        while (n > 1) {\n            if (n % factor == 0) {\n               \
    \ max = factor;\n            }\n            factor++;\n            while (n %\
    \ factor == 0) {\n                n /= factor;\n            }\n        }\n   \
    \     return max;", "        long largestPrimeFactor = 1;\n        long i = 2;\n\
    \        while (i <= n / 2) {\n            if (n % i == 0) {\n               \
    \ largestPrimeFactor = i;\n            }\n            i += 1;\n        }\n   \
    \     return largestPrimeFactor;", "        long maxFactor = n;\n        long\
    \ maxFactorPrime = 2;\n        long maxFactorPrimePrime = 2;\n        long maxFactorPrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 2;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 2;\n     \
    \   long maxFactorPrimePrimePrimePrimePrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n  \
    \      long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n    \
    \    long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n      \
    \  long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePri",
  "        long p = 2;\n        while (p < n) {\n            if (n % p == 0) {\n \
    \               n = n / p;\n            } else {\n                p = p + 1;\n\
    \            }\n        }\n        return n;", "        long maxFactor = 1;\n\
    \        long factor = 2;\n        while (factor <= n / 2) {\n            if (n\
    \ % factor == 0) {\n                maxFactor = factor;\n            }\n     \
    \       factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = 1;\n        long currentFactor = 2;\n        while (n > 1) {\n           \
    \ if (n % currentFactor == 0) {\n                maxFactor = currentFactor;\n\
    \            }\n            currentFactor++;\n            n /= currentFactor;\n\
    \        }\n        return maxFactor;", "        long p = 2;\n        while (p\
    \ < n) {\n            if (n % p == 0) {\n                p = p * 2;\n        \
    \    } else {\n                while (n % p == 0) {\n                    n = n\
    \ / p;\n                }\n                break;\n            }\n        }\n\
    \        return n;", "        long maxFactor = 1;\n        long currentFactor\
    \ = 2;\n        while (currentFactor < n) {\n            if (n % currentFactor\
    \ == 0) {\n                maxFactor = currentFactor;\n            }\n       \
    \     currentFactor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = 1;\n        long maxFactorPrime = 2;\n        long currentFactor = 3;\n  \
    \      while (n > 1) {\n            while (n % currentFactor == 0) {\n       \
    \         maxFactor = currentFactor;\n                maxFactorPrime = currentFactor;\n\
    \                currentFactor++;\n            }\n            n = n / currentFactor;\n\
    \            currentFactor = 3;\n        }\n        return maxFactor;", "    \
    \    long p = 2;\n        while (p < n) {\n            if (n % p == 0) {\n   \
    \             n = n / p;\n            } else {\n                p = p * 2;\n \
    \           }\n        }\n        return n;", "        long maxFactor = n;\n \
    \       long factor = 2;\n        while (factor < maxFactor) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = n / factor;\n            }\
    \ else {\n                factor++;\n            }\n        }\n        return\
    \ maxFactor;", "        long factor = 2;\n        while (n > 1) {\n          \
    \  if (n % factor == 0) {\n                n = n / factor;\n                factor++;\n\
    \            }\n            else {\n                factor++;\n            }\n\
    \        }\n        return factor;", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor < maxFactor) {\n            while (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long largestPrimeFactor = n;\n\
    \        long largestPrimeFactor2 = n;\n        long largestPrimeFactor3 = n;\n\
    \        long largestPrimeFactor4 = n;\n        long largestPrimeFactor5 = n;\n\
    \        long largestPrimeFactor6 = n;\n        long largestPrimeFactor7 = n;\n\
    \        long largestPrimeFactor8 = n;\n        long largestPrimeFactor9 = n;\n\
    \        long largestPrimeFactor10 = n;\n        long largestPrimeFactor11 = n;\n\
    \        long largestPrimeFactor12 = n;\n        long largestPrimeFactor13 = n;\n\
    \        long largestPrimeFactor14 = n;\n        long largestPrimeFactor15 = n;\n\
    \        long largestPrimeFactor16 = n;\n        long largestPrimeFactor17 = n;\n\
    \        long largestPrimeFactor18 = n;\n        long largestPrimeFactor19 = n;\n\
    \        long largestPrimeFactor20 = n;\n        long largestPrimeFactor21 = n;\n\
    \        long largestPrimeFactor22 = n;\n        long largestPrimeFactor23 = n;\n\
    \        long largestPrimeFactor24 = n;\n        long largestPrimeFactor25 = n;\n\
    \        long largestPrimeFactor26 = n;\n        long largestPrimeFactor27 = n;\n\
    \        long largestPrimeFactor28 = n;\n        long largestPrimeFactor29 = n;\n\
    \        long largestPrimeFactor30 = n;\n        long largestPrimeFactor31 = n;\n\
    \        long largestPrimeFactor32 = n;\n        long largestPrimeFactor33 = n;\n\
    \        long largestPrimeFactor34 = n;\n        long largestPrimeFactor35 = n;\n\
    \        long largestPrimeFactor36 = n;\n        long largestPrimeFactor37 = n;\n\
    \        long largestPrimeFactor38 = n;\n        long largestPrimeFactor39 = n;\n\
    \        long largestPrimeFactor40 = n;\n        long largestPrimeFactor41 = n;\n\
    \        long largestPrimeFactor42 = n;\n        long largestPrimeFactor43 = n;\n\
    \        long largestPrimeFactor44 = n;\n        long largestPrimeFactor45 = n;\n\
    \        long largestPrimeFactor46 = n;\n        long largestPrimeFactor47 = n;\n\
    \        long largestPrimeFactor", "        long largestPrimeFactor = 1;\n   \
    \     long currentPrime = 2;\n        long currentPrimeSquared = 2;\n        long\
    \ currentPrimeSquareRoot = 2;\n        while (n > 1) {\n            currentPrime\
    \ = currentPrime * 2;\n            currentPrimeSquared = currentPrimeSquared *\
    \ 2;\n            currentPrimeSquareRoot = currentPrimeSquareRoot * 2;\n     \
    \       if (n % currentPrime == 0) {\n                largestPrimeFactor = currentPrime;\n\
    \                break;\n            }\n            if (n % currentPrimeSquared\
    \ == 0) {\n                largestPrimeFactor = currentPrimeSquared;\n       \
    \         break;\n            }\n            if (n % currentPrimeSquareRoot ==\
    \ 0) {\n                largestPrimeFactor = currentPrimeSquareRoot;\n       \
    \         break;\n            }\n            n = n / currentPrime;\n        }\n\
    \        return largestPrimeFactor;", "        long maxFactor = 1;\n        long\
    \ currentFactor = 2;\n        while (n > 1) {\n            if (n % currentFactor\
    \ == 0) {\n                maxFactor = currentFactor;\n            }\n       \
    \     currentFactor++;\n            n /= currentFactor;\n        }\n        return\
    \ maxFactor;", "        long maxFactor = 1;\n        long currentFactor = 2;\n\
    \        while (n > 1) {\n            while (n % currentFactor == 0) {\n     \
    \           maxFactor = currentFactor;\n                n /= currentFactor;\n\
    \            }\n            currentFactor++;\n        }\n        return maxFactor;",
  "        long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factor++;\n            }\n            n/=factor;\n\
    \        }\n        return factor;", "        long p = 2;\n        while (p <\
    \ n) {\n            if (n % p == 0) {\n                n = n / p;\n          \
    \  } else {\n                p = p + 1;\n            }\n        }\n        return\
    \ n;", "        long max = 2;\n        long maxFactor = 2;\n        long currentFactor\
    \ = 2;\n        while (n > 1) {\n            currentFactor = n % maxFactor;\n\
    \            if (currentFactor == 0) {\n                maxFactor = max;\n   \
    \             max = currentFactor;\n            } else {\n                maxFactor\
    \ = currentFactor;\n                max = currentFactor;\n            }\n    \
    \        n = n / maxFactor;\n        }\n        return maxFactor;", "        long\
    \ largestPrimeFactor = 1;\n        long currentPrime = 2;\n        while (n >\
    \ 1) {\n            while (n % currentPrime == 0) {\n                largestPrimeFactor\
    \ = currentPrime;\n                n /= currentPrime;\n            }\n       \
    \     currentPrime++;\n        }\n        return largestPrimeFactor;", "     \
    \   long maxFactor = 2;\n        long currentFactor = 3;\n        while (currentFactor\
    \ <= n) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n        }\n \
    \       return maxFactor;", "        long maxFactor = 1;\n        long maxFactorPrime\
    \ = 2;\n        long maxFactorPrimePrime = 3;\n        long maxFactorPrimePrimePrime\
    \ = 4;\n        long maxFactorPrimePrimePrimePrime = 5;\n        long maxFactorPrimePrimePrimePrime\
    \ = 6;\n        long maxFactorPrimePrimePrimePrimePrime = 7;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 8;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 9;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 10;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 11;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 12;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrime = 13;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 14;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 15;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 16;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 17;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 18;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 19;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 20;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 21;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 22;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 23;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 24;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 25;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 26;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 27;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 28;\n        long maxFactor",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxFactor = 1;\n   \
    \     long factor = 2;\n        while (factor <= n / 2) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n                break;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxPrime = 2;\n        long maxFactor = 1;\n        long currentPrime\
    \ = 2;\n        while (n > 1) {\n            while (n % currentPrime == 0) {\n\
    \                maxFactor = currentPrime;\n                maxPrime = currentPrime;\n\
    \                n /= currentPrime;\n            }\n            currentPrime++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor < maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = n / factor;\n            } else\
    \ {\n                factor++;\n            }\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (n\
    \ > 1) {\n            while (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n                n /= currentFactor;\n            }\n     \
    \       currentFactor++;\n        }\n        return maxFactor;", "        long\
    \ maxFactor = n;\n        long maxFactor2 = n;\n        long maxFactor3 = n;\n\
    \        long maxFactor4 = n;\n        long maxFactor5 = n;\n        long maxFactor6\
    \ = n;\n        long maxFactor7 = n;\n        long maxFactor8 = n;\n        long\
    \ maxFactor9 = n;\n        long maxFactor10 = n;\n        long maxFactor11 = n;\n\
    \        long maxFactor12 = n;\n        long maxFactor13 = n;\n        long maxFactor14\
    \ = n;\n        long maxFactor15 = n;\n        long maxFactor16 = n;\n       \
    \ long maxFactor17 = n;\n        long maxFactor18 = n;\n        long maxFactor19\
    \ = n;\n        long maxFactor20 = n;\n        long maxFactor21 = n;\n       \
    \ long maxFactor22 = n;\n        long maxFactor23 = n;\n        long maxFactor24\
    \ = n;\n        long maxFactor25 = n;\n        long maxFactor26 = n;\n       \
    \ long maxFactor27 = n;\n        long maxFactor28 = n;\n        long maxFactor29\
    \ = n;\n        long maxFactor30 = n;\n        long maxFactor31 = n;\n       \
    \ long maxFactor32 = n;\n        long maxFactor33 = n;\n        long maxFactor34\
    \ = n;\n        long maxFactor35 = n;\n        long maxFactor36 = n;\n       \
    \ long maxFactor37 = n;\n        long maxFactor38 = n;\n        long maxFactor39\
    \ = n;\n        long maxFactor40 = n;\n        long maxFactor41 = n;\n       \
    \ long maxFactor42 = n;\n        long maxFactor43 = n;\n        long maxFactor44\
    \ = n;\n        long maxFactor45 = n;\n        long maxFactor46 = n;\n       \
    \ long maxFactor47 = n;\n        long maxFactor48 = n;\n        long maxFactor49\
    \ = n;\n        long maxFactor50 = n;\n        long maxFactor51 = n;\n       \
    \ long maxFactor52 = n;\n        long maxFactor53 = n;\n        long maxFactor54\
    \ = n;\n        long maxFactor55 = n;\n        long maxFactor56 = n;\n       \
    \ long maxFactor57 = n;\n        long maxFactor58 = n;\n        long maxFactor59\
    \ = n;\n        long maxFactor60 = n;\n        long maxFactor61 = n;\n       \
    \ long maxFactor62 = n;\n        long maxFactor63 = n;\n        long maxFactor64\
    \ = n;\n        long maxFactor65 = n;\n        long maxFactor", "        long\
    \ maxFactor = n;\n        long maxFactorFound = n;\n        long factor = 2;\n\
    \        while (factor < maxFactor) {\n            if (n % factor == 0) {\n  \
    \              maxFactorFound = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactorFound;", "        long maxFactor = 1;\n  \
    \      long maxFactorPrime = 2;\n        long maxFactorPrimePrime = 3;\n     \
    \   long maxFactorPrimePrimePrime = 4;\n        long maxFactorPrimePrimePrimePrime\
    \ = 5;\n        long maxFactorPrimePrimePrimePrime = 6;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 7;\n        long maxFactorPrimePrimePrimePrimePrime = 8;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 9;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 10;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 11;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 12;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 13;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 14;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 15;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 16;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 17;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 18;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 19;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 20;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 21;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 22;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 23;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 24;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 25;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 26;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 27;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 28;\n   \
    \     long maxFactor", "        long factor = 2;\n        while (factor < n) {\n\
    \            if (n % factor == 0) {\n                factor++;\n            }\n\
    \            else {\n                while (n % factor == 0) {\n             \
    \       n /= factor;\n                }\n            }\n        }\n        return\
    \ factor;", "        long maxFactor = n;\n        long factor = 2;\n        while\
    \ (factor < maxFactor) {\n            if (n % factor == 0) {\n               \
    \ maxFactor = n / factor;\n            } else {\n                factor++;\n \
    \           }\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        if (n % factor == 0) {\n                maxFactor = n / factor;\n   \
    \         } else {\n                factor++;\n            }\n        }\n    \
    \    return maxFactor;", "        long factor = 2;\n        while (n > 1) {\n\
    \            while (n % factor == 0) {\n                factor++;\n          \
    \  }\n            n--;\n        }\n        return factor;", "        long largestPrimeFactor\
    \ = n;\n        long factor = 2;\n        while (factor < largestPrimeFactor)\
    \ {\n            if (n % factor == 0) {\n                largestPrimeFactor =\
    \ factor;\n            }\n            factor++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long p = 2;\n        while (p < n) {\n            if (n % p == 0) {\n \
    \               n = n / p;\n            } else {\n                p = p + 1;\n\
    \            }\n        }\n        return n;", "        long maxFactor = n;\n\
    \        long factor = 2;\n        while (factor < maxFactor) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = n / factor;\n            }\
    \ else {\n                factor++;\n            }\n        }\n        return\
    \ maxFactor;", "        long maxFactor = n;\n        long factor = 2;\n      \
    \  while (factor < maxFactor) {\n            if (n % factor == 0) {\n        \
    \        maxFactor = n / factor;\n            } else {\n                factor++;\n\
    \            }\n        }\n        return maxFactor;", "        long max = 2;\n\
    \        while (n > 1) {\n            long test = 2;\n            while (test\
    \ <= n / 2) {\n                if (n % test == 0) {\n                    n = n\
    \ / test;\n                    break;\n                }\n                test\
    \ += 2;\n            }\n            if (n > 1) {\n                max = test;\n\
    \            }\n        }\n        return max;", "        long maxFactor = 1;\n\
    \        long currentFactor = 2;\n        while (n > 1) {\n            while (n\
    \ % currentFactor == 0) {\n                maxFactor = currentFactor;\n      \
    \          n /= currentFactor;\n            }\n            currentFactor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor <= maxFactor) {\n            while (n\
    \ % factor == 0) {\n                maxFactor = factor;\n            }\n     \
    \       factor++;\n        }\n        return maxFactor;", "        long max =\
    \ 2;\n        long p = 2;\n        while (p < n) {\n            if (n % p == 0)\
    \ {\n                max = p;\n            }\n            p++;\n        }\n  \
    \      return max;", "        long largestPrimeFactor = n;\n        long i = 2;\n\
    \        while (largestPrimeFactor % i == 0) {\n            largestPrimeFactor\
    \ /= i;\n            ++i;\n        }\n        return largestPrimeFactor;", " \
    \       long largestPrimeFactor = n;\n        long largestPrimeFactorFactor =\
    \ 1;\n        long largestPrimeFactorFactorFactor = 2;\n        long largestPrimeFactorFactorFactorFactor\
    \ = 3;\n        long largestPrimeFactorFactorFactorFactorFactor = 4;\n       \
    \ long largestPrimeFactorFactorFactorFactorFactorFactor = 5;\n        long largestPrimeFactorFactorFactorFactorFactorFactor\
    \ = 6;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactor =\
    \ 7;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactor = 8;\n\
    \        long largestPrimeFactorFactorFactorFactorFactorFactorFactor = 9;\n  \
    \      long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor = 10;\n\
    \        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor = 11;\n\
    \        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor = 12;\n\
    \        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 13;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 14;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 15;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 16;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 17;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 18;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 19;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 20;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 21;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 22;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 23;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 24;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 25;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 26;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 27;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 28;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 29;\n        long largestPrimeFactorFactorFactorFactorFactor", "        long\
    \ maxFactor = 1;\n        long factor = 2;\n        while (factor < n) {\n   \
    \         if (n % factor == 0) {\n                maxFactor = factor;\n      \
    \      }\n            factor++;\n        }\n        return maxFactor;", "    \
    \    long largestPrimeFactor = n;\n        long largestPrimeFactorOf2 = 2;\n \
    \       while (largestPrimeFactorOf2 < n) {\n            largestPrimeFactorOf2\
    \ = largestPrimeFactorOf2 * largestPrimeFactorOf2;\n        }\n        long largestPrimeFactorOf3\
    \ = largestPrimeFactorOf2 * largestPrimeFactorOf2;\n        while (largestPrimeFactorOf3\
    \ < n) {\n            largestPrimeFactorOf3 = largestPrimeFactorOf3 * largestPrimeFactorOf3;\n\
    \        }\n        long largestPrimeFactorOf5 = largestPrimeFactorOf3 * largestPrimeFactorOf3;\n\
    \        while (largestPrimeFactorOf5 < n) {\n            largestPrimeFactorOf5\
    \ = largestPrimeFactorOf5 * largestPrimeFactorOf5;\n        }\n        long largestPrimeFactorOf7\
    \ = largestPrimeFactorOf5 * largestPrimeFactorOf5;\n        while (largestPrimeFactorOf7\
    \ < n) {\n            largestPrimeFactorOf7 = largestPrimeFactorOf7 * largestPrimeFactorOf7;\n\
    \        }\n        long largestPrimeFactorOf11 = largestPrimeFactorOf7 * largestPrimeFactorOf7;\n\
    \        while (largestPrimeFactorOf11 < n) {\n            largestPrimeFactorOf11\
    \ = largestPrimeFactorOf11 * largestPrimeFactorOf11;\n        }\n        long\
    \ largestPrimeFactorOf13 = largestPrimeFactorOf11 * largestPrimeFactorOf11;\n\
    \        while (largestPrimeFactorOf13 < n) {\n            largestPrimeFactorOf13\
    \ = largestPrimeFactorOf13 * largestPrimeFactorOf13;\n        }\n        long\
    \ largestPrimeFactorOf17 = largestPrimeFactorOf13 * largestPrimeFactorOf13;\n\
    \        while (largestPrimeFactorOf17 < n) {\n            largestPrimeFactorOf17\
    \ = largestPrimeFactorOf17 * largestPrimeFactorOf17;\n        }\n        long\
    \ largestPrimeFactorOf19 = largestPrimeFactorOf17 * largestPrimeFactorOf17;\n\
    \        while (largestPrimeFactorOf19 < n) {\n            largestPrimeFactorOf19\
    \ = largestPrimeFactorOf19 * largestPrimeFactorOf19;\n        }\n        long\
    \ largestPrimeFactorOf23 = largestPrimeFactorOf19 * largestPri", "        long\
    \ maxFactor = n;\n        long maxFactorFound = n;\n        long factor = 2;\n\
    \        while (factor <= maxFactor) {\n            if (n % factor == 0) {\n \
    \               maxFactorFound = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactorFound;", "        long max = 2;\n        long\
    \ factor = 2;\n        while (n > 1) {\n            if (n % factor == 0) {\n \
    \               max = factor;\n            }\n            factor++;\n        \
    \    n /= factor;\n        }\n        return max;", "        long p = 2;\n   \
    \     while (p < n) {\n            if (n % p == 0) return p;\n            p +=\
    \ 2;\n        }\n        return n;", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor <= maxFactor) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = n / factor;\n            } else {\n   \
    \             factor++;\n            }\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <=\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long p = 2;\n        while (p < n) {\n            if (n % p == 0) {\n \
    \               n = n / p;\n            } else {\n                p = p + 1;\n\
    \            }\n        }\n        return n;", "        long largestPrimeFactor\
    \ = 1;\n        long currentPrime = 2;\n        while (n > 1) {\n            long\
    \ nextPrime = currentPrime + 1;\n            while (nextPrime < n) {\n       \
    \         if (n % nextPrime == 0) {\n                    largestPrimeFactor =\
    \ nextPrime;\n                    break;\n                }\n                nextPrime++;\n\
    \            }\n            currentPrime = nextPrime;\n            n--;\n    \
    \    }\n        return largestPrimeFactor;", "        long maxFactor = n;\n  \
    \      long maxFactorPrime = 2;\n        while (maxFactorPrime < maxFactor) {\n\
    \            long testFactor = maxFactorPrime;\n            long testFactorPrime\
    \ = 2;\n            while (testFactorPrime < testFactor) {\n                if\
    \ (n % testFactor == 0) {\n                    maxFactorPrime = testFactorPrime;\n\
    \                    break;\n                }\n                testFactorPrime++;\n\
    \            }\n            maxFactor = testFactor;\n        }\n        return\
    \ maxFactor;", "        long largestPrimeFactor = n;\n        long maxFactor =\
    \ n;\n        long currentFactor = 2;\n        bool isPrime = true;\n        while\
    \ (isPrime) {\n            isPrime = false;\n            while (currentFactor\
    \ <= maxFactor) {\n                if (n % currentFactor == 0) {\n           \
    \         isPrime = true;\n                    break;\n                }\n   \
    \             currentFactor++;\n            }\n            if (isPrime) {\n  \
    \              largestPrimeFactor = currentFactor;\n                maxFactor\
    \ = currentFactor + 1;\n            }\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = 1;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            if (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n            }\n            factor++;\n            while (n % factor\
    \ == 0) {\n                n /= factor;\n            }\n        }\n        return\
    \ largestPrimeFactor;", "        long max = 2;\n        long p = 2;\n        while\
    \ (p < n) {\n            if (n % p == 0) {\n                max = p;\n       \
    \     }\n            p++;\n        }\n        return max;", "        long maxFactor\
    \ = 2;\n        long currentFactor = 2;\n        while (currentFactor <= n) {\n\
    \            if (n % currentFactor == 0) {\n                while (n % currentFactor\
    \ == 0) {\n                    n /= currentFactor;\n                }\n      \
    \          if (n > maxFactor) {\n                    maxFactor = n;\n        \
    \        }\n            }\n            currentFactor++;\n        }\n        return\
    \ maxFactor;", "        long maxFactor = n;\n        long maxFactorPrime = 2;\n\
    \        long factor = 2;\n        while (factor <= maxFactor) {\n           \
    \ if (n % factor == 0) {\n                long primeFactor = factor;\n       \
    \         while (primeFactor <= maxFactorPrime) {\n                    if (n %\
    \ primeFactor == 0) {\n                        maxFactorPrime = primeFactor;\n\
    \                        break;\n                    }\n                    primeFactor++;\n\
    \                }\n                if (primeFactor > maxFactorPrime) {\n    \
    \                maxFactorPrime = primeFactor;\n                }\n          \
    \  }\n            factor++;\n        }\n        return maxFactorPrime;", "   \
    \     long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n        }\n \
    \       return maxFactor;", "        long maxPrime = 2;\n        long maxFactor\
    \ = 1;\n        long currentPrime = 2;\n        long currentFactor = 1;\n    \
    \    long currentFactor2 = 2;\n        long currentFactor3 = 1;\n        long\
    \ currentFactor4 = 1;\n        long currentFactor5 = 1;\n        long currentFactor6\
    \ = 1;\n        long currentFactor7 = 1;\n        long currentFactor8 = 1;\n \
    \       long currentFactor9 = 1;\n        long currentFactor10 = 1;\n        long\
    \ currentFactor11 = 1;\n        long currentFactor12 = 1;\n        long currentFactor13\
    \ = 1;\n        long currentFactor14 = 1;\n        long currentFactor15 = 1;\n\
    \        long currentFactor16 = 1;\n        long currentFactor17 = 1;\n      \
    \  long currentFactor18 = 1;\n        long currentFactor19 = 1;\n        long\
    \ currentFactor20 = 1;\n        long currentFactor21 = 1;\n        long currentFactor22\
    \ = 1;\n        long currentFactor23 = 1;\n        long currentFactor24 = 1;\n\
    \        long currentFactor25 = 1;\n        long currentFactor26 = 1;\n      \
    \  long currentFactor27 = 1;\n        long currentFactor28 = 1;\n        long\
    \ currentFactor29 = 1;\n        long currentFactor30 = 1;\n        long currentFactor31\
    \ = 1;\n        long currentFactor32 = 1;\n        long currentFactor33 = 1;\n\
    \        long currentFactor34 = 1;\n        long currentFactor35 = 1;\n      \
    \  long currentFactor36 = 1;\n        long currentFactor37 = 1;\n        long\
    \ currentFactor38 = 1;\n        long currentFactor39 = 1;\n        long currentFactor40\
    \ = 1;\n        long currentFactor41 = 1;\n        long currentFactor42 = 1;\n\
    \        long currentFactor43 = 1;\n        long currentFactor44 = 1;\n      \
    \  long currentFactor45 = 1;\n        long currentFactor46 = 1;\n        long\
    \ currentFactor47 = 1;\n        long currentFactor48 = 1;\n        long currentFactor49\
    \ = 1;\n        long currentFactor50 = 1;\n        long currentFactor51 = 1;\n\
    \        long currentFactor52 = 1;\n        long currentFactor53 = 1;\n      \
    \  long currentFactor54 = 1;\n        long currentFactor55 = 1;\n        long\
    \ currentFactor56 = 1;\n        long currentFactor57 = 1;\n        long currentFactor58\
    \ = 1;\n        long currentFactor59 = 1;\n        long currentFactor60 = 1;\n\
    \        long currentFactor61 = 1;\n        long currentFactor62 = 1;\n      \
    \  long currentFactor63 = 1;\n        long currentFactor64 = 1;\n        long\
    \ currentFactor65 = 1;\n        long currentFactor66 = 1;\n        long currentFactor67\
    \ = 1;\n        long currentFactor68 = 1;\n        long currentFactor69 = 1;\n\
    \        long currentFactor70 = 1;", "        long largestPrimeFactor = n;\n \
    \       long factor = 2;\n        while (factor <= largestPrimeFactor) {\n   \
    \         if (n % factor == 0) {\n                largestPrimeFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxFactor = 1;\n   \
    \     long factor = 2;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                maxFactor = factor;\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long factor = 1;\n      \
    \  while (n > 1) {\n            if (n % factor == 0) {\n                factor++;\n\
    \            }\n            n /= factor;\n        }\n        return factor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxPrime = 2;\n    \
    \    long maxFactor = 1;\n        long factor = 2;\n        while (factor <= n\
    \ / 2) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        while (maxFactor < n)\
    \ {\n            if (n % maxFactor == 0) {\n                maxPrime = maxFactor;\n\
    \            }\n            maxFactor++;\n        }\n        return maxPrime;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            }\n            else {\n                factor++;\n\
    \            }\n        }\n        return maxFactor;", "        long max = 2;\n\
    \        long m = n;\n        while (m % 2 == 0) {\n            m /= 2;\n    \
    \        max++;\n        }\n        while (m % 3 == 0) {\n            m /= 3;\n\
    \            max++;\n        }\n        while (m % 5 == 0) {\n            m /=\
    \ 5;\n            max++;\n        }\n        while (m % 7 == 0) {\n          \
    \  m /= 7;\n            max++;\n        }\n        while (m % 11 == 0) {\n   \
    \         m /= 11;\n            max++;\n        }\n        while (m % 13 == 0)\
    \ {\n            m /= 13;\n            max++;\n        }\n        while (m % 17\
    \ == 0) {\n            m /= 17;\n            max++;\n        }\n        while\
    \ (m % 19 == 0) {\n            m /= 19;\n            max++;\n        }\n     \
    \   while (m % 23 == 0) {\n            m /= 23;\n            max++;\n        }\n\
    \        while (m % 29 == 0) {\n            m /= 29;\n            max++;\n   \
    \     }\n        while (m % 31 == 0) {\n            m /= 31;\n            max++;\n\
    \        }\n        while (m % 37 == 0) {\n            m /= 37;\n            max++;\n\
    \        }\n        while (m % 41 == 0) {\n            m /= 41;\n            max++;\n\
    \        }\n        while (m % 43 == 0) {\n            m /= 43;\n            max++;\n\
    \        }\n        while (m % 47 == 0) {\n            m /= 47;\n            max++;\n\
    \        }\n        while (m % 53 == 0) {\n            m /= 53;\n            max++;\n\
    \        }\n        while (m % 59 == 0) {\n            m /= 59;\n            max++;\n\
    \        }\n        while (m % 61 == 0) {\n            m /= 61;\n            max++;\n\
    \        }\n        while (m % 67 == 0) {\n            m /= 67;\n            max++;\n\
    \        }\n        while (m % 71 == 0) {\n            m /= 71;\n            max++;\n\
    \        }\n        while (m % 73 == 0) {\n            m /= 73;\n            max++;\n\
    \        }\n        while (m % 79 == 0) {\n            m /= 79;\n            max++;\n\
    \        }\n        while (m % 83 == 0) {\n            m /= 83;\n            max++;\n\
    \        }\n        while (m % 89 == 0) {\n            m /= 89;\n            max++;\n\
    \        }\n        while (m % 97 == 0) {\n            m /= 97;\n            max++;\n\
    \        }\n        while (m % 101 == 0) {\n            m /= 101;\n          \
    \  max++;\n        }\n        while (m % 103 == 0) {\n            m /= 103;\n\
    \            max++;\n        }\n        while (m % 107 == 0) {\n            m\
    \ /= 107;\n            max++;\n        }\n        while (m % 111 == 0) {\n   \
    \         m /= 111;\n            max++;\n        }\n        while (m % 113 ==\
    \ 0) {\n            m /= 113;\n", "        long factor = 2;\n        while (n\
    \ > 1) {\n            if (n % factor == 0) {\n                factor++;\n    \
    \        }\n            n /= factor;\n        }\n        return factor;", "  \
    \      long maxFactor = n;\n        long maxFactorPrime = 2;\n        while (maxFactorPrime\
    \ * maxFactorPrime <= maxFactor) {\n            maxFactorPrime++;\n        }\n\
    \        while (maxFactorPrime > 2) {\n            if (n % maxFactorPrime == 0)\
    \ {\n                maxFactor = n / maxFactorPrime;\n                break;\n\
    \            }\n            maxFactorPrime--;\n        }\n        return maxFactor;",
  "        long maxPrime = 2;\n        long maxFactor = 1;\n        while (n > 1)\
    \ {\n            if (n % maxPrime == 0) {\n                maxFactor = maxPrime;\n\
    \            }\n            maxPrime++;\n            n /= maxPrime;\n        }\n\
    \        return maxFactor;", "        long maxFactor = n;\n        long maxFactorFound\
    \ = 1;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        while (n % factor == 0) {\n                maxFactorFound = factor;\n\
    \                n /= factor;\n            }\n            factor++;\n        }\n\
    \        return maxFactorFound;", "        long max = 2;\n        long maxFactor\
    \ = 2;\n        long currentFactor = 2;\n        while (n > 1) {\n           \
    \ currentFactor = n % maxFactor;\n            if (currentFactor == 0) {\n    \
    \            maxFactor++;\n            }\n            else {\n               \
    \ max = Math.Max(max, currentFactor);\n            }\n            n = n / maxFactor;\n\
    \        }\n        return max;", "        long maxFactor = n;\n        long maxFactorFound\
    \ = n;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        if (n % factor == 0) {\n                maxFactorFound = factor;\n  \
    \          }\n            factor++;\n        }\n        return maxFactorFound;",
  "        long factor = 2;\n        while (n > 1) {\n            if (n % factor ==\
    \ 0) {\n                n = n / factor;\n                factor++;\n         \
    \   }\n            else {\n                factor++;\n            }\n        }\n\
    \        return factor;", "        long maxFactor = n;\n        long factor =\
    \ 2;\n        while (factor < maxFactor) {\n            if (n % factor == 0) {\n\
    \                maxFactor = n / factor;\n            } else {\n             \
    \   factor++;\n            }\n        }\n        return maxFactor;", "       \
    \ long factor = 2;\n        while (n > 1) {\n            if (n % factor == 0)\
    \ {\n                n = n / factor;\n                factor++;\n            }\n\
    \            else {\n                factor++;\n            }\n        }\n   \
    \     return factor;", "        long p = 2;\n        while (p < n) {\n       \
    \     if (n % p == 0) {\n                n = n / p;\n            } else {\n  \
    \              p = p * 2;\n            }\n        }\n        return n;", "   \
    \     long largestPrimeFactor = 1;\n        long currentPrime = 2;\n        while\
    \ (n > 1) {\n            long testPrime = currentPrime;\n            while (n\
    \ % testPrime == 0) {\n                n /= testPrime;\n            }\n      \
    \      if (n > 1) {\n                largestPrimeFactor = testPrime;\n       \
    \     }\n            currentPrime++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxPrime = 2;\n    \
    \    long maxFactor = 1;\n        while (n > 1) {\n            long factor = 2;\n\
    \            while (factor < n) {\n                if (n % factor == 0) {\n  \
    \                  factor++;\n                    break;\n                }\n\
    \                factor++;\n            }\n            if (factor > maxFactor)\
    \ {\n                maxFactor = factor;\n                maxPrime = n;\n    \
    \        }\n            n--;\n        }\n        return maxPrime;", "        long\
    \ maxFactor = 1;\n        long factor = 2;\n        while (factor <= n / 2) {\n\
    \            if (n % factor == 0) {\n                maxFactor = factor;\n   \
    \             break;\n            }\n            factor++;\n        }\n      \
    \  return maxFactor;", "        long maxFactor = n;\n        long factor = 2;\n\
    \        while (factor < maxFactor) {\n            if (n % factor == 0) {\n  \
    \              maxFactor = n / factor;\n            }\n            else {\n  \
    \              factor++;\n            }\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (n\
    \ > 1) {\n            while (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n                currentFactor++;\n            }\n        \
    \    n--;\n        }\n        return maxFactor;", "        long maxFactor = 1;\n\
    \        long currentFactor = 2;\n        while (currentFactor <= n) {\n     \
    \       if (n % currentFactor == 0) {\n                maxFactor = currentFactor;\n\
    \            }\n            currentFactor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long maxFactorPrime = 2;\n        long maxFactorPrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 2;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 2;\n     \
    \   long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 2;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime =\
    \ 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePri",
  "        long maxPrime = 2;\n        long maxFactor = 1;\n        while (n > 1)\
    \ {\n            long testPrime = 2;\n            long testFactor = 1;\n     \
    \       while (testPrime * testPrime <= n) {\n                if (n % testPrime\
    \ == 0) {\n                    testFactor *= testPrime;\n                    n\
    \ /= testPrime;\n                }\n                testPrime++;\n           \
    \ }\n            if (testFactor > maxFactor) {\n                maxFactor = testFactor;\n\
    \                maxPrime = testPrime;\n            }\n        }\n        return\
    \ maxPrime;", "        long maxFactor = 2;\n        long currentFactor = 2;\n\
    \        while (n > 1) {\n            while (n % currentFactor == 0) {\n     \
    \           currentFactor++;\n            }\n            if (currentFactor > maxFactor)\
    \ {\n                maxFactor = currentFactor;\n            }\n            n\
    \ /= currentFactor;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        if (n % factor == 0) {\n                maxFactor = n / factor;\n   \
    \         } else {\n                factor++;\n            }\n        }\n    \
    \    return maxFactor;", "        long maxFactor = n;\n        long factor = 2;\n\
    \        while (factor <= maxFactor) {\n            if (n % factor == 0) {\n \
    \               maxFactor = n / factor;\n            } else {\n              \
    \  factor++;\n            }\n        }\n        return maxFactor;", "        long\
    \ p = 2;\n        long q = 3;\n        long r = 2;\n        long s = 3;\n    \
    \    long t = 2;\n        long u = 3;\n        long v = 3;\n        long w = 3;\n\
    \        long x = 2;\n        long y = 2;\n        long z = 2;\n        long a\
    \ = 2;\n        long b = 2;\n        long c = 2;\n        long d = 2;\n      \
    \  long e = 2;\n        long f = 2;\n        long g = 2;\n        long h = 2;\n\
    \        long i = 0;\n        long j = 0;\n        long k = 0;\n        long l\
    \ = 0;\n        long m = 0;\n        long n = 0;\n        long o = 0;\n      \
    \  long p = 0;\n        long q = 0;\n        long r = 0;\n        long s = 0;\n\
    \        long t = 0;\n        long u = 0;\n        long v = 0;\n        long w\
    \ = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 0;\n        long d = 0;\n\
    \        long e = 0;\n        long f = 0;\n        long g = 0;\n        long h\
    \ = 0;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n      \
    \  long l = 0;\n        long m = 0;\n        long n = 0;\n        long o = 0;\n\
    \        long p = 0;\n        long q = 0;\n        long r = 0;\n        long s\
    \ = 0;\n        long t = 0;\n        long u = 0;\n        long v = 0;\n      \
    \  long w = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n\
    \        long a = 0;\n        long b = 0;\n        long c = 0;\n        long d\
    \ = 0;\n        long e = 0;\n        long f = 0;\n        long g = 0;\n      \
    \  long h = 0;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n\
    \        long l = 0;\n        long m = 0;\n        long n = 0;\n        long o\
    \ = 0;\n        long p = 0;\n        long q = 0;\n        long r = 0;\n      \
    \  long s = 0;\n        long t = 0;\n        long u = 0;\n        long v = 0;\n\
    \        long w = 0;\n        long x = 0;\n        long y = 0;\n        long z\
    \ = 0;\n        long a = 0;\n        long b = 0;\n        long c = 0;\n      \
    \  long d = 0;\n        long e = 0;\n        long f = 0;\n        long g = 0;\n\
    \        long h = 0;\n        long i = 0;\n        long j = 0;\n        long k\
    \ = 0;\n        long l = 0;\n        long m = 0;\n        long n = 0;\n      \
    \  long o = 0;\n        long ", "        long p = 2;\n        while (p < n) {\n\
    \            if (n % p == 0) {\n                long q = n / p;\n            \
    \    if (q > p) {\n                    p = q;\n                }\n           \
    \ }\n            else {\n                p++;\n            }\n        }\n    \
    \    return p;", "        long p = 2;\n        while (p < n) {\n            if\
    \ (n % p == 0) return p;\n            p += 2;\n        }\n        return n;",
  "        long factor = 1;\n        while (n > 1) {\n            if (n % factor ==\
    \ 0) {\n                factor++;\n                n /= factor;\n            }\n\
    \            else {\n                factor--;\n                n /= factor;\n\
    \            }\n        }\n        return factor;", "        long largestPrimeFactor\
    \ = n;\n        long primeFactor = 2;\n        while (primeFactor <= largestPrimeFactor)\
    \ {\n            while (n % primeFactor == 0) {\n                largestPrimeFactor\
    \ = primeFactor;\n            }\n            primeFactor++;\n        }\n     \
    \   return largestPrimeFactor;", "        long maxFactor = n;\n        long factor\
    \ = 2;\n        while (factor < maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactor = n / factor;\n            } else {\n         \
    \       factor++;\n            }\n        }\n        return maxFactor;", "   \
    \     long maxPrime = 2;\n        long maxFactor = 1;\n        long currentFactor\
    \ = 2;\n        while (n > 1) {\n            while (n % currentFactor == 0) {\n\
    \                maxFactor = currentFactor;\n                maxPrime = n;\n \
    \               n /= currentFactor;\n            }\n            currentFactor++;\n\
    \        }\n        return maxPrime;", "        long max = 2;\n        long p\
    \ = 2;\n        while (p < n) {\n            if (n % p == 0) {\n             \
    \   max = p;\n            }\n            p++;\n        }\n        return max;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            while (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = 1;\n        long largestPrimeFactorFactor = 2;\n\
    \        long largestPrimeFactorFactorFactor = 3;\n        long largestPrimeFactorFactorFactorFactor\
    \ = 4;\n        long largestPrimeFactorFactorFactorFactorFactor = 5;\n       \
    \ long largestPrimeFactorFactorFactorFactorFactor = 6;\n        long largestPrimeFactorFactorFactorFactorFactor\
    \ = 7;\n        long largestPrimeFactorFactorFactorFactorFactor = 8;\n       \
    \ long largestPrimeFactorFactorFactorFactorFactorFactor = 9;\n        long largestPrimeFactorFactorFactorFactorFactorFactor\
    \ = 10;\n        long largestPrimeFactorFactorFactorFactorFactorFactor = 11;\n\
    \        long largestPrimeFactorFactorFactorFactorFactorFactor = 12;\n       \
    \ long largestPrimeFactorFactorFactorFactorFactorFactor = 13;\n        long largestPrimeFactorFactorFactorFactorFactorFactor\
    \ = 14;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactor =\
    \ 15;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactor = 16;\n\
    \        long largestPrimeFactorFactorFactorFactorFactorFactorFactor = 17;\n \
    \       long largestPrimeFactorFactorFactorFactorFactorFactorFactor = 18;\n  \
    \      long largestPrimeFactorFactorFactorFactorFactorFactorFactor = 19;\n   \
    \     long largestPrimeFactorFactorFactorFactorFactorFactorFactor = 20;\n    \
    \    long largestPrimeFactorFactorFactorFactorFactorFactorFactor = 21;\n     \
    \   long largestPrimeFactorFactorFactorFactorFactorFactorFactor = 22;\n      \
    \  long largestPrimeFactorFactorFactorFactorFactorFactorFactor = 23;\n       \
    \ long largestPrimeFactorFactorFactorFactorFactorFactorFactor = 24;\n        long\
    \ largestPrimeFactorFactorFactorFactorFactorFactorFactor = 25;\n        long largestPrimeFactorFactorFactorFactorFactorFactor\
    \ = 26;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactor =\
    \ 27;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactor = 28;\n\
    \        long largestPrimeFactorFactorFactorFactorFactorFactor = 29;\n       \
    \ long largestPrimeFactorFactorFactorFactorFactorFactor = 30;\n        long largestPrimeFactorFactorFactorFactorFactorFactor\
    \ = 31;\n        long largestPrimeFactorFactorFactorFactorFactorFactor = 32;\n\
    \        long largestPrimeFactorFactorFactorFactorFactorFactor = 33;\n       \
    \ long largestPrimeFactorFactorFactorFactorFactorFactor = 34;\n        long largestPrimeFactorFactorFactorFactorFactorFactor\
    \ = 35;", "        long maxFactor = n;\n        long factor = 2;\n        while\
    \ (factor < maxFactor) {\n            if (n % factor == 0) {\n               \
    \ maxFactor = n / factor;\n            } else {\n                factor++;\n \
    \           }\n        }\n        return maxFactor;", "        long factor = 2;\n\
    \        while (n > 1) {\n            if (n % factor == 0) {\n               \
    \ n = n / factor;\n                factor++;\n            }\n            else\
    \ {\n                factor++;\n            }\n        }\n        return factor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            while (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long max = 2;\n        long maxFactor = 2;\n        long currentFactor\
    \ = 2;\n        while (n > 1) {\n            currentFactor = n % maxFactor;\n\
    \            if (currentFactor == 0) {\n                maxFactor = max;\n   \
    \             max = currentFactor;\n            } else {\n                maxFactor\
    \ = currentFactor;\n                max = currentFactor;\n            }\n    \
    \        n = n / maxFactor;\n        }\n        return maxFactor;", "        long\
    \ maxFactor = 1;\n        long maxFactorPrime = 1;\n        long maxFactorPrimePrime\
    \ = 1;\n        long maxFactorPrimePrimePrime = 1;\n        long maxFactorPrimePrimePrimePrime\
    \ = 1;\n        long maxFactorPrimePrimePrimePrimePrime = 1;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 1;\n     \
    \   long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 1;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 1;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime =\
    \ 1;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorPrimePrimePrimePrimePrime", "        long max =\
    \ 2;\n        long i = 2;\n        while (i <= n / 2) {\n            if (n % i\
    \ == 0) {\n                max = i;\n            }\n            i += 2;\n    \
    \    }\n        return max;", "        long factor = 2;\n        while (n > 1)\
    \ {\n            if (n % factor == 0) {\n                factor++;\n         \
    \   }\n            n /= factor;\n        }\n        return factor;", "       \
    \ long p = 2;\n        while (p < n) {\n            if (n % p == 0) {\n      \
    \          n = n / p;\n            } else {\n                p++;\n          \
    \  }\n        }\n        return n;", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor < maxFactor) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long max = 2;\n        long factor\
    \ = 2;\n        while (n > 1) {\n            while (n % factor == 0) {\n     \
    \           max = factor;\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return max;", "        long maxFactor =\
    \ 1;\n        long maxFactorPrime = 2;\n        long factor = 3;\n        while\
    \ (factor <= n) {\n            while (n % factor == 0) {\n                maxFactor\
    \ = factor;\n                maxFactorPrime = factor;\n                while (n\
    \ % factor == 0) {\n                    maxFactor = factor;\n                \
    \    maxFactorPrime = factor;\n                    while (n % factor == 0) {\n\
    \                        maxFactor = factor;\n                        maxFactorPrime\
    \ = factor;\n                        while (n % factor == 0) {\n             \
    \               maxFactor = factor;\n                            maxFactorPrime\
    \ = factor;\n                            while (n % factor == 0) {\n         \
    \                       maxFactor = factor;\n                                maxFactorPrime\
    \ = factor;\n                                while (n % factor == 0) {\n     \
    \                               maxFactor = factor;\n                        \
    \            maxFactorPrime = factor;\n                                    while\
    \ (n % factor == 0) {\n                                        maxFactor = factor;\n\
    \                                        maxFactorPrime = factor;\n          \
    \                              while (n % factor == 0) {\n                   \
    \                         maxFactor = factor;\n                              \
    \              maxFactorPrime = factor;\n                                    \
    \        while (n % factor == 0) {\n                                         \
    \       maxFactor = factor;\n                                                maxFactorPrime\
    \ = factor;\n                                                while (n % factor\
    \ == 0) {\n                                                    maxFactor = factor;\n\
    \                                                    maxFactorPrime = factor;\n\
    \                                                    while (n % factor == 0) {\n\
    \                                                        maxFactor = factor;\n\
    \                                                        maxFactorPrime = factor;\n\
    \                                                        while (n % factor ==\
    \ 0) {\n                                                            maxFactor\
    \ = factor;\n                                                            maxFactorPrime\
    \ = factor;\n                                                            while\
    \ (n % factor == 0) {\n                                                      \
    \          maxFactor = factor;\n                                             \
    \                   maxFactorPrime = factor;\n                               \
    \                                 while (n % factor == 0) {\n                \
    \                                                    maxFactor = factor;\n   \
    \                                                                 maxFactorPrime\
    \ = factor;\n                                                                \
    \    while (n % factor == 0) {\n                                             \
    \                           maxFactor = factor;\n                            \
    \                                            maxFactorPrime = factor;\n      \
    \                                                                  while (n %\
    \ factor == 0) {\n                                                           \
    \                 maxFactor = factor;\n                                      \
    \                                      maxFactorPrime = factor;\n            \
    \                                                                while (n % factor\
    \ == 0) {\n                                                                  \
    \              maxFactor = factor;\n                                         \
    \                                       maxFactorPrime = factor;\n           \
    \                                                                     while (n\
    \ % factor == 0) {\n                                                         \
    \                           maxFactor = factor;\n                            \
    \                                                        maxFactorPrime = factor;\n\
    \                                                                            \
    \        while (n % factor == 0) {\n                                         \
    \                                               maxFactor = factor;\n        \
    \                                                                            \
    \    maxFactorPrime = factor;\n                                              \
    \                                          while (n % factor == 0) {\n       \
    \                                                                            \
    \         maxFactor = factor;\n                                              \
    \                                              maxFactorPrime = factor;\n    \
    \                                                                            \
    \            while (n % factor == 0) {\n                                     \
    \                                                           ", "        long maxFactor\
    \ = 1;\n        long currentFactor = 2;\n        while (currentFactor <= n) {\n\
    \            if (n % currentFactor == 0) {\n                maxFactor = currentFactor;\n\
    \            }\n            currentFactor++;\n        }\n        return maxFactor;",
  "        long maxPrime = 2;\n        long maxFactor = 1;\n        long prime = 2;\n\
    \        while (n > 1) {\n            while (n % prime == 0) {\n             \
    \   maxFactor = prime;\n                maxPrime = prime;\n                prime++;\n\
    \            }\n            n--;\n        }\n        return maxPrime;", "    \
    \    long maxPrime = 2;\n        long maxFactor = 1;\n        while (n > 1) {\n\
    \            long testPrime = 2;\n            while (testPrime * testPrime <=\
    \ n) {\n                if (n % testPrime == 0) {\n                    long testFactor\
    \ = testPrime;\n                    while (n % testFactor == 0) {\n          \
    \              n /= testFactor;\n                        maxFactor = testFactor;\n\
    \                    }\n                    break;\n                }\n      \
    \          testPrime++;\n            }\n            if (n > 1) {\n           \
    \     if (n % maxPrime == 0) {\n                    long testFactor = maxPrime;\n\
    \                    while (n % testFactor == 0) {\n                        n\
    \ /= testFactor;\n                        maxFactor = testFactor;\n          \
    \          }\n                    break;\n                }\n            }\n \
    \           maxPrime = testPrime;\n            maxFactor = testFactor;\n     \
    \   }\n        return maxFactor;", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor <= maxFactor) {\n            while (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = 1;\n       \
    \ long factor = 2;\n        while (factor < n) {\n            if (n % factor ==\
    \ 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long factor = 2;\n        while\
    \ (factor < n) {\n            if (n % factor == 0) {\n                factor++;\n\
    \            }\n            else {\n                while (n % factor == 0) {\n\
    \                    factor++;\n                }\n                break;\n  \
    \          }\n        }\n        return factor;", "        long maxFactor = 1;\n\
    \        long factor = 2;\n        while (factor < n) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor < maxFactor) {\n            while (n\
    \ % factor == 0) {\n                maxFactor = factor;\n            }\n     \
    \       factor++;\n        }\n        return maxFactor;"]
stop_tokens:
- "\n    }\n"
