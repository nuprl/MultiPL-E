name: HumanEval_59_largest_prime_factor
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not\
  \ a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
  \    // 2\n    public static long LargestPrimeFactor(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
  \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
  \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
  \ == (29L));\n    }\n\n}\n"
completions: ["        long factor = 2;\n        while (factor < n) {\n          \
    \  if (n % factor == 0) {\n                factor++;\n            }\n        \
    \    else {\n                while (n % factor == 0) {\n                    factor++;\n\
    \                }\n                break;\n            }\n        }\n       \
    \ return factor;", "        long maxFactor = n;\n        long maxFactorPrime =\
    \ 2;\n        while (maxFactorPrime * maxFactorPrime <= maxFactor) {\n       \
    \     long newMaxFactor = maxFactorPrime + 1;\n            long newMaxFactorPrime\
    \ = 2;\n            while (newMaxFactorPrime * newMaxFactorPrime <= newMaxFactor)\
    \ {\n                if (n % newMaxFactorPrime == 0) {\n                    maxFactor\
    \ = newMaxFactor;\n                    maxFactorPrime = newMaxFactorPrime;\n \
    \                   break;\n                }\n                newMaxFactorPrime++;\n\
    \            }\n        }\n        return maxFactor;", "        long p = 2;\n\
    \        while (p < n) {\n            if (n % p == 0) {\n                n = n\
    \ / p;\n            } else {\n                p = p + 1;\n            }\n    \
    \    }\n        return n;", "        long maxFactor = 1;\n        long currentFactor\
    \ = 2;\n        while (n > 1) {\n            while (n % currentFactor == 0) {\n\
    \                maxFactor = currentFactor;\n                currentFactor++;\n\
    \            }\n            n/=currentFactor;\n            currentFactor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = 1;\n       \
    \ long maxFactorPrime = 2;\n        long maxFactorPrimePrime = 3;\n        long\
    \ maxFactorPrimePrimePrime = 4;\n        long maxFactorPrimePrimePrimePrime =\
    \ 5;\n        long maxFactorPrimePrimePrimePrime = 6;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 7;\n        long maxFactorPrimePrimePrimePrimePrime = 8;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 9;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 10;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 11;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 12;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 13;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 14;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 15;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 16;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 17;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 18;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 19;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 20;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 21;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 22;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 23;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 24;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 25;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 26;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 27;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 28;\n   \
    \     long maxFactor", "        long factor = 2;\n        while (n > 1) {\n  \
    \          if (n % factor == 0) {\n                n = n / factor;\n         \
    \   } else {\n                factor++;\n            }\n        }\n        return\
    \ factor;", "        long maxFactor = n;\n        long factor = 2;\n        while\
    \ (factor <= maxFactor) {\n            if (n % factor == 0) {\n              \
    \  maxFactor = n / factor;\n            } else {\n                factor++;\n\
    \            }\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor < maxFactor) {\n     \
    \       if (n % factor == 0) {\n                maxFactor = n / factor;\n    \
    \        } else {\n                factor++;\n            }\n        }\n     \
    \   return maxFactor;", "        long maxFactor = n;\n        long maxFactorPrime\
    \ = 1;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        if (n % factor == 0) {\n                long primeFactor = factor;\n\
    \                while (n % primeFactor == 0) {\n                    n /= primeFactor;\n\
    \                    maxFactorPrime = primeFactor;\n                }\n      \
    \      }\n            factor++;\n        }\n        return maxFactorPrime;", " \
    \       long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n        }\n \
    \       return maxFactor;", "        long largestPrimeFactor = n;\n        long\
    \ factor = 2;\n        while (factor <= largestPrimeFactor) {\n            if\
    \ (n % factor == 0) {\n                largestPrimeFactor = factor;\n        \
    \    }\n            factor++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            long testFactor = factor;\n            while (testFactor\
    \ <= maxFactor) {\n                if (n % testFactor == 0) {\n              \
    \      maxFactor = testFactor;\n                    break;\n                }\n\
    \                testFactor++;\n            }\n            factor++;\n       \
    \ }\n        return maxFactor;", "        long maxFactor = n;\n        long maxFactorPrime\
    \ = 2;\n        long maxFactorPrimePrime = 2;\n        long maxFactorPrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 2;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 2;\n     \
    \   long maxFactorPrimePrimePrimePrimePrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n  \
    \      long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n    \
    \    long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n      \
    \  long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePri",
  "        long largestPrimeFactor = 1;\n        long currentPrime = 2;\n        while\
    \ (currentPrime < n) {\n            long currentPrimeFactor = currentPrime;\n\
    \            while (currentPrimeFactor % currentPrime == 0) {\n              \
    \  currentPrimeFactor++;\n            }\n            if (currentPrimeFactor >\
    \ largestPrimeFactor) {\n                largestPrimeFactor = currentPrimeFactor;\n\
    \            }\n            currentPrime++;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = n;\n        long i = 2;\n        while (largestPrimeFactor\
    \ % i == 0) {\n            largestPrimeFactor /= i;\n            i++;\n      \
    \  }\n        return largestPrimeFactor;", "        long factor = 2;\n       \
    \ while (factor < n) {\n            if (n % factor == 0) {\n                factor++;\n\
    \            }\n            else {\n                while (n % factor == 0) {\n\
    \                    factor++;\n                }\n                break;\n  \
    \          }\n        }\n        return factor;", "        long largestPrimeFactor\
    \ = n;\n        long currentPrime = 2;\n        while (currentPrime < largestPrimeFactor)\
    \ {\n            bool isPrime = true;\n            for (int i = 2; i <= Math.Sqrt(currentPrime);\
    \ i++) {\n                if (n % i == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime) {\n                largestPrimeFactor = currentPrime;\n          \
    \  }\n            currentPrime++;\n        }\n        return largestPrimeFactor;",
  "        long factor = 2;\n        while (n > 1) {\n            if (n % factor ==\
    \ 0) {\n                n = n / factor;\n            } else {\n              \
    \  factor++;\n            }\n        }\n        return factor;", "        long\
    \ maxFactor = n;\n        long factor = 2;\n        while (factor < maxFactor)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long max = 2;\n        long cur = 3;\n        while (cur * cur <= n) {\n\
    \            if (n % cur == 0) {\n                long tmp = (long) Math.Sqrt(cur);\n\
    \                while (n % tmp == 0) {\n                    n /= tmp;\n     \
    \           }\n                if (n > max) {\n                    max = n;\n\
    \                }\n            }\n            cur++;\n        }\n        return\
    \ max;"]
stop_tokens:
- "\n    }\n"
