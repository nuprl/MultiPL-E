name: HumanEval_130_tri
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by\
  \ mathematicians in \n    // the last couple centuries. However, what people don't\
  \ know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n\
  \    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
  \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
  \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
  \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
  \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
  \ sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>\
  \ Tri(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
  \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
  \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
  \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
  \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
  \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
  \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
  \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
  \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new\
  \ long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        if (n == 0)\
    \ {\n            result.Add(0);\n            return result;\n        }\n     \
    \   if (n == 1) {\n            result.Add(1);\n            return result;\n  \
    \      }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2));\n        }\n        else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 3 };\n        if (n % 2 == 0) {\n          \
    \  long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c\
    \ = a + b;\n            result.Add(c);\n        }\n        else {\n          \
    \  long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c\
    \ = a + b;\n            result.Add(c);\n            result.Add(a + b);\n     \
    \   }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) {\n            result.Add(0);\n         \
    \   result.Add(1);\n            return result;\n        }\n        if (n == 1)\
    \ {\n            result.Add(1);\n            return result;\n        }\n     \
    \   if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long tri2\
    \ = Tri(n - 2);\n            long tri3 = Tri(n + 1);\n            foreach (long\
    \ i in tri1) {\n                result.Add(i);\n            }\n            foreach\
    \ (long i in tri2) {\n                result.Add(i);\n            }\n        \
    \    foreach (long i in tri3) {\n                result.Add(i);\n            }\n\
    \            return result;\n        }\n        else {\n            long tri1\
    \ = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long tri3 =\
    \ Tri(n + 1);\n            foreach (long i in tri1) {\n                result.Add(i);\n\
    \            }\n            foreach (long i in tri2) {\n                result.Add(i);\n\
    \            }\n            foreach (long i in tri3) {\n                result.Add(i);\n\
    \            }\n            return result;\n        }", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) return result;\n        if (n == 1)\
    \ return new List<long>() { 1 };\n        if (n % 2 == 0) {\n            long\
    \ a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = a +\
    \ b;\n            result.Add(c);\n            return result;\n        }\n    \
    \    long a = Tri(n - 1);\n        long b = Tri(n - 2);\n        long c = a +\
    \ b;\n        result.Add(c);\n        result.Add(a + b);\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(3);\n\
    \            return result;\n        }\n        long a = Tri(n - 1);\n       \
    \ long b = Tri(n - 2);\n        long c = Tri(n - 3) + Tri(n - 1) + Tri(n - 2);\n\
    \        result.AddRange(a);\n        result.Add(b);\n        result.Add(c);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 1) {\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 2) {\n            result.Add(3);\n            return\
    \ result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n        }\n  \
    \      result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            result.Add(1);\n            return result;\n        }\n        List<long>\
    \ tri1 = Tri(n - 1);\n        List<long> tri2 = Tri(n - 2);\n        List<long>\
    \ tri3 = Tri(n - 3);\n        List<long> tri4 = Tri(n - 4);\n        List<long>\
    \ tri5 = Tri(n - 5);\n        List<long> tri6 = Tri(n - 6);\n        List<long>\
    \ tri7 = Tri(n - 7);\n        List<long> tri8 = Tri(n - 8);\n        List<long>\
    \ tri9 = Tri(n - 9);\n        List<long> tri10 = Tri(n - 10);\n        List<long>\
    \ tri11 = Tri(n - 11);\n        List<long> tri12 = Tri(n - 12);\n        List<long>\
    \ tri13 = Tri(n - 13);\n        List<long> tri14 = Tri(n - 14);\n        List<long>\
    \ tri15 = Tri(n - 15);\n        List<long> tri16 = Tri(n - 16);\n        List<long>\
    \ tri17 = Tri(n - 17);\n        List<long> tri18 = Tri(n - 18);\n        List<long>\
    \ tri19 = Tri(n - 19);\n        List<long> tri20 = Tri(n - 20);\n        List<long>\
    \ tri21 = Tri(n - 21);\n        List<long> tri22 = Tri(n - 22);\n        List<long>\
    \ tri23 = Tri(n - 23);\n        List<long> tri24 = Tri(n - 24);\n        List<long>\
    \ tri25 = Tri(n - 25);\n        List<long> tri26 = Tri(n - 26);\n        List<long>\
    \ tri27 = Tri(n - 27);\n        List<long> tri28 = Tri(n - 28);\n        List<long>\
    \ tri29 = Tri(n - 29);\n        List<long> tri30 = Tri(n - 30);\n        List<long>\
    \ tri31 = Tri(n - 31);\n        List<long> tri32 = Tri(n - 32);\n        List<long>\
    \ tri33 = Tri(n - 33);\n        List<long> tri34 = Tri(n - 34);\n        List<long>\
    \ tri35 = Tri(n - 35);\n        List<long> tri36 = Tri(n - 36);\n        List<long>\
    \ tri37 = Tri(n - ", "        List<long> result = new List<long>();\n        if\
    \ (n == 0) return result;\n        if (n == 1) return new List<long>() { 1 };\n\
    \        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = Tri(n + 1);\n            long sum = 0;\n            foreach (var\
    \ item in a) {\n                sum += item;\n            }\n            foreach\
    \ (var item in b) {\n                sum += item;\n            }\n           \
    \ foreach (var item in c) {\n                sum += item;\n            }\n   \
    \         result.Add(sum);\n        } else {\n            long a = Tri(n - 1);\n\
    \            long b = Tri(n - 2);\n            long c = Tri(n + 1);\n        \
    \    long sum = 0;\n            foreach (var item in a) {\n                sum\
    \ += item;\n            }\n            foreach (var item in b) {\n           \
    \     sum += item;\n            }\n            foreach (var item in c) {\n   \
    \             sum += item;\n            }\n            result.Add(sum);\n    \
    \        result.Add(sum);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2));\n        }\n        else {\n         \
    \   result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ {\n            result.Add(0);\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 1) {\n            result.Add(1);\n    \
    \        return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n          \
    \  List<long> tri = Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n            foreach\
    \ (long x in tri) {\n                result.Add(x);\n            }\n        }\
    \ else {\n            List<long> tri = Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \            foreach (long x in tri) {\n                result.Add(x);\n     \
    \       }\n            List<long> tri2 = Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \            foreach (long x in tri2) {\n                result.Add(x);\n    \
    \        }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 1) {\n            result.Add(1);\n         \
    \   return result;\n        }\n        if (n == 2) {\n            result.Add(3);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n\
    \        }\n        result.Add(Tri(n - 1) + Tri(n - 2));\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n == 2) return\
    \ new List<long>() { 1, 2, 3 };\n        if (n % 2 == 0) {\n            List<long>\
    \ left = Tri(n / 2);\n            List<long> right = Tri(n - 1);\n           \
    \ List<long> result = new List<long>();\n            foreach (long x in left)\
    \ result.Add(x);\n            foreach (long x in right) result.Add(x);\n     \
    \       foreach (long x in left) result.Add(x);\n            return result;\n\
    \        } else {\n            List<long> left = Tri(n / 2);\n            List<long>\
    \ right = Tri(n - 1);\n            List<long> result = new List<long>();\n   \
    \         foreach (long x in left) result.Add(x);\n            foreach (long x\
    \ in right) result.Add(x);\n            foreach (long x in left) result.Add(x);\n\
    \            return result;\n        }", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(2);\n            result.Add(1);\n       \
    \     return result;\n        }\n        long a = Tri(n - 1);\n        long b\
    \ = Tri(n - 2);\n        long c = Tri(n - 3);\n        long sum = 0;\n       \
    \ foreach (long x in a) {\n            sum += x;\n        }\n        foreach (long\
    \ x in b) {\n            sum += x;\n        }\n        foreach (long x in c) {\n\
    \            sum += x;\n        }\n        result.Add(sum);\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long> { 1 };\n        if (n % 2 == 0) {\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        } else\
    \ {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3)\
    \ + Tri(n - 4) + Tri(n - 5) + Tri(n - 6));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n            result.Add(Tri(n + 1));\n        } else {\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n  \
    \          result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6));\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n == 2) return new List<long>() { 1, 2, 3 };\n        if\
    \ (n % 2 == 0) {\n            int a = Tri(n / 2);\n            int b = Tri(n /\
    \ 2 + 1);\n            int c = Tri(n / 2 + 2);\n            int d = Tri(n / 2\
    \ + 3);\n            int e = Tri(n / 2 + 4);\n            int f = Tri(n / 2 +\
    \ 5);\n            int g = Tri(n / 2 + 6);\n            int h = Tri(n / 2 + 7);\n\
    \            int i = Tri(n / 2 + 8);\n            int j = Tri(n / 2 + 9);\n  \
    \          int k = Tri(n / 2 + 10);\n            int l = Tri(n / 2 + 11);\n  \
    \          int m = Tri(n / 2 + 12);\n            int n = Tri(n / 2 + 13);\n  \
    \          int o = Tri(n / 2 + 14);\n            int p = Tri(n / 2 + 15);\n  \
    \          int q = Tri(n / 2 + 16);\n            int r = Tri(n / 2 + 17);\n  \
    \          int s = Tri(n / 2 + 18);\n            int t = Tri(n / 2 + 19);\n  \
    \          int u = Tri(n / 2 + 20);\n            int v = Tri(n / 2 + 21);\n  \
    \          int w = Tri(n / 2 + 22);\n            int x = Tri(n / 2 + 23);\n  \
    \          int y = Tri(n / 2 + 24);\n            int z = Tri(n / 2 + 25);\n  \
    \          int aa = Tri(n / 2 + 26);\n            int ab = Tri(n / 2 + 27);\n\
    \            int ac = Tri(n / 2 + 28);\n            int ad = Tri(n / 2 + 29);\n\
    \            int ae = Tri(n / 2 + 30);\n            int af = Tri(n / 2 + 31);\n\
    \            int ag = Tri(n / 2 + 32);\n            int ah = Tri(n / 2 + 33);\n\
    \            int ai = Tri(n / 2 + 34);\n            int aj = Tri(n / 2 + 35);\n\
    \            int ak = Tri(n / 2 + 36);\n            int al = Tri(n / 2 + 37);\n\
    \            int am = Tri(n / 2 + 38);\n            int an = Tri(n / 2 + 39);\n\
    \            int ao = Tri(n / 2 + 40);\n            int ap = Tri(n / 2 + 41);\n\
    \            int aq = Tri(n / ", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n\
    \ - 4);", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ return result;\n        if (n == 1) return new List<long>() { 1 };\n       \
    \ if (n == 2) return new List<long>() { 1, 2 };\n        if (n % 2 == 0) {\n \
    \           List<long> left = Tri(n - 1);\n            List<long> right = Tri(n\
    \ - 2);\n            List<long> middle = new List<long>() { n / 2 };\n       \
    \     List<long> result = left.Concat(right).Concat(middle).ToList();\n      \
    \      return result;\n        }\n        else {\n            List<long> left\
    \ = Tri(n - 1);\n            List<long> right = Tri(n - 2);\n            List<long>\
    \ middle = new List<long>() { n / 2 };\n            List<long> result = left.Concat(right).Concat(middle).ToList();\n\
    \            return result;\n        }", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            return result;\n        }\n        long tri1 = Tri(n - 1);\n    \
    \    long tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        long tri4\
    \ = Tri(n - 4);\n        long tri5 = Tri(n - 5);\n        long tri6 = Tri(n -\
    \ 6);\n        long tri7 = Tri(n - 7);\n        long tri8 = Tri(n - 8);\n    \
    \    long tri9 = Tri(n - 9);\n        long tri10 = Tri(n - 10);\n        long\
    \ tri11 = Tri(n - 11);\n        long tri12 = Tri(n - 12);\n        long tri13\
    \ = Tri(n - 13);\n        long tri14 = Tri(n - 14);\n        long tri15 = Tri(n\
    \ - 15);\n        long tri16 = Tri(n - 16);\n        long tri17 = Tri(n - 17);\n\
    \        long tri18 = Tri(n - 18);\n        long tri19 = Tri(n - 19);\n      \
    \  long tri20 = Tri(n - 20);\n        long tri21 = Tri(n - 21);\n        long\
    \ tri22 = Tri(n - 22);\n        long tri23 = Tri(n - 23);\n        long tri24\
    \ = Tri(n - 24);\n        long tri25 = Tri(n - 25);\n        long tri26 = Tri(n\
    \ - 26);\n        long tri27 = Tri(n - 27);\n        long tri28 = Tri(n - 28);\n\
    \        long tri29 = Tri(n - 29);\n        long tri30 = Tri(n - 30);\n      \
    \  long tri31 = Tri(n - 31);\n        long tri32 = Tri(n - 32);\n        long\
    \ tri33 = Tri(n - 33);\n        long tri34 = Tri(n - 34);\n        long tri35\
    \ = Tri(n - 35);\n        long tri36 = Tri(n - 36);\n        long tri37 = Tri(n\
    \ - 37);\n        long tri38 = Tri(n - 38);\n        long tri39 = Tri(n - 39);\n\
    \        long tri40 = Tri(n - 40);\n        long tri41 = Tri(n - 41);\n      \
    \  long tri42 = Tri(n - 42);\n        long tri43 = Tri(n - 43);\n        long\
    \ tri44 = Tri(n - 44);\n        long tri45 = Tri", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n   \
    \         result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(2);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n            return result;\n        }\n        else {\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n\
    \ - 4) + Tri(n + 2));\n            return result;\n        }", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n          \
    \  long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c\
    \ = a + b;\n            result.Add(c);\n            return result;\n        }\n\
    \        long a = Tri(n - 1);\n        long b = Tri(n - 2);\n        long c =\
    \ a + b;\n        result.Add(c);\n        result.Add(a + b);\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            result.Add(2);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 2) {\n            result.Add(1);\n            result.Add(2);\n\
    \            result.Add(3);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1)\
    \ + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(1);\n    \
    \        result.Add(2);\n            return result;\n        }\n        if (n\
    \ % 2 == 0) {\n            result.Add(1);\n            result.Add(n / 2);\n  \
    \          return result;\n        }\n        long a = Tri(n - 1);\n        long\
    \ b = Tri(n - 2);\n        long c = Tri(n - 3);\n        long d = a + b + c;\n\
    \        result.Add(d);\n        return result;", "        List<long> result =\
    \ new List<long>();\n        if (n == 0) {\n            result.Add(0);\n     \
    \       result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2));\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1) + Tri(n - 3));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n         \
    \   result.Add(Tri(n - 2) + Tri(n - 1));\n        }\n        else {\n        \
    \    result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n - 3));\n            result.Add(Tri(n\
    \ - 3) + Tri(n - 2) + Tri(n - 1));\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        if (n == 0) {\n          \
    \  result.Add(0);\n            result.Add(1);\n            result.Add(2);\n  \
    \          return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n\
    \        }\n        result.Add(Tri(n - 1) + Tri(n - 2));\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(2);\n    \
    \        result.Add(1);\n            return result;\n        }\n        long tri1\
    \ = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n -\
    \ 3);\n        long tri4 = Tri(n - 4);\n        long tri5 = Tri(n - 5);\n    \
    \    long tri6 = Tri(n - 6);\n        long tri7 = Tri(n - 7);\n        long tri8\
    \ = Tri(n - 8);\n        long tri9 = Tri(n - 9);\n        long tri10 = Tri(n -\
    \ 10);\n        long tri11 = Tri(n - 11);\n        long tri12 = Tri(n - 12);\n\
    \        long tri13 = Tri(n - 13);\n        long tri14 = Tri(n - 14);\n      \
    \  long tri15 = Tri(n - 15);\n        long tri16 = Tri(n - 16);\n        long\
    \ tri17 = Tri(n - 17);\n        long tri18 = Tri(n - 18);\n        long tri19\
    \ = Tri(n - 19);\n        long tri20 = Tri(n - 20);\n        long tri21 = Tri(n\
    \ - 21);\n        long tri22 = Tri(n - 22);\n        long tri23 = Tri(n - 23);\n\
    \        long tri24 = Tri(n - 24);\n        long tri25 = Tri(n - 25);\n      \
    \  long tri26 = Tri(n - 26);\n        long tri27 = Tri(n - 27);\n        long\
    \ tri28 = Tri(n - 28);\n        long tri29 = Tri(n - 29);\n        long tri30\
    \ = Tri(n - 30);\n        long tri31 = Tri(n - 31);\n        long tri32 = Tri(n\
    \ - 32);\n        long tri33 = Tri(n - 33);\n        long tri34 = Tri(n - 34);\n\
    \        long tri35 = Tri(n - 35);\n        long tri36 = Tri(n - 36);\n      \
    \  long tri37 = Tri(n - 37);\n        long tri38 = Tri(n - 38);\n        long\
    \ tri39 = Tri(n - 39);\n        long tri40 = Tri(n - 40);\n        long tri41\
    \ = Tri(n - 41);\n        long tri42 = Tri(n - 42);\n        long tri43 = Tri(n\
    \ - 43);\n        long tri44 = Tri(n - 44);\n        long ", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            return result;\n       \
    \ }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = Tri(n + 1);\n            long sum = a + b + c;\n            result.Add(sum);\n\
    \        }\n        else {\n            long a = Tri(n - 1);\n            long\
    \ b = Tri(n - 2);\n            long c = Tri(n + 1);\n            long sum = a\
    \ + b + c;\n            result.Add(sum);\n            long d = Tri(n - 3);\n \
    \           long e = Tri(n - 4);\n            long f = Tri(n - 5);\n         \
    \   long g = Tri(n - 6);\n            long h = Tri(n - 7);\n            long sum\
    \ = sum + d + e + f + g + h;\n            result.Add(sum);\n        }\n      \
    \  return result;", "        List<long> result = new List<long>();\n        if\
    \ (n == 0) return result;\n        if (n == 1) return new List<long>() { 1 };\n\
    \        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long\
    \ tri2 = Tri(n - 2);\n            long tri3 = Tri(n + 1);\n            foreach\
    \ (long i in tri1) result.Add(i);\n            foreach (long i in tri2) result.Add(i);\n\
    \            foreach (long i in tri3) result.Add(i);\n            return result;\n\
    \        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n\
    \        long tri3 = Tri(n + 1);\n        foreach (long i in tri1) result.Add(i);\n\
    \        foreach (long i in tri2) result.Add(i);\n        foreach (long i in tri3)\
    \ result.Add(i);\n        result.Add(tri1);\n        result.Add(tri2);\n     \
    \   result.Add(tri3);\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) {\n            result.Add(0);\n         \
    \   result.Add(1);\n            result.Add(1);\n            result.Add(1);\n \
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  long tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            result.Add(tri1);\n\
    \            result.Add(tri1 + tri2);\n            result.Add(tri1 + tri2 + tri1);\n\
    \            return result;\n        }\n        long tri1 = Tri(n - 1);\n    \
    \    long tri2 = Tri(n - 2);\n        result.Add(tri1);\n        result.Add(tri1\
    \ + tri2);\n        result.Add(tri1 + tri2 + tri1);\n        result.Add(tri1 +\
    \ tri2 + tri1 + tri2);\n        return result;", "        List<long> result =\
    \ new List<long>();\n        if (n == 0) return result;\n        if (n == 1) return\
    \ new List<long>() { 3 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n - 3));\n            return result;\n        }\n  \
    \      result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n - 3));\n        result.Add(Tri(n\
    \ - 2) + Tri(n - 3) + Tri(n - 4));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            return result;\n       \
    \ }\n        if (n == 2) {\n            result.Add(3);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n            return result;\n        }\n        result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) {\n            result.Add(0);\n         \
    \   result.Add(1);\n            return result;\n        }\n        if (n == 1)\
    \ {\n            result.Add(1);\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(1);\n    \
    \        result.Add(2);\n            return result;\n        }\n        if (n\
    \ % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        }\n        else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(2);\n    \
    \        result.Add(1);\n            return result;\n        }\n        long tri1\
    \ = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n -\
    \ 3);\n        result.Add(tri1);\n        result.Add(tri2);\n        result.Add(tri3);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) return result;\n        if (n == 1) return new List<long> {\
    \ 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n        \
    \    long b = Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n\
    \            return result;\n        }\n        long a = Tri(n - 1);\n       \
    \ long b = Tri(n - 2);\n        long c = a + b;\n        result.Add(c);\n    \
    \    result.Add(a);\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) return result;\n        if (n == 1) return\
    \ new List<long>() { 1 };\n        if (n % 2 == 0) {\n            List<long> tri1\
    \ = Tri(n - 1);\n            List<long> tri2 = Tri(n - 2);\n            tri1.AddRange(tri2);\n\
    \            result.AddRange(tri1);\n        } else {\n            List<long>\
    \ tri1 = Tri(n - 1);\n            List<long> tri2 = Tri(n - 2);\n            tri1.AddRange(tri2);\n\
    \            result.AddRange(tri1);\n            result.AddRange(tri2);\n    \
    \        result.AddRange(tri1);\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \            return result;\n        }\n        else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n            return result;\n        }", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            return result;\n       \
    \ }\n        if (n == 2) {\n            result.Add(2);\n            return result;\n\
    \        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n\
    \        long tri3 = Tri(n - 3);\n        long tri4 = Tri(n - 4);\n        long\
    \ tri5 = Tri(n - 5);\n        long tri6 = Tri(n - 6);\n        long tri7 = Tri(n\
    \ - 7);\n        long tri8 = Tri(n - 8);\n        long tri9 = Tri(n - 9);\n  \
    \      long tri10 = Tri(n - 10);\n        long tri11 = Tri(n - 11);\n        long\
    \ tri12 = Tri(n - 12);\n        long tri13 = Tri(n - 13);\n        long tri14\
    \ = Tri(n - 14);\n        long tri15 = Tri(n - 15);\n        long tri16 = Tri(n\
    \ - 16);\n        long tri17 = Tri(n - 17);\n        long tri18 = Tri(n - 18);\n\
    \        long tri19 = Tri(n - 19);\n        long tri20 = Tri(n - 20);\n      \
    \  long tri21 = Tri(n - 21);\n        long tri22 = Tri(n - 22);\n        long\
    \ tri23 = Tri(n - 23);\n        long tri24 = Tri(n - 24);\n        long tri25\
    \ = Tri(n - 25);\n        long tri26 = Tri(n - 26);\n        long tri27 = Tri(n\
    \ - 27);\n        long tri28 = Tri(n - 28);\n        long tri29 = Tri(n - 29);\n\
    \        long tri30 = Tri(n - 30);\n        long tri31 = Tri(n - 31);\n      \
    \  long tri32 = Tri(n - 32);\n        long tri33 = Tri(n - 33);\n        long\
    \ tri34 = Tri(n - 34);\n        long tri35 = Tri(n - 35);\n        long tri36\
    \ = Tri(n - 36);\n        long tri37 = Tri(n - 37);\n        long tri38 = Tri(n\
    \ - 38);\n        long tri39 = Tri(n - 39);\n        long tri40 = Tri(n - 40);\n\
    \        long tri41 = Tri(n - 41);\n        long tri42 = Tri(n - 42);\n      \
    \  long tri43 = Tri(n - 43);\n        long tri44 = Tri(n - 44);\n        long\
    \ tri45 = Tri", "        List<long> result = new List<long>();\n        if (n\
    \ == 0) {\n            result.Add(0);\n            result.Add(1);\n          \
    \  result.Add(1);\n            return result;\n        }\n        if (n == 1)\
    \ {\n            result.Add(1);\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n            result.Add(Tri(n - 1));\n        } else {\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n  \
    \          return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n         \
    \   result.Add(Tri(n + 1) + Tri(n + 2));\n        }\n        else {\n        \
    \    result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2));\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long tri2 =\
    \ Tri(n - 2);\n            long tri3 = Tri(n - 3);\n            result.AddRange(tri1);\n\
    \            result.AddRange(tri2);\n            result.AddRange(tri3);\n    \
    \        return result;\n        }\n        long tri1 = Tri(n - 1);\n        long\
    \ tri2 = Tri(n - 2);\n        result.AddRange(tri1);\n        result.AddRange(tri2);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2));\n        }\n        else {\n         \
    \   result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ return result;\n        if (n == 1) return new List<long>() { 1 };\n       \
    \ if (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n\
    \ - 2);\n            long c = Tri(n - 3) + Tri(n - 1) + Tri(n - 2) + Tri(n - 3);\n\
    \            result.AddRange(a);\n            result.AddRange(b);\n          \
    \  result.AddRange(c);\n        } else {\n            long a = Tri(n - 1);\n \
    \           long b = Tri(n - 2) + Tri(n - 1) + Tri(n - 3);\n            result.AddRange(a);\n\
    \            result.AddRange(b);\n        }\n        return result;", "      \
    \  List<long> result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n        }\n  \
    \      result.Add(Tri(n - 1) + Tri(n - 2));\n        return result;", "      \
    \  List<long> result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            return result;\n       \
    \ }\n        if (n == 2) {\n            result.Add(2);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        else\
    \ {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ {\n            result.Add(0);\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 1) {\n            result.Add(1);\n    \
    \        return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n            result.Add(Tri(n + 1));\n        }\n      \
    \  else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        long\
    \ tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n\
    \ - 3);\n        long tri4 = Tri(n - 4);\n        long tri5 = Tri(n - 5);\n  \
    \      long tri6 = Tri(n - 6);\n        long tri7 = Tri(n - 7);\n        long\
    \ tri8 = Tri(n - 8);\n        long tri9 = Tri(n - 9);\n        long tri10 = Tri(n\
    \ - 10);\n        long tri11 = Tri(n - 11);\n        long tri12 = Tri(n - 12);\n\
    \        long tri13 = Tri(n - 13);\n        long tri14 = Tri(n - 14);\n      \
    \  long tri15 = Tri(n - 15);\n        long tri16 = Tri(n - 16);\n        long\
    \ tri17 = Tri(n - 17);\n        long tri18 = Tri(n - 18);\n        long tri19\
    \ = Tri(n - 19);\n        long tri20 = Tri(n - 20);\n        long tri21 = Tri(n\
    \ - 21);\n        long tri22 = Tri(n - 22);\n        long tri23 = Tri(n - 23);\n\
    \        long tri24 = Tri(n - 24);\n        long tri25 = Tri(n - 25);\n      \
    \  long tri26 = Tri(n - 26);\n        long tri27 = Tri(n - 27);\n        long\
    \ tri28 = Tri(n - 28);\n        long tri29 = Tri(n - 29);\n        long tri30\
    \ = Tri(n - 30);\n        long tri31 = Tri(n - 31);\n        long tri32 = Tri(n\
    \ - 32);\n        long tri33 = Tri(n - 33);\n        long tri34 = Tri(n - 34);\n\
    \        long tri35 = Tri(n - 35);\n        long tri36 = Tri(n - 36);\n      \
    \  long tri37 = Tri(n - 37);\n        long tri38 = Tri(n - 38);\n        long\
    \ tri39 = Tri(n - 39);\n        long tri40 = Tri(n - 40);\n        long tri41\
    \ = Tri(n - 41);\n        long tri42 = Tri(n - 42);\n        long tri43 = Tri(n\
    \ - 43);\n        long tri44 = ", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n == 2) return new List<long>() { 1, 2 };\n        if (n\
    \ % 2 == 0) {\n            List<long> tri = Tri(n - 1) + Tri(n - 2) + Tri(n +\
    \ 1);\n            foreach (long triNumber in tri) {\n                result.Add(triNumber);\n\
    \            }\n        } else {\n            List<long> tri = Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1);\n            foreach (long triNumber in tri) {\n        \
    \        result.Add(triNumber + 1);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(1);\n            result.Add(n / 2);\n\
    \            result.Add(n / 2);\n            return result;\n        }\n     \
    \   List<long> left = Tri(n - 1);\n        List<long> right = Tri(n - 2);\n  \
    \      List<long> middle = new List<long>();\n        middle.Add(left[0]);\n \
    \       middle.Add(right[0]);\n        middle.Add(left[1]);\n        middle.Add(right[1]);\n\
    \        middle.Add(left[2]);\n        middle.Add(right[2]);\n        middle.Add(left[3]);\n\
    \        middle.Add(right[3]);\n        result.AddRange(left);\n        result.AddRange(right);\n\
    \        result.AddRange(middle);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) result.Add(0);\n        if (n\
    \ == 1) result.Add(1);\n        if (n == 2) result.Add(3);\n        if (n % 2\
    \ == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n\
    \            long c = Tri(n + 1);\n            long sum = a + b + c;\n       \
    \     result.Add(sum);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n == 2) return new List<long>()\
    \ { 1, 2 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n   \
    \         long b = Tri(n - 2);\n            long c = Tri(n - 3) + Tri(n - 1) +\
    \ Tri(n - 2);\n            long d = Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n\
    \ - 1);\n            long e = Tri(n - 5) + Tri(n - 4) + Tri(n - 3) + Tri(n - 2)\
    \ + Tri(n - 1);\n            long f = Tri(n - 6) + Tri(n - 5) + Tri(n - 4) + Tri(n\
    \ - 3) + Tri(n - 2) + Tri(n - 1);\n            long g = Tri(n - 7) + Tri(n - 6)\
    \ + Tri(n - 5) + Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n        \
    \    long h = Tri(n - 8) + Tri(n - 7) + Tri(n - 6) + Tri(n - 5) + Tri(n - 4) +\
    \ Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n            long i = Tri(n - 9) + Tri(n\
    \ - 8) + Tri(n - 7) + Tri(n - 6) + Tri(n - 5) + Tri(n - 4) + Tri(n - 3) + Tri(n\
    \ - 2) + Tri(n - 1);\n            long j = Tri(n - 10) + Tri(n - 9) + Tri(n -\
    \ 8) + Tri(n - 7) + Tri(n - 6) + Tri(n - 5) + Tri(n - 4) + Tri(n - 3) + Tri(n\
    \ - 2) + Tri(n - 1);\n            long k = Tri(n - 11) + Tri(n - 10) + Tri(n -\
    \ 9) + Tri(n - 8) + Tri(n - 7) + Tri(n - 6) + Tri(n - 5) + Tri(n - 4) + Tri(n\
    \ - 3) + Tri(n - 2) + Tri(n - 1);\n            long l = Tri(n - 12) + Tri(n -\
    \ 11) + Tri(n - 10) + Tri(n - 9) + Tri(n - 8) + Tri(n - 7) + Tri(n - 6) + Tri(n\
    \ - 5) + Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n            long\
    \ m = Tri(n - 13) + Tri(n - 12) + Tri(n - 11) + Tri(n - 10) + Tri(n - 9) + Tri(n\
    \ - 8) + Tri(n - 7) + Tri(n - 6) + Tri(n - 5) + Tri(n - 4) + Tri(n - 3) + Tri(n\
    \ - 2) + Tri(", "        List<long> result = new List<long>();\n        if (n\
    \ == 0) return result;\n        if (n == 1) return new List<long>() { 1 };\n \
    \       if (n == 2) return new List<long>() { 1, 2, 3 };\n        if (n % 2 ==\
    \ 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n \
    \           long c = Tri(n + 1);\n            foreach (var item in a) {\n    \
    \            result.Add(item);\n            }\n            foreach (var item in\
    \ b) {\n                result.Add(item);\n            }\n            foreach\
    \ (var item in c) {\n                result.Add(item);\n            }\n      \
    \      return result;\n        }\n        else {\n            long a = Tri(n -\
    \ 1);\n            long b = Tri(n - 2);\n            long c = Tri(n + 1);\n  \
    \          foreach (var item in a) {\n                result.Add(item);\n    \
    \        }\n            foreach (var item in b) {\n                result.Add(item);\n\
    \            }\n            foreach (var item in c) {\n                result.Add(item);\n\
    \            }\n            return result;\n        }", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) return result;\n        if (n == 1)\
    \ return new List<long>() { 1 };\n        if (n % 2 == 0) {\n            List<long>\
    \ tri = Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n            foreach (long i in\
    \ tri) {\n                result.Add(i);\n            }\n        } else {\n  \
    \          List<long> tri = Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n          \
    \  foreach (long i in tri) {\n                result.Add(i);\n            }\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   if (n == 0) return result;\n        if (n == 1) return new List<long> { 1\
    \ };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n          \
    \  long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n        } else {\n            long a = Tri(n - 1);\n          \
    \  long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            long d\
    \ = Tri(n - 3);\n            foreach (var item in a.Concat(b).Concat(c).Concat(d))\
    \ {\n                result.Add(item);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ return result;\n        if (n == 1) return new List<long>() { 1 };\n       \
    \ if (n == 2) return new List<long>() { 1, 2 };\n        if (n % 2 == 0) {\n \
    \           long a = Tri(n - 1);\n            long b = Tri(n - 2);\n         \
    \   long c = Tri(n + 1);\n            long sum = a + b + c;\n            result.Add(sum);\n\
    \        }\n        else {\n            long a = Tri(n - 1);\n            long\
    \ b = Tri(n - 2);\n            long c = Tri(n + 1);\n            long sum = a\
    \ + b + c;\n            result.Add(sum);\n            result.Add(sum);\n     \
    \   }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(3);\n\
    \            return result;\n        }\n        List<long> first = new List<long>();\n\
    \        List<long> second = new List<long>();\n        List<long> third = new\
    \ List<long>();\n        first.Add(1);\n        second.Add(2);\n        third.Add(3);\n\
    \        List<long> fourth = new List<long>();\n        fourth.Add(4);\n     \
    \   List<long> fifth = new List<long>();\n        fifth.Add(5);\n        List<long>\
    \ sixth = new List<long>();\n        sixth.Add(6);\n        List<long> seventh\
    \ = new List<long>();\n        seventh.Add(7);\n        List<long> eighth = new\
    \ List<long>();\n        eighth.Add(8);\n        List<long> ninth = new List<long>();\n\
    \        ninth.Add(9);\n        List<long> tenth = new List<long>();\n       \
    \ tenth.Add(10);\n        List<long> eleventh = new List<long>();\n        eleventh.Add(11);\n\
    \        List<long> twelfth = new List<long>();\n        twelfth.Add(12);\n  \
    \      List<long> thirteenth = new List<long>();\n        thirteenth.Add(13);\n\
    \        List<long> fourteenth = new List<long>();\n        fourteenth.Add(14);\n\
    \        List<long> fifteenth = new List<long>();\n        fifteenth.Add(15);\n\
    \        List<long> sixteenth = new List<long>();\n        sixteenth.Add(16);\n\
    \        List<long> seventeenth = new List<long>();\n        seventeenth.Add(17);\n\
    \        List<long> eighteenth = new List<long>();\n        eighteenth.Add(18);\n\
    \        List<long> nineteenth = new List<long>();\n        nineteenth.Add(19);\n\
    \        List<long> twentieth = new List<long>();\n        twentieth.Add(20);\n\
    \        List<long> twentyfirst = new List<long>();\n        twentyfirst.Add(21);\n\
    \        List<long> twentysecond = new List<long>();\n        twentysecond.Add(22);\n\
    \        List<long> twentythird = new List<long>();\n        twentythird.Add(23);\n\
    \        List<long> twentyfourth = new List<long>();\n        twentyfourth.Add(24",
  "        List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = a + b;\n            result.Add(c);\n            return result;\n\
    \        } else {\n            long a = Tri(n - 1);\n            long b = Tri(n\
    \ - 2);\n            long c = a + b;\n            result.Add(c);\n           \
    \ long d = Tri(n - 3);\n            result.Add(d);\n            return result;\n\
    \        }", "        List<long> result = new List<long>();\n        if (n ==\
    \ 0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n     \
    \       result.Add(Tri(n - 1) + Tri(n - 2));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0)\n        {\n\
    \            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \        }\n        else if (n == 1)\n        {\n            result.Add(1);\n\
    \            result.Add(1);\n            result.Add(1);\n        }\n        else\n\
    \        {\n            long tri1 = Tri(n - 1);\n            long tri2 = Tri(n\
    \ - 2);\n            long tri3 = Tri(n - 3);\n            result.Add(tri1);\n\
    \            result.Add(tri2);\n            result.Add(tri3);\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  if (n == 0)\n        {\n            result.Add(3);\n            return result;\n\
    \        }\n        if (n == 1)\n        {\n            result.Add(1);\n     \
    \       return result;\n        }\n        if (n % 2 == 0)\n        {\n      \
    \      result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        else\n\
    \        {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n\
    \ - 3) + Tri(n - 4));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        }\n        else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1) + Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(1);\n    \
    \        result.Add(2);\n            return result;\n        }\n        if (n\
    \ % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \            return result;\n        }\n        result.Add(Tri(n - 1) + Tri(n\
    \ - 2));\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n == 2) return new List<long>() { 1, 2 };\n        if (n\
    \ % 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n -\
    \ 2);\n            long c = Tri(n + 1);\n            long sum = 0;\n         \
    \   foreach (long x in a) sum += x;\n            foreach (long x in b) sum +=\
    \ x;\n            foreach (long x in c) sum += x;\n            result.Add(sum);\n\
    \        } else {\n            long a = Tri(n - 1);\n            long b = Tri(n\
    \ - 2);\n            long c = Tri(n + 1);\n            long sum = 0;\n       \
    \     foreach (long x in a) sum += x;\n            foreach (long x in b) sum +=\
    \ x;\n            foreach (long x in c) sum += x;\n            result.Add(sum);\n\
    \            result.Add(sum);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) return Tri(n -\
    \ 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n - 2) +\
    \ Tri(n + 1) + Tri(n - 3) + Tri(n - 4);", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1)\
    \ + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            return result;\n       \
    \ }\n        if (n == 2) {\n            result.Add(3);\n            return result;\n\
    \        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n\
    \        long tri3 = Tri(n - 3);\n        long tri4 = Tri(n - 4);\n        long\
    \ tri5 = Tri(n - 5);\n        long tri6 = Tri(n - 6);\n        long tri7 = Tri(n\
    \ - 7);\n        long tri8 = Tri(n - 8);\n        long tri9 = Tri(n - 9);\n  \
    \      long tri10 = Tri(n - 10);\n        long tri11 = Tri(n - 11);\n        long\
    \ tri12 = Tri(n - 12);\n        long tri13 = Tri(n - 13);\n        long tri14\
    \ = Tri(n - 14);\n        long tri15 = Tri(n - 15);\n        long tri16 = Tri(n\
    \ - 16);\n        long tri17 = Tri(n - 17);\n        long tri18 = Tri(n - 18);\n\
    \        long tri19 = Tri(n - 19);\n        long tri20 = Tri(n - 20);\n      \
    \  long tri21 = Tri(n - 21);\n        long tri22 = Tri(n - 22);\n        long\
    \ tri23 = Tri(n - 23);\n        long tri24 = Tri(n - 24);\n        long tri25\
    \ = Tri(n - 25);\n        long tri26 = Tri(n - 26);\n        long tri27 = Tri(n\
    \ - 27);\n        long tri28 = Tri(n - 28);\n        long tri29 = Tri(n - 29);\n\
    \        long tri30 = Tri(n - 30);\n        long tri31 = Tri(n - 31);\n      \
    \  long tri32 = Tri(n - 32);\n        long tri33 = Tri(n - 33);\n        long\
    \ tri34 = Tri(n - 34);\n        long tri35 = Tri(n - 35);\n        long tri36\
    \ = Tri(n - 36);\n        long tri37 = Tri(n - 37);\n        long tri38 = Tri(n\
    \ - 38);\n        long tri39 = Tri(n - 39);\n        long tri40 = Tri(n - 40);\n\
    \        long tri41 = Tri(n - 41);\n        long tri42 = Tri(n - 42);\n      \
    \  long tri43 = Tri(n - 43);\n        long tri44 = Tri(n - 44);\n        long\
    \ tri45 = Tri", "        List<long> result = new List<long>();\n        if (n\
    \ == 0) result.Add(0);\n        if (n == 1) result.Add(1);\n        if (n == 2)\
    \ result.Add(3);\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n\
    \            long b = Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n\
    \        }\n        else {\n            long a = Tri(n - 1);\n            long\
    \ b = Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n \
    \           long d = Tri(n - 3);\n            result.Add(d);\n        }\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n    \
    \        return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c\
    \ = Tri(n + 1);\n            long sum = 0;\n            foreach (var item in a)\
    \ {\n                sum += item;\n            }\n            foreach (var item\
    \ in b) {\n                sum += item;\n            }\n            foreach (var\
    \ item in c) {\n                sum += item;\n            }\n            result.Add(sum);\n\
    \        }\n        else {\n            long a = Tri(n - 1);\n            long\
    \ b = Tri(n - 2);\n            long c = Tri(n + 1);\n            long sum = 0;\n\
    \            foreach (var item in a) {\n                sum += item;\n       \
    \     }\n            foreach (var item in b) {\n                sum += item;\n\
    \            }\n            foreach (var item in c) {\n                sum +=\
    \ item;\n            }\n            result.Add(sum);\n            long d = Tri(n\
    \ - 3);\n            long e = Tri(n - 4);\n            long f = Tri(n - 5);\n\
    \            long g = Tri(n - 6);\n            long sum = 0;\n            foreach\
    \ (var item in d) {\n                sum += item;\n            }\n           \
    \ foreach (var item in e) {\n                sum += item;\n            }\n   \
    \         foreach (var item in f) {\n                sum += item;\n          \
    \  }\n            foreach (var item in g) {\n                sum += item;\n  \
    \          }\n            result.Add(sum);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        }\n        else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n        return Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1);", "        List<long> result = new List<long>();\n        if (n\
    \ == 0) {\n            result.Add(0);\n            result.Add(1);\n          \
    \  result.Add(1);\n            return result;\n        }\n        if (n == 1)\
    \ {\n            result.Add(1);\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(1);\n    \
    \        result.Add(2);\n            return result;\n        }\n        long a\
    \ = Tri(n - 1);\n        long b = Tri(n - 2);\n        long c = Tri(n - 3);\n\
    \        long d = a + b + c;\n        result.Add(d);\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2));\n            result.Add(Tri(n + 1) + Tri(n\
    \ + 2));\n            return result;\n        }\n        result.Add(Tri(n - 1)\
    \ + Tri(n - 2) + Tri(n + 1) + Tri(n + 2));\n        return result;", "       \
    \ List<long> result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        long\
    \ tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n\
    \ - 3);\n        long tri4 = tri1 + tri2 + tri3;\n        result.Add(tri1);\n\
    \        result.Add(tri2);\n        result.Add(tri3);\n        result.Add(tri4);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n == 2) return new List<long>() { 1, 2 };\n        if (n\
    \ % 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n -\
    \ 2);\n            long c = Tri(n + 1);\n            long sum = 0;\n         \
    \   foreach (long i in a) sum += i;\n            foreach (long i in b) sum +=\
    \ i;\n            foreach (long i in c) sum += i;\n            result.Add(sum);\n\
    \            return result;\n        }\n        else {\n            long a = Tri(n\
    \ - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n + 1);\n\
    \            long sum = 0;\n            foreach (long i in a) sum += i;\n    \
    \        foreach (long i in b) sum += i;\n            foreach (long i in c) sum\
    \ += i;\n            result.Add(sum);\n            result.Add(sum);\n        \
    \    return result;\n        }", "        List<long> result = new List<long>();\n\
    \        if (n == 1) {\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 2) {\n            result.Add(3);\n            return\
    \ result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n        }\n  \
    \      else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n\
    \ + 2));\n            return result;\n        }", "        List<long> result =\
    \ new List<long>();\n        if (n == 0) {\n            result.Add(0);\n     \
    \       result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2));\n            result.Add(Tri(n + 1));\n\
    \        }\n        else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) {\n            result.Add(0);\n         \
    \   result.Add(1);\n            return result;\n        }\n        if (n == 1)\
    \ {\n            result.Add(1);\n            return result;\n        }\n     \
    \   if (n == 2) {\n            result.Add(2);\n            result.Add(1);\n  \
    \          return result;\n        }\n        if (n % 2 == 0) {\n            long\
    \ a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n\
    \ - 3) + Tri(n - 1) + Tri(n - 2) + Tri(n - 3);\n            long d = Tri(n - 4)\
    \ + Tri(n - 3) + Tri(n - 2) + Tri(n - 1) + Tri(n - 4);\n            long e = Tri(n\
    \ - 5) + Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1) + Tri(n - 5);\n   \
    \         long f = Tri(n - 6) + Tri(n - 5) + Tri(n - 4) + Tri(n - 3) + Tri(n -\
    \ 2) + Tri(n - 1) + Tri(n - 6);\n            long g = Tri(n - 7) + Tri(n - 6)\
    \ + Tri(n - 5) + Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1) + Tri(n - 7);\n\
    \            long h = Tri(n - 8) + Tri(n - 7) + Tri(n - 6) + Tri(n - 5) + Tri(n\
    \ - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1) + Tri(n - 8);\n            long\
    \ i = Tri(n - 9) + Tri(n - 8) + Tri(n - 7) + Tri(n - 6) + Tri(n - 5) + Tri(n -\
    \ 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1) + Tri(n - 9);\n            long j\
    \ = Tri(n - 10) + Tri(n - 9) + Tri(n - 8) + Tri(n - 7) + Tri(n - 6) + Tri(n -\
    \ 5) + Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1) + Tri(n - 10);\n    \
    \        long k = Tri(n - 11) + Tri(n - 10) + Tri(n - 9) + Tri(n - 8) + Tri(n\
    \ - 7) + Tri(n - 6) + Tri(n - 5) + Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n\
    \ - 1) + Tri(n - 11);\n            long l = Tri(n - 12) + Tri(n - 11) + Tri(n\
    \ - 10) + Tri(n - 9) + Tri(n - 8) + Tri(n - 7) + Tri(n - 6) + Tri(n - 5) + Tri(n\
    \ - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1) + Tri(n - 12);\n            long\
    \ m = Tri(n - 13) + Tri", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long tri2 =\
    \ Tri(n - 2);\n            long tri3 = Tri(n - 3);\n            long tri4 = tri1\
    \ + tri2 + tri3;\n            result.Add(tri1);\n            result.Add(tri2);\n\
    \            result.Add(tri3);\n            result.Add(tri4);\n            return\
    \ result;\n        }\n        else {\n            long tri1 = Tri(n - 1);\n  \
    \          long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n    \
    \        long tri4 = tri1 + tri2 + tri3;\n            result.Add(tri1);\n    \
    \        result.Add(tri2);\n            result.Add(tri3);\n            result.Add(tri4);\n\
    \            result.Add(tri1 + tri2 + tri3);\n            return result;\n   \
    \     }", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ result.Add(0);\n        if (n == 1) result.Add(1);\n        if (n == 2) result.Add(3);\n\
    \        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long\
    \ tri2 = Tri(n - 2);\n            long tri3 = Tri(n + 1);\n            long sum\
    \ = tri1 + tri2 + tri3;\n            result.Add(sum);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ {\n            result.Add(0);\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 1) {\n            result.Add(1);\n    \
    \        return result;\n        }\n        if (n == 2) {\n            result.Add(3);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  long tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long\
    \ tri3 = Tri(n - 3);\n            long tri4 = Tri(n - 4);\n            long tri5\
    \ = Tri(n - 5);\n            long tri6 = Tri(n - 6);\n            long tri7 =\
    \ Tri(n - 7);\n            long tri8 = Tri(n - 8);\n            long tri9 = Tri(n\
    \ - 9);\n            long tri10 = Tri(n - 10);\n            long tri11 = Tri(n\
    \ - 11);\n            long tri12 = Tri(n - 12);\n            long tri13 = Tri(n\
    \ - 13);\n            long tri14 = Tri(n - 14);\n            long tri15 = Tri(n\
    \ - 15);\n            long tri16 = Tri(n - 16);\n            long tri17 = Tri(n\
    \ - 17);\n            long tri18 = Tri(n - 18);\n            long tri19 = Tri(n\
    \ - 19);\n            long tri20 = Tri(n - 20);\n            long tri21 = Tri(n\
    \ - 21);\n            long tri22 = Tri(n - 22);\n            long tri23 = Tri(n\
    \ - 23);\n            long tri24 = Tri(n - 24);\n            long tri25 = Tri(n\
    \ - 25);\n            long tri26 = Tri(n - 26);\n            long tri27 = Tri(n\
    \ - 27);\n            long tri28 = Tri(n - 28);\n            long tri29 = Tri(n\
    \ - 29);\n            long tri30 = Tri(n - 30);\n            long tri31 = Tri(n\
    \ - 31);\n            long tri32 = Tri(n - 32);\n            long tri33 = Tri(n\
    \ - 33);\n            long tri34 = Tri(n - 34);\n            long tri35 = Tri(n\
    \ - 35);\n            long tri36 = Tri(n - 36);\n            long tri37 = Tri(n\
    \ - 37);\n            long tri38 = Tri(n - 38);\n            long tri39 = Tri(n\
    \ - 39);\n            long tri40 = Tri(n - 40);\n            long tri41 = Tri(n\
    \ - 41);\n            long tri42 = Tri(n - 42);\n            long tri43 = Tri(n\
    \ - 43);\n            long tri44 = Tri(n - 44);\n            ", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            return result;\n       \
    \ }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1));\n            return result;\n        }\n        else {\n    \
    \        result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n\
    \ - 4) + Tri(n - 5) + Tri(n - 6));\n            return result;\n        }", " \
    \       List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            long tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n  \
    \          long tri3 = Tri(n + 1);\n            foreach (long i in tri1) result.Add(i);\n\
    \            foreach (long i in tri2) result.Add(i);\n            foreach (long\
    \ i in tri3) result.Add(i);\n        } else {\n            long tri1 = Tri(n -\
    \ 1);\n            long tri2 = Tri(n - 2);\n            long tri3 = Tri(n + 1);\n\
    \            foreach (long i in tri1) result.Add(i);\n            foreach (long\
    \ i in tri2) result.Add(i);\n            foreach (long i in tri3) result.Add(i);\n\
    \            long tri4 = Tri(n - 3);\n            foreach (long i in tri4) result.Add(i);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(3);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n\
    \        }\n        result.Add(Tri(n - 1) + Tri(n - 2));\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(3);\n    \
    \        return result;\n        }\n        List<long> left = new List<long>();\n\
    \        List<long> right = new List<long>();\n        left.Add(1);\n        right.Add(1);\n\
    \        left.AddRange(Tri(n - 1));\n        right.AddRange(Tri(n - 2));\n   \
    \     left.AddRange(Tri(n + 1));\n        right.AddRange(Tri(n + 1));\n      \
    \  result.AddRange(left);\n        result.AddRange(right);\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(3);\n    \
    \        return result;\n        }\n        if (n % 2 == 0) {\n            long\
    \ a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = a +\
    \ b;\n            result.Add(c);\n            return result;\n        }\n    \
    \    long a = Tri(n - 1);\n        long b = Tri(n - 2);\n        long c = a +\
    \ b;\n        result.Add(c);\n        result.Add(a + b);\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n     \
    \       result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        } else\
    \ {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n         \
    \   result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2));\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n    \
    \    } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3));\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(2);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6));\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 1) {\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 2) {\n            result.Add(3);\n            return\
    \ result;\n        }\n        if (n % 2 == 0) {\n            long tri1 = Tri(n\
    \ - 1);\n            long tri2 = Tri(n - 2);\n            long tri3 = Tri(n +\
    \ 1);\n            foreach (long i in tri1) {\n                result.Add(i);\n\
    \            }\n            foreach (long i in tri2) {\n                result.Add(i);\n\
    \            }\n            foreach (long i in tri3) {\n                result.Add(i);\n\
    \            }\n            return result;\n        }\n        long tri1 = Tri(n\
    \ - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n + 1);\n  \
    \      foreach (long i in tri1) {\n            result.Add(i);\n        }\n   \
    \     foreach (long i in tri2) {\n            result.Add(i);\n        }\n    \
    \    foreach (long i in tri3) {\n            result.Add(i);\n        }\n     \
    \   return result;", "        List<long> result = new List<long>();\n        if\
    \ (n == 0) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     result.Add(1);\n            return result;\n        }\n        if (n ==\
    \ 1) {\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(1);\n          \
    \  result.Add(1);\n            result.Add(1);\n            return result;\n  \
    \      }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n \
    \       long tri3 = Tri(n - 3);\n        long tri4 = Tri(n - 4);\n        long\
    \ tri5 = Tri(n - 5);\n        long tri6 = Tri(n - 6);\n        long tri7 = Tri(n\
    \ - 7);\n        long tri8 = Tri(n - 8);\n        long tri9 = Tri(n - 9);\n  \
    \      long tri10 = Tri(n - 10);\n        long tri11 = Tri(n - 11);\n        long\
    \ tri12 = Tri(n - 12);\n        long tri13 = Tri(n - 13);\n        long tri14\
    \ = Tri(n - 14);\n        long tri15 = Tri(n - 15);\n        long tri16 = Tri(n\
    \ - 16);\n        long tri17 = Tri(n - 17);\n        long tri18 = Tri(n - 18);\n\
    \        long tri19 = Tri(n - 19);\n        long tri20 = Tri(n - 20);\n      \
    \  long tri21 = Tri(n - 21);\n        long tri22 = Tri(n - 22);\n        long\
    \ tri23 = Tri(n - 23);\n        long tri24 = Tri(n - 24);\n        long tri25\
    \ = Tri(n - 25);\n        long tri26 = Tri(n - 26);\n        long tri27 = Tri(n\
    \ - 27);\n        long tri28 = Tri(n - 28);\n        long tri29 = Tri(n - 29);\n\
    \        long tri30 = Tri(n - 30);\n        long tri31 = Tri(n - 31);\n      \
    \  long tri32 = Tri(n - 32);\n        long tri33 = Tri(n - 33);\n        long\
    \ tri34 = Tri(n - 34);\n        long tri35 = Tri(n - 35);\n        long tri36\
    \ = Tri(n - 36);\n        long tri37 = Tri(n - 37);\n        long tri38 = Tri(n\
    \ - 38);\n        long tri39 = Tri(n - 39);\n        long tri40 = Tri(n - 40);\n\
    \        long tri41 = Tri(n - ", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n            result.Add(Tri(n - 2) + Tri(n - 1));\n    \
    \    } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n - 3));\n\
    \            result.Add(Tri(n - 3) + Tri(n - 2) + Tri(n - 1));\n        }\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   if (n == 0) return result;\n        if (n == 1) return new List<long>() {\
    \ 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n -\
    \ 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2));\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) return result;\n        if (n == 1) return\
    \ new List<long> { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n\
    \ - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6) + Tri(n - 7) + Tri(n - 8);", " \
    \       List<long> result = new List<long>();\n        if (n == 0) {\n       \
    \     result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            return result;\n        }\n        if (n == 1)\
    \ {\n            result.Add(1);\n            return result;\n        }\n     \
    \   if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n    \
    \        return result;\n        }\n        result.Add(Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1));\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ if (n == 0) return result;\n        if (n == 1) return new List<long>() { 1\
    \ };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n \
    \       else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2);", "   \
    \     List<long> result = new List<long>();\n        if (n == 0) {\n         \
    \   result.Add(0);\n            return result;\n        }\n        if (n == 1)\
    \ {\n            result.Add(1);\n            return result;\n        }\n     \
    \   if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n    \
    \        return result;\n        }\n        result.Add(Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n - 3));\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        }\n        else {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long tri2 =\
    \ Tri(n - 2);\n            long tri3 = Tri(n + 1);\n            long sum = 0;\n\
    \            foreach (long i in tri1) {\n                sum += i;\n         \
    \   }\n            foreach (long i in tri2) {\n                sum += i;\n   \
    \         }\n            foreach (long i in tri3) {\n                sum += i;\n\
    \            }\n            result.Add(sum);\n            return result;\n   \
    \     }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n  \
    \      long tri3 = Tri(n + 1);\n        long sum = 0;\n        foreach (long i\
    \ in tri1) {\n            sum += i;\n        }\n        foreach (long i in tri2)\
    \ {\n            sum += i;\n        }\n        foreach (long i in tri3) {\n  \
    \          sum += i;\n        }\n        result.Add(sum);\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            return result;\n        }\n        if (n == 1)\
    \ {\n            result.Add(1);\n            return result;\n        }\n     \
    \   if (n == 2) {\n            result.Add(3);\n            return result;\n  \
    \      }\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n   \
    \         long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n     \
    \       long tri4 = tri1 + tri2 + tri3;\n            result.Add(tri4);\n     \
    \       return result;\n        }\n        long tri1 = Tri(n - 1);\n        long\
    \ tri2 = Tri(n - 2);\n        long tri3 = tri1 + tri2;\n        result.Add(tri3);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \            return result;\n        }\n        result.Add(Tri(n - 1) + Tri(n\
    \ - 2));\n        result.Add(Tri(n + 1));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        long\
    \ tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n\
    \ - 3);\n        result.Add(tri1);\n        result.Add(tri2);\n        result.Add(tri3);\n\
    \        result.Add(tri1 + tri2 + tri3);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n         \
    \   result.Add(Tri(n + 1) + Tri(n + 2));\n        }\n        else {\n        \
    \    result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ {\n            result.Add(0);\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 1) {\n            result.Add(1);\n    \
    \        result.Add(1);\n            return result;\n        }\n        if (n\
    \ == 2) {\n            result.Add(1);\n            result.Add(2);\n          \
    \  return result;\n        }\n        if (n % 2 == 0) {\n            long tri1\
    \ = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long tri3 =\
    \ Tri(n - 3);\n            long tri4 = Tri(n - 4);\n            long tri5 = Tri(n\
    \ - 5);\n            long tri6 = Tri(n - 6);\n            long tri7 = Tri(n -\
    \ 7);\n            long tri8 = Tri(n - 8);\n            long tri9 = Tri(n - 9);\n\
    \            long tri10 = Tri(n - 10);\n            long tri11 = Tri(n - 11);\n\
    \            long tri12 = Tri(n - 12);\n            long tri13 = Tri(n - 13);\n\
    \            long tri14 = Tri(n - 14);\n            long tri15 = Tri(n - 15);\n\
    \            long tri16 = Tri(n - 16);\n            long tri17 = Tri(n - 17);\n\
    \            long tri18 = Tri(n - 18);\n            long tri19 = Tri(n - 19);\n\
    \            long tri20 = Tri(n - 20);\n            long tri21 = Tri(n - 21);\n\
    \            long tri22 = Tri(n - 22);\n            long tri23 = Tri(n - 23);\n\
    \            long tri24 = Tri(n - 24);\n            long tri25 = Tri(n - 25);\n\
    \            long tri26 = Tri(n - 26);\n            long tri27 = Tri(n - 27);\n\
    \            long tri28 = Tri(n - 28);\n            long tri29 = Tri(n - 29);\n\
    \            long tri30 = Tri(n - 30);\n            long tri31 = Tri(n - 31);\n\
    \            long tri32 = Tri(n - 32);\n            long tri33 = Tri(n - 33);\n\
    \            long tri34 = Tri(n - 34);\n            long tri35 = Tri(n - 35);\n\
    \            long tri36 = Tri(n - 36);\n            long tri37 = Tri(n - 37);\n\
    \            long tri38 = Tri(n - 38);\n            long tri39 = Tri(n - 39);\n\
    \            long tri40 = Tri(n - 40);\n            long tri41 = Tri(n - 41);\n\
    \            long tri42 = Tri(n - 42);\n            long tri43 = Tri(n - 43);\n\
    \            long tri44", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) return result;\n        if (n == 1) return new List<long> {\
    \ 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n\
    \ - 4);", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n \
    \           long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n   \
    \         long tri4 = tri1 + tri2 + tri3;\n            result.Add(tri1);\n   \
    \         result.Add(tri2);\n            result.Add(tri3);\n            result.Add(tri4);\n\
    \            return result;\n        }\n        long tri1 = Tri(n - 1);\n    \
    \    long tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        long tri4\
    \ = tri1 + tri2 + tri3;\n        result.Add(tri1);\n        result.Add(tri2);\n\
    \        result.Add(tri3);\n        result.Add(tri4);\n        result.Add(tri1\
    \ + tri2 + tri3);\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(3);\n    \
    \        return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n    \
    \        result.Add(1);\n            return result;\n        }\n        if (n\
    \ == 1) {\n            result.Add(0);\n            result.Add(1);\n          \
    \  return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n            result.Add(Tri(n - 2) + Tri(n + 1));\n    \
    \    }\n        else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n            result.Add(Tri(n - 2) + Tri(n + 1));\n            result.Add(Tri(n\
    \ + 1));\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) {\n            result.Add(0);\n         \
    \   result.Add(1);\n            return result;\n        }\n        if (n == 1)\
    \ {\n            result.Add(1);\n            return result;\n        }\n     \
    \   if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n    \
    \    } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(2);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(1);\n            result.Add(n);\n   \
    \         return result;\n        }\n        long tri1 = Tri(n - 1);\n       \
    \ long tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        long tri4\
    \ = Tri(n - 4);\n        long tri5 = Tri(n - 5);\n        long tri6 = Tri(n -\
    \ 6);\n        long tri7 = Tri(n - 7);\n        long tri8 = Tri(n - 8);\n    \
    \    long tri9 = Tri(n - 9);\n        long tri10 = Tri(n - 10);\n        long\
    \ tri11 = Tri(n - 11);\n        long tri12 = Tri(n - 12);\n        long tri13\
    \ = Tri(n - 13);\n        long tri14 = Tri(n - 14);\n        long tri15 = Tri(n\
    \ - 15);\n        long tri16 = Tri(n - 16);\n        long tri17 = Tri(n - 17);\n\
    \        long tri18 = Tri(n - 18);\n        long tri19 = Tri(n - 19);\n      \
    \  long tri20 = Tri(n - 20);\n        long tri21 = Tri(n - 21);\n        long\
    \ tri22 = Tri(n - 22);\n        long tri23 = Tri(n - 23);\n        long tri24\
    \ = Tri(n - 24);\n        long tri25 = Tri(n - 25);\n        long tri26 = Tri(n\
    \ - 26);\n        long tri27 = Tri(n - 27);\n        long tri28 = Tri(n - 28);\n\
    \        long tri29 = Tri(n - 29);\n        long tri30 = Tri(n - 30);\n      \
    \  long tri31 = Tri(n - 31);\n        long tri32 = Tri(n - 32);\n        long\
    \ tri33 = Tri(n - 33);\n        long tri34 = Tri(n - 34);\n        long tri35\
    \ = Tri(n - 35);\n        long tri36 = Tri(n - 36);\n        long tri37 = Tri(n\
    \ - 37);\n        long tri38 = Tri(n - 38);\n        long tri39 = Tri(n - 39);\n\
    \        long tri40 = Tri(n - 40);\n        long tri41 = Tri(n - 41);\n      \
    \  long tri42 = Tri(n - 42);\n        long ", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) {\n            result.Add(0);\n         \
    \   return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        else\
    \ {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2));\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n == 2) return new List<long>() { 1, 2 };\n        if (n\
    \ % 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n -\
    \ 2);\n            long c = Tri(n + 1);\n            foreach (long x in a) result.Add(x);\n\
    \            foreach (long x in b) result.Add(x);\n            foreach (long x\
    \ in c) result.Add(x);\n            return result;\n        } else {\n       \
    \     long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long\
    \ c = Tri(n + 1);\n            foreach (long x in a) result.Add(x);\n        \
    \    foreach (long x in b) result.Add(x);\n            foreach (long x in c) result.Add(x);\n\
    \            long d = Tri(n - 3);\n            foreach (long x in d) result.Add(x);\n\
    \            return result;\n        }", "        List<long> result = new List<long>();\n\
    \        if (n == 0) result.Add(0);\n        if (n == 1) result.Add(1);\n    \
    \    if (n == 2) result.Add(3);\n        if (n % 2 == 0) result.Add(1 + n / 2);\n\
    \        else result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ return result;\n        if (n == 1) return new List<long>() { 1 };\n       \
    \ if (n == 2) return new List<long>() { 1, 2 };\n        if (n % 2 == 0) {\n \
    \           long a = Tri(n - 1);\n            long b = Tri(n - 2);\n         \
    \   long c = Tri(n + 1);\n            foreach (var item in a) {\n            \
    \    result.Add(item);\n            }\n            foreach (var item in b) {\n\
    \                result.Add(item);\n            }\n            foreach (var item\
    \ in c) {\n                result.Add(item);\n            }\n        } else {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = Tri(n + 1);\n            foreach (var item in a) {\n           \
    \     result.Add(item);\n            }\n            foreach (var item in b) {\n\
    \                result.Add(item);\n            }\n            foreach (var item\
    \ in c) {\n                result.Add(item);\n            }\n            result.Add(1);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n == 2) return new List<long>() { 1, 2 };\n        if (n\
    \ % 2 == 0) {\n            int a = Tri(n / 2);\n            int b = Tri(n - 1);\n\
    \            int c = Tri(n - 2);\n            int sum = a.Sum() + b.Sum() + c.Sum();\n\
    \            result.Add(sum);\n            return result;\n        }\n       \
    \ else {\n            int a = Tri(n / 2);\n            int b = Tri(n - 1);\n \
    \           int c = Tri(n - 2);\n            int sum = a.Sum() + b.Sum() + c.Sum();\n\
    \            result.Add(sum);\n            return result;\n        }", "     \
    \   List<long> result = new List<long>();\n        if (n == 0) {\n           \
    \ result.Add(0);\n            result.Add(1);\n            result.Add(1);\n   \
    \         return result;\n        }\n        if (n == 1) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     result.Add(2);\n            return result;\n        }\n        if (n % 2\
    \ == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n   \
    \         return result;\n        }\n        result.Add(Tri(n - 1) + Tri(n - 2));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   if (n == 0) {\n            result.Add(0);\n            return result;\n  \
    \      }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n        }\n  \
    \      result.Add(Tri(n - 1) + Tri(n - 2));\n        return result;", "      \
    \  List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long> { 1 };\n        if (n % 2 == 0) {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = a + b;\n            result.Add(c);\n        }\n        else {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = a + b;\n            result.Add(c);\n            result.Add(a + b);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n\
    \ - 4);", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ return result;\n        if (n == 1) return new List<long>() { 1 };\n       \
    \ if (n == 2) return new List<long>() { 1, 2 };\n        if (n % 2 == 0) {\n \
    \           long a = Tri(n / 2);\n            long b = Tri(n - 1);\n         \
    \   long c = Tri(n - 2);\n            long d = a + b + c;\n            result.Add(d);\n\
    \        }\n        else {\n            long a = Tri(n / 2);\n            long\
    \ b = Tri(n - 1);\n            long c = Tri(n - 2);\n            long d = a +\
    \ b + c;\n            result.Add(d);\n            long e = Tri(n - 3);\n     \
    \       result.Add(e);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) return Tri(n -\
    \ 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n - 2) +\
    \ Tri(n + 1) + Tri(n + 2);", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n         \
    \   result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n    \
    \        result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(2);\n    \
    \        result.Add(1);\n            return result;\n        }\n        long tri1\
    \ = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n -\
    \ 3);\n        result.AddRange(tri1);\n        result.AddRange(tri2);\n      \
    \  result.AddRange(tri3);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) return result;\n        if (n == 1)\
    \ return new List<long>() { 1 };\n        if (n == 2) return new List<long>()\
    \ { 1, 2 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n   \
    \         long b = Tri(n - 2);\n            long c = Tri(n + 1);\n           \
    \ foreach (long x in a) {\n                result.Add(x + b + c);\n          \
    \  }\n        } else {\n            long a = Tri(n - 1);\n            long b =\
    \ Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach (long x in\
    \ b) {\n                result.Add(x + a + c);\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  if (n == 0) return result;\n        if (n == 1) return new List<long>() { 1\
    \ };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1));\n            return result;\n        }\n        result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        result.Add(Tri(n - 2) + Tri(n - 1)\
    \ + Tri(n + 1));\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(3);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n\
    \        }\n        result.Add(Tri(n - 1) + Tri(n - 2));\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) result.Add(0);\n\
    \        if (n == 1) result.Add(1);\n        if (n == 2) result.Add(3);\n    \
    \    if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long\
    \ tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n            long tri4\
    \ = Tri(n - 4);\n            long tri5 = Tri(n - 5);\n            long tri6 =\
    \ Tri(n - 6);\n            long tri7 = Tri(n - 7);\n            long tri8 = Tri(n\
    \ - 8);\n            long tri9 = Tri(n - 9);\n            long tri10 = Tri(n -\
    \ 10);\n            long tri11 = Tri(n - 11);\n            long tri12 = Tri(n\
    \ - 12);\n            long tri13 = Tri(n - 13);\n            long tri14 = Tri(n\
    \ - 14);\n            long tri15 = Tri(n - 15);\n            long tri16 = Tri(n\
    \ - 16);\n            long tri17 = Tri(n - 17);\n            long tri18 = Tri(n\
    \ - 18);\n            long tri19 = Tri(n - 19);\n            long tri20 = Tri(n\
    \ - 20);\n            long tri21 = Tri(n - 21);\n            long tri22 = Tri(n\
    \ - 22);\n            long tri23 = Tri(n - 23);\n            long tri24 = Tri(n\
    \ - 24);\n            long tri25 = Tri(n - 25);\n            long tri26 = Tri(n\
    \ - 26);\n            long tri27 = Tri(n - 27);\n            long tri28 = Tri(n\
    \ - 28);\n            long tri29 = Tri(n - 29);\n            long tri30 = Tri(n\
    \ - 30);\n            long tri31 = Tri(n - 31);\n            long tri32 = Tri(n\
    \ - 32);\n            long tri33 = Tri(n - 33);\n            long tri34 = Tri(n\
    \ - 34);\n            long tri35 = Tri(n - 35);\n            long tri36 = Tri(n\
    \ - 36);\n            long tri37 = Tri(n - 37);\n            long tri38 = Tri(n\
    \ - 38);\n            long tri39 = Tri(n - 39);\n            long tri40 = Tri(n\
    \ - 40);\n            long tri41 = Tri(n - 41);\n            long tri42 = Tri(n\
    \ - 42);\n            long tri43 = Tri(n - 43);\n            long tri44 = Tri(n\
    \ - 44);\n            long tri45 = Tri(n - 45);\n            long tri46 = Tri(n\
    \ - 46);\n            ", "        List<long> result = new List<long>();\n    \
    \    if (n == 0) return result;\n        if (n == 1) return new List<long>() {\
    \ 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n -\
    \ 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2));\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) {\n            result.Add(0);\n         \
    \   result.Add(1);\n            result.Add(1);\n            result.Add(1);\n \
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(1);\n    \
    \        result.Add(2);\n            return result;\n        }\n        long tri1\
    \ = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n -\
    \ 3);\n        long tri4 = Tri(n - 4);\n        long tri5 = Tri(n - 5);\n    \
    \    long tri6 = Tri(n - 6);\n        long tri7 = Tri(n - 7);\n        long tri8\
    \ = Tri(n - 8);\n        long tri9 = Tri(n - 9);\n        long tri10 = Tri(n -\
    \ 10);\n        long tri11 = Tri(n - 11);\n        long tri12 = Tri(n - 12);\n\
    \        long tri13 = Tri(n - 13);\n        long tri14 = Tri(n - 14);\n      \
    \  long tri15 = Tri(n - 15);\n        long tri16 = Tri(n - 16);\n        long\
    \ tri17 = Tri(n - 17);\n        long tri18 = Tri(n - 18);\n        long tri19\
    \ = Tri(n - 19);\n        long tri20 = Tri(n - 20);\n        long tri21 = Tri(n\
    \ - 21);\n        long tri22 = Tri(n - 22);\n        long tri23 = Tri(n - 23);\n\
    \        long tri24 = Tri(n - 24);\n        long tri25 = Tri(n - 25);\n      \
    \  long tri26 = Tri(n - 26);\n        long tri27 = Tri(n - 27);\n        long\
    \ tri28 = Tri(n - 28);\n        long tri29 = Tri(n - 29);\n        long tri30\
    \ = Tri(n - 30);\n        long tri31 = Tri(n - 31);\n        long tri32 = Tri(n\
    \ - 32);\n        long tri33 = Tri(n - 33);\n        long tri34 = Tri(n - 34);\n\
    \        long tri35 = Tri(n - 35);\n        long tri36 = Tri(n - 36);\n      \
    \  long tri37 = Tri(n - 37);\n        long tri38 = Tri(n - 38);\n        long\
    \ tri39 = Tri(n - 39);\n        long tri40 = Tri(n - 40);\n        long tri41\
    \ = Tri(n - 41);\n        long tri42 = Tri(n - 42);\n        long tri43 = Tri(n\
    \ - 43);\n        long tri44 = Tri(n - 44);\n        long ", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n     \
    \       result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n -\
    \ 4) + Tri(n - 5) + Tri(n - 6));\n        }\n        return result;", "      \
    \  List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n            return\
    \ result;\n        }\n        else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 3) + Tri(n + 1));\n            return result;\n        }", " \
    \       List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 3 };\n        if (n % 2 == 0) {\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n            return\
    \ result;\n        }\n        result.Add(Tri(n - 1) + Tri(n - 2));\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ return result;\n        if (n == 1) return new List<long>() { 1 };\n       \
    \ if (n == 2) return new List<long>() { 1, 2 };\n        if (n % 2 == 0) {\n \
    \           long tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n   \
    \         long tri3 = Tri(n - 3);\n            long tri4 = Tri(n - 4);\n     \
    \       long tri5 = Tri(n - 5);\n            long tri6 = Tri(n - 6);\n       \
    \     long tri7 = Tri(n - 7);\n            long tri8 = Tri(n - 8);\n         \
    \   long tri9 = Tri(n - 9);\n            long tri10 = Tri(n - 10);\n         \
    \   long tri11 = Tri(n - 11);\n            long tri12 = Tri(n - 12);\n       \
    \     long tri13 = Tri(n - 13);\n            long tri14 = Tri(n - 14);\n     \
    \       long tri15 = Tri(n - 15);\n            long tri16 = Tri(n - 16);\n   \
    \         long tri17 = Tri(n - 17);\n            long tri18 = Tri(n - 18);\n \
    \           long tri19 = Tri(n - 19);\n            long tri20 = Tri(n - 20);\n\
    \            long tri21 = Tri(n - 21);\n            long tri22 = Tri(n - 22);\n\
    \            long tri23 = Tri(n - 23);\n            long tri24 = Tri(n - 24);\n\
    \            long tri25 = Tri(n - 25);\n            long tri26 = Tri(n - 26);\n\
    \            long tri27 = Tri(n - 27);\n            long tri28 = Tri(n - 28);\n\
    \            long tri29 = Tri(n - 29);\n            long tri30 = Tri(n - 30);\n\
    \            long tri31 = Tri(n - 31);\n            long tri32 = Tri(n - 32);\n\
    \            long tri33 = Tri(n - 33);\n            long tri34 = Tri(n - 34);\n\
    \            long tri35 = Tri(n - 35);\n            long tri36 = Tri(n - 36);\n\
    \            long tri37 = Tri(n - 37);\n            long tri38 = Tri(n - 38);\n\
    \            long tri39 = Tri(n - 39);\n            long tri40 = Tri(n - 40);\n\
    \            long tri41 = Tri(n - 41);\n            long tri42 = Tri(n - 42);\n\
    \            long tri43 = Tri(n - 43);\n            long tri44 = Tri(n - 44);\n\
    \            long tri45 = Tri(n - 45);\n", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(1);\n            result.Add(Tri(n - 1)\
    \ + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n == 2) return new List<long>()\
    \ { 1, 2 };\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n\
    \            long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n  \
    \          long tri4 = Tri(n - 4);\n            long tri5 = Tri(n - 5);\n    \
    \        long tri6 = Tri(n - 6);\n            long tri7 = Tri(n - 7);\n      \
    \      long tri8 = Tri(n - 8);\n            long tri9 = Tri(n - 9);\n        \
    \    long tri10 = Tri(n - 10);\n            long tri11 = Tri(n - 11);\n      \
    \      long tri12 = Tri(n - 12);\n            long tri13 = Tri(n - 13);\n    \
    \        long tri14 = Tri(n - 14);\n            long tri15 = Tri(n - 15);\n  \
    \          long tri16 = Tri(n - 16);\n            long tri17 = Tri(n - 17);\n\
    \            long tri18 = Tri(n - 18);\n            long tri19 = Tri(n - 19);\n\
    \            long tri20 = Tri(n - 20);\n            long tri21 = Tri(n - 21);\n\
    \            long tri22 = Tri(n - 22);\n            long tri23 = Tri(n - 23);\n\
    \            long tri24 = Tri(n - 24);\n            long tri25 = Tri(n - 25);\n\
    \            long tri26 = Tri(n - 26);\n            long tri27 = Tri(n - 27);\n\
    \            long tri28 = Tri(n - 28);\n            long tri29 = Tri(n - 29);\n\
    \            long tri30 = Tri(n - 30);\n            long tri31 = Tri(n - 31);\n\
    \            long tri32 = Tri(n - 32);\n            long tri33 = Tri(n - 33);\n\
    \            long tri34 = Tri(n - 34);\n            long tri35 = Tri(n - 35);\n\
    \            long tri36 = Tri(n - 36);\n            long tri37 = Tri(n - 37);\n\
    \            long tri38 = Tri(n - 38);\n            long tri39 = Tri(n - 39);\n\
    \            long tri40 = Tri(n - 40);\n            long tri41 = Tri(n - 41);\n\
    \            long tri42 = Tri(n - 42);\n            long tri43 = Tri(n - 43);\n\
    \            long tri44 = Tri(n - 44);\n            long tri45 = Tri(n - 45);\n",
  "        List<long> result = new List<long>();\n        if (n == 1) {\n        \
    \    result.Add(1);\n            return result;\n        }\n        if (n == 2)\
    \ {\n            result.Add(3);\n            return result;\n        }\n     \
    \   if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long tri2\
    \ = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n            long tri4 =\
    \ Tri(n - 4);\n            long tri5 = Tri(n - 5);\n            long tri6 = Tri(n\
    \ - 6);\n            long tri7 = Tri(n - 7);\n            long tri8 = Tri(n -\
    \ 8);\n            long tri9 = Tri(n - 9);\n            long tri10 = Tri(n - 10);\n\
    \            long tri11 = Tri(n - 11);\n            long tri12 = Tri(n - 12);\n\
    \            long tri13 = Tri(n - 13);\n            long tri14 = Tri(n - 14);\n\
    \            long tri15 = Tri(n - 15);\n            long tri16 = Tri(n - 16);\n\
    \            long tri17 = Tri(n - 17);\n            long tri18 = Tri(n - 18);\n\
    \            long tri19 = Tri(n - 19);\n            long tri20 = Tri(n - 20);\n\
    \            long tri21 = Tri(n - 21);\n            long tri22 = Tri(n - 22);\n\
    \            long tri23 = Tri(n - 23);\n            long tri24 = Tri(n - 24);\n\
    \            long tri25 = Tri(n - 25);\n            long tri26 = Tri(n - 26);\n\
    \            long tri27 = Tri(n - 27);\n            long tri28 = Tri(n - 28);\n\
    \            long tri29 = Tri(n - 29);\n            long tri30 = Tri(n - 30);\n\
    \            long tri31 = Tri(n - 31);\n            long tri32 = Tri(n - 32);\n\
    \            long tri33 = Tri(n - 33);\n            long tri34 = Tri(n - 34);\n\
    \            long tri35 = Tri(n - 35);\n            long tri36 = Tri(n - 36);\n\
    \            long tri37 = Tri(n - 37);\n            long tri38 = Tri(n - 38);\n\
    \            long tri39 = Tri(n - 39);\n            long tri40 = Tri(n - 40);\n\
    \            long tri41 = Tri(n - 41);\n            long tri42 = Tri(n - 42);\n\
    \            long tri43 = Tri(n - 43);\n            long tri44 = Tri(n - 44);\n\
    \            long tri45 = Tri(n - 45);\n            long tri46 = Tri(", "    \
    \    List<long> result = new List<long>();\n        if (n == 0) {\n          \
    \  result.Add(0);\n            result.Add(1);\n            return result;\n  \
    \      }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(1);\n            result.Add(Tri(n - 1)\
    \ + Tri(n - 2) + Tri(n + 1));\n        }\n        else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(2);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(2);\n            result.Add(1);\n       \
    \     result.Add(1);\n            return result;\n        }\n        long tri1\
    \ = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n -\
    \ 3);\n        long tri4 = Tri(n - 4);\n        long tri5 = Tri(n - 5);\n    \
    \    long tri6 = Tri(n - 6);\n        long tri7 = Tri(n - 7);\n        long tri8\
    \ = Tri(n - 8);\n        long tri9 = Tri(n - 9);\n        long tri10 = Tri(n -\
    \ 10);\n        long tri11 = Tri(n - 11);\n        long tri12 = Tri(n - 12);\n\
    \        long tri13 = Tri(n - 13);\n        long tri14 = Tri(n - 14);\n      \
    \  long tri15 = Tri(n - 15);\n        long tri16 = Tri(n - 16);\n        long\
    \ tri17 = Tri(n - 17);\n        long tri18 = Tri(n - 18);\n        long tri19\
    \ = Tri(n - 19);\n        long tri20 = Tri(n - 20);\n        long tri21 = Tri(n\
    \ - 21);\n        long tri22 = Tri(n - 22);\n        long tri23 = Tri(n - 23);\n\
    \        long tri24 = Tri(n - 24);\n        long tri25 = Tri(n - 25);\n      \
    \  long tri26 = Tri(n - 26);\n        long tri27 = Tri(n - 27);\n        long\
    \ tri28 = Tri(n - 28);\n        long tri29 = Tri(n - 29);\n        long tri30\
    \ = Tri(n - 30);\n        long tri31 = Tri(n - 31);\n        long tri32 = Tri(n\
    \ - 32);\n        long tri33 = Tri(n - 33);\n        long tri34 = Tri(n - 34);\n\
    \        long tri35 = Tri(n - 35);\n        long tri36 = Tri(n - 36);\n      \
    \  long tri37 = Tri(n - 37);\n        long tri38 = Tri(n - 38);\n        long\
    \ tri39 = Tri(n - 39);\n        long tri40 = Tri(n - 40);\n        long tri41\
    \ = Tri(n - 41);\n        long tri42 = Tri(n - 42);\n        long tri43 = Tri(n\
    \ - ", "        List<long> result = new List<long>();\n        if (n == 0) {\n\
    \            result.Add(0);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(3);\n    \
    \        return result;\n        }\n        long tri1 = Tri(n - 1);\n        long\
    \ tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        long tri4 = Tri(n\
    \ - 4);\n        result.AddRange(tri1);\n        result.AddRange(tri2);\n    \
    \    result.AddRange(tri3);\n        result.AddRange(tri4);\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            List<long> tri1 = Tri(n - 1);\n            List<long> tri2 = Tri(n\
    \ - 2);\n            tri1.AddRange(tri2);\n            result.AddRange(tri1);\n\
    \        } else {\n            List<long> tri1 = Tri(n - 1);\n            tri1.AddRange(Tri(n\
    \ - 2));\n            result.AddRange(tri1);\n            tri1.AddRange(Tri(n\
    \ - 3));\n            result.AddRange(tri1);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            return result;\n        }\n        if (n == 1)\
    \ {\n            result.Add(1);\n            return result;\n        }\n     \
    \   if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n    \
    \    } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n   \
    \         long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n     \
    \       long tri4 = tri1 + tri2 + tri3;\n            result.Add(tri4);\n     \
    \       return result;\n        }\n        else {\n            long tri1 = Tri(n\
    \ - 1);\n            long tri2 = Tri(n - 2);\n            long tri3 = tri1 + tri2;\n\
    \            result.Add(tri3);\n            return result;\n        }", "    \
    \    List<long> result = new List<long>();\n        if (n == 0) {\n          \
    \  result.Add(0);\n            result.Add(1);\n            return result;\n  \
    \      }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2));\n            result.Add(Tri(n + 1));\n\
    \        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 1) {\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2));\n            return result;\n        }\n        result.Add(Tri(n - 1)\
    \ + Tri(n - 2) + Tri(n + 1));\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n   \
    \         result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long tri2 =\
    \ Tri(n - 2);\n            long tri3 = Tri(n - 3);\n            result.Add(tri1\
    \ + tri2 + tri3);\n        }\n        else {\n            long tri1 = Tri(n -\
    \ 1);\n            long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n\
    \            result.Add(tri1 + tri2 + tri3);\n            result.Add(tri1 + tri2\
    \ + tri3);\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) {\n            result.Add(0);\n         \
    \   result.Add(1);\n            return result;\n        }\n        if (n == 1)\
    \ {\n            result.Add(1);\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(1);\n    \
    \        result.Add(2);\n            return result;\n        }\n        if (n\
    \ % 2 == 0) {\n            result.Add(1);\n            result.Add(n / 2);\n  \
    \          return result;\n        }\n        List<long> tri1 = Tri(n - 1);\n\
    \        List<long> tri2 = Tri(n - 2);\n        List<long> tri3 = Tri(n - 3);\n\
    \        List<long> tri4 = tri1.Concat(tri2).Concat(tri3).ToList();\n        result.AddRange(tri4);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(1);\n            result.Add(2);\n       \
    \     return result;\n        }\n        long a = Tri(n - 1);\n        long b\
    \ = Tri(n - 2);\n        long c = Tri(n - 3) + Tri(n - 1) + Tri(n - 2);\n    \
    \    result.AddRange(a);\n        result.AddRange(b);\n        result.AddRange(c);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a) {\n                result.Add(item);\n            }\n      \
    \      foreach (var item in b) {\n                result.Add(item);\n        \
    \    }\n            foreach (var item in c) {\n                result.Add(item);\n\
    \            }\n        } else {\n            long a = Tri(n - 1);\n         \
    \   long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a) {\n                result.Add(item);\n            }\n      \
    \      foreach (var item in b) {\n                result.Add(item);\n        \
    \    }\n            foreach (var item in c) {\n                result.Add(item);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) result.Add(0);\n        if (n == 1)\
    \ result.Add(1);\n        if (n == 2) result.Add(3);\n        if (n % 2 == 0)\
    \ {\n            long tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n\
    \            long tri3 = Tri(n - 3);\n            long tri4 = Tri(n - 4);\n  \
    \          long tri5 = Tri(n - 5);\n            long tri6 = Tri(n - 6);\n    \
    \        long tri7 = Tri(n - 7);\n            long tri8 = Tri(n - 8);\n      \
    \      long tri9 = Tri(n - 9);\n            long tri10 = Tri(n - 10);\n      \
    \      long tri11 = Tri(n - 11);\n            long tri12 = Tri(n - 12);\n    \
    \        long tri13 = Tri(n - 13);\n            long tri14 = Tri(n - 14);\n  \
    \          long tri15 = Tri(n - 15);\n            long tri16 = Tri(n - 16);\n\
    \            long tri17 = Tri(n - 17);\n            long tri18 = Tri(n - 18);\n\
    \            long tri19 = Tri(n - 19);\n            long tri20 = Tri(n - 20);\n\
    \            long tri21 = Tri(n - 21);\n            long tri22 = Tri(n - 22);\n\
    \            long tri23 = Tri(n - 23);\n            long tri24 = Tri(n - 24);\n\
    \            long tri25 = Tri(n - 25);\n            long tri26 = Tri(n - 26);\n\
    \            long tri27 = Tri(n - 27);\n            long tri28 = Tri(n - 28);\n\
    \            long tri29 = Tri(n - 29);\n            long tri30 = Tri(n - 30);\n\
    \            long tri31 = Tri(n - 31);\n            long tri32 = Tri(n - 32);\n\
    \            long tri33 = Tri(n - 33);\n            long tri34 = Tri(n - 34);\n\
    \            long tri35 = Tri(n - 35);\n            long tri36 = Tri(n - 36);\n\
    \            long tri37 = Tri(n - 37);\n            long tri38 = Tri(n - 38);\n\
    \            long tri39 = Tri(n - 39);\n            long tri40 = Tri(n - 40);\n\
    \            long tri41 = Tri(n - 41);\n            long tri42 = Tri(n - 42);\n\
    \            long tri43 = Tri(n - 43);\n            long tri44 = Tri(n - 44);\n\
    \            long tri45 = Tri(n - 45);\n            long tri46 = Tri(n - 46);\n\
    \            ", "        List<long> result = new List<long>();\n        if (n\
    \ == 0) result.Add(0);\n        if (n == 1) result.Add(1);\n        if (n == 2)\
    \ result.Add(2);\n        if (n % 2 == 0) result.Add(Tri(n - 1) + Tri(n - 2) +\
    \ Tri(n + 1));\n        else result.Add(Tri(n - 1) + Tri(n - 2));\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ {\n            result.Add(0);\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 1) {\n            result.Add(1);\n    \
    \        return result;\n        }\n        if (n == 2) {\n            result.Add(3);\n\
    \            return result;\n        }\n        long tri1 = Tri(n - 1);\n    \
    \    long tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        long tri4\
    \ = Tri(n - 4);\n        long tri5 = Tri(n - 5);\n        long tri6 = Tri(n -\
    \ 6);\n        long tri7 = Tri(n - 7);\n        long tri8 = Tri(n - 8);\n    \
    \    long tri9 = Tri(n - 9);\n        long tri10 = Tri(n - 10);\n        long\
    \ tri11 = Tri(n - 11);\n        long tri12 = Tri(n - 12);\n        long tri13\
    \ = Tri(n - 13);\n        long tri14 = Tri(n - 14);\n        long tri15 = Tri(n\
    \ - 15);\n        long tri16 = Tri(n - 16);\n        long tri17 = Tri(n - 17);\n\
    \        long tri18 = Tri(n - 18);\n        long tri19 = Tri(n - 19);\n      \
    \  long tri20 = Tri(n - 20);\n        long tri21 = Tri(n - 21);\n        long\
    \ tri22 = Tri(n - 22);\n        long tri23 = Tri(n - 23);\n        long tri24\
    \ = Tri(n - 24);\n        long tri25 = Tri(n - 25);\n        long tri26 = Tri(n\
    \ - 26);\n        long tri27 = Tri(n - 27);\n        long tri28 = Tri(n - 28);\n\
    \        long tri29 = Tri(n - 29);\n        long tri30 = Tri(n - 30);\n      \
    \  long tri31 = Tri(n - 31);\n        long tri32 = Tri(n - 32);\n        long\
    \ tri33 = Tri(n - 33);\n        long tri34 = Tri(n - 34);\n        long tri35\
    \ = Tri(n - 35);\n        long tri36 = Tri(n - 36);\n        long tri37 = Tri(n\
    \ - 37);\n        long tri38 = Tri(n - 38);\n        long tri39 = Tri(n - 39);\n\
    \        long tri40 = Tri(n - 40);\n        long tri41 = Tri(n - 41);\n      \
    \  long tri42 = Tri(n - 42);\n        long tri43 = Tri(n - 43);\n        long\
    \ tri44 = Tri(n - 44);\n        long tri45 = Tri", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n   \
    \         result.Add(1);\n            return result;\n        }\n        if (n\
    \ == 1) {\n            result.Add(1);\n            return result;\n        }\n\
    \        if (n == 2) {\n            result.Add(3);\n            return result;\n\
    \        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n\
    \        long tri3 = Tri(n - 3);\n        result.AddRange(tri1);\n        result.AddRange(tri2);\n\
    \        result.AddRange(tri3);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(2);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(2);\n            result.Add(1);\n       \
    \     result.Add(1);\n            return result;\n        }\n        if (n % 2\
    \ == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n   \
    \         return result;\n        }\n        result.Add(Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1));\n        result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 1) {\n        \
    \    result.Add(1);\n            return result;\n        }\n        if (n == 2)\
    \ {\n            result.Add(3);\n            return result;\n        }\n     \
    \   if (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long b =\
    \ Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach (long i in\
    \ a) {\n                result.Add(i);\n            }\n            foreach (long\
    \ j in b) {\n                result.Add(j);\n            }\n            foreach\
    \ (long k in c) {\n                result.Add(k);\n            }\n           \
    \ return result;\n        }\n        else {\n            long a = Tri(n - 1);\n\
    \            long b = Tri(n - 2);\n            long c = Tri(n + 1);\n        \
    \    foreach (long i in a) {\n                result.Add(i);\n            }\n\
    \            foreach (long j in b) {\n                result.Add(j);\n       \
    \     }\n            foreach (long k in c) {\n                result.Add(k);\n\
    \            }\n            return result;\n        }", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) return result;\n        if (n == 1)\
    \ return new List<long>() { 1 };\n        if (n == 2) return new List<long>()\
    \ { 1, 2, 3 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n\
    \            long b = Tri(n - 2);\n            long c = Tri(n - 3) + Tri(n - 1)\
    \ + Tri(n - 2) + Tri(n - 3);\n            long sum = a + b + c;\n            while\
    \ (sum < n) {\n                result.Add(sum);\n                sum += 2;\n \
    \           }\n        } else {\n            long a = Tri(n - 1);\n          \
    \  long b = Tri(n - 2) + Tri(n - 1);\n            long c = Tri(n - 3) + Tri(n\
    \ - 2) + Tri(n - 1);\n            long sum = a + b + c;\n            while (sum\
    \ < n) {\n                result.Add(sum);\n                sum += 3;\n      \
    \      }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) {\n            result.Add(0);\n         \
    \   result.Add(1);\n            result.Add(1);\n            return result;\n \
    \       }\n        if (n == 1) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        long\
    \ tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n\
    \ - 3);\n        long tri4 = tri1 + tri2 + tri3;\n        result.Add(tri1);\n\
    \        result.Add(tri2);\n        result.Add(tri3);\n        result.Add(tri4);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n == 2) return new List<long>() { 1, 2 };\n        if (n\
    \ % 2 == 0) {\n            long a = Tri(n / 2);\n            long b = Tri(n /\
    \ 2 + 1);\n            long c = Tri(n / 2 + 2);\n            long sum = 0;\n \
    \           foreach (long i in a) sum += i;\n            foreach (long i in b)\
    \ sum += i;\n            foreach (long i in c) sum += i;\n            result.Add(sum);\n\
    \        } else {\n            long a = Tri(n / 2);\n            long b = Tri(n\
    \ / 2 + 1);\n            long c = Tri(n / 2 + 2);\n            long sum = 0;\n\
    \            foreach (long i in a) sum += i;\n            foreach (long i in b)\
    \ sum += i;\n            foreach (long i in c) sum += i;\n            result.Add(sum);\n\
    \            long d = Tri(n / 2 + 1);\n            long e = Tri(n / 2 + 2);\n\
    \            long f = Tri(n / 2);\n            long sum = 0;\n            foreach\
    \ (long i in d) sum += i;\n            foreach (long i in e) sum += i;\n     \
    \       foreach (long i in f) sum += i;\n            result.Add(sum);\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n\
    \            return result;\n        }\n        long a = Tri(n - 1);\n       \
    \ long b = Tri(n - 2);\n        long c = a + b;\n        result.Add(c);\n    \
    \    result.Add(Tri(n - 3));\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) result.Add(0);\n        if (n == 1)\
    \ result.Add(1);\n        if (n == 2) result.Add(3);\n        if (n % 2 == 0)\
    \ {\n            long tri = Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n          \
    \  result.Add(tri);\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n   \
    \         result.Add(1);\n            return result;\n        }\n        if (n\
    \ == 1) {\n            result.Add(1);\n            return result;\n        }\n\
    \        if (n == 2) {\n            result.Add(2);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        else\
    \ {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ {\n            result.Add(0);\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 1) {\n            result.Add(1);\n    \
    \        return result;\n        }\n        if (n == 2) {\n            result.Add(3);\n\
    \            return result;\n        }\n        long a = Tri(n - 1);\n       \
    \ long b = Tri(n - 2);\n        long c = Tri(n - 3);\n        long sum = 0;\n\
    \        foreach (var item in a) {\n            sum += item;\n        }\n    \
    \    foreach (var item in b) {\n            sum += item;\n        }\n        foreach\
    \ (var item in c) {\n            sum += item;\n        }\n        result.Add(sum);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n == 2) return new List<long>() { 1, 2 };\n        if (n\
    \ % 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n -\
    \ 2);\n            long c = Tri(n + 1);\n            foreach (var item in a) {\n\
    \                result.Add(item);\n            }\n            foreach (var item\
    \ in b) {\n                result.Add(item);\n            }\n            foreach\
    \ (var item in c) {\n                result.Add(item);\n            }\n      \
    \  } else {\n            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n\
    \            long c = Tri(n + 1);\n            foreach (var item in a) {\n   \
    \             result.Add(item);\n            }\n            foreach (var item\
    \ in b) {\n                result.Add(item);\n            }\n            foreach\
    \ (var item in c) {\n                result.Add(item);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(1);\n            result.Add(2);\n       \
    \     return result;\n        }\n        long tri1 = Tri(n - 1);\n        long\
    \ tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        long tri4 = Tri(n\
    \ - 4);\n        long tri5 = Tri(n - 5);\n        long tri6 = Tri(n - 6);\n  \
    \      long tri7 = Tri(n - 7);\n        long tri8 = Tri(n - 8);\n        long\
    \ tri9 = Tri(n - 9);\n        long tri10 = Tri(n - 10);\n        long tri11 =\
    \ Tri(n - 11);\n        long tri12 = Tri(n - 12);\n        long tri13 = Tri(n\
    \ - 13);\n        long tri14 = Tri(n - 14);\n        long tri15 = Tri(n - 15);\n\
    \        long tri16 = Tri(n - 16);\n        long tri17 = Tri(n - 17);\n      \
    \  long tri18 = Tri(n - 18);\n        long tri19 = Tri(n - 19);\n        long\
    \ tri20 = Tri(n - 20);\n        long tri21 = Tri(n - 21);\n        long tri22\
    \ = Tri(n - 22);\n        long tri23 = Tri(n - 23);\n        long tri24 = Tri(n\
    \ - 24);\n        long tri25 = Tri(n - 25);\n        long tri26 = Tri(n - 26);\n\
    \        long tri27 = Tri(n - 27);\n        long tri28 = Tri(n - 28);\n      \
    \  long tri29 = Tri(n - 29);\n        long tri30 = Tri(n - 30);\n        long\
    \ tri31 = Tri(n - 31);\n        long tri32 = Tri(n - 32);\n        long tri33\
    \ = Tri(n - 33);\n        long tri34 = Tri(n - 34);\n        long tri35 = Tri(n\
    \ - 35);\n        long tri36 = Tri(n - 36);\n        long tri37 = Tri(n - 37);\n\
    \        long tri38 = Tri(n - 38);\n        long tri39 = Tri(n - 39);\n      \
    \  long tri40 = Tri(n - 40);\n        long tri41 = Tri(n - 41);\n        long\
    \ tri42 = Tri(n - 42);\n        long tri43 = Tri(n - 43);\n        long tri44\
    \ = Tri(n - 44", "        List<long> result = new List<long>();\n        if (n\
    \ == 0) {\n            result.Add(0);\n            result.Add(1);\n          \
    \  return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long tri2 =\
    \ Tri(n - 2);\n            long tri3 = Tri(n - 3);\n            long tri4 = tri1\
    \ + tri2 + tri3;\n            result.Add(tri1);\n            result.Add(tri2);\n\
    \            result.Add(tri3);\n            result.Add(tri4);\n            return\
    \ result;\n        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n\
    \ - 2);\n        long tri3 = tri1 + tri2;\n        result.Add(tri1);\n       \
    \ result.Add(tri2);\n        result.Add(tri3);\n        return result;", "   \
    \     List<long> result = new List<long>();\n        if (n == 0) {\n         \
    \   result.Add(0);\n            result.Add(1);\n            return result;\n \
    \       }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        }\n        else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            long tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n  \
    \          long tri3 = Tri(n + 1);\n            foreach (long i in tri1) {\n \
    \               result.Add(i);\n            }\n            foreach (long i in\
    \ tri2) {\n                result.Add(i);\n            }\n            foreach\
    \ (long i in tri3) {\n                result.Add(i);\n            }\n        }\
    \ else {\n            long tri1 = Tri(n - 1);\n            long tri2 = Tri(n -\
    \ 2);\n            long tri3 = Tri(n + 1);\n            foreach (long i in tri1)\
    \ {\n                result.Add(i);\n            }\n            foreach (long\
    \ i in tri2) {\n                result.Add(i);\n            }\n            foreach\
    \ (long i in tri3) {\n                result.Add(i);\n            }\n        \
    \    foreach (long i in tri1) {\n                result.Add(i);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(3);\n    \
    \        return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n        }\n  \
    \      result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n\
    \        }\n        result.Add(Tri(n - 1) + Tri(n - 2));\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(1);\n            result.Add(2);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(1);\n\
    \            result.Add(n / 2);\n            return result;\n        }\n     \
    \   List<long> tri1 = Tri(n - 1);\n        List<long> tri2 = Tri(n - 2);\n   \
    \     List<long> tri3 = Tri(n - 3);\n        List<long> tri4 = tri1.Concat(tri2).Concat(tri3).ToList();\n\
    \        result.AddRange(tri4);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0)\n            result.Add(0);\n\
    \        else if (n == 1)\n            result.Add(1);\n        else if (n % 2\
    \ == 0)\n            result.Add(Tri(n - 1) + Tri(n - 2));\n        else\n    \
    \        result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(1);\n            result.Add(2);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(1);\n\
    \            result.Add(n / 2);\n            result.Add(n / 2);\n            return\
    \ result;\n        }\n        List<long> left = Tri(n - 1);\n        List<long>\
    \ right = Tri(n - 2);\n        List<long> middle = left.Concat(right).ToList();\n\
    \        middle.Add(n);\n        result.AddRange(middle);\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) result.Add(0);\n\
    \        if (n == 1) result.Add(1);\n        if (n == 2) result.Add(3);\n    \
    \    if (n % 2 == 0) result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n     \
    \   else result.Add(Tri(n - 1) + Tri(n - 2));\n        return result;", "    \
    \    List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n - 3));\n            return\
    \ result;\n        }\n        result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n - 3));\n\
    \        result.Add(Tri(n - 2) + Tri(n - 3) + Tri(n - 4));\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n == 2) return\
    \ new List<long>() { 1, 2 };\n        if (n % 2 == 0) {\n            List<long>\
    \ tri = Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n            foreach (long i in\
    \ tri) {\n                result.Add(i);\n            }\n        } else {\n  \
    \          List<long> tri = Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n          \
    \  foreach (long i in tri) {\n                result.Add(i);\n            }\n\
    \            tri = Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n            foreach\
    \ (long i in tri) {\n                result.Add(i);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n        } else {\n            long a = Tri(n - 1);\n          \
    \  long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            long d\
    \ = Tri(n - 3);\n            long e = Tri(n - 4);\n            long f = Tri(n\
    \ - 5);\n            long g = Tri(n - 6);\n            long h = Tri(n - 7);\n\
    \            foreach (var item in a.Concat(b).Concat(c).Concat(d).Concat(e).Concat(f).Concat(g).Concat(h))\
    \ {\n                result.Add(item);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(1);\n            result.Add(2);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(1);\n\
    \            result.Add(n / 2);\n            return result;\n        }\n     \
    \   long tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3\
    \ = Tri(n - 3);\n        long tri4 = tri1 + tri2 + tri3;\n        result.Add(tri1);\n\
    \        result.Add(tri2);\n        result.Add(tri3);\n        result.Add(tri4);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        else\
    \ {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(2);\n            result.Add(1);\n       \
    \     return result;\n        }\n        long tri1 = Tri(n - 1);\n        long\
    \ tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        long tri4 = Tri(n\
    \ - 4);\n        result.Add(tri1);\n        result.Add(tri2);\n        result.Add(tri3);\n\
    \        result.Add(tri4);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n   \
    \         result.Add(1);\n            return result;\n        }\n        if (n\
    \ == 1) {\n            result.Add(1);\n            return result;\n        }\n\
    \        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n\
    \            result.Add(Tri(n + 1));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        if (n == 0) {\n          \
    \  result.Add(0);\n            result.Add(1);\n            return result;\n  \
    \      }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(3);\n    \
    \        return result;\n        }\n        long a = Tri(n - 1);\n        long\
    \ b = Tri(n - 2);\n        long c = Tri(n - 3);\n        long sum = 0;\n     \
    \   foreach (long i in a) {\n            sum += i;\n        }\n        foreach\
    \ (long i in b) {\n            sum += i;\n        }\n        foreach (long i in\
    \ c) {\n            sum += i;\n        }\n        result.Add(sum);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ return result;\n        if (n == 1) return new List<long>() { 1 };\n       \
    \ if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n +\
    \ 1));\n            return result;\n        }\n        result.Add(Tri(n - 1) +\
    \ Tri(n - 2) + Tri(n + 1));\n        result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        else\
    \ {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3)\
    \ + Tri(n - 4));\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n   \
    \         result.Add(1);\n            return result;\n        }\n        if (n\
    \ == 1) {\n            result.Add(1);\n            return result;\n        }\n\
    \        if (n == 2) {\n            result.Add(3);\n            return result;\n\
    \        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n\
    \        long tri3 = Tri(n - 3);\n        long sum = 0;\n        foreach (long\
    \ i in tri1) {\n            sum += i;\n        }\n        foreach (long i in tri2)\
    \ {\n            sum += i;\n        }\n        foreach (long i in tri3) {\n  \
    \          sum += i;\n        }\n        result.Add(sum);\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n         \
    \   result.Add(Tri(n + 1) + Tri(n + 2));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        if (n == 0) {\n          \
    \  result.Add(0);\n            result.Add(1);\n            return result;\n  \
    \      }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(2);\n    \
    \        result.Add(1);\n            return result;\n        }\n        long tri1\
    \ = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n -\
    \ 3);\n        long tri4 = tri1 + tri2 + tri3;\n        result.Add(tri1);\n  \
    \      result.Add(tri2);\n        result.Add(tri3);\n        result.Add(tri4);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            return result;\n       \
    \ }\n        if (n == 2) {\n            result.Add(1);\n            result.Add(2);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n     \
    \       result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 1) + Tri(n -\
    \ 2) + Tri(n + 1));\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) return result;\n        if (n == 1)\
    \ return new List<long>() { 1 };\n        if (n == 2) return new List<long>()\
    \ { 1, 2 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n   \
    \         long b = Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n\
    \            return result;\n        }\n        long a = Tri(n - 1);\n       \
    \ long b = Tri(n - 2);\n        long c = a + b;\n        result.Add(c);\n    \
    \    result.Add(a + b);\n        return result;"]
stop_tokens:
- "\n    }\n"
