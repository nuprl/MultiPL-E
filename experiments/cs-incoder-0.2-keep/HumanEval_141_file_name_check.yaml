name: HumanEval_141_file_name_check
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function which takes a string representing a file's\
  \ name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
  \ otherwise.\n    // A file's name is considered to be valid if and only if all\
  \ the following conditions \n    // are met:\n    // - There should not be more\
  \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
  \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
  \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
  \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
  \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"\
  1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\
  \    public static string FileNameCheck(string file_name) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
  example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
  )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
  MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
  )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\"\
  )));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
  /this_is_valid.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\"\
  )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"\
  Yes\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
  \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
  Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
  )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n\
  \    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
  final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_f4indsartal132.\"\
  )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\"\
  )));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n"
completions: ["        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex\
    \ regex = new Regex(pattern);\n        Match match = regex.Match(file_name);\n\
    \        if (match.Success) {\n            string sub_string = file_name.Substring(0,\
    \ match.Index);\n            if (sub_string.Length > 0) {\n                char\
    \ first_letter = sub_string[0];\n                if (first_letter >= 'a' && first_letter\
    \ <= 'z' || first_letter >= 'A' && first_letter <= 'Z') {\n                  \
    \  return \"Yes\";\n                }\n            }\n        }\n        return\
    \ \"No\";", "        string dotIndex = file_name.IndexOf('.');\n        if (dotIndex\
    \ == -1) {\n            return \"No\";\n        }\n        string firstChar =\
    \ file_name.Substring(0, 1);\n        string lastChar = file_name.Substring(dotIndex\
    \ + 1, 1);\n        if (firstChar.Length > 3 || firstChar.Length < 1 || firstChar.ToUpper()\
    \ != firstChar) {\n            return \"No\";\n        }\n        if (lastChar.Length\
    \ > 3 || lastChar.Length < 1 || lastChar.ToUpper() != lastChar) {\n          \
    \  return \"No\";\n        }\n        if (lastChar.ToUpper() != lastChar) {\n\
    \            return \"No\";\n        }\n        if (file_name.Substring(0, dotIndex).Length\
    \ > 3 || file_name.Substring(0, dotIndex).Length < 1 || file_name.Substring(0,\
    \ dotIndex).ToUpper() != file_name.Substring(0, dotIndex)) {\n            return\
    \ \"No\";\n        }\n        if (file_name.Substring(dotIndex + 1, 1).ToUpper()\
    \ != file_name.Substring(dotIndex + 1, 1)) {\n            return \"No\";\n   \
    \     }\n        if (file_name.Substring(0, dotIndex).ToUpper() != file_name.Substring(0,\
    \ dotIndex)) {\n            return \"No\";\n        }\n        return \"Yes\";",
  "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n            string\
    \ substr = file_name.Substring(0, file_name.IndexOf(\".\"));\n            if (substr.Length\
    \ > 0 && substr.StartsWith(string.Empty)) {\n                return \"No\";\n\
    \            }\n            string extension = file_name.Substring(file_name.IndexOf(\"\
    .\"));\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                return \"Yes\";\n            }\n        }\n \
    \       return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\")\n            return \"Yes\";\n        else\n \
    \           return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf('.') != -1) {\n                if (file_name.Substring(0,\
    \ 1).ToLower() != \"a\" && file_name.Substring(0, 1).ToLower() != \"b\" && file_name.Substring(0,\
    \ 1).ToLower() != \"c\" && file_name.Substring(0, 1).ToLower() != \"d\" && file_name.Substring(0,\
    \ 1).ToLower() != \"e\" && file_name.Substring(0, 1).ToLower() != \"f\" && file_name.Substring(0,\
    \ 1).ToLower() != \"g\" && file_name.Substring(0, 1).ToLower() != \"h\" && file_name.Substring(0,\
    \ 1).ToLower() != \"i\" && file_name.Substring(0, 1).ToLower() != \"j\" && file_name.Substring(0,\
    \ 1).ToLower() != \"k\" && file_name.Substring(0, 1).ToLower() != \"l\" && file_name.Substring(0,\
    \ 1).ToLower() != \"m\" && file_name.Substring(0, 1).ToLower() != \"n\" && file_name.Substring(0,\
    \ 1).ToLower() != \"o\" && file_name.Substring(0, 1).ToLower() != \"p\" && file_name.Substring(0,\
    \ 1).ToLower() != \"q\" && file_name.Substring(0, 1).ToLower() != \"r\" && file_name.Substring(0,\
    \ 1).ToLower() != \"s\" && file_name.Substring(0, 1).ToLower() != \"t\" && file_name.Substring(0,\
    \ 1).ToLower() != \"u\" && file_name.Substring(0, 1).ToLower() != \"v\" && file_name.Substring(0,\
    \ 1).ToLower() != \"w\" && file_name.Substring(0, 1).ToLower() != \"x\" && file_name.Substring(0,\
    \ 1).ToLower() != \"y\" && file_name.Substring(0, 1).ToLower() != \"z\") {\n \
    \                   return \"No\";\n                }\n            }\n       \
    \ }\n        return \"Yes\";", "        string dot = \".\";\n        string dot1\
    \ = file_name.Substring(0, 1);\n        string dot2 = file_name.Substring(0, 2);\n\
    \        string dot3 = file_name.Substring(0, 3);\n        string dot4 = file_name.Substring(0,\
    \ 4);\n        string dot5 = file_name.Substring(0, 5);\n        string dot6 =\
    \ file_name.Substring(0, 6);\n        string dot7 = file_name.Substring(0, 7);\n\
    \        string dot8 = file_name.Substring(0, 8);\n        string dot9 = file_name.Substring(0,\
    \ 9);\n        string dot10 = file_name.Substring(0, 10);\n        string dot11\
    \ = file_name.Substring(0, 11);\n        string dot12 = file_name.Substring(0,\
    \ 12);\n        string dot13 = file_name.Substring(0, 13);\n        string dot14\
    \ = file_name.Substring(0, 14);\n        string dot15 = file_name.Substring(0,\
    \ 15);\n        string dot16 = file_name.Substring(0, 16);\n        string dot17\
    \ = file_name.Substring(0, 17);\n        string dot18 = file_name.Substring(0,\
    \ 18);\n        string dot19 = file_name.Substring(0, 19);\n        string dot20\
    \ = file_name.Substring(0, 20);\n        string dot21 = file_name.Substring(0,\
    \ 21);\n        string dot22 = file_name.Substring(0, 22);\n        string dot23\
    \ = file_name.Substring(0, 23);\n        string dot24 = file_name.Substring(0,\
    \ 24);\n        string dot25 = file_name.Substring(0, 25);\n        string dot26\
    \ = file_name.Substring(0, 26);\n        string dot27 = file_name.Substring(0,\
    \ 27);\n        string dot28 = file_name.Substring(0, 28);\n        string dot29\
    \ = file_name.Substring(0, 29);\n        string dot30 = file_name.Substring(0,\
    \ 30);\n        string dot31 = file_name.Substring(0, 31);\n        string dot32\
    \ = file_name.Substring(0, 32);\n        string dot33 = file_name.Substring(0,\
    \ 33);\n        string dot34 = file_name.Substring(0, 34);\n        string dot35\
    \ = file_name.Substring(0, 35);\n        string dot36 = file_name.Substring(0,\
    \ 36);\n        string dot37 = file_name.Substring(0, 37);\n        string dot38\
    \ = file_name.Substring(0, 38);\n        string dot39 = file_name.Substring(0,\
    \ 39);\n        string dot40 = file_name.Substring(0, 40);\n        string dot41\
    \ = file_name.Substring(0, 41);\n        string dot", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            string substr = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            if (substr.Length > 0 && substr.StartsWith(\"\
    a\") && substr.EndsWith(\"z\") || substr.StartsWith(\"A\") && substr.EndsWith(\"\
    Z\")) {\n                return \"Yes\";\n            }\n            return \"\
    No\";\n        }\n        return \"No\";", "        // Your code goes here\n \
    \       string pattern = @\"^[0-9]{3}\\.[a-zA-Z0-9]{0,3}$\";\n        Regex regex\
    \ = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n           \
    \ if (file_name.IndexOf('.') != -1) {\n                if (file_name.Substring(0,\
    \ 1).ToLower() == \"a\" || file_name.Substring(0, 1).ToLower() == \"b\" || file_name.Substring(0,\
    \ 1).ToLower() == \"c\" || file_name.Substring(0, 1).ToLower() == \"d\" || file_name.Substring(0,\
    \ 1).ToLower() == \"e\" || file_name.Substring(0, 1).ToLower() == \"f\" || file_name.Substring(0,\
    \ 1).ToLower() == \"g\" || file_name.Substring(0, 1).ToLower() == \"h\" || file_name.Substring(0,\
    \ 1).ToLower() == \"i\" || file_name.Substring(0, 1).ToLower() == \"j\" || file_name.Substring(0,\
    \ 1).ToLower() == \"k\" || file_name.Substring(0, 1).ToLower() == \"l\" || file_name.Substring(0,\
    \ 1).ToLower() == \"m\" || file_name.Substring(0, 1).ToLower() == \"n\" || file_name.Substring(0,\
    \ 1).ToLower() == \"o\" || file_name.Substring(0, 1).ToLower() == \"p\" || file_name.Substring(0,\
    \ 1).ToLower() == \"q\" || file_name.Substring(0, 1).ToLower() == \"r\" || file_name.Substring(0,\
    \ 1).ToLower() == \"s\" || file_name.Substring(0, 1).ToLower() == \"t\" || file_name.Substring(0,\
    \ 1).ToLower() == \"u\" || file_name.Substring(0, 1).ToLower() == \"v\" || file_name.Substring(0,\
    \ 1).ToLower() == \"w\" || file_name.Substring(0, 1).ToLower() == \"x\" || file_name.Substring(0,\
    \ 1).ToLower() == \"y\" || file_name.Substring(0, 1).ToLower() == \"z\") {\n \
    \                   if (file_name.Substring(1).ToLower() == \"txt\" || file_name.Substring(1).ToLower()\
    \ == \"exe\" || file_name.Substring(1).ToLower() == \"dll\") {\n             \
    \           return \"Yes\";\n                    }\n                }\n      \
    \      }\n        }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        string result\
    \ = regex.Match(file_name).Value;\n        if (result == \"Yes\") {\n        \
    \    return \"Yes\";\n        }\n        else {\n            return \"No\";\n\
    \        }", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex\
    \ regex = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\") {\n            return \"Yes\";\n        }\n  \
    \      else {\n            return \"No\";\n        }", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            string sub_string = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            if (sub_string.Length > 0 && sub_string[0]\
    \ >= 'a' && sub_string[0] <= 'z') {\n                string extension = file_name.Substring(file_name.IndexOf(\"\
    .\"));\n                if (extension.Length > 0 && extension.ToLower() == \"\
    txt\" || extension.ToLower() == \"exe\" || extension.ToLower() == \"dll\") {\n\
    \                    return \"Yes\";\n                }\n            }\n     \
    \   }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf('.') != -1) {\n                if (file_name.Substring(0,\
    \ 1).IsLetter() && file_name.Substring(0, 1).ToLower() == file_name.Substring(0,\
    \ 1).ToLower()) {\n                    string extension = file_name.Substring(file_name.IndexOf('.')\
    \ + 1);\n                    if (extension.ToLower() == \"txt\" || extension.ToLower()\
    \ == \"exe\" || extension.ToLower() == \"dll\") {\n                        return\
    \ \"Yes\";\n                    }\n                }\n            }\n        }\n\
    \        return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string file_name = file_name.Substring(0, file_name.IndexOf('.'));\n\
    \            string extension = file_name.Substring(file_name.LastIndexOf('.'));\n\
    \            string extension_check = extension.ToLower();\n            bool extension_check2\
    \ = extension_check == \"txt\" || extension_check == \"exe\" || extension_check\
    \ == \"dll\";\n            if (extension_check2) {\n                return \"\
    Yes\";\n            } else {\n                return \"No\";\n            }\n\
    \        } else {\n            return \"No\";\n        }", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            string substr = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            string ext = file_name.Substring(file_name.IndexOf(\"\
    .\"));\n            if (ext.ToLower() == \"exe\" || ext.ToLower() == \"dll\")\
    \ {\n                return \"Yes\";\n            }\n            return \"No\"\
    ;\n        }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        Match match\
    \ = regex.Match(file_name);\n        if (match.Success) {\n            string\
    \ file_name = file_name.Substring(0, file_name.IndexOf(\".\"));\n            string\
    \ extension = file_name.Substring(file_name.LastIndexOf(\".\") + 1);\n       \
    \     if (extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    ) {\n                return \"Yes\";\n            }\n        }\n        return\
    \ \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-z][a-z][a-z]$\";\n   \
    \     Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string file_name = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n            string extension = file_name.Substring(file_name.IndexOf(\"\
    .\"));\n            if (extension.ToLower() == \"txt\" || extension.ToLower()\
    \ == \"exe\" || extension.ToLower() == \"dll\") {\n                return \"Yes\"\
    ;\n            }\n            else {\n                return \"No\";\n       \
    \     }\n        }\n        else {\n            return \"No\";\n        }", " \
    \       string pattern = @\"^[0-9]{3}\\.[a-z][a-z][a-z]$\";\n        Regex regex\
    \ = new Regex(pattern);\n        Match match = regex.Match(file_name);\n     \
    \   if (match.Success) {\n            string file_name = file_name.Substring(0,\
    \ file_name.Length - 1);\n            string extension = file_name.Substring(file_name.LastIndexOf('.'));\n\
    \            if (extension == \"txt\" || extension == \"exe\" || extension ==\
    \ \"dll\") {\n                return \"Yes\";\n            } else {\n        \
    \        return \"No\";\n            }\n        } else {\n            return \"\
    No\";\n        }", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n  \
    \      Regex regex = new Regex(pattern);\n        Match match = regex.Match(file_name);\n\
    \        if (match.Success) {\n            string file_name = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            string extension = file_name.Substring(file_name.LastIndexOf(\"\
    .\"));\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                return \"Yes\";\n            } else {\n     \
    \           return \"No\";\n            }\n        } else {\n            return\
    \ \"No\";\n        }", "        string dotPosition = file_name.IndexOf('.');\n\
    \        if (dotPosition == -1) {\n            return \"No\";\n        }\n   \
    \     string firstLetter = file_name.Substring(0, 1);\n        string lastLetter\
    \ = file_name.Substring(dotPosition, 1);\n        bool firstLetterIsLetter = Char.IsLetter(firstLetter);\n\
    \        bool lastLetterIsLetter = Char.IsLetter(lastLetter);\n        bool firstLetterIsLatinLetter\
    \ = firstLetterIsLetter && firstLetter >= 'a' && firstLetter <= 'z';\n       \
    \ bool lastLetterIsLatinLetter = lastLetterIsLetter && lastLetter >= 'a' && lastLetter\
    \ <= 'z';\n        bool firstLetterIsDigit = firstLetterIsLetter && firstLetter\
    \ >= '0' && firstLetter <= '9';\n        bool lastLetterIsDigit = lastLetterIsLetter\
    \ && lastLetter >= '0' && lastLetter <= '9';\n        bool firstLetterIsNotEmpty\
    \ = firstLetterIsLetter && !String.IsNullOrEmpty(firstLetter);\n        bool lastLetterIsNotEmpty\
    \ = lastLetterIsLetter && !String.IsNullOrEmpty(lastLetter);\n        bool firstLetterIsNotEmptyOrNotLetter\
    \ = firstLetterIsNotEmpty && !firstLetterIsLetter;\n        bool lastLetterIsNotEmptyOrNotLetter\
    \ = lastLetterIsNotEmpty && !lastLetterIsLetter;\n        bool firstLetterIsNotEmptyOrNotLetterOrDigit\
    \ = firstLetterIsNotEmptyOrNotLetter && !firstLetterIsDigit;\n        bool lastLetterIsNotEmptyOrNotLetterOrDigit\
    \ = lastLetterIsNotEmptyOrNotLetter && !lastLetterIsDigit;\n        bool firstLetterIsNotEmptyOrNotLetterOrDigitOrDot\
    \ = firstLetterIsNotEmptyOrNotLetterOrDigit && !dotPosition == -1;\n        bool\
    \ lastLetterIsNotEmptyOrNotLetterOrDigitOrDot = lastLetterIsNotEmptyOrNotLetterOrDigit\
    \ && !dotPosition == -1;\n        bool firstLetterIsNotEmptyOrNotLetterOrDigitOrDotOrDot\
    \ = firstLetterIsNotEmptyOrNotLetterOrDigitOrDot && !dotPosition == dotPosition;\n\
    \        bool lastLetterIsNotEmptyOrNotLetterOrDigitOrDotOrDot = lastLetterIsNotEmptyOrNotLetterOrDigitOrDot\
    \ && !dotPosition == dotPosition;\n        bool firstLetterIsNotEmptyOrNotLetterOrDigitOrDotOrDotOrDot\
    \ = firstLetterIs", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n \
    \       Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf(\".\") > 0) {\n                if (file_name.Substring(0,\
    \ 1).ToLower() == \"a\" || file_name.Substring(0, 1).ToLower() == \"b\" || file_name.Substring(0,\
    \ 1).ToLower() == \"c\" || file_name.Substring(0, 1).ToLower() == \"d\" || file_name.Substring(0,\
    \ 1).ToLower() == \"e\" || file_name.Substring(0, 1).ToLower() == \"f\" || file_name.Substring(0,\
    \ 1).ToLower() == \"g\" || file_name.Substring(0, 1).ToLower() == \"h\" || file_name.Substring(0,\
    \ 1).ToLower() == \"i\" || file_name.Substring(0, 1).ToLower() == \"j\" || file_name.Substring(0,\
    \ 1).ToLower() == \"k\" || file_name.Substring(0, 1).ToLower() == \"l\" || file_name.Substring(0,\
    \ 1).ToLower() == \"m\" || file_name.Substring(0, 1).ToLower() == \"n\" || file_name.Substring(0,\
    \ 1).ToLower() == \"o\" || file_name.Substring(0, 1).ToLower() == \"p\" || file_name.Substring(0,\
    \ 1).ToLower() == \"q\" || file_name.Substring(0, 1).ToLower() == \"r\" || file_name.Substring(0,\
    \ 1).ToLower() == \"s\" || file_name.Substring(0, 1).ToLower() == \"t\" || file_name.Substring(0,\
    \ 1).ToLower() == \"u\" || file_name.Substring(0, 1).ToLower() == \"v\" || file_name.Substring(0,\
    \ 1).ToLower() == \"w\" || file_name.Substring(0, 1).ToLower() == \"x\" || file_name.Substring(0,\
    \ 1).ToLower() == \"y\" || file_name.Substring(0, 1).ToLower() == \"z\" || file_name.Substring(0,\
    \ 1).ToLower() == \"A\" || file_name.Substring(0, 1).ToLower() == \"B\" || file_name.Substring(0,\
    \ 1).ToLower() == \"C\" || file_name.Substring(0, 1).ToLower() == \"D\" || file_name.Substring(0,\
    \ 1).ToLower() == \"E\" || file_name.Substring(0, 1).ToLower() == \"F\" || file_name.Substring(0,\
    \ 1).ToLower() == \"G\" || file_name.Substring(0, 1).ToLower() == \"H\" || file_name.Substring(0,\
    \ 1).ToLower() == \"I\" || file_name.Substring(0, 1).ToLower() == \"J\" || file_name.Substring(0,\
    \ 1).ToLower() == \"K\" || file_name.Substring(0, 1).ToLower() == \"L\" || file_name.Substring(0,\
    \ 1).ToLower() == \"M\" || file_name"]
stop_tokens:
- "\n    }\n"
