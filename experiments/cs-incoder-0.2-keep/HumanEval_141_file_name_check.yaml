name: HumanEval_141_file_name_check
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function which takes a string representing a file's\
  \ name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
  \ otherwise.\n    // A file's name is considered to be valid if and only if all\
  \ the following conditions \n    // are met:\n    // - There should not be more\
  \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
  \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
  \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
  \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
  \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"\
  1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\
  \    public static string FileNameCheck(string file_name) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
  example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
  )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
  MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
  )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\"\
  )));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
  /this_is_valid.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\"\
  )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"\
  Yes\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
  \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
  Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
  )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n\
  \    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
  final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_f4indsartal132.\"\
  )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\"\
  )));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n"
completions: ["        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex\
    \ regex = new Regex(pattern);\n        Match match = regex.Match(file_name);\n\
    \        if (match.Success) {\n            string sub_string = file_name.Substring(0,\
    \ match.Index);\n            if (sub_string.Length > 0) {\n                char\
    \ first_letter = sub_string[0];\n                if (first_letter >= 'a' && first_letter\
    \ <= 'z' || first_letter >= 'A' && first_letter <= 'Z') {\n                  \
    \  return \"Yes\";\n                }\n            }\n        }\n        return\
    \ \"No\";", "        string dotIndex = file_name.IndexOf('.');\n        if (dotIndex\
    \ == -1) {\n            return \"No\";\n        }\n        string firstChar =\
    \ file_name.Substring(0, 1);\n        string lastChar = file_name.Substring(dotIndex\
    \ + 1, 1);\n        if (firstChar.Length > 3 || firstChar.Length < 1 || firstChar.ToUpper()\
    \ != firstChar) {\n            return \"No\";\n        }\n        if (lastChar.Length\
    \ > 3 || lastChar.Length < 1 || lastChar.ToUpper() != lastChar) {\n          \
    \  return \"No\";\n        }\n        if (lastChar.ToUpper() != lastChar) {\n\
    \            return \"No\";\n        }\n        if (file_name.Substring(0, dotIndex).Length\
    \ > 3 || file_name.Substring(0, dotIndex).Length < 1 || file_name.Substring(0,\
    \ dotIndex).ToUpper() != file_name.Substring(0, dotIndex)) {\n            return\
    \ \"No\";\n        }\n        if (file_name.Substring(dotIndex + 1, 1).ToUpper()\
    \ != file_name.Substring(dotIndex + 1, 1)) {\n            return \"No\";\n   \
    \     }\n        if (file_name.Substring(0, dotIndex).ToUpper() != file_name.Substring(0,\
    \ dotIndex)) {\n            return \"No\";\n        }\n        return \"Yes\";",
  "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n            string\
    \ substr = file_name.Substring(0, file_name.IndexOf(\".\"));\n            if (substr.Length\
    \ > 0 && substr.StartsWith(string.Empty)) {\n                return \"No\";\n\
    \            }\n            string extension = file_name.Substring(file_name.IndexOf(\"\
    .\"));\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                return \"Yes\";\n            }\n        }\n \
    \       return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\")\n            return \"Yes\";\n        else\n \
    \           return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf('.') != -1) {\n                if (file_name.Substring(0,\
    \ 1).ToLower() != \"a\" && file_name.Substring(0, 1).ToLower() != \"b\" && file_name.Substring(0,\
    \ 1).ToLower() != \"c\" && file_name.Substring(0, 1).ToLower() != \"d\" && file_name.Substring(0,\
    \ 1).ToLower() != \"e\" && file_name.Substring(0, 1).ToLower() != \"f\" && file_name.Substring(0,\
    \ 1).ToLower() != \"g\" && file_name.Substring(0, 1).ToLower() != \"h\" && file_name.Substring(0,\
    \ 1).ToLower() != \"i\" && file_name.Substring(0, 1).ToLower() != \"j\" && file_name.Substring(0,\
    \ 1).ToLower() != \"k\" && file_name.Substring(0, 1).ToLower() != \"l\" && file_name.Substring(0,\
    \ 1).ToLower() != \"m\" && file_name.Substring(0, 1).ToLower() != \"n\" && file_name.Substring(0,\
    \ 1).ToLower() != \"o\" && file_name.Substring(0, 1).ToLower() != \"p\" && file_name.Substring(0,\
    \ 1).ToLower() != \"q\" && file_name.Substring(0, 1).ToLower() != \"r\" && file_name.Substring(0,\
    \ 1).ToLower() != \"s\" && file_name.Substring(0, 1).ToLower() != \"t\" && file_name.Substring(0,\
    \ 1).ToLower() != \"u\" && file_name.Substring(0, 1).ToLower() != \"v\" && file_name.Substring(0,\
    \ 1).ToLower() != \"w\" && file_name.Substring(0, 1).ToLower() != \"x\" && file_name.Substring(0,\
    \ 1).ToLower() != \"y\" && file_name.Substring(0, 1).ToLower() != \"z\") {\n \
    \                   return \"No\";\n                }\n            }\n       \
    \ }\n        return \"Yes\";", "        string dot = \".\";\n        string dot1\
    \ = file_name.Substring(0, 1);\n        string dot2 = file_name.Substring(0, 2);\n\
    \        string dot3 = file_name.Substring(0, 3);\n        string dot4 = file_name.Substring(0,\
    \ 4);\n        string dot5 = file_name.Substring(0, 5);\n        string dot6 =\
    \ file_name.Substring(0, 6);\n        string dot7 = file_name.Substring(0, 7);\n\
    \        string dot8 = file_name.Substring(0, 8);\n        string dot9 = file_name.Substring(0,\
    \ 9);\n        string dot10 = file_name.Substring(0, 10);\n        string dot11\
    \ = file_name.Substring(0, 11);\n        string dot12 = file_name.Substring(0,\
    \ 12);\n        string dot13 = file_name.Substring(0, 13);\n        string dot14\
    \ = file_name.Substring(0, 14);\n        string dot15 = file_name.Substring(0,\
    \ 15);\n        string dot16 = file_name.Substring(0, 16);\n        string dot17\
    \ = file_name.Substring(0, 17);\n        string dot18 = file_name.Substring(0,\
    \ 18);\n        string dot19 = file_name.Substring(0, 19);\n        string dot20\
    \ = file_name.Substring(0, 20);\n        string dot21 = file_name.Substring(0,\
    \ 21);\n        string dot22 = file_name.Substring(0, 22);\n        string dot23\
    \ = file_name.Substring(0, 23);\n        string dot24 = file_name.Substring(0,\
    \ 24);\n        string dot25 = file_name.Substring(0, 25);\n        string dot26\
    \ = file_name.Substring(0, 26);\n        string dot27 = file_name.Substring(0,\
    \ 27);\n        string dot28 = file_name.Substring(0, 28);\n        string dot29\
    \ = file_name.Substring(0, 29);\n        string dot30 = file_name.Substring(0,\
    \ 30);\n        string dot31 = file_name.Substring(0, 31);\n        string dot32\
    \ = file_name.Substring(0, 32);\n        string dot33 = file_name.Substring(0,\
    \ 33);\n        string dot34 = file_name.Substring(0, 34);\n        string dot35\
    \ = file_name.Substring(0, 35);\n        string dot36 = file_name.Substring(0,\
    \ 36);\n        string dot37 = file_name.Substring(0, 37);\n        string dot38\
    \ = file_name.Substring(0, 38);\n        string dot39 = file_name.Substring(0,\
    \ 39);\n        string dot40 = file_name.Substring(0, 40);\n        string dot41\
    \ = file_name.Substring(0, 41);\n        string dot", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            string substr = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            if (substr.Length > 0 && substr.StartsWith(\"\
    a\") && substr.EndsWith(\"z\") || substr.StartsWith(\"A\") && substr.EndsWith(\"\
    Z\")) {\n                return \"Yes\";\n            }\n            return \"\
    No\";\n        }\n        return \"No\";", "        // Your code goes here\n \
    \       string pattern = @\"^[0-9]{3}\\.[a-zA-Z0-9]{0,3}$\";\n        Regex regex\
    \ = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n           \
    \ if (file_name.IndexOf('.') != -1) {\n                if (file_name.Substring(0,\
    \ 1).ToLower() == \"a\" || file_name.Substring(0, 1).ToLower() == \"b\" || file_name.Substring(0,\
    \ 1).ToLower() == \"c\" || file_name.Substring(0, 1).ToLower() == \"d\" || file_name.Substring(0,\
    \ 1).ToLower() == \"e\" || file_name.Substring(0, 1).ToLower() == \"f\" || file_name.Substring(0,\
    \ 1).ToLower() == \"g\" || file_name.Substring(0, 1).ToLower() == \"h\" || file_name.Substring(0,\
    \ 1).ToLower() == \"i\" || file_name.Substring(0, 1).ToLower() == \"j\" || file_name.Substring(0,\
    \ 1).ToLower() == \"k\" || file_name.Substring(0, 1).ToLower() == \"l\" || file_name.Substring(0,\
    \ 1).ToLower() == \"m\" || file_name.Substring(0, 1).ToLower() == \"n\" || file_name.Substring(0,\
    \ 1).ToLower() == \"o\" || file_name.Substring(0, 1).ToLower() == \"p\" || file_name.Substring(0,\
    \ 1).ToLower() == \"q\" || file_name.Substring(0, 1).ToLower() == \"r\" || file_name.Substring(0,\
    \ 1).ToLower() == \"s\" || file_name.Substring(0, 1).ToLower() == \"t\" || file_name.Substring(0,\
    \ 1).ToLower() == \"u\" || file_name.Substring(0, 1).ToLower() == \"v\" || file_name.Substring(0,\
    \ 1).ToLower() == \"w\" || file_name.Substring(0, 1).ToLower() == \"x\" || file_name.Substring(0,\
    \ 1).ToLower() == \"y\" || file_name.Substring(0, 1).ToLower() == \"z\") {\n \
    \                   if (file_name.Substring(1).ToLower() == \"txt\" || file_name.Substring(1).ToLower()\
    \ == \"exe\" || file_name.Substring(1).ToLower() == \"dll\") {\n             \
    \           return \"Yes\";\n                    }\n                }\n      \
    \      }\n        }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        string result\
    \ = regex.Match(file_name).Value;\n        if (result == \"Yes\") {\n        \
    \    return \"Yes\";\n        }\n        else {\n            return \"No\";\n\
    \        }", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex\
    \ regex = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\") {\n            return \"Yes\";\n        }\n  \
    \      else {\n            return \"No\";\n        }", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            string sub_string = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            if (sub_string.Length > 0 && sub_string[0]\
    \ >= 'a' && sub_string[0] <= 'z') {\n                string extension = file_name.Substring(file_name.IndexOf(\"\
    .\"));\n                if (extension.Length > 0 && extension.ToLower() == \"\
    txt\" || extension.ToLower() == \"exe\" || extension.ToLower() == \"dll\") {\n\
    \                    return \"Yes\";\n                }\n            }\n     \
    \   }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf('.') != -1) {\n                if (file_name.Substring(0,\
    \ 1).IsLetter() && file_name.Substring(0, 1).ToLower() == file_name.Substring(0,\
    \ 1).ToLower()) {\n                    string extension = file_name.Substring(file_name.IndexOf('.')\
    \ + 1);\n                    if (extension.ToLower() == \"txt\" || extension.ToLower()\
    \ == \"exe\" || extension.ToLower() == \"dll\") {\n                        return\
    \ \"Yes\";\n                    }\n                }\n            }\n        }\n\
    \        return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string file_name = file_name.Substring(0, file_name.IndexOf('.'));\n\
    \            string extension = file_name.Substring(file_name.LastIndexOf('.'));\n\
    \            string extension_check = extension.ToLower();\n            bool extension_check2\
    \ = extension_check == \"txt\" || extension_check == \"exe\" || extension_check\
    \ == \"dll\";\n            if (extension_check2) {\n                return \"\
    Yes\";\n            } else {\n                return \"No\";\n            }\n\
    \        } else {\n            return \"No\";\n        }", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            string substr = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            string ext = file_name.Substring(file_name.IndexOf(\"\
    .\"));\n            if (ext.ToLower() == \"exe\" || ext.ToLower() == \"dll\")\
    \ {\n                return \"Yes\";\n            }\n            return \"No\"\
    ;\n        }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        Match match\
    \ = regex.Match(file_name);\n        if (match.Success) {\n            string\
    \ file_name = file_name.Substring(0, file_name.IndexOf(\".\"));\n            string\
    \ extension = file_name.Substring(file_name.LastIndexOf(\".\") + 1);\n       \
    \     if (extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    ) {\n                return \"Yes\";\n            }\n        }\n        return\
    \ \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-z][a-z][a-z]$\";\n   \
    \     Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string file_name = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n            string extension = file_name.Substring(file_name.IndexOf(\"\
    .\"));\n            if (extension.ToLower() == \"txt\" || extension.ToLower()\
    \ == \"exe\" || extension.ToLower() == \"dll\") {\n                return \"Yes\"\
    ;\n            }\n            else {\n                return \"No\";\n       \
    \     }\n        }\n        else {\n            return \"No\";\n        }", " \
    \       string pattern = @\"^[0-9]{3}\\.[a-z][a-z][a-z]$\";\n        Regex regex\
    \ = new Regex(pattern);\n        Match match = regex.Match(file_name);\n     \
    \   if (match.Success) {\n            string file_name = file_name.Substring(0,\
    \ file_name.Length - 1);\n            string extension = file_name.Substring(file_name.LastIndexOf('.'));\n\
    \            if (extension == \"txt\" || extension == \"exe\" || extension ==\
    \ \"dll\") {\n                return \"Yes\";\n            } else {\n        \
    \        return \"No\";\n            }\n        } else {\n            return \"\
    No\";\n        }", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n  \
    \      Regex regex = new Regex(pattern);\n        Match match = regex.Match(file_name);\n\
    \        if (match.Success) {\n            string file_name = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            string extension = file_name.Substring(file_name.LastIndexOf(\"\
    .\"));\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                return \"Yes\";\n            } else {\n     \
    \           return \"No\";\n            }\n        } else {\n            return\
    \ \"No\";\n        }", "        string dotPosition = file_name.IndexOf('.');\n\
    \        if (dotPosition == -1) {\n            return \"No\";\n        }\n   \
    \     string firstLetter = file_name.Substring(0, 1);\n        string lastLetter\
    \ = file_name.Substring(dotPosition, 1);\n        bool firstLetterIsLetter = Char.IsLetter(firstLetter);\n\
    \        bool lastLetterIsLetter = Char.IsLetter(lastLetter);\n        bool firstLetterIsLatinLetter\
    \ = firstLetterIsLetter && firstLetter >= 'a' && firstLetter <= 'z';\n       \
    \ bool lastLetterIsLatinLetter = lastLetterIsLetter && lastLetter >= 'a' && lastLetter\
    \ <= 'z';\n        bool firstLetterIsDigit = firstLetterIsLetter && firstLetter\
    \ >= '0' && firstLetter <= '9';\n        bool lastLetterIsDigit = lastLetterIsLetter\
    \ && lastLetter >= '0' && lastLetter <= '9';\n        bool firstLetterIsNotEmpty\
    \ = firstLetterIsLetter && !String.IsNullOrEmpty(firstLetter);\n        bool lastLetterIsNotEmpty\
    \ = lastLetterIsLetter && !String.IsNullOrEmpty(lastLetter);\n        bool firstLetterIsNotEmptyOrNotLetter\
    \ = firstLetterIsNotEmpty && !firstLetterIsLetter;\n        bool lastLetterIsNotEmptyOrNotLetter\
    \ = lastLetterIsNotEmpty && !lastLetterIsLetter;\n        bool firstLetterIsNotEmptyOrNotLetterOrDigit\
    \ = firstLetterIsNotEmptyOrNotLetter && !firstLetterIsDigit;\n        bool lastLetterIsNotEmptyOrNotLetterOrDigit\
    \ = lastLetterIsNotEmptyOrNotLetter && !lastLetterIsDigit;\n        bool firstLetterIsNotEmptyOrNotLetterOrDigitOrDot\
    \ = firstLetterIsNotEmptyOrNotLetterOrDigit && !dotPosition == -1;\n        bool\
    \ lastLetterIsNotEmptyOrNotLetterOrDigitOrDot = lastLetterIsNotEmptyOrNotLetterOrDigit\
    \ && !dotPosition == -1;\n        bool firstLetterIsNotEmptyOrNotLetterOrDigitOrDotOrDot\
    \ = firstLetterIsNotEmptyOrNotLetterOrDigitOrDot && !dotPosition == dotPosition;\n\
    \        bool lastLetterIsNotEmptyOrNotLetterOrDigitOrDotOrDot = lastLetterIsNotEmptyOrNotLetterOrDigitOrDot\
    \ && !dotPosition == dotPosition;\n        bool firstLetterIsNotEmptyOrNotLetterOrDigitOrDotOrDotOrDot\
    \ = firstLetterIs", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n \
    \       Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf(\".\") > 0) {\n                if (file_name.Substring(0,\
    \ 1).ToLower() == \"a\" || file_name.Substring(0, 1).ToLower() == \"b\" || file_name.Substring(0,\
    \ 1).ToLower() == \"c\" || file_name.Substring(0, 1).ToLower() == \"d\" || file_name.Substring(0,\
    \ 1).ToLower() == \"e\" || file_name.Substring(0, 1).ToLower() == \"f\" || file_name.Substring(0,\
    \ 1).ToLower() == \"g\" || file_name.Substring(0, 1).ToLower() == \"h\" || file_name.Substring(0,\
    \ 1).ToLower() == \"i\" || file_name.Substring(0, 1).ToLower() == \"j\" || file_name.Substring(0,\
    \ 1).ToLower() == \"k\" || file_name.Substring(0, 1).ToLower() == \"l\" || file_name.Substring(0,\
    \ 1).ToLower() == \"m\" || file_name.Substring(0, 1).ToLower() == \"n\" || file_name.Substring(0,\
    \ 1).ToLower() == \"o\" || file_name.Substring(0, 1).ToLower() == \"p\" || file_name.Substring(0,\
    \ 1).ToLower() == \"q\" || file_name.Substring(0, 1).ToLower() == \"r\" || file_name.Substring(0,\
    \ 1).ToLower() == \"s\" || file_name.Substring(0, 1).ToLower() == \"t\" || file_name.Substring(0,\
    \ 1).ToLower() == \"u\" || file_name.Substring(0, 1).ToLower() == \"v\" || file_name.Substring(0,\
    \ 1).ToLower() == \"w\" || file_name.Substring(0, 1).ToLower() == \"x\" || file_name.Substring(0,\
    \ 1).ToLower() == \"y\" || file_name.Substring(0, 1).ToLower() == \"z\" || file_name.Substring(0,\
    \ 1).ToLower() == \"A\" || file_name.Substring(0, 1).ToLower() == \"B\" || file_name.Substring(0,\
    \ 1).ToLower() == \"C\" || file_name.Substring(0, 1).ToLower() == \"D\" || file_name.Substring(0,\
    \ 1).ToLower() == \"E\" || file_name.Substring(0, 1).ToLower() == \"F\" || file_name.Substring(0,\
    \ 1).ToLower() == \"G\" || file_name.Substring(0, 1).ToLower() == \"H\" || file_name.Substring(0,\
    \ 1).ToLower() == \"I\" || file_name.Substring(0, 1).ToLower() == \"J\" || file_name.Substring(0,\
    \ 1).ToLower() == \"K\" || file_name.Substring(0, 1).ToLower() == \"L\" || file_name.Substring(0,\
    \ 1).ToLower() == \"M\" || file_name", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string file_name = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n            string extension = file_name.Substring(file_name.LastIndexOf(\"\
    .\") + 1);\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                return \"Yes\";\n            }\n        }\n \
    \       return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-z][a-z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf('.') != -1) {\n                if (file_name.Substring(0,\
    \ 1).IsLetter()) {\n                    string extension = file_name.Substring(1,\
    \ file_name.Length - 2);\n                    if (extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\") {\n                        return \"Yes\"\
    ;\n                    }\n                }\n            }\n        }\n      \
    \  return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z0-9]+$\";\n\
    \        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            int index = file_name.IndexOf(\".\");\n            if (index\
    \ > 0) {\n                string before_dot = file_name.Substring(0, index);\n\
    \                string after_dot = file_name.Substring(index + 1);\n        \
    \        if (before_dot.Length > 0 && after_dot.Length > 0) {\n              \
    \      string pattern1 = @\"^[a-zA-Z]+$\";\n                    Regex regex1 =\
    \ new Regex(pattern1);\n                    if (regex1.IsMatch(before_dot) &&\
    \ after_dot.Contains(\"txt\") || after_dot.Contains(\"exe\") || after_dot.Contains(\"\
    dll\")) {\n                        return \"Yes\";\n                    }\n  \
    \              }\n            }\n        }\n        return \"No\";", "       \
    \ string dotIndex = file_name.IndexOf('.');\n        if (dotIndex == -1) {\n \
    \           return \"No\";\n        }\n        string firstLetter = file_name.Substring(0,\
    \ dotIndex);\n        string lastLetter = file_name.Substring(dotIndex + 1);\n\
    \        bool firstLetterIsLetter = firstLetter.All(c => char.IsLetter(c));\n\
    \        bool lastLetterIsFile = lastLetter.ToLower() == \"txt\" || lastLetter.ToLower()\
    \ == \"exe\" || lastLetter.ToLower() == \"dll\";\n        bool firstLetterIsLatinLetter\
    \ = firstLetter.All(c => char.IsLetter(c) && c >= 'a' && c <= 'z');\n        bool\
    \ lastLetterIsFileOrLatinLetter = lastLetterIsFile || lastLetterIsLatinLetter;\n\
    \        if (firstLetterIsLetter && lastLetterIsFileOrLatinLetter) {\n       \
    \     return \"Yes\";\n        }\n        return \"No\";", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            string file_name = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            string extension = file_name.Substring(file_name.IndexOf(\"\
    .\"));\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                return \"Yes\";\n            }\n        }\n \
    \       return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z0-9]{0,3}$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string file_name = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n            string extension = file_name.Substring(file_name.LastIndexOf(\"\
    .\") + 1);\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                return \"Yes\";\n            }\n        }\n \
    \       return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf('.') != -1) {\n                if (file_name.Substring(0,\
    \ 1).ToLower() != \"a\" && file_name.Substring(0, 1).ToLower() != \"b\" && file_name.Substring(0,\
    \ 1).ToLower() != \"c\" && file_name.Substring(0, 1).ToLower() != \"d\" && file_name.Substring(0,\
    \ 1).ToLower() != \"e\" && file_name.Substring(0, 1).ToLower() != \"f\" && file_name.Substring(0,\
    \ 1).ToLower() != \"g\" && file_name.Substring(0, 1).ToLower() != \"h\" && file_name.Substring(0,\
    \ 1).ToLower() != \"i\" && file_name.Substring(0, 1).ToLower() != \"j\" && file_name.Substring(0,\
    \ 1).ToLower() != \"k\" && file_name.Substring(0, 1).ToLower() != \"l\" && file_name.Substring(0,\
    \ 1).ToLower() != \"m\" && file_name.Substring(0, 1).ToLower() != \"n\" && file_name.Substring(0,\
    \ 1).ToLower() != \"o\" && file_name.Substring(0, 1).ToLower() != \"p\" && file_name.Substring(0,\
    \ 1).ToLower() != \"q\" && file_name.Substring(0, 1).ToLower() != \"r\" && file_name.Substring(0,\
    \ 1).ToLower() != \"s\" && file_name.Substring(0, 1).ToLower() != \"t\" && file_name.Substring(0,\
    \ 1).ToLower() != \"u\" && file_name.Substring(0, 1).ToLower() != \"v\" && file_name.Substring(0,\
    \ 1).ToLower() != \"w\" && file_name.Substring(0, 1).ToLower() != \"x\" && file_name.Substring(0,\
    \ 1).ToLower() != \"y\" && file_name.Substring(0, 1).ToLower() != \"z\") {\n \
    \                   return \"No\";\n                }\n            }\n       \
    \ }\n        return \"Yes\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\") {\n            return \"Yes\";\n        }\n  \
    \      else {\n            return \"No\";\n        }", "        // Your code here\n\
    \        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex =\
    \ new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n            if\
    \ (file_name.IndexOf(\".\") > 0) {\n                if (file_name.Substring(0,\
    \ 1).ToLower() == \"a\" || file_name.Substring(0, 1).ToLower() == \"b\" || file_name.Substring(0,\
    \ 1).ToLower() == \"c\" || file_name.Substring(0, 1).ToLower() == \"d\" || file_name.Substring(0,\
    \ 1).ToLower() == \"e\" || file_name.Substring(0, 1).ToLower() == \"f\" || file_name.Substring(0,\
    \ 1).ToLower() == \"g\" || file_name.Substring(0, 1).ToLower() == \"h\" || file_name.Substring(0,\
    \ 1).ToLower() == \"i\" || file_name.Substring(0, 1).ToLower() == \"j\" || file_name.Substring(0,\
    \ 1).ToLower() == \"k\" || file_name.Substring(0, 1).ToLower() == \"l\" || file_name.Substring(0,\
    \ 1).ToLower() == \"m\" || file_name.Substring(0, 1).ToLower() == \"n\" || file_name.Substring(0,\
    \ 1).ToLower() == \"o\" || file_name.Substring(0, 1).ToLower() == \"p\" || file_name.Substring(0,\
    \ 1).ToLower() == \"q\" || file_name.Substring(0, 1).ToLower() == \"r\" || file_name.Substring(0,\
    \ 1).ToLower() == \"s\" || file_name.Substring(0, 1).ToLower() == \"t\" || file_name.Substring(0,\
    \ 1).ToLower() == \"u\" || file_name.Substring(0, 1).ToLower() == \"v\" || file_name.Substring(0,\
    \ 1).ToLower() == \"w\" || file_name.Substring(0, 1).ToLower() == \"x\" || file_name.Substring(0,\
    \ 1).ToLower() == \"y\" || file_name.Substring(0, 1).ToLower() == \"z\" || file_name.Substring(0,\
    \ 1).ToLower() == \"A\" || file_name.Substring(0, 1).ToLower() == \"B\" || file_name.Substring(0,\
    \ 1).ToLower() == \"C\" || file_name.Substring(0, 1).ToLower() == \"D\" || file_name.Substring(0,\
    \ 1).ToLower() == \"E\" || file_name.Substring(0, 1).ToLower() == \"F\" || file_name.Substring(0,\
    \ 1).ToLower() == \"G\" || file_name.Substring(0, 1).ToLower() == \"H\" || file_name.Substring(0,\
    \ 1).ToLower() == \"I\" || file_name.Substring(0, 1).ToLower() == \"J\" || file_name.Substring(0,\
    \ 1).ToLower() == \"K\" || file_name.Substring(0, 1).ToLower() == \"L\" || file_name.Substring(0,\
    \ 1).ToLow", "        // Your code here\n        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        string result\
    \ = regex.Match(file_name).Value;\n        if (result == \"Yes\")\n          \
    \  return \"Yes\";\n        else\n            return \"No\";", "        string\
    \ pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            string substr = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            if (substr.Length > 0 && substr.StartsWith(\"\
    a\") && substr.EndsWith(\"z\") || substr.StartsWith(\"A\") && substr.EndsWith(\"\
    Z\")) {\n                string extension = file_name.Substring(file_name.IndexOf(\"\
    .\"));\n                if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                    return \"Yes\";\n                }\n    \
    \        }\n        }\n        return \"No\";", "        string pattern = @\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n       \
    \ if (regex.IsMatch(file_name)) {\n            string substr = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            string substr_2 = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            string substr_3 = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            string substr_4 = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            string substr_5 = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            string substr_6 = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            string substr_7 = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            string substr_8 = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            string substr_9 = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            string substr_10 = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            string substr_11 = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            string substr_12 = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            string substr_13 = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            string substr_14 = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            string substr_15 = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            string substr_16 = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            string substr_17 = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            string substr_18 = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            string substr_19 = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            string substr_20 = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            string substr_21 = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            string substr_22 = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            string substr_23 = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            string substr_24 = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            string substr_25 = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            string substr_26 = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex\
    \ regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n     \
    \       if (file_name.IndexOf('.') != -1) {\n                if (file_name.Substring(0,\
    \ 1).IsLetter() && file_name.Substring(0, 1).IsUpper()) {\n                  \
    \  string extension = file_name.Substring(file_name.IndexOf('.') + 1);\n     \
    \               string[] extensions = { \"txt\", \"exe\", \"dll\" };\n       \
    \             bool isMatch = extensions.Contains(extension);\n               \
    \     return isMatch ? \"Yes\" : \"No\";\n                }\n            }\n \
    \       }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\")\n            return \"Yes\";\n        else\n \
    \           return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf('.') != -1) {\n                string before_dot\
    \ = file_name.Substring(0, file_name.IndexOf('.'));\n                if (before_dot.Length\
    \ > 0) {\n                    string after_dot = file_name.Substring(file_name.IndexOf('.')\
    \ + 1);\n                    if (!after_dot.Contains(\"txt\") && !after_dot.Contains(\"\
    exe\") && !after_dot.Contains(\"dll\")) {\n                        return \"No\"\
    ;\n                    }\n                }\n            }\n            return\
    \ \"Yes\";\n        }\n        return \"No\";", "        string pattern = @\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n       \
    \ if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf('.') != -1)\
    \ {\n                string before_dot = file_name.Substring(0, file_name.IndexOf('.'));\n\
    \                if (before_dot.Length > 0) {\n                    string after_dot\
    \ = file_name.Substring(file_name.IndexOf('.') + 1);\n                    if (after_dot.Length\
    \ > 0) {\n                        string valid_extensions = after_dot.Split(',').ToList().ConvertAll(x\
    \ => x.Trim());\n                        if (valid_extensions.Contains(after_dot))\
    \ {\n                            return \"Yes\";\n                        }\n\
    \                    }\n                }\n            }\n            return \"\
    No\";\n        }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf(\".\") != -1) {\n                if (file_name.Substring(0,\
    \ 1).IsLetter()) {\n                    string extension = file_name.Substring(1,\
    \ file_name.Length - 2);\n                    string[] extensions = { \"txt\"\
    , \"exe\", \"dll\" };\n                    if (extensions.Contains(extension))\
    \ {\n                        return \"Yes\";\n                    }\n        \
    \        }\n            }\n            return \"No\";\n        }\n        return\
    \ \"No\";", "        string dotIndex = file_name.IndexOf('.');\n        if (dotIndex\
    \ == -1) {\n            return \"No\";\n        }\n        string firstLetter\
    \ = file_name.Substring(0, dotIndex);\n        string lastLetter = file_name.Substring(dotIndex\
    \ + 1);\n        if (firstLetter == \"\" || firstLetter < 'a' || firstLetter >\
    \ 'z') {\n            return \"No\";\n        }\n        if (lastLetter == \"\"\
    \ || lastLetter < 'a' || lastLetter > 'z') {\n            return \"No\";\n   \
    \     }\n        if (lastLetter != \"txt\" && lastLetter != \"exe\" && lastLetter\
    \ != \"dll\") {\n            return \"No\";\n        }\n        return \"Yes\"\
    ;", "        // Your code goes here\n        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]{2}$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.Contains(\".\")) {\n                if (file_name.Substring(0,\
    \ 1).Equals(\"0\") || file_name.Substring(0, 1).Equals(\"9\")) {\n           \
    \         return \"No\";\n                }\n            }\n            if (file_name.Substring(0,\
    \ 1).Equals(\"a\") || file_name.Substring(0, 1).Equals(\"z\") || file_name.Substring(0,\
    \ 1).Equals(\"A\") || file_name.Substring(0, 1).Equals(\"Z\")) {\n           \
    \     if (file_name.Substring(1, 2).Equals(\"txt\") || file_name.Substring(1,\
    \ 2).Equals(\"exe\") || file_name.Substring(1, 2).Equals(\"dll\")) {\n       \
    \             return \"Yes\";\n                }\n            }\n        }\n \
    \       return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z0-9]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        return regex.IsMatch(file_name)\
    \ ? \"Yes\" : \"No\";", "        // Your code goes here\n        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name))\n        {\n            int index = file_name.IndexOf(\"\
    .\");\n            string file_name = file_name.Substring(0, index);\n       \
    \     string extension = file_name.Substring(index + 1);\n            if (extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\")\n            {\n\
    \                return \"Yes\";\n            }\n            else\n          \
    \  {\n                return \"No\";\n            }\n        }\n        else\n\
    \        {\n            return \"No\";\n        }", "        string pattern =\
    \ @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n  \
    \      string result = regex.Match(file_name).Value;\n        if (result == \"\
    Yes\") {\n            return file_name;\n        }\n        else {\n         \
    \   return \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\")\n            return \"Yes\";\n        else\n \
    \           return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.Contains(\".\")) {\n                string before_dot\
    \ = file_name.Substring(0, file_name.IndexOf(\".\"));\n                if (before_dot.Length\
    \ > 0) {\n                    string after_dot = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n                    if (!after_dot.Contains(\"txt\") && !after_dot.Contains(\"\
    exe\") && !after_dot.Contains(\"dll\")) {\n                        return \"No\"\
    ;\n                    }\n                }\n            }\n            else {\n\
    \                return \"No\";\n            }\n        }\n        return \"Yes\"\
    ;", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex\
    \ = new Regex(pattern);\n        Match match = regex.Match(file_name);\n     \
    \   if (match.Success) {\n            string file_name = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            string extension = file_name.Substring(file_name.LastIndexOf(\"\
    .\") + 1);\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                return \"Yes\";\n            }\n            else\
    \ {\n                return \"No\";\n            }\n        }\n        else {\n\
    \            return \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        return regex.IsMatch(file_name)\
    \ ? \"Yes\" : \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        Match match = regex.Match(file_name);\n\
    \        if (match.Success) {\n            string file_name = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            string extension = file_name.Substring(file_name.LastIndexOf(\"\
    .\"));\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                return \"Yes\";\n            }\n            else\
    \ {\n                return \"No\";\n            }\n        }\n        else {\n\
    \            return \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z0-9]+$\";\n        Regex regex = new Regex(pattern);\n        return regex.IsMatch(file_name)\
    \ ? \"Yes\" : \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        return regex.IsMatch(file_name)\
    \ ? \"Yes\" : \"No\";", "        string dot = \".\";\n        string dot1 = \"\
    \";\n        string dot2 = \"\";\n        string dot3 = \"\";\n        string\
    \ dot4 = \"\";\n        string dot5 = \"\";\n        string dot6 = \"\";\n   \
    \     string dot7 = \"\";\n        string dot8 = \"\";\n        string dot9 =\
    \ \"\";\n        string dot10 = \"\";\n        string dot11 = \"\";\n        string\
    \ dot12 = \"\";\n        string dot13 = \"\";\n        string dot14 = \"\";\n\
    \        string dot15 = \"\";\n        string dot16 = \"\";\n        string dot17\
    \ = \"\";\n        string dot18 = \"\";\n        string dot19 = \"\";\n      \
    \  string dot20 = \"\";\n        string dot21 = \"\";\n        string dot22 =\
    \ \"\";\n        string dot23 = \"\";\n        string dot24 = \"\";\n        string\
    \ dot25 = \"\";\n        string dot26 = \"\";\n        string dot27 = \"\";\n\
    \        string dot28 = \"\";\n        string dot29 = \"\";\n        string dot30\
    \ = \"\";\n        string dot31 = \"\";\n        string dot32 = \"\";\n      \
    \  string dot33 = \"\";\n        string dot34 = \"\";\n        string dot35 =\
    \ \"\";\n        string dot36 = \"\";\n        string dot37 = \"\";\n        string\
    \ dot38 = \"\";\n        string dot39 = \"\";\n        string dot40 = \"\";\n\
    \        string dot41 = \"\";\n        string dot42 = \"\";\n        string dot43\
    \ = \"\";\n        string dot44 = \"\";\n        string dot45 = \"\";\n      \
    \  string dot46 = \"\";\n        string dot47 = \"\";\n        string dot48 =\
    \ \"\";\n        string dot49 = \"\";\n        string dot50 = \"\";\n        string\
    \ dot51 = \"\";\n        string dot52 = \"\";\n        string dot53 = \"\";\n\
    \        string dot54 = \"\";\n        string dot55 = \"\";\n        string dot56\
    \ = \"\";\n        string dot57 = \"\";\n        string dot58 = \"\";\n      \
    \  string dot59 = \"\";\n        string dot60 = \"\";\n        string dot61 =\
    \ \"\";\n        string dot62 = \"\";\n        string dot63 = \"\";\n        string\
    \ dot64 = \"\";\n        string dot65 = \"\";\n        string dot66 = \"\";\n\
    \        string dot67 = \"\";\n        string dot68 = \"\";\n        string dot69\
    \ = \"\";\n        string dot70 = \"\";\n        string dot71 = \"\";\n      \
    \  string dot72 = \"\";\n        string dot73 = \"\";\n        string dot74 =\
    \ \"\";\n        string dot75 = \"\";\n        string dot76 = \"\";\n        string\
    \ dot77 = \"\";\n        string dot78 = \"\";\n        string dot79 = \"\";\n\
    \        string dot80 = \"\";\n        string dot81 = \"\";\n        ", "    \
    \    string pattern = @\"^[0-9]{3}\\.[a-z][a-z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n            string\
    \ substr = file_name.Substring(0, file_name.IndexOf('.'));\n            if (substr.Length\
    \ > 0 && substr.StartsWith(\"a\") && substr.EndsWith(\"z\") || substr.StartsWith(\"\
    A\") && substr.EndsWith(\"Z\")) {\n                string extension = file_name.Substring(file_name.LastIndexOf('.'));\n\
    \                if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                    return \"Yes\";\n                }\n    \
    \        }\n        }\n        return \"No\";", "        // Your code goes here\n\
    \        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]{2,3}$\";\n        Regex regex\
    \ = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n           \
    \ if (file_name.Contains(\".\")) {\n                if (file_name.Substring(0,\
    \ 1).Equals(\"0\") || file_name.Substring(0, 1).Equals(\"9\")) {\n           \
    \         return \"No\";\n                }\n            }\n            else {\n\
    \                return \"No\";\n            }\n        }\n        return \"No\"\
    ;", "        string pattern = @\"^[0-9]{3}\\.[a-z][a-z]$\";\n        Regex regex\
    \ = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n           \
    \ string substr = file_name.Substring(0, file_name.IndexOf(\".\"));\n        \
    \    string substr_2 = file_name.Substring(file_name.IndexOf(\".\"));\n      \
    \      string substr_3 = file_name.Substring(file_name.IndexOf(\".\") + 1);\n\
    \            if (substr.Length > 3 || substr_2.Length > 3 || substr_3.Length >\
    \ 3 || substr_2.Contains(\".\") || substr_3.Contains(\".\")) {\n             \
    \   return \"No\";\n            }\n            else if (substr.Length == 0 ||\
    \ substr_2.Length == 0 || substr_3.Length == 0 || substr_2.Contains(\".\") ||\
    \ substr_3.Contains(\".\")) {\n                return \"No\";\n            }\n\
    \            else if (substr.Substring(0, 1).ToLower() != \"a\" || substr_2.Substring(0,\
    \ 1).ToLower() != \"a\" || substr_3.Substring(0, 1).ToLower() != \"a\") {\n  \
    \              return \"No\";\n            }\n            else if (substr.Substring(0,\
    \ 1).ToLower() != \"z\" || substr_2.Substring(0, 1).ToLower() != \"z\" || substr_3.Substring(0,\
    \ 1).ToLower() != \"z\") {\n                return \"No\";\n            }\n  \
    \          else if (substr.Substring(0, 1).ToLower() != \"A\" || substr_2.Substring(0,\
    \ 1).ToLower() != \"A\" || substr_3.Substring(0, 1).ToLower() != \"A\") {\n  \
    \              return \"No\";\n            }\n            else {\n           \
    \     return \"Yes\";\n            }\n        }\n        else {\n            return\
    \ \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n\
    \        Regex regex = new Regex(pattern);\n        Match match = regex.Match(file_name);\n\
    \        if (match.Success) {\n            string file_name = file_name.Substring(0,\
    \ match.Index);\n            string extension = file_name.Substring(match.Index\
    \ + match.Length);\n            string valid_extensions = new string[] { \"txt\"\
    , \"exe\", \"dll\" };\n            if (valid_extensions.Contains(extension)) {\n\
    \                return \"Yes\";\n            }\n            else {\n        \
    \        return \"No\";\n            }\n        }\n        else {\n          \
    \  return \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string file_name = file_name.Substring(0, file_name.IndexOf(\"\
    .\") + 1);\n            string extension = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            bool is_exe = extension.Equals(\"exe\", StringComparison.OrdinalIgnoreCase);\n\
    \            bool is_dll = extension.Equals(\"dll\", StringComparison.OrdinalIgnoreCase);\n\
    \            bool is_txt = extension.Equals(\"txt\", StringComparison.OrdinalIgnoreCase);\n\
    \            bool is_other = extension.Equals(\"other\", StringComparison.OrdinalIgnoreCase);\n\
    \            bool is_exe_or_dll = is_exe || is_dll;\n            bool is_txt_or_other\
    \ = is_txt || is_other;\n            bool is_exe_or_dll_or_other = is_exe_or_dll\
    \ || is_txt_or_other;\n            bool is_exe_or_dll_or_other_or_empty = is_exe_or_dll_or_other\
    \ || string.IsNullOrEmpty(file_name);\n            return is_exe_or_dll_or_other_or_empty;\n\
    \        }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        string result\
    \ = regex.Match(file_name).Value;\n        if (result == \"Yes\") {\n        \
    \    return \"Yes\";\n        }\n        else {\n            return \"No\";\n\
    \        }", "        // Your code goes here\n        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        Match match\
    \ = regex.Match(file_name);\n        if (match.Success) {\n            string\
    \ file_name = file_name.Substring(0, file_name.IndexOf(\".\"));\n            string\
    \ extension = file_name.Substring(file_name.LastIndexOf(\".\"));\n           \
    \ if (extension == \"txt\" || extension == \"exe\" || extension == \"dll\") {\n\
    \                return \"Yes\";\n            }\n            return \"No\";\n\
    \        }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        string result\
    \ = regex.Match(file_name).Value;\n        if (result == \"Yes\")\n          \
    \  return \"Yes\";\n        else\n            return \"No\";", "        string\
    \ pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        string result = regex.Match(file_name).Value;\n        if (result ==\
    \ \"Yes\") {\n            return \"Yes\";\n        }\n        else {\n       \
    \     return \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf(\".\") != -1) {\n                if (file_name.Substring(0,\
    \ 1).IsLetter() && file_name.Substring(0, 1).ToLower() == file_name.Substring(0,\
    \ 1).ToLower()) {\n                    if (file_name.Substring(0, file_name.IndexOf(\"\
    .\")).ToLower() == \"txt\" || file_name.Substring(0, file_name.IndexOf(\".\")).ToLower()\
    \ == \"exe\" || file_name.Substring(0, file_name.IndexOf(\".\")).ToLower() ==\
    \ \"dll\") {\n                        return \"Yes\";\n                    }\n\
    \                }\n            }\n        }\n        return \"No\";", "     \
    \   string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        string result = regex.Match(file_name).Value;\n        if (result ==\
    \ \"Yes\") {\n            return result;\n        } else {\n            return\
    \ \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n\
    \        Regex regex = new Regex(pattern);\n        Match match = regex.Match(file_name);\n\
    \        if (match.Success)\n        {\n            string file_name = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            string extension = file_name.Substring(file_name.LastIndexOf('.'));\n\
    \            string[] extensions = { \"txt\", \"exe\", \"dll\" };\n          \
    \  if (extensions.Contains(extension))\n            {\n                return\
    \ \"Yes\";\n            }\n            else\n            {\n                return\
    \ \"No\";\n            }\n        }\n        else\n        {\n            return\
    \ \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n\
    \        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf('.') != -1) {\n                if (file_name.Substring(0,\
    \ 1).ToUpper() != 'A' || file_name.Substring(0, 1).ToUpper() != 'B' || file_name.Substring(0,\
    \ 1).ToUpper() != 'C' || file_name.Substring(0, 1).ToUpper() != 'D' || file_name.Substring(0,\
    \ 1).ToUpper() != 'E' || file_name.Substring(0, 1).ToUpper() != 'F' || file_name.Substring(0,\
    \ 1).ToUpper() != 'G' || file_name.Substring(0, 1).ToUpper() != 'H' || file_name.Substring(0,\
    \ 1).ToUpper() != 'I' || file_name.Substring(0, 1).ToUpper() != 'J' || file_name.Substring(0,\
    \ 1).ToUpper() != 'K' || file_name.Substring(0, 1).ToUpper() != 'L' || file_name.Substring(0,\
    \ 1).ToUpper() != 'M' || file_name.Substring(0, 1).ToUpper() != 'N' || file_name.Substring(0,\
    \ 1).ToUpper() != 'O' || file_name.Substring(0, 1).ToUpper() != 'P' || file_name.Substring(0,\
    \ 1).ToUpper() != 'Q' || file_name.Substring(0, 1).ToUpper() != 'R' || file_name.Substring(0,\
    \ 1).ToUpper() != 'S' || file_name.Substring(0, 1).ToUpper() != 'T' || file_name.Substring(0,\
    \ 1).ToUpper() != 'U' || file_name.Substring(0, 1).ToUpper() != 'V' || file_name.Substring(0,\
    \ 1).ToUpper() != 'W' || file_name.Substring(0, 1).ToUpper() != 'X' || file_name.Substring(0,\
    \ 1).ToUpper() != 'Y' || file_name.Substring(0, 1).ToUpper() != 'Z') {\n     \
    \               return \"No\";\n                }\n            }\n        }\n\
    \        return \"Yes\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string file_name = file_name.Substring(0, file_name.IndexOf('.'));\n\
    \            string extension = file_name.Substring(file_name.IndexOf('.'));\n\
    \            if (extension == \"txt\" || extension == \"exe\" || extension ==\
    \ \"dll\") {\n                return \"Yes\";\n            } else {\n        \
    \        return \"No\";\n            }\n        } else {\n            return \"\
    No\";\n        }", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n  \
    \      Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string substr = file_name.Substring(0, file_name.IndexOf(\".\"\
    ));\n            if (substr.Length > 0) {\n                char first_letter =\
    \ substr[0];\n                if (first_letter < 'a' || first_letter > 'z') {\n\
    \                    return \"No\";\n                }\n            }\n      \
    \      string extension = file_name.Substring(file_name.IndexOf(\".\"));\n   \
    \         if (extension == \"txt\" || extension == \"exe\" || extension == \"\
    dll\") {\n                return \"Yes\";\n            }\n            return \"\
    No\";\n        }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z0-9]+$\";\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf(\".\") > 0) {\n                if (file_name.Substring(0,\
    \ 1).ToLower() == \"a\" || file_name.Substring(0, 1).ToLower() == \"b\" || file_name.Substring(0,\
    \ 1).ToLower() == \"c\" || file_name.Substring(0, 1).ToLower() == \"d\" || file_name.Substring(0,\
    \ 1).ToLower() == \"e\" || file_name.Substring(0, 1).ToLower() == \"f\" || file_name.Substring(0,\
    \ 1).ToLower() == \"g\" || file_name.Substring(0, 1).ToLower() == \"h\" || file_name.Substring(0,\
    \ 1).ToLower() == \"i\" || file_name.Substring(0, 1).ToLower() == \"j\" || file_name.Substring(0,\
    \ 1).ToLower() == \"k\" || file_name.Substring(0, 1).ToLower() == \"l\" || file_name.Substring(0,\
    \ 1).ToLower() == \"m\" || file_name.Substring(0, 1).ToLower() == \"n\" || file_name.Substring(0,\
    \ 1).ToLower() == \"o\" || file_name.Substring(0, 1).ToLower() == \"p\" || file_name.Substring(0,\
    \ 1).ToLower() == \"q\" || file_name.Substring(0, 1).ToLower() == \"r\" || file_name.Substring(0,\
    \ 1).ToLower() == \"s\" || file_name.Substring(0, 1).ToLower() == \"t\" || file_name.Substring(0,\
    \ 1).ToLower() == \"u\" || file_name.Substring(0, 1).ToLower() == \"v\" || file_name.Substring(0,\
    \ 1).ToLower() == \"w\" || file_name.Substring(0, 1).ToLower() == \"x\" || file_name.Substring(0,\
    \ 1).ToLower() == \"y\" || file_name.Substring(0, 1).ToLower() == \"z\" || file_name.Substring(0,\
    \ 1).ToLower() == \"A\" || file_name.Substring(0, 1).ToLower() == \"B\" || file_name.Substring(0,\
    \ 1).ToLower() == \"C\" || file_name.Substring(0, 1).ToLower() == \"D\" || file_name.Substring(0,\
    \ 1).ToLower() == \"E\" || file_name.Substring(0, 1).ToLower() == \"F\" || file_name.Substring(0,\
    \ 1).ToLower() == \"G\" || file_name.Substring(0, 1).ToLower() == \"H\" || file_name.Substring(0,\
    \ 1).ToLower() == \"I\" || file_name.Substring(0, 1).ToLower() == \"J\" || file_name.Substring(0,\
    \ 1).ToLower() == \"K\" || file_name.Substring(0, 1).ToLower() == \"L\" || file_name.Substring(0,\
    \ 1).ToLower() == \"M\" || ", "        // Your code here\n        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        Match match = regex.Match(file_name);\n        if (match.Success)\n \
    \       {\n            string file_name = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n            string extension = file_name.Substring(file_name.LastIndexOf(\"\
    .\") + 1);\n            string valid_extensions = new string[] { \"txt\", \"exe\"\
    , \"dll\" };\n            if (valid_extensions.Contains(extension))\n        \
    \    {\n                return \"Yes\";\n            }\n            else\n   \
    \         {\n                return \"No\";\n            }\n        }\n      \
    \  else\n        {\n            return \"No\";\n        }", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        string result = regex.Match(file_name).Value;\n        return result\
    \ == \"Yes\";", "        string pattern = @\"^[0-9]{3}\\.[a-z][a-z][a-z]$\";\n\
    \        Regex regex = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\") {\n            return \"Yes\";\n        }\n  \
    \      return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]{2,3}$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf('.') != -1) {\n                if (file_name.Substring(0,\
    \ 1).IsLetter()) {\n                    string extension = file_name.Substring(1,\
    \ file_name.Length - 2);\n                    if (extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\") {\n                        return \"Yes\"\
    ;\n                    }\n                }\n            }\n        }\n      \
    \  return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n \
    \       Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.Contains(\".\")) {\n                if (file_name.Substring(0,\
    \ 1).IsEmpty() || file_name.Substring(0, 1).IsLetter()) {\n                  \
    \  if (file_name.Substring(file_name.IndexOf(\".\") + 1).ToLower().Contains(\"\
    exe\") || file_name.Substring(file_name.IndexOf(\".\") + 1).ToLower().Contains(\"\
    dll\")) {\n                        return \"Yes\";\n                    }\n  \
    \              }\n            }\n        }\n        return \"No\";", "       \
    \ // Your code here\n        if (file_name.Length > 3 || file_name.Contains(\"\
    .\") || file_name.Substring(0, 1).IsEmpty() || file_name.Substring(0, 1).FirstOrDefault()\
    \ != 'a' || file_name.Substring(0, 1).FirstOrDefault() != 'A' || file_name.Substring(0,\
    \ 1).FirstOrDefault() != 'z' || file_name.Substring(0, 1).FirstOrDefault() !=\
    \ 'Z' || file_name.Substring(0, 1).FirstOrDefault() != '0' || file_name.Substring(0,\
    \ 1).FirstOrDefault() != '9' || file_name.Substring(0, 1).FirstOrDefault() !=\
    \ '1') {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).FirstOrDefault() == 'a' || file_name.Substring(0, 1).FirstOrDefault() ==\
    \ 'A' || file_name.Substring(0, 1).FirstOrDefault() == 'z' || file_name.Substring(0,\
    \ 1).FirstOrDefault() == 'Z' || file_name.Substring(0, 1).FirstOrDefault() ==\
    \ '0' || file_name.Substring(0, 1).FirstOrDefault() == '9' || file_name.Substring(0,\
    \ 1).FirstOrDefault() == '1') {\n            return \"No\";\n        }\n     \
    \   if (file_name.Substring(0, 1).FirstOrDefault() == '.') {\n            return\
    \ \"No\";\n        }\n        if (file_name.Substring(0, 1).FirstOrDefault() !=\
    \ 'txt' && file_name.Substring(0, 1).FirstOrDefault() != 'exe' && file_name.Substring(0,\
    \ 1).FirstOrDefault() != 'dll') {\n            return \"No\";\n        }\n   \
    \     return \"Yes\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\") {\n            return \"Yes\";\n        }\n  \
    \      else {\n            return \"No\";\n        }", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        string result = regex.Match(file_name).Value;\n        if (result ==\
    \ \"Yes\") {\n            return \"Yes\";\n        }\n        return \"No\";",
  "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n            string\
    \ sub = file_name.Substring(0, file_name.IndexOf(\".\"));\n            string\
    \ sub2 = file_name.Substring(file_name.IndexOf(\".\") + 1);\n            if (sub\
    \ != \"\" && sub2.ToLower() == \"txt\" || sub2.ToLower() == \"exe\" || sub2.ToLower()\
    \ == \"dll\") {\n                return \"Yes\";\n            }\n        }\n \
    \       return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf(\".\") > 0) {\n                if (file_name.Substring(0,\
    \ 1).ToUpper() == file_name.Substring(0, 1).ToUpper()) {\n                   \
    \ if (file_name.Substring(0, 2).ToUpper() == file_name.Substring(0, 2).ToUpper())\
    \ {\n                        return file_name;\n                    }\n      \
    \          }\n            }\n        }\n        return \"No\";", "        string\
    \ pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        Match match = regex.Match(file_name);\n        if (match.Success)\n \
    \       {\n            string file_name = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n            string extension = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\")\n            {\n                return \"Yes\";\n            }\n\
    \            else\n            {\n                return \"No\";\n           \
    \ }\n        }\n        else\n        {\n            return \"No\";\n        }",
  "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf('.')\
    \ != -1) {\n                if (file_name.Substring(0, 1).ToLower() != 'a' &&\
    \ file_name.Substring(0, 1).ToLower() != 'b' && file_name.Substring(0, 1).ToLower()\
    \ != 'c' && file_name.Substring(0, 1).ToLower() != 'd' && file_name.Substring(0,\
    \ 1).ToLower() != 'e' && file_name.Substring(0, 1).ToLower() != 'f' && file_name.Substring(0,\
    \ 1).ToLower() != 'g' && file_name.Substring(0, 1).ToLower() != 'h' && file_name.Substring(0,\
    \ 1).ToLower() != 'i' && file_name.Substring(0, 1).ToLower() != 'j' && file_name.Substring(0,\
    \ 1).ToLower() != 'k' && file_name.Substring(0, 1).ToLower() != 'l' && file_name.Substring(0,\
    \ 1).ToLower() != 'm' && file_name.Substring(0, 1).ToLower() != 'n' && file_name.Substring(0,\
    \ 1).ToLower() != 'o' && file_name.Substring(0, 1).ToLower() != 'p' && file_name.Substring(0,\
    \ 1).ToLower() != 'q' && file_name.Substring(0, 1).ToLower() != 'r' && file_name.Substring(0,\
    \ 1).ToLower() != 's' && file_name.Substring(0, 1).ToLower() != 't' && file_name.Substring(0,\
    \ 1).ToLower() != 'u' && file_name.Substring(0, 1).ToLower() != 'v' && file_name.Substring(0,\
    \ 1).ToLower() != 'w' && file_name.Substring(0, 1).ToLower() != 'x' && file_name.Substring(0,\
    \ 1).ToLower() != 'y' && file_name.Substring(0, 1).ToLower() != 'z') {\n     \
    \               return \"No\";\n                }\n            }\n        }\n\
    \        return \"Yes\";", "        // Your code goes here\n        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf('.')\
    \ != -1) {\n                if (file_name.Substring(0, 1).ToUpper() == file_name.Substring(0,\
    \ 1).ToUpper()) {\n                    if (file_name.Substring(0, 2).ToUpper()\
    \ == file_name.Substring(0, 2).ToUpper()) {\n                        if (file_name.Substring(0,\
    \ 3).ToUpper() == file_name.Substring(0, 3).ToUpper()) {\n                   \
    \         return \"Yes\";\n                        }\n                    }\n\
    \                }\n            }\n            return \"No\";\n        }\n   \
    \     return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n\
    \        Regex regex = new Regex(pattern);\n        return regex.IsMatch(file_name)\
    \ ? \"Yes\" : \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\") {\n            return \"Yes\";\n        }\n  \
    \      return \"No\";", "        if (file_name.Length > 3) {\n            return\
    \ \"No\";\n        }\n        if (file_name.Contains(\".\")) {\n            return\
    \ \"No\";\n        }\n        if (file_name.Substring(0, 1).IsEmpty()) {\n   \
    \         return \"No\";\n        }\n        if (file_name.Substring(0, 1).IsLetter())\
    \ {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).IsDigit()) {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).Equals(\".\") && file_name.Substring(0, 2).Equals(\".\") && file_name.Substring(0,\
    \ 3).Equals(\".\") && file_name.Substring(0, 4).Equals(\".\") && file_name.Substring(0,\
    \ 5).Equals(\".\") && file_name.Substring(0, 6).Equals(\".\") && file_name.Substring(0,\
    \ 7).Equals(\".\") && file_name.Substring(0, 8).Equals(\".\") && file_name.Substring(0,\
    \ 9).Equals(\".\") && file_name.Substring(0, 10).Equals(\".\") && file_name.Substring(0,\
    \ 11).Equals(\".\") && file_name.Substring(0, 12).Equals(\".\") && file_name.Substring(0,\
    \ 13).Equals(\".\") && file_name.Substring(0, 14).Equals(\".\") && file_name.Substring(0,\
    \ 15).Equals(\".\") && file_name.Substring(0, 16).Equals(\".\") && file_name.Substring(0,\
    \ 17).Equals(\".\") && file_name.Substring(0, 18).Equals(\".\") && file_name.Substring(0,\
    \ 19).Equals(\".\") && file_name.Substring(0, 20).Equals(\".\") && file_name.Substring(0,\
    \ 21).Equals(\".\") && file_name.Substring(0, 22).Equals(\".\") && file_name.Substring(0,\
    \ 23).Equals(\".\") && file_name.Substring(0, 24).Equals(\".\") && file_name.Substring(0,\
    \ 25).Equals(\".\") && file_name.Substring(0, 26).Equals(\".\") && file_name.Substring(0,\
    \ 27).Equals(\".\") && file_name.Substring(0, 28).Equals(\".\") && file_name.Substring(0,\
    \ 29).Equals(\".\") && file_name.Substring(0, 30).Equals(\".\") && file_name.Substring(0,\
    \ 31).Equals(\".\") && file_name.Substring(0, 32).Equals(\".\") && file_name.Substring(0,\
    \ 33).Equals(\".\") && file_name.Substring(0, 34).Equals(\".\") && file_name.Substring(0,\
    \ 35).Equals(\".\") && file_name.Substring(0, 36).Equals(\".\") && file_name.Sub",
  "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z0-9]+$\";\n        Regex regex =\
    \ new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n            if\
    \ (file_name.IndexOf('.') != -1) {\n                if (file_name.Substring(0,\
    \ 1).ToLower() != \"a\" && file_name.Substring(0, 1).ToLower() != \"b\" && file_name.Substring(0,\
    \ 1).ToLower() != \"c\" && file_name.Substring(0, 1).ToLower() != \"d\" && file_name.Substring(0,\
    \ 1).ToLower() != \"e\" && file_name.Substring(0, 1).ToLower() != \"f\" && file_name.Substring(0,\
    \ 1).ToLower() != \"g\" && file_name.Substring(0, 1).ToLower() != \"h\" && file_name.Substring(0,\
    \ 1).ToLower() != \"i\" && file_name.Substring(0, 1).ToLower() != \"j\" && file_name.Substring(0,\
    \ 1).ToLower() != \"k\" && file_name.Substring(0, 1).ToLower() != \"l\" && file_name.Substring(0,\
    \ 1).ToLower() != \"m\" && file_name.Substring(0, 1).ToLower() != \"n\" && file_name.Substring(0,\
    \ 1).ToLower() != \"o\" && file_name.Substring(0, 1).ToLower() != \"p\" && file_name.Substring(0,\
    \ 1).ToLower() != \"q\" && file_name.Substring(0, 1).ToLower() != \"r\" && file_name.Substring(0,\
    \ 1).ToLower() != \"s\" && file_name.Substring(0, 1).ToLower() != \"t\" && file_name.Substring(0,\
    \ 1).ToLower() != \"u\" && file_name.Substring(0, 1).ToLower() != \"v\" && file_name.Substring(0,\
    \ 1).ToLower() != \"w\" && file_name.Substring(0, 1).ToLower() != \"x\" && file_name.Substring(0,\
    \ 1).ToLower() != \"y\" && file_name.Substring(0, 1).ToLower() != \"z\") {\n \
    \                   return \"No\";\n                }\n            }\n       \
    \ }\n        return \"Yes\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\") {\n            return \"Yes\";\n        }\n  \
    \      else {\n            return \"No\";\n        }", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        string result = regex.Match(file_name).Value;\n        if (result ==\
    \ \"Yes\") {\n            return \"Yes\";\n        }\n        else {\n       \
    \     return \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string substr = file_name.Substring(0, file_name.IndexOf(\".\"\
    ));\n            if (substr.Length > 0 && substr.StartsWith(\"a\") && substr.EndsWith(\"\
    z\") || substr.StartsWith(\"A\") && substr.EndsWith(\"Z\")) {\n              \
    \  return \"Yes\";\n            }\n        }\n        return \"No\";", "     \
    \   if (file_name.Length > 3) {\n            return \"No\";\n        }\n     \
    \   if (file_name.Contains(\".\")) {\n            return \"No\";\n        }\n\
    \        if (file_name.Substring(0, 1).IsEmpty()) {\n            return \"No\"\
    ;\n        }\n        if (file_name.Substring(0, 1).IndexOfAny(new char[] { 'a',\
    \ 'A' }) < 0) {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ file_name.IndexOf(\".\")).IndexOfAny(new char[] { 't', 'e', 'd' }) < 0) {\n\
    \            return \"No\";\n        }\n        return \"Yes\";", "        string\
    \ pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        Match match = regex.Match(file_name);\n        if (match.Success)\n \
    \       {\n            string file_name = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n            string extension = file_name.Substring(file_name.LastIndexOf('.'));\n\
    \            bool is_exe = extension.Equals(\"exe\", StringComparison.OrdinalIgnoreCase);\n\
    \            bool is_dll = extension.Equals(\"dll\", StringComparison.OrdinalIgnoreCase);\n\
    \            bool is_txt = extension.Equals(\"txt\", StringComparison.OrdinalIgnoreCase);\n\
    \            if (is_exe && is_dll)\n            {\n                return \"Yes\"\
    ;\n            }\n            else if (is_exe && !is_dll)\n            {\n   \
    \             return \"Yes\";\n            }\n            else if (is_dll && !is_exe)\n\
    \            {\n                return \"Yes\";\n            }\n            else\
    \ if (is_exe && is_txt)\n            {\n                return \"Yes\";\n    \
    \        }\n            else if (is_dll && is_txt)\n            {\n          \
    \      return \"Yes\";\n            }\n            else if (is_exe && !is_txt)\n\
    \            {\n                return \"Yes\";\n            }\n            else\
    \ if (is_dll && !is_txt)\n            {\n                return \"Yes\";\n   \
    \         }\n            else\n            {\n                return \"No\";\n\
    \            }\n        }\n        else\n        {\n            return \"No\"\
    ;\n        }", "        // Your code goes here\n        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.Contains(\".\")) {\n                if (file_name.Substring(0,\
    \ 1).Equals(\"\")) {\n                    return \"No\";\n                }\n\
    \                else {\n                    return \"No\";\n                }\n\
    \            }\n            else {\n                return \"No\";\n         \
    \   }\n        }\n        else {\n            return \"No\";\n        }", "  \
    \      string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n            int index\
    \ = file_name.IndexOf('.');\n            if (index == -1) {\n                return\
    \ \"No\";\n            }\n            string sub_string = file_name.Substring(0,\
    \ index);\n            string extension = file_name.Substring(index);\n      \
    \      if (sub_string.Length == 0 || sub_string[0] < 'a' || sub_string[0] > 'z'\
    \ || sub_string[0] < 'A' || sub_string[0] > 'Z') {\n                return \"\
    No\";\n            }\n            if (extension == \"txt\" || extension == \"\
    exe\" || extension == \"dll\") {\n                return \"Yes\";\n          \
    \  }\n            return \"No\";\n        }\n        return \"No\";", "      \
    \  string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            string before_dot = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            string after_dot = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            bool is_exe = after_dot.ToLower().Contains(\"exe\");\n\
    \            bool is_dll = after_dot.ToLower().Contains(\"dll\");\n          \
    \  bool is_txt = after_dot.ToLower().Contains(\"txt\");\n            return is_exe\
    \ && is_dll && is_txt;\n        }\n        return \"No\";", "        // Your code\
    \ goes here\n        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex\
    \ regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n     \
    \       if (file_name.Contains(\".\")) {\n                if (file_name.Substring(0,\
    \ 1).Equals(\"0\") || file_name.Substring(0, 1).Equals(\"9\")) {\n           \
    \         return \"No\";\n                }\n            }\n            else if\
    \ (file_name.Substring(0, 1).Equals(\"a\") || file_name.Substring(0, 1).Equals(\"\
    z\") || file_name.Substring(0, 1).Equals(\"A\") || file_name.Substring(0, 1).Equals(\"\
    Z\")) {\n                string[] extensions = { \"txt\", \"exe\", \"dll\" };\n\
    \                foreach (string extension in extensions) {\n                \
    \    if (file_name.Substring(0, file_name.IndexOf(extension)).Equals(extension))\
    \ {\n                        return \"Yes\";\n                    }\n        \
    \        }\n            }\n            else {\n                return \"No\";\n\
    \            }\n        }\n        else {\n            return \"No\";\n      \
    \  }", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex\
    \ = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n           \
    \ string file_name = file_name.Substring(0, file_name.IndexOf(\".\"));\n     \
    \       string extension = file_name.Substring(file_name.IndexOf(\".\"));\n  \
    \          if (extension == \"txt\" || extension == \"exe\" || extension == \"\
    dll\") {\n                return \"Yes\";\n            }\n        }\n        return\
    \ \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex\
    \ regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n     \
    \       if (file_name.IndexOf('.') != -1) {\n                if (file_name.Substring(0,\
    \ 1).IsLetter()) {\n                    string extension = file_name.Substring(1,\
    \ file_name.Length - 2);\n                    switch (extension) {\n         \
    \               case \"txt\":\n                        case \"exe\":\n       \
    \                 case \"dll\":\n                            return \"Yes\";\n\
    \                        default:\n                            return \"No\";\n\
    \                    }\n                }\n            }\n            return \"\
    No\";\n        }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z0-9]+$\";\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string file_name = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n            string extension = file_name.Substring(file_name.IndexOf(\"\
    .\"));\n            bool isTxt = extension == \"txt\";\n            bool isExe\
    \ = extension == \"exe\";\n            bool isDll = extension == \"dll\";\n  \
    \          if (isTxt && isExe && isDll) {\n                return \"Yes\";\n \
    \           } else {\n                return \"No\";\n            }\n        }\
    \ else {\n            return \"No\";\n        }", "        string pattern = @\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n       \
    \ string result = regex.Match(file_name).Value;\n        if (result == \"Yes\"\
    ) {\n            return \"Yes\";\n        }\n        return \"No\";", "      \
    \  string pattern = @\"^[0-9]{3}\\.[a-z][a-z][a-z]$\";\n        Regex regex =\
    \ new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n            int\
    \ index = file_name.IndexOf('.');\n            if (index == -1) {\n          \
    \      return \"No\";\n            }\n            string sub_string = file_name.Substring(0,\
    \ index);\n            string extension = file_name.Substring(index + 1);\n  \
    \          if (sub_string.Length == 0) {\n                return \"No\";\n   \
    \         }\n            if (sub_string.Length > 3 || sub_string.Length < 1) {\n\
    \                return \"No\";\n            }\n            if (sub_string.Substring(0,\
    \ 1).ToUpper() != sub_string.Substring(0, 1)) {\n                return \"No\"\
    ;\n            }\n            if (extension.Length > 3 || extension.Length < 1)\
    \ {\n                return \"No\";\n            }\n            if (extension.Substring(0,\
    \ 1).ToUpper() != extension.Substring(0, 1)) {\n                return \"No\"\
    ;\n            }\n            return \"Yes\";\n        }\n        return \"No\"\
    ;", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex\
    \ = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n           \
    \ if (file_name.IndexOf('.') != -1) {\n                if (file_name.Substring(0,\
    \ 1).ToLower() != \"a\" && file_name.Substring(0, 1).ToLower() != \"b\" && file_name.Substring(0,\
    \ 1).ToLower() != \"c\" && file_name.Substring(0, 1).ToLower() != \"d\" && file_name.Substring(0,\
    \ 1).ToLower() != \"e\" && file_name.Substring(0, 1).ToLower() != \"f\" && file_name.Substring(0,\
    \ 1).ToLower() != \"g\" && file_name.Substring(0, 1).ToLower() != \"h\" && file_name.Substring(0,\
    \ 1).ToLower() != \"i\" && file_name.Substring(0, 1).ToLower() != \"j\" && file_name.Substring(0,\
    \ 1).ToLower() != \"k\" && file_name.Substring(0, 1).ToLower() != \"l\" && file_name.Substring(0,\
    \ 1).ToLower() != \"m\" && file_name.Substring(0, 1).ToLower() != \"n\" && file_name.Substring(0,\
    \ 1).ToLower() != \"o\" && file_name.Substring(0, 1).ToLower() != \"p\" && file_name.Substring(0,\
    \ 1).ToLower() != \"q\" && file_name.Substring(0, 1).ToLower() != \"r\" && file_name.Substring(0,\
    \ 1).ToLower() != \"s\" && file_name.Substring(0, 1).ToLower() != \"t\" && file_name.Substring(0,\
    \ 1).ToLower() != \"u\" && file_name.Substring(0, 1).ToLower() != \"v\" && file_name.Substring(0,\
    \ 1).ToLower() != \"w\" && file_name.Substring(0, 1).ToLower() != \"x\" && file_name.Substring(0,\
    \ 1).ToLower() != \"y\" && file_name.Substring(0, 1).ToLower() != \"z\") {\n \
    \                   return \"No\";\n                }\n            }\n       \
    \ }\n        return \"Yes\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string file_name = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n            string extension = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                return \"Yes\";\n            }\n        }\n \
    \       return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-z][a-z][a-z]$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf('.') != -1) {\n                if (file_name.Substring(0,\
    \ 1).Length > 0) {\n                    string pattern1 = @\"^[a-z][a-z][a-z]\"\
    ;\n                    Regex regex1 = new Regex(pattern1);\n                 \
    \   if (regex1.IsMatch(file_name.Substring(0, 1))) {\n                       \
    \ return file_name;\n                    }\n                }\n            }\n\
    \        }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string substr = file_name.Substring(0, file_name.IndexOf(\".\"\
    ));\n            if (substr.Length > 0 && substr.StartsWith(\"a\") && substr.EndsWith(\"\
    z\") || substr.StartsWith(\"A\") && substr.EndsWith(\"Z\")) {\n              \
    \  return \"Yes\";\n            }\n            return \"No\";\n        }\n   \
    \     return \"No\";", "        // Your code goes here\n        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            if (file_name.Contains(\"\
    .\")) {\n                if (file_name.Substring(0, 1).IsLetter() && file_name.Substring(1,\
    \ 1).IsLetter()) {\n                    if (file_name.Substring(0, 1).IsLetter()\
    \ || file_name.Substring(1, 1).IsLetter()) {\n                        if (file_name.Substring(0,\
    \ 1).IsLetter() || file_name.Substring(1, 1).IsLetter()) {\n                 \
    \           return \"Yes\";\n                        }\n                    }\n\
    \                }\n            }\n            return \"Yes\";\n        }\n  \
    \      return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\") {\n            return file_name;\n        }\n\
    \        else {\n            return \"No\";\n        }", "        if (file_name.Length\
    \ > 3) {\n            return \"No\";\n        }\n        if (file_name.IndexOf('.')\
    \ != -1) {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).IsLetter()) {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ file_name.IndexOf('.')).ToLower() == \"exe\" || file_name.Substring(0, file_name.IndexOf('.')).ToLower()\
    \ == \"dll\") {\n            return \"Yes\";\n        }\n        return \"No\"\
    ;", "        string pattern = @\"^[0-9]{3}\\.[a-z][a-z][a-z]$\";\n        Regex\
    \ regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n     \
    \       if (file_name.Contains(\".\")) {\n                string before_dot =\
    \ file_name.Substring(0, file_name.IndexOf(\".\"));\n                if (before_dot.Length\
    \ > 0) {\n                    char first_letter = before_dot[0];\n           \
    \         if (!(first_letter == 'a' || first_letter == 'A' || first_letter ==\
    \ 'z' || first_letter == 'Z')) {\n                        return \"No\";\n   \
    \                 }\n                }\n            }\n            string after_dot\
    \ = file_name.Substring(file_name.IndexOf(\".\"));\n            List<string> extensions\
    \ = new List<string> { \"txt\", \"exe\", \"dll\" };\n            if (extensions.Contains(after_dot))\
    \ {\n                return \"Yes\";\n            }\n        }\n        return\
    \ \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex\
    \ regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n     \
    \       if (file_name.IndexOf('.') != -1) {\n                if (file_name.Substring(0,\
    \ 1).IsLetter()) {\n                    if (file_name.Substring(1, 3).ToLower()\
    \ == \"exe\" || file_name.Substring(1, 3).ToLower() == \"dll\") {\n          \
    \              return \"Yes\";\n                    }\n                }\n   \
    \         }\n        }\n        return \"No\";", "        string pattern = @\"\
    ^[0-9]{3}\\.[a-z][a-z][a-z]$\";\n        Regex regex = new Regex(pattern);\n \
    \       string result = regex.Match(file_name).Value;\n        if (result == \"\
    Yes\") {\n            return result;\n        }\n        else {\n            return\
    \ \"No\";\n        }", "        if (file_name.Length > 3) {\n            return\
    \ \"No\";\n        }\n        if (file_name.Contains(\".\")) {\n            return\
    \ \"No\";\n        }\n        if (file_name.Substring(0, 1).IsEmpty()) {\n   \
    \         return \"No\";\n        }\n        if (file_name.Substring(0, 1).Any(x\
    \ => x != 'a' && x != 'b' && x != 'c' && x != 'd' && x != 'e' && x != 'f' && x\
    \ != 'g' && x != 'h' && x != 'i' && x != 'j' && x != 'k' && x != 'l' && x != 'm'\
    \ && x != 'n' && x != 'o' && x != 'p' && x != 'q' && x != 'r' && x != 's' && x\
    \ != 't' && x != 'u' && x != 'v' && x != 'w' && x != 'x' && x != 'y' && x != 'z'))\
    \ {\n            return \"No\";\n        }\n        if (file_name.Substring(1,\
    \ 1).Any(x => x != 'a' && x != 'b' && x != 'c' && x != 'd' && x != 'e' && x !=\
    \ 'f' && x != 'g' && x != 'h' && x != 'i' && x != 'j' && x != 'k' && x != 'l'\
    \ && x != 'm' && x != 'n' && x != 'o' && x != 'p' && x != 'q' && x != 'r' && x\
    \ != 's' && x != 't' && x != 'u' && x != 'v' && x != 'w' && x != 'x' && x != 'y'\
    \ && x != 'z')) {\n            return \"No\";\n        }\n        if (file_name.Substring(2,\
    \ 1).Any(x => x != 'a' && x != 'b' && x != 'c' && x != 'd' && x != 'e' && x !=\
    \ 'f' && x != 'g' && x != 'h' && x != 'i' && x != 'j' && x != 'k' && x != 'l'\
    \ && x != 'm' && x != 'n' && x != 'o' && x != 'p' && x != 'q' && x != 'r' && x\
    \ != 's' && x != 't' && x != 'u' && x != 'v' && x != 'w' && x != 'x' && x != 'y'\
    \ && x != 'z')) {\n            return \"No\";\n        }\n        if (file_name.Substring(3,\
    \ 1).Any(x => x != 'a' && x != 'b' && x != 'c' && x != 'd' && x != 'e' && x !=\
    \ 'f' && x != 'g' && x != 'h' && x != 'i' && x != 'j' && x != 'k' && x != 'l'\
    \ && x != 'm' && x != 'n' && x != 'o' && x != 'p' && x != 'q' && x != 'r' && x\
    \ != 's' && x != 't' && x != 'u' && x != 'v' && x != '", "        // Your code\
    \ here\n        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex\
    \ = new Regex(pattern);\n        return regex.IsMatch(file_name) ? \"Yes\" : \"\
    No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex\
    \ regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n     \
    \       if (file_name.IndexOf('.') != -1) {\n                if (file_name.Substring(0,\
    \ 1).IsLetter() && file_name.Substring(1, 1).IsLetter()) {\n                 \
    \   string extension = file_name.Substring(1, file_name.Length - 2);\n       \
    \             switch (extension) {\n                        case \"txt\":\n  \
    \                      case \"exe\":\n                        case \"dll\":\n\
    \                            return \"Yes\";\n                        default:\n\
    \                            return \"No\";\n                    }\n         \
    \       }\n            }\n        }\n        return \"No\";", "        string\
    \ pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            if (file_name.Contains(\"\
    .\")) {\n                if (file_name.Substring(0, 1).Length > 0) {\n       \
    \             string pattern1 = @\"^[a-zA-Z]+\";\n                    Regex regex1\
    \ = new Regex(pattern1);\n                    if (regex1.IsMatch(file_name.Substring(0,\
    \ 1))) {\n                        return file_name;\n                    }\n \
    \               }\n            }\n        }\n        return \"No\";", "      \
    \  string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf('.')\
    \ != -1) {\n                if (file_name.Substring(0, 1).Length > 0) {\n    \
    \                if (file_name.Substring(0, 1).ToLower() != \"a\" && file_name.Substring(0,\
    \ 1).ToLower() != \"b\" && file_name.Substring(0, 1).ToLower() != \"c\" && file_name.Substring(0,\
    \ 1).ToLower() != \"d\" && file_name.Substring(0, 1).ToLower() != \"e\" && file_name.Substring(0,\
    \ 1).ToLower() != \"f\" && file_name.Substring(0, 1).ToLower() != \"g\" && file_name.Substring(0,\
    \ 1).ToLower() != \"h\" && file_name.Substring(0, 1).ToLower() != \"i\" && file_name.Substring(0,\
    \ 1).ToLower() != \"j\" && file_name.Substring(0, 1).ToLower() != \"k\" && file_name.Substring(0,\
    \ 1).ToLower() != \"l\" && file_name.Substring(0, 1).ToLower() != \"m\" && file_name.Substring(0,\
    \ 1).ToLower() != \"n\" && file_name.Substring(0, 1).ToLower() != \"o\" && file_name.Substring(0,\
    \ 1).ToLower() != \"p\" && file_name.Substring(0, 1).ToLower() != \"q\" && file_name.Substring(0,\
    \ 1).ToLower() != \"r\" && file_name.Substring(0, 1).ToLower() != \"s\" && file_name.Substring(0,\
    \ 1).ToLower() != \"t\" && file_name.Substring(0, 1).ToLower() != \"u\" && file_name.Substring(0,\
    \ 1).ToLower() != \"v\" && file_name.Substring(0, 1).ToLower() != \"w\" && file_name.Substring(0,\
    \ 1).ToLower() != \"x\" && file_name.Substring(0, 1).ToLower() != \"y\" && file_name.Substring(0,\
    \ 1).ToLower() != \"z\") {\n                        return \"No\";\n         \
    \           }\n                }\n            }\n        }\n        return \"\
    Yes\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex\
    \ regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n     \
    \       if (file_name.IndexOf(\".\") != -1) {\n                if (file_name.Substring(0,\
    \ 1).ToUpper() == file_name.Substring(0, 1).ToUpper()) {\n                   \
    \ if (file_name.Substring(0, 2).ToUpper() == file_name.Substring(0, 2).ToUpper())\
    \ {\n                        if (file_name.Substring(0, 3).ToUpper() == file_name.Substring(0,\
    \ 3).ToUpper()) {\n                            return \"Yes\";\n             \
    \           }\n                    }\n                }\n            }\n     \
    \       return \"No\";\n        }\n        return \"No\";", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-z][a-z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            string file_name = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            string extension = file_name.Substring(file_name.LastIndexOf(\"\
    .\") + 1);\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                return \"Yes\";\n            }\n        }\n \
    \       return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.Contains(\".\")) {\n                if (file_name.Substring(0,\
    \ 1).IsLetter()) {\n                    string extension = file_name.Substring(1);\n\
    \                    if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                        return \"Yes\";\n                   \
    \ }\n                }\n            }\n        }\n        return \"No\";", " \
    \       string pattern = @\"^[0-9]{3}\\.[a-z][a-z]+$\";\n        Regex regex =\
    \ new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\") {\n            return \"Yes\";\n        }\n  \
    \      else {\n            return \"No\";\n        }", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            string file_name = file_name.Substring(0,\
    \ file_name.IndexOf('.'));\n            string extension = file_name.Substring(file_name.IndexOf('.'));\n\
    \            string[] extensions = { \"txt\", \"exe\", \"dll\" };\n          \
    \  if (extensions.Contains(extension)) {\n                return \"Yes\";\n  \
    \          }\n        }\n        return \"No\";", "        // Your code here\n\
    \        string pattern = @\"^[0-9]{3}\\.[a-z][a-z][a-z]$\";\n        Regex regex\
    \ = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\")\n            return \"Yes\";\n        else\n \
    \           return \"No\";", "        // Your code goes here\n        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf('.')\
    \ != -1) {\n                if (file_name.Substring(0, 1).ToLower() != \"a\" &&\
    \ file_name.Substring(0, 1).ToLower() != \"b\" && file_name.Substring(0, 1).ToLower()\
    \ != \"c\" && file_name.Substring(0, 1).ToLower() != \"d\" && file_name.Substring(0,\
    \ 1).ToLower() != \"e\" && file_name.Substring(0, 1).ToLower() != \"f\" && file_name.Substring(0,\
    \ 1).ToLower() != \"g\" && file_name.Substring(0, 1).ToLower() != \"h\" && file_name.Substring(0,\
    \ 1).ToLower() != \"i\" && file_name.Substring(0, 1).ToLower() != \"j\" && file_name.Substring(0,\
    \ 1).ToLower() != \"k\" && file_name.Substring(0, 1).ToLower() != \"l\" && file_name.Substring(0,\
    \ 1).ToLower() != \"m\" && file_name.Substring(0, 1).ToLower() != \"n\" && file_name.Substring(0,\
    \ 1).ToLower() != \"o\" && file_name.Substring(0, 1).ToLower() != \"p\" && file_name.Substring(0,\
    \ 1).ToLower() != \"q\" && file_name.Substring(0, 1).ToLower() != \"r\" && file_name.Substring(0,\
    \ 1).ToLower() != \"s\" && file_name.Substring(0, 1).ToLower() != \"t\" && file_name.Substring(0,\
    \ 1).ToLower() != \"u\" && file_name.Substring(0, 1).ToLower() != \"v\" && file_name.Substring(0,\
    \ 1).ToLower() != \"w\" && file_name.Substring(0, 1).ToLower() != \"x\" && file_name.Substring(0,\
    \ 1).ToLower() != \"y\" && file_name.Substring(0, 1).ToLower() != \"z\") {\n \
    \                   return \"No\";\n                }\n            }\n       \
    \ }\n        return \"Yes\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string file_name = file_name.Substring(0, file_name.IndexOf('.'));\n\
    \            string extension = file_name.Substring(file_name.IndexOf('.'));\n\
    \            List<string> extensions = new List<string>() { \"txt\", \"exe\",\
    \ \"dll\" };\n            if (extensions.Contains(extension)) {\n            \
    \    return \"Yes\";\n            }\n        }\n        return \"No\";", "   \
    \     if (file_name.Length > 3 || file_name.Contains(\".\") || file_name.Substring(0,\
    \ 1).IsEmpty() || file_name.Substring(0, 1).FirstOrDefault() != 'a' || file_name.Substring(0,\
    \ 1).FirstOrDefault() != 'A' || file_name.Substring(0, 1).FirstOrDefault() !=\
    \ 'z' || file_name.Substring(0, 1).FirstOrDefault() != 'Z' || file_name.Substring(0,\
    \ 1).FirstOrDefault() != '0' || file_name.Substring(0, 1).FirstOrDefault() !=\
    \ '9') {\n            return \"No\";\n        }\n        string extension = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n        string valid_extensions = new List<string>()\
    \ { \"txt\", \"exe\", \"dll\" };\n        if (valid_extensions.Contains(extension))\
    \ {\n            return \"Yes\";\n        }\n        return \"No\";", "      \
    \  string pattern = @\"^[0-9]{3}\\.[a-z][a-z][a-z]$\";\n        Regex regex =\
    \ new Regex(pattern);\n        return regex.IsMatch(file_name) ? \"Yes\" : \"\
    No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex\
    \ regex = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\") {\n            return \"Yes\";\n        }\n  \
    \      return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string substr = file_name.Substring(0, file_name.IndexOf(\".\"\
    ));\n            string first_char = substr.Substring(0, 1);\n            string\
    \ last_char = substr.Substring(substr.Length - 1, 1);\n            if (first_char.ToLower()\
    \ != first_char.ToUpper()) {\n                return \"No\";\n            }\n\
    \            if (last_char.ToLower() != last_char.ToUpper()) {\n             \
    \   return \"No\";\n            }\n        }\n        return \"Yes\";", "    \
    \    string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf('.')\
    \ != -1) {\n                if (file_name.Substring(0, 1).IsLetter()) {\n    \
    \                if (file_name.Substring(0, 1).IsLetter()) {\n               \
    \         return file_name;\n                    }\n                }\n      \
    \      }\n        }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string before_dot = file_name.Substring(0, file_name.IndexOf('.'));\n\
    \            string after_dot = file_name.Substring(file_name.IndexOf('.') + 1);\n\
    \            if (after_dot.Contains(\"txt\") || after_dot.Contains(\"exe\") ||\
    \ after_dot.Contains(\"dll\")) {\n                return \"Yes\";\n          \
    \  }\n        }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z0-9]+\\.(txt|exe|dll)$\";\n        Regex regex = new Regex(pattern);\n\
    \        return regex.IsMatch(file_name) ? \"Yes\" : \"No\";", "        string\
    \ dotIndex = file_name.IndexOf(\".\");\n        if (dotIndex == -1) {\n      \
    \      return \"No\";\n        }\n        string firstLetter = file_name.Substring(0,\
    \ 1);\n        if (!firstLetter.All(char.IsLetter)) {\n            return \"No\"\
    ;\n        }\n        string lastLetter = file_name.Substring(dotIndex + 1);\n\
    \        if (!lastLetter.Contains(\"txt\") && !lastLetter.Contains(\"exe\") &&\
    \ !lastLetter.Contains(\"dll\")) {\n            return \"No\";\n        }\n  \
    \      return \"Yes\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf('.') != -1) {\n                if (file_name.Substring(0,\
    \ 1).ToLower() != \"a\" && file_name.Substring(0, 1).ToLower() != \"b\" && file_name.Substring(0,\
    \ 1).ToLower() != \"c\" && file_name.Substring(0, 1).ToLower() != \"d\" && file_name.Substring(0,\
    \ 1).ToLower() != \"e\" && file_name.Substring(0, 1).ToLower() != \"f\" && file_name.Substring(0,\
    \ 1).ToLower() != \"g\" && file_name.Substring(0, 1).ToLower() != \"h\" && file_name.Substring(0,\
    \ 1).ToLower() != \"i\" && file_name.Substring(0, 1).ToLower() != \"j\" && file_name.Substring(0,\
    \ 1).ToLower() != \"k\" && file_name.Substring(0, 1).ToLower() != \"l\" && file_name.Substring(0,\
    \ 1).ToLower() != \"m\" && file_name.Substring(0, 1).ToLower() != \"n\" && file_name.Substring(0,\
    \ 1).ToLower() != \"o\" && file_name.Substring(0, 1).ToLower() != \"p\" && file_name.Substring(0,\
    \ 1).ToLower() != \"q\" && file_name.Substring(0, 1).ToLower() != \"r\" && file_name.Substring(0,\
    \ 1).ToLower() != \"s\" && file_name.Substring(0, 1).ToLower() != \"t\" && file_name.Substring(0,\
    \ 1).ToLower() != \"u\" && file_name.Substring(0, 1).ToLower() != \"v\" && file_name.Substring(0,\
    \ 1).ToLower() != \"w\" && file_name.Substring(0, 1).ToLower() != \"x\" && file_name.Substring(0,\
    \ 1).ToLower() != \"y\" && file_name.Substring(0, 1).ToLower() != \"z\") {\n \
    \                   return \"No\";\n                }\n            }\n       \
    \ }\n        return \"Yes\";", "        string dotPos = file_name.IndexOf('.');\n\
    \        if (dotPos == -1) {\n            return \"No\";\n        }\n        string\
    \ firstLetter = file_name.Substring(0, 1);\n        if (firstLetter < 'a' || firstLetter\
    \ > 'z') {\n            return \"No\";\n        }\n        string lastLetter =\
    \ file_name.Substring(dotPos + 1, 1);\n        bool isValid = true;\n        foreach\
    \ (string extension in new string[] { \"txt\", \"exe\", \"dll\" }) {\n       \
    \     if (file_name.EndsWith(extension)) {\n                isValid = false;\n\
    \                break;\n            }\n        }\n        if (!isValid) {\n \
    \           return \"No\";\n        }\n        return \"Yes\";", "        string\
    \ dotIndex = file_name.IndexOf(\".\");\n        if (dotIndex == -1) {\n      \
    \      return \"No\";\n        }\n        string firstLetter = file_name.Substring(0,\
    \ 1);\n        if (firstLetter < 'a' || firstLetter > 'z') {\n            return\
    \ \"No\";\n        }\n        string lastLetter = file_name.Substring(dotIndex\
    \ + 1, 1);\n        if (lastLetter != \"txt\" && lastLetter != \"exe\" && lastLetter\
    \ != \"dll\") {\n            return \"No\";\n        }\n        return \"Yes\"\
    ;", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex\
    \ = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n           \
    \ int index = file_name.IndexOf(\".\");\n            string first_part = file_name.Substring(0,\
    \ index);\n            string second_part = file_name.Substring(index + 1);\n\
    \            bool is_first_part_valid = first_part.All(char.IsLetter);\n     \
    \       bool is_second_part_valid = second_part.All(char.IsDigit);\n         \
    \   bool is_third_part_valid = second_part.Contains(\".\");\n            if (is_first_part_valid\
    \ && is_second_part_valid && is_third_part_valid) {\n                return \"\
    Yes\";\n            }\n        }\n        return \"No\";", "        if (file_name.Length\
    \ > 3) {\n            return \"No\";\n        }\n        if (file_name.Contains(\"\
    .\")) {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).IsEmpty()) {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).FirstOrDefault().IsLetter()) {\n            return \"No\";\n        }\n \
    \       if (file_name.Substring(0, 1).FirstOrDefault() != \"a\" && file_name.Substring(0,\
    \ 1).FirstOrDefault() != \"A\") {\n            return \"No\";\n        }\n   \
    \     if (file_name.Substring(0, 1).FirstOrDefault() != \"z\" && file_name.Substring(0,\
    \ 1).FirstOrDefault() != \"Z\") {\n            return \"No\";\n        }\n   \
    \     if (file_name.Substring(0, 1).FirstOrDefault() != \"t\" && file_name.Substring(0,\
    \ 1).FirstOrDefault() != \"T\") {\n            return \"No\";\n        }\n   \
    \     if (file_name.Substring(0, 1).FirstOrDefault() != \"e\" && file_name.Substring(0,\
    \ 1).FirstOrDefault() != \"E\") {\n            return \"No\";\n        }\n   \
    \     if (file_name.Substring(0, 1).FirstOrDefault() != \"d\" && file_name.Substring(0,\
    \ 1).FirstOrDefault() != \"D\") {\n            return \"No\";\n        }\n   \
    \     if (file_name.Substring(0, 1).FirstOrDefault() != \"l\" && file_name.Substring(0,\
    \ 1).FirstOrDefault() != \"L\") {\n            return \"No\";\n        }\n   \
    \     if (file_name.Substring(0, 1).FirstOrDefault() != \"l\" && file_name.Substring(0,\
    \ 1).FirstOrDefault() != \"L\") {\n            return \"No\";\n        }\n   \
    \     if (file_name.Substring(0, 1).FirstOrDefault() != \"o\" && file_name.Substring(0,\
    \ 1).FirstOrDefault() != \"O\") {\n            return \"No\";\n        }\n   \
    \     if (file_name.Substring(0, 1).FirstOrDefault() != \"x\" && file_name.Substring(0,\
    \ 1).FirstOrDefault() != \"X\") {\n            return \"No\";\n        }\n   \
    \     if (file_name.Substring(0, 1).FirstOrDefault() != \"p\" && file_name.Substring(0,\
    \ 1).FirstOrDefault() != \"P\") {\n            return \"No\";\n        }\n   \
    \     if (file_name.Substring(0, 1).FirstOrDefault() != \"h\" && file_name.Substring(0,\
    \ 1).FirstOrDefault() != \"H\") {\n            return \"No\";\n        }\n   \
    \     if (file_name.Substring(0, 1).FirstOrDefault() != \"r\" && file_name.Substring(0,\
    \ 1).FirstOrDefault() != \"R\") {\n            return \"No\";\n        }\n   \
    \     if (file_name.Substring(0, 1).FirstOrDefault() != \"e\" && file_name.Substring(0,\
    \ 1).FirstOrDefault() != \"E\") {\n            return \"No\";\n        }\n   \
    \     if (file_name.Sub", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string before_dot = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n            string after_dot = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            if (before_dot != \"\" && after_dot != \"\" && after_dot.Contains(\"\
    txt\") && after_dot.Contains(\"exe\") && after_dot.Contains(\"dll\")) {\n    \
    \            return \"Yes\";\n            }\n        }\n        return \"No\";",
  "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        string result = regex.Match(file_name).Value;\n   \
    \     if (result == \"Yes\") {\n            return \"Yes\";\n        }\n     \
    \   return \"No\";", "        string dotIndex = file_name.IndexOf('.');\n    \
    \    if (dotIndex == -1) {\n            return \"No\";\n        }\n        string\
    \ firstLetter = file_name.Substring(0, dotIndex);\n        string lastLetter =\
    \ file_name.Substring(dotIndex + 1);\n        if (firstLetter == \"\" || firstLetter\
    \ == \"a\" || firstLetter == \"A\" || firstLetter == \"b\" || firstLetter == \"\
    B\" || firstLetter == \"c\" || firstLetter == \"C\" || firstLetter == \"d\" ||\
    \ firstLetter == \"D\" || firstLetter == \"e\" || firstLetter == \"E\" || firstLetter\
    \ == \"f\" || firstLetter == \"F\" || firstLetter == \"g\" || firstLetter == \"\
    G\" || firstLetter == \"h\" || firstLetter == \"H\" || firstLetter == \"i\" ||\
    \ firstLetter == \"I\" || firstLetter == \"j\" || firstLetter == \"J\" || firstLetter\
    \ == \"k\" || firstLetter == \"K\" || firstLetter == \"l\" || firstLetter == \"\
    L\" || firstLetter == \"m\" || firstLetter == \"M\" || firstLetter == \"n\" ||\
    \ firstLetter == \"N\" || firstLetter == \"o\" || firstLetter == \"O\" || firstLetter\
    \ == \"p\" || firstLetter == \"P\" || firstLetter == \"q\" || firstLetter == \"\
    Q\" || firstLetter == \"r\" || firstLetter == \"R\" || firstLetter == \"s\" ||\
    \ firstLetter == \"S\" || firstLetter == \"t\" || firstLetter == \"T\" || firstLetter\
    \ == \"u\" || firstLetter == \"U\" || firstLetter == \"v\" || firstLetter == \"\
    V\" || firstLetter == \"w\" || firstLetter == \"W\" || firstLetter == \"x\" ||\
    \ firstLetter == \"X\" || firstLetter == \"y\" || firstLetter == \"Y\" || firstLetter\
    \ == \"z\" || firstLetter == \"Z\") {\n            return \"No\";\n        }\n\
    \        if (lastLetter != \"\" && lastLetter != \"txt\" && lastLetter != \"exe\"\
    \ && lastLetter != \"dll\") {\n            return \"No\";\n        }\n       \
    \ return \"Yes\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n \
    \       Regex regex = new Regex(pattern);\n        Match match = regex.Match(file_name);\n\
    \        if (match.Success) {\n            string file_name = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            string extension = file_name.Substring(file_name.LastIndexOf(\"\
    .\") + 1);\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                return \"Yes\";\n            } else {\n     \
    \           return \"No\";\n            }\n        } else {\n            return\
    \ \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\.[a-z][a-z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        Match match = regex.Match(file_name);\n\
    \        if (match.Success) {\n            string substr = file_name.Substring(0,\
    \ match.Index);\n            string extension = file_name.Substring(match.Index\
    \ + match.Length);\n            if (extension.Contains(\".\") && extension.Substring(0,\
    \ 1).Equals(\".\") && extension.Substring(1, 1).Equals(\".\")) {\n           \
    \     string extension_check = extension.Substring(1, extension.Length - 2);\n\
    \                if (extension_check.Equals(\"txt\") || extension_check.Equals(\"\
    exe\") || extension_check.Equals(\"dll\")) {\n                    return \"Yes\"\
    ;\n                }\n            }\n        }\n        return \"No\";", "   \
    \     string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        string result = regex.Match(file_name).Value;\n   \
    \     if (result == \"Yes\") {\n            return \"Yes\";\n        }\n     \
    \   return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n\
    \        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf(\".\") > 0) {\n                if (file_name.Substring(0,\
    \ 1).ToLower() == \"a\" || file_name.Substring(0, 1).ToLower() == \"b\" || file_name.Substring(0,\
    \ 1).ToLower() == \"c\" || file_name.Substring(0, 1).ToLower() == \"d\" || file_name.Substring(0,\
    \ 1).ToLower() == \"e\" || file_name.Substring(0, 1).ToLower() == \"f\" || file_name.Substring(0,\
    \ 1).ToLower() == \"g\" || file_name.Substring(0, 1).ToLower() == \"h\" || file_name.Substring(0,\
    \ 1).ToLower() == \"i\" || file_name.Substring(0, 1).ToLower() == \"j\" || file_name.Substring(0,\
    \ 1).ToLower() == \"k\" || file_name.Substring(0, 1).ToLower() == \"l\" || file_name.Substring(0,\
    \ 1).ToLower() == \"m\" || file_name.Substring(0, 1).ToLower() == \"n\" || file_name.Substring(0,\
    \ 1).ToLower() == \"o\" || file_name.Substring(0, 1).ToLower() == \"p\" || file_name.Substring(0,\
    \ 1).ToLower() == \"q\" || file_name.Substring(0, 1).ToLower() == \"r\" || file_name.Substring(0,\
    \ 1).ToLower() == \"s\" || file_name.Substring(0, 1).ToLower() == \"t\" || file_name.Substring(0,\
    \ 1).ToLower() == \"u\" || file_name.Substring(0, 1).ToLower() == \"v\" || file_name.Substring(0,\
    \ 1).ToLower() == \"w\" || file_name.Substring(0, 1).ToLower() == \"x\" || file_name.Substring(0,\
    \ 1).ToLower() == \"y\" || file_name.Substring(0, 1).ToLower() == \"z\") {\n \
    \                   return \"Yes\";\n                }\n            }\n      \
    \      return \"No\";\n        }\n        return \"No\";", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf(\"\
    .\") > 0) {\n                if (file_name.Substring(0, 1).ToLower() == \"a\"\
    \ || file_name.Substring(0, 1).ToLower() == \"b\" || file_name.Substring(0, 1).ToLower()\
    \ == \"c\" || file_name.Substring(0, 1).ToLower() == \"d\" || file_name.Substring(0,\
    \ 1).ToLower() == \"e\" || file_name.Substring(0, 1).ToLower() == \"f\" || file_name.Substring(0,\
    \ 1).ToLower() == \"g\" || file_name.Substring(0, 1).ToLower() == \"h\" || file_name.Substring(0,\
    \ 1).ToLower() == \"i\" || file_name.Substring(0, 1).ToLower() == \"j\" || file_name.Substring(0,\
    \ 1).ToLower() == \"k\" || file_name.Substring(0, 1).ToLower() == \"l\" || file_name.Substring(0,\
    \ 1).ToLower() == \"m\" || file_name.Substring(0, 1).ToLower() == \"n\" || file_name.Substring(0,\
    \ 1).ToLower() == \"o\" || file_name.Substring(0, 1).ToLower() == \"p\" || file_name.Substring(0,\
    \ 1).ToLower() == \"q\" || file_name.Substring(0, 1).ToLower() == \"r\" || file_name.Substring(0,\
    \ 1).ToLower() == \"s\" || file_name.Substring(0, 1).ToLower() == \"t\" || file_name.Substring(0,\
    \ 1).ToLower() == \"u\" || file_name.Substring(0, 1).ToLower() == \"v\" || file_name.Substring(0,\
    \ 1).ToLower() == \"w\" || file_name.Substring(0, 1).ToLower() == \"x\" || file_name.Substring(0,\
    \ 1).ToLower() == \"y\" || file_name.Substring(0, 1).ToLower() == \"z\" || file_name.Substring(0,\
    \ 1).ToLower() == \"A\" || file_name.Substring(0, 1).ToLower() == \"B\" || file_name.Substring(0,\
    \ 1).ToLower() == \"C\" || file_name.Substring(0, 1).ToLower() == \"D\" || file_name.Substring(0,\
    \ 1).ToLower() == \"E\" || file_name.Substring(0, 1).ToLower() == \"F\" || file_name.Substring(0,\
    \ 1).ToLower() == \"G\" || file_name.Substring(0, 1).ToLower() == \"H\" || file_name.Substring(0,\
    \ 1).ToLower() == \"I\" || file_name.Substring(0, 1).ToLower() == \"J\" || file_name.Substring(0,\
    \ 1).ToLower() == \"K\" || file_name.Substring(0, 1).ToLower() == \"L\" || file_name.Substring(0,\
    \ 1).ToLower() == \"M\" || file_name", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z0-9]+$\";\n        Regex regex = new Regex(pattern);\n        string result\
    \ = regex.Match(file_name).Value;\n        if (result == \"Yes\")\n          \
    \  return \"Yes\";\n        else\n            return \"No\";", "        string\
    \ pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        return regex.IsMatch(file_name) ? \"Yes\" : \"No\";", "        // Your\
    \ code goes here\n        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n    \
    \    Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string file_name = file_name.Substring(0, file_name.IndexOf(\"\
    .\") + 1);\n            string extension = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                return \"Yes\";\n            }\n            return\
    \ \"No\";\n        }\n        return \"No\";", "        // Your code here\n  \
    \      string pattern = @\"^[0-9]{3}\\.[a-zA-Z]{0,1}$\";\n        Regex regex\
    \ = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n           \
    \ string file_name = file_name.Substring(0, file_name.IndexOf(\".\"));\n     \
    \       string extension = file_name.Substring(file_name.IndexOf(\".\") + 1);\n\
    \            if (extension == \"txt\" || extension == \"exe\" || extension ==\
    \ \"dll\") {\n                return \"Yes\";\n            }\n            else\
    \ {\n                return \"No\";\n            }\n        }\n        else {\n\
    \            return \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string before_dot = file_name.Substring(0, file_name.IndexOf('.'));\n\
    \            if (before_dot.Length > 0) {\n                string after_dot =\
    \ file_name.Substring(file_name.IndexOf('.') + 1);\n                List<string>\
    \ extensions = new List<string> { \"txt\", \"exe\", \"dll\" };\n             \
    \   if (extensions.Contains(after_dot)) {\n                    return \"Yes\"\
    ;\n                } else {\n                    return \"No\";\n            \
    \    }\n            } else {\n                return \"No\";\n            }\n\
    \        } else {\n            return \"No\";\n        }", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        return regex.IsMatch(file_name) ? \"Yes\" : \"No\";", "        string\
    \ pattern = @\"^[0-9]{3}\\.[a-zA-Z0-9]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            string substr = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            string substr_2 = file_name.Substring(file_name.IndexOf(\"\
    .\"));\n            string substr_3 = file_name.Substring(file_name.IndexOf(\"\
    .\"), file_name.Length - file_name.IndexOf(\".\"));\n            string substr_4\
    \ = file_name.Substring(file_name.IndexOf(\".\") + 1);\n            string substr_5\
    \ = file_name.Substring(file_name.IndexOf(\".\") + 1);\n            string substr_6\
    \ = file_name.Substring(file_name.IndexOf(\".\") + 1);\n            string substr_7\
    \ = file_name.Substring(file_name.IndexOf(\".\") + 1);\n            string substr_8\
    \ = file_name.Substring(file_name.IndexOf(\".\") + 1);\n            string substr_9\
    \ = file_name.Substring(file_name.IndexOf(\".\") + 1);\n            string substr_10\
    \ = file_name.Substring(file_name.IndexOf(\".\") + 1);\n            string substr_11\
    \ = file_name.Substring(file_name.IndexOf(\".\") + 1);\n            string substr_12\
    \ = file_name.Substring(file_name.IndexOf(\".\") + 1);\n            string substr_13\
    \ = file_name.Substring(file_name.IndexOf(\".\") + 1);\n            string substr_14\
    \ = file_name.Substring(file_name.IndexOf(\".\") + 1);\n            string substr_15\
    \ = file_name.Substring(file_name.IndexOf(\".\") + 1);\n            string substr_16\
    \ = file_name.Substring(file_name.IndexOf(\".\") + 1);\n            string substr_17\
    \ = file_name.Substring(file_name.IndexOf(\".\") + 1);\n            string substr_18\
    \ = file_name.Substring(file_name.IndexOf(\".\") + 1);\n            string substr_19\
    \ = file_name.Substring(file_name.IndexOf(\".\") + 1);\n            string substr_20\
    \ = file_name.Substring(file_name.IndexOf(\".\") + 1);\n            string substr_21\
    \ = file_name.Substring(file_name.IndexOf(\".\") + 1);\n            string substr_22\
    \ = file_name.Substring(file_name.IndexOf(\".\") + 1);\n            string substr_23\
    \ = file_name.Substring(file_name.IndexOf(\".\") + 1);\n            string substr_24\
    \ = file_name.Substring(file_name.IndexOf(\".\") + 1);\n            string substr_25\
    \ = file_name.Substring(file_name.IndexOf(\".\") + 1);\n            string substr_26\
    \ = file_name.Sub", "        if (file_name.Length > 3) {\n            return \"\
    No\";\n        }\n        if (file_name.Contains(\".\")) {\n            return\
    \ \"No\";\n        }\n        if (file_name.Substring(0, 1).IsEmpty()) {\n   \
    \         return \"No\";\n        }\n        if (file_name.Substring(0, 1).Any(c\
    \ => c < 'a' || c > 'z')) {\n            return \"No\";\n        }\n        if\
    \ (file_name.Substring(0, 1).Any(c => c < 'A' || c > 'Z')) {\n            return\
    \ \"No\";\n        }\n        if (file_name.Substring(0, file_name.IndexOf(\"\
    .\")).Any(c => c < 'a' || c > 'z')) {\n            return \"No\";\n        }\n\
    \        if (file_name.Substring(0, file_name.IndexOf(\".\")).Any(c => c < 'A'\
    \ || c > 'Z')) {\n            return \"No\";\n        }\n        return \"Yes\"\
    ;", "        string dot = \".\";\n        string dot1 = file_name.Substring(0,\
    \ 1);\n        string dot2 = file_name.Substring(1, 1);\n        string dot3 =\
    \ file_name.Substring(2, 1);\n        string dot4 = file_name.Substring(3, 1);\n\
    \        string dot5 = file_name.Substring(4, 1);\n        string dot6 = file_name.Substring(5,\
    \ 1);\n        string dot7 = file_name.Substring(6, 1);\n        string dot8 =\
    \ file_name.Substring(7, 1);\n        string dot9 = file_name.Substring(8, 1);\n\
    \        string dot10 = file_name.Substring(9, 1);\n        string dot11 = file_name.Substring(10,\
    \ 1);\n        string dot12 = file_name.Substring(11, 1);\n        string dot13\
    \ = file_name.Substring(12, 1);\n        string dot14 = file_name.Substring(13,\
    \ 1);\n        string dot15 = file_name.Substring(14, 1);\n        string dot16\
    \ = file_name.Substring(15, 1);\n        string dot17 = file_name.Substring(16,\
    \ 1);\n        string dot18 = file_name.Substring(17, 1);\n        string dot19\
    \ = file_name.Substring(18, 1);\n        string dot20 = file_name.Substring(19,\
    \ 1);\n        string dot21 = file_name.Substring(20, 1);\n        string dot22\
    \ = file_name.Substring(21, 1);\n        string dot23 = file_name.Substring(22,\
    \ 1);\n        string dot24 = file_name.Substring(23, 1);\n        string dot25\
    \ = file_name.Substring(24, 1);\n        string dot26 = file_name.Substring(25,\
    \ 1);\n        string dot27 = file_name.Substring(26, 1);\n        string dot28\
    \ = file_name.Substring(27, 1);\n        string dot29 = file_name.Substring(28,\
    \ 1);\n        string dot30 = file_name.Substring(29, 1);\n        string dot31\
    \ = file_name.Substring(30, 1);\n        string dot32 = file_name.Substring(31,\
    \ 1);\n        string dot33 = file_name.Substring(32, 1);\n        string dot34\
    \ = file_name.Substring(33, 1);\n        string dot35 = file_name.Substring(34,\
    \ 1);\n        string dot36 = file_name.Substring(35, 1);\n        string dot37\
    \ = file_name.Substring(36, 1);\n        string dot38 = file_name.Substring(37,\
    \ 1);\n        string dot39 = file_name.Substring(38, 1);\n        string dot40\
    \ = file_name.Substring(39, 1);\n        string dot41 = file_name.Substring(40,\
    \ 1);\n        string dot42 = file_name.Substring(41, 1);\n        string dot43\
    \ = file_name.Substring(42, 1);\n        ", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf('.') != -1) {\n                if (file_name.Substring(0,\
    \ 1).IsLetter() && file_name.Substring(0, 1).ToLower() == file_name.Substring(0,\
    \ 1).ToLower()) {\n                    if (file_name.Substring(0, file_name.IndexOf('.')).ToLower()\
    \ == file_name.Substring(0, file_name.IndexOf('.')).ToLower()) {\n           \
    \             if (file_name.Substring(file_name.IndexOf('.')).ToLower() == file_name.Substring(file_name.IndexOf('.')).ToLower())\
    \ {\n                            return \"Yes\";\n                        }\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex\
    \ regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n     \
    \       string file_name = file_name.Substring(0, file_name.IndexOf('.'));\n \
    \           string extension = file_name.Substring(file_name.IndexOf('.'));\n\
    \            string valid_extensions = new List<string> { \"txt\", \"exe\", \"\
    dll\" };\n            if (valid_extensions.Contains(extension)) {\n          \
    \      return \"Yes\";\n            }\n            else {\n                return\
    \ \"No\";\n            }\n        }\n        else {\n            return \"No\"\
    ;\n        }", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n      \
    \  Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n\
    \            if (file_name.IndexOf(\".\") > 0) {\n                string before_dot\
    \ = file_name.Substring(0, file_name.IndexOf(\".\"));\n                if (before_dot.Length\
    \ > 0) {\n                    char first_letter = before_dot[0];\n           \
    \         if (first_letter >= 'a' && first_letter <= 'z' || first_letter >= 'A'\
    \ && first_letter <= 'Z') {\n                        return file_name;\n     \
    \               }\n                }\n            }\n        }\n        return\
    \ \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex\
    \ regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n     \
    \       string file_name = file_name.Substring(0, file_name.IndexOf(\".\"));\n\
    \            string extension = file_name.Substring(file_name.IndexOf(\".\"));\n\
    \            if (extension == \"txt\" || extension == \"exe\" || extension ==\
    \ \"dll\") {\n                return \"Yes\";\n            }\n        }\n    \
    \    return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n\
    \        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string file_name = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n            string extension = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            string[] extensions = { \"txt\", \"exe\", \"dll\" };\n\
    \            if (extensions.Contains(extension)) {\n                return \"\
    Yes\";\n            } else {\n                return \"No\";\n            }\n\
    \        } else {\n            return \"No\";\n        }", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-z][a-z][a-z]$\";\n        Regex regex = new Regex(pattern);\n\
    \        return regex.IsMatch(file_name) ? \"Yes\" : \"No\";", "        string\
    \ pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            string before_dot = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            string after_dot = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            string valid_extensions = new string[] { \"txt\", \"exe\"\
    , \"dll\" };\n            if (valid_extensions.Contains(after_dot)) {\n      \
    \          return \"Yes\";\n            } else {\n                return \"No\"\
    ;\n            }\n        } else {\n            return \"No\";\n        }", " \
    \       string dotIndex = file_name.IndexOf(\".\");\n        if (dotIndex == -1)\
    \ {\n            return \"No\";\n        }\n        string firstLetter = file_name.Substring(0,\
    \ dotIndex);\n        string lastLetter = file_name.Substring(dotIndex + 1);\n\
    \        bool firstLetterIsLetter = firstLetter[0] >= 'a' && firstLetter[0] <=\
    \ 'z';\n        bool lastLetterIsLetter = lastLetter[0] >= 'a' && lastLetter[0]\
    \ <= 'z';\n        bool firstLetterIsNumber = firstLetter[0] >= '0' && firstLetter[0]\
    \ <= '9';\n        bool lastLetterIsNumber = lastLetter[0] >= '0' && lastLetter[0]\
    \ <= '9';\n        if (firstLetterIsLetter && lastLetterIsLetter) {\n        \
    \    return \"Yes\";\n        }\n        if (firstLetterIsNumber && lastLetterIsNumber)\
    \ {\n            return \"Yes\";\n        }\n        return \"No\";", "      \
    \  string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf(\"\
    .\") > 0) {\n                if (file_name.Substring(0, 1).ToLower() == \"a\"\
    \ || file_name.Substring(0, 1).ToLower() == \"b\" || file_name.Substring(0, 1).ToLower()\
    \ == \"c\" || file_name.Substring(0, 1).ToLower() == \"d\" || file_name.Substring(0,\
    \ 1).ToLower() == \"e\" || file_name.Substring(0, 1).ToLower() == \"f\" || file_name.Substring(0,\
    \ 1).ToLower() == \"g\" || file_name.Substring(0, 1).ToLower() == \"h\" || file_name.Substring(0,\
    \ 1).ToLower() == \"i\" || file_name.Substring(0, 1).ToLower() == \"j\" || file_name.Substring(0,\
    \ 1).ToLower() == \"k\" || file_name.Substring(0, 1).ToLower() == \"l\" || file_name.Substring(0,\
    \ 1).ToLower() == \"m\" || file_name.Substring(0, 1).ToLower() == \"n\" || file_name.Substring(0,\
    \ 1).ToLower() == \"o\" || file_name.Substring(0, 1).ToLower() == \"p\" || file_name.Substring(0,\
    \ 1).ToLower() == \"q\" || file_name.Substring(0, 1).ToLower() == \"r\" || file_name.Substring(0,\
    \ 1).ToLower() == \"s\" || file_name.Substring(0, 1).ToLower() == \"t\" || file_name.Substring(0,\
    \ 1).ToLower() == \"u\" || file_name.Substring(0, 1).ToLower() == \"v\" || file_name.Substring(0,\
    \ 1).ToLower() == \"w\" || file_name.Substring(0, 1).ToLower() == \"x\" || file_name.Substring(0,\
    \ 1).ToLower() == \"y\" || file_name.Substring(0, 1).ToLower() == \"z\" || file_name.Substring(0,\
    \ 1).ToLower() == \"A\" || file_name.Substring(0, 1).ToLower() == \"B\" || file_name.Substring(0,\
    \ 1).ToLower() == \"C\" || file_name.Substring(0, 1).ToLower() == \"D\" || file_name.Substring(0,\
    \ 1).ToLower() == \"E\" || file_name.Substring(0, 1).ToLower() == \"F\" || file_name.Substring(0,\
    \ 1).ToLower() == \"G\" || file_name.Substring(0, 1).ToLower() == \"H\" || file_name.Substring(0,\
    \ 1).ToLower() == \"I\" || file_name.Substring(0, 1).ToLower() == \"J\" || file_name.Substring(0,\
    \ 1).ToLower() == \"K\" || file_name.Substring(0, 1).ToLower() == \"L\" || file_name.Substring(0,\
    \ 1).ToLower() == \"M\" || file_name", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf('.') != -1) {\n                string before_dot\
    \ = file_name.Substring(0, file_name.IndexOf('.'));\n                if (before_dot.Length\
    \ > 0) {\n                    char first_letter = Convert.ToChar(first_letter(before_dot));\n\
    \                    if (first_letter >= 'a' && first_letter <= 'z') {\n     \
    \                   return file_name;\n                    }\n               \
    \ }\n            }\n        }\n        return \"No\";", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-z][a-z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf('.')\
    \ != -1) {\n                if (file_name.Substring(0, 1).Length > 0) {\n    \
    \                if (file_name.Substring(0, 1).ToLower() != \"a\" && file_name.Substring(0,\
    \ 1).ToLower() != \"b\" && file_name.Substring(0, 1).ToLower() != \"c\" && file_name.Substring(0,\
    \ 1).ToLower() != \"d\" && file_name.Substring(0, 1).ToLower() != \"e\" && file_name.Substring(0,\
    \ 1).ToLower() != \"f\" && file_name.Substring(0, 1).ToLower() != \"g\" && file_name.Substring(0,\
    \ 1).ToLower() != \"h\" && file_name.Substring(0, 1).ToLower() != \"i\" && file_name.Substring(0,\
    \ 1).ToLower() != \"j\" && file_name.Substring(0, 1).ToLower() != \"k\" && file_name.Substring(0,\
    \ 1).ToLower() != \"l\" && file_name.Substring(0, 1).ToLower() != \"m\" && file_name.Substring(0,\
    \ 1).ToLower() != \"n\" && file_name.Substring(0, 1).ToLower() != \"o\" && file_name.Substring(0,\
    \ 1).ToLower() != \"p\" && file_name.Substring(0, 1).ToLower() != \"q\" && file_name.Substring(0,\
    \ 1).ToLower() != \"r\" && file_name.Substring(0, 1).ToLower() != \"s\" && file_name.Substring(0,\
    \ 1).ToLower() != \"t\" && file_name.Substring(0, 1).ToLower() != \"u\" && file_name.Substring(0,\
    \ 1).ToLower() != \"v\" && file_name.Substring(0, 1).ToLower() != \"w\" && file_name.Substring(0,\
    \ 1).ToLower() != \"x\" && file_name.Substring(0, 1).ToLower() != \"y\" && file_name.Substring(0,\
    \ 1).ToLower() != \"z\") {\n                        return \"No\";\n         \
    \           }\n                }\n            }\n        }\n        return \"\
    Yes\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex\
    \ regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n     \
    \       string file_name = file_name.Substring(0, file_name.IndexOf(\".\"));\n\
    \            string extension = file_name.Substring(file_name.LastIndexOf(\".\"\
    ) + 1);\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                return \"Yes\";\n            }\n            else\
    \ {\n                return \"No\";\n            }\n        }\n        else {\n\
    \            return \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf(\".\") > 0) {\n                if (file_name.Substring(0,\
    \ 1).ToLower() == \"a\" || file_name.Substring(0, 1).ToLower() == \"b\" || file_name.Substring(0,\
    \ 1).ToLower() == \"c\" || file_name.Substring(0, 1).ToLower() == \"d\" || file_name.Substring(0,\
    \ 1).ToLower() == \"e\" || file_name.Substring(0, 1).ToLower() == \"f\" || file_name.Substring(0,\
    \ 1).ToLower() == \"g\" || file_name.Substring(0, 1).ToLower() == \"h\" || file_name.Substring(0,\
    \ 1).ToLower() == \"i\" || file_name.Substring(0, 1).ToLower() == \"j\" || file_name.Substring(0,\
    \ 1).ToLower() == \"k\" || file_name.Substring(0, 1).ToLower() == \"l\" || file_name.Substring(0,\
    \ 1).ToLower() == \"m\" || file_name.Substring(0, 1).ToLower() == \"n\" || file_name.Substring(0,\
    \ 1).ToLower() == \"o\" || file_name.Substring(0, 1).ToLower() == \"p\" || file_name.Substring(0,\
    \ 1).ToLower() == \"q\" || file_name.Substring(0, 1).ToLower() == \"r\" || file_name.Substring(0,\
    \ 1).ToLower() == \"s\" || file_name.Substring(0, 1).ToLower() == \"t\" || file_name.Substring(0,\
    \ 1).ToLower() == \"u\" || file_name.Substring(0, 1).ToLower() == \"v\" || file_name.Substring(0,\
    \ 1).ToLower() == \"w\" || file_name.Substring(0, 1).ToLower() == \"x\" || file_name.Substring(0,\
    \ 1).ToLower() == \"y\" || file_name.Substring(0, 1).ToLower() == \"z\") {\n \
    \                   if (file_name.Substring(1, 1).ToLower() == \"t\" || file_name.Substring(1,\
    \ 1).ToLower() == \"e\" || file_name.Substring(1, 1).ToLower() == \"s\" || file_name.Substring(1,\
    \ 1).ToLower() == \"d\" || file_name.Substring(1, 1).ToLower() == \"l\" || file_name.Substring(1,\
    \ 1).ToLower() == \"o\" || file_name.Substring(1, 1).ToLower() == \"g\" || file_name.Substring(1,\
    \ 1).ToLower() == \"r\" || file_name.Substring(1, 1).ToLower() == \"a\" || file_name.Substring(1,\
    \ 1).ToLower() == \"i\" || file_name.Substring(1, 1).ToLower() == \"n\" || file_name.Substring(1,\
    \ 1).ToLower() == \"h\" || file_name.Substring(1, 1).ToLower() == \"k", "    \
    \    string pattern = @\"^[0-9]{3}\\.[a-zA-Z]{0,1}$\";\n        Regex regex =\
    \ new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\")\n            return \"Yes\";\n        else\n \
    \           return \"No\";", "        if (file_name.Length > 3) {\n          \
    \  return \"No\";\n        }\n        if (file_name.IndexOf('.') != -1) {\n  \
    \          return \"No\";\n        }\n        if (file_name.Substring(0, 1).IsLetterOrDigit())\
    \ {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ file_name.IndexOf('.')).ToLower() == \"exe\") {\n            return \"No\";\n\
    \        }\n        if (file_name.Substring(0, file_name.IndexOf('.')).ToLower()\
    \ == \"dll\") {\n            return \"No\";\n        }\n        return \"Yes\"\
    ;", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex\
    \ = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\") {\n            return result;\n        }\n   \
    \     return \"No\";", "        // Your code goes here\n        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z0-9]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name))\n        {\n            string name = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            string ext = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            if (name.Length == 1 && char.IsLetter(name[0]))\n    \
    \        {\n                if (ext.ToLower() == \"txt\" || ext.ToLower() == \"\
    exe\" || ext.ToLower() == \"dll\")\n                {\n                    return\
    \ \"Yes\";\n                }\n                else\n                {\n     \
    \               return \"No\";\n                }\n            }\n           \
    \ else\n            {\n                return \"No\";\n            }\n       \
    \ }\n        else\n        {\n            return \"No\";\n        }", "      \
    \  string dot = \".\";\n        string dot1 = \"\";\n        string dot2 = \"\"\
    ;\n        string dot3 = \"\";\n        string dot4 = \"\";\n        string dot5\
    \ = \"\";\n        string dot6 = \"\";\n        string dot7 = \"\";\n        string\
    \ dot8 = \"\";\n        string dot9 = \"\";\n        string dot10 = \"\";\n  \
    \      string dot11 = \"\";\n        string dot12 = \"\";\n        string dot13\
    \ = \"\";\n        string dot14 = \"\";\n        string dot15 = \"\";\n      \
    \  string dot16 = \"\";\n        string dot17 = \"\";\n        string dot18 =\
    \ \"\";\n        string dot19 = \"\";\n        string dot20 = \"\";\n        string\
    \ dot21 = \"\";\n        string dot22 = \"\";\n        string dot23 = \"\";\n\
    \        string dot24 = \"\";\n        string dot25 = \"\";\n        string dot26\
    \ = \"\";\n        string dot27 = \"\";\n        string dot28 = \"\";\n      \
    \  string dot29 = \"\";\n        string dot30 = \"\";\n        string dot31 =\
    \ \"\";\n        string dot32 = \"\";\n        string dot33 = \"\";\n        string\
    \ dot34 = \"\";\n        string dot35 = \"\";\n        string dot36 = \"\";\n\
    \        string dot37 = \"\";\n        string dot38 = \"\";\n        string dot39\
    \ = \"\";\n        string dot40 = \"\";\n        string dot41 = \"\";\n      \
    \  string dot42 = \"\";\n        string dot43 = \"\";\n        string dot44 =\
    \ \"\";\n        string dot45 = \"\";\n        string dot46 = \"\";\n        string\
    \ dot47 = \"\";\n        string dot48 = \"\";\n        string dot49 = \"\";\n\
    \        string dot50 = \"\";\n        string dot51 = \"\";\n        string dot52\
    \ = \"\";\n        string dot53 = \"\";\n        string dot54 = \"\";\n      \
    \  string dot55 = \"\";\n        string dot56 = \"\";\n        string dot57 =\
    \ \"\";\n        string dot58 = \"\";\n        string dot59 = \"\";\n        string\
    \ dot60 = \"\";\n        string dot61 = \"\";\n        string dot62 = \"\";\n\
    \        string dot63 = \"\";\n        string dot64 = \"\";\n        string dot65\
    \ = \"\";\n        string dot66 = \"\";\n        string dot67 = \"\";\n      \
    \  string dot68 = \"\";\n        string dot69 = \"\";\n        string dot70 =\
    \ \"\";\n        string dot71 = \"\";\n        string dot72 = \"\";\n        string\
    \ dot73 = \"\";\n        string dot74 = \"\";\n        string dot75 = \"\";\n\
    \        string dot76 = \"\";\n        string dot77 = \"\";\n        string dot78\
    \ = \"\";\n        string dot79 = \"\";\n        string dot80 = \"\";\n      \
    \  string dot81 = \"\";\n        ", "        // Your code goes here\n        string\
    \ pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf(\"\
    .\") > 0) {\n                if (file_name.Substring(0, 1).ToLower() == \"a\"\
    \ || file_name.Substring(0, 1).ToLower() == \"b\" || file_name.Substring(0, 1).ToLower()\
    \ == \"c\" || file_name.Substring(0, 1).ToLower() == \"d\" || file_name.Substring(0,\
    \ 1).ToLower() == \"e\" || file_name.Substring(0, 1).ToLower() == \"f\" || file_name.Substring(0,\
    \ 1).ToLower() == \"g\" || file_name.Substring(0, 1).ToLower() == \"h\" || file_name.Substring(0,\
    \ 1).ToLower() == \"i\" || file_name.Substring(0, 1).ToLower() == \"j\" || file_name.Substring(0,\
    \ 1).ToLower() == \"k\" || file_name.Substring(0, 1).ToLower() == \"l\" || file_name.Substring(0,\
    \ 1).ToLower() == \"m\" || file_name.Substring(0, 1).ToLower() == \"n\" || file_name.Substring(0,\
    \ 1).ToLower() == \"o\" || file_name.Substring(0, 1).ToLower() == \"p\" || file_name.Substring(0,\
    \ 1).ToLower() == \"q\" || file_name.Substring(0, 1).ToLower() == \"r\" || file_name.Substring(0,\
    \ 1).ToLower() == \"s\" || file_name.Substring(0, 1).ToLower() == \"t\" || file_name.Substring(0,\
    \ 1).ToLower() == \"u\" || file_name.Substring(0, 1).ToLower() == \"v\" || file_name.Substring(0,\
    \ 1).ToLower() == \"w\" || file_name.Substring(0, 1).ToLower() == \"x\" || file_name.Substring(0,\
    \ 1).ToLower() == \"y\" || file_name.Substring(0, 1).ToLower() == \"z\" || file_name.Substring(0,\
    \ 1).ToLower() == \"A\" || file_name.Substring(0, 1).ToLower() == \"B\" || file_name.Substring(0,\
    \ 1).ToLower() == \"C\" || file_name.Substring(0, 1).ToLower() == \"D\" || file_name.Substring(0,\
    \ 1).ToLower() == \"E\" || file_name.Substring(0, 1).ToLower() == \"F\" || file_name.Substring(0,\
    \ 1).ToLower() == \"G\" || file_name.Substring(0, 1).ToLower() == \"H\" || file_name.Substring(0,\
    \ 1).ToLower() == \"I\" || file_name.Substring(0, 1).ToLower() == \"J\" || file_name.Substring(0,\
    \ 1).ToLower() == \"K\" || file_name.Substring(0, 1).ToLower() == \"L\" || file_name.Substring(0,\
    \ 1).To", "        string pattern = @\"^[0-9]{3}\\.[a-z][a-z][a-z]$\";\n     \
    \   Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n\
    \            int index = file_name.IndexOf(\".\");\n            if (index > 0)\
    \ {\n                string before_dot = file_name.Substring(0, index);\n    \
    \            if (before_dot.Length > 0) {\n                    char first_letter\
    \ = before_dot[0];\n                    if (!(first_letter >= 'a' && first_letter\
    \ <= 'z') && !(first_letter >= 'A' && first_letter <= 'Z')) {\n              \
    \          return \"No\";\n                    }\n                }\n        \
    \        string after_dot = file_name.Substring(index + 1);\n                string[]\
    \ extensions = { \"txt\", \"exe\", \"dll\" };\n                bool result = extensions.Contains(after_dot);\n\
    \                return result ? \"Yes\" : \"No\";\n            }\n        }\n\
    \        return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-z][a-z][a-z]$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            int index = file_name.IndexOf('.');\n            if (index >\
    \ 0) {\n                string before_dot = file_name.Substring(0, index);\n \
    \               string after_dot = file_name.Substring(index + 1);\n         \
    \       bool is_valid = after_dot.Contains(\"txt\") || after_dot.Contains(\"exe\"\
    ) || after_dot.Contains(\"dll\");\n                return is_valid ? \"Yes\" :\
    \ \"No\";\n            }\n        }\n        return \"No\";", "        string\
    \ pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        Match match = regex.Match(file_name);\n        if (match.Success) {\n\
    \            string file_name = file_name.Substring(0, file_name.IndexOf(\".\"\
    ));\n            string extension = file_name.Substring(file_name.LastIndexOf(\"\
    .\") + 1);\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                return \"Yes\";\n            } else {\n     \
    \           return \"No\";\n            }\n        } else {\n            return\
    \ \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n\
    \        Regex regex = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\") {\n            return result;\n        }\n   \
    \     else {\n            return \"No\";\n        }", "        if (file_name.Length\
    \ > 3) {\n            return \"No\";\n        }\n        if (file_name.Contains(\"\
    .\")) {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).IsEmpty()) {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).Any(x => x != 'a' && x != 'A' && x != 'b' && x != 'B' && x != 'c' && x !=\
    \ 'C' && x != 'd' && x != 'D' && x != 'e' && x != 'E' && x != 'f' && x != 'F'\
    \ && x != 'g' && x != 'G' && x != 'h' && x != 'H' && x != 'i' && x != 'I' && x\
    \ != 'j' && x != 'J' && x != 'k' && x != 'K' && x != 'l' && x != 'L' && x != 'm'\
    \ && x != 'M' && x != 'n' && x != 'N' && x != 'o' && x != 'O' && x != 'p' && x\
    \ != 'P' && x != 'q' && x != 'Q' && x != 'r' && x != 'R' && x != 's' && x != 'S'\
    \ && x != 't' && x != 'T' && x != 'u' && x != 'U' && x != 'v' && x != 'V' && x\
    \ != 'w' && x != 'W' && x != 'x' && x != 'X' && x != 'y' && x != 'Y' && x != 'z'\
    \ && x != 'Z')) {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).Substring(0, 1).IsEmpty()) {\n            return \"No\";\n        }\n   \
    \     if (file_name.Substring(0, 1).Substring(0, 1).Any(x => x != 'a' && x !=\
    \ 'A' && x != 'b' && x != 'B' && x != 'c' && x != 'C' && x != 'd' && x != 'D'\
    \ && x != 'e' && x != 'E' && x != 'f' && x != 'F' && x != 'g' && x != 'G' && x\
    \ != 'h' && x != 'H' && x != 'i' && x != 'I' && x != 'j' && x != 'J' && x != 'k'\
    \ && x != 'K' && x != 'l' && x != 'L' && x != 'm' && x != 'M' && x != 'n' && x\
    \ != 'N' && x != 'o' && x != 'O' && x != 'p' && x != 'P' && x != 'q' && x != 'Q'\
    \ && x != 'r' && x != 'R' && x != 's' && x != 'S' && x != 't' && x != 'T' && x\
    \ != 'u' && x != 'U' && x != 'v' && x != 'V' && x != 'w' && x != 'W' && x != 'x'\
    \ && x != 'X' && x != 'y' && x != 'Y' && x != 'z' && x ", "        if (file_name.Length\
    \ > 3) {\n            return \"No\";\n        }\n        if (file_name.Contains(\"\
    .\")) {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).IsEmpty()) {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).Any(c => c < 'a' || c > 'z')) {\n            return \"No\";\n        }\n\
    \        if (file_name.Substring(0, file_name.IndexOf(\".\")).Any(c => c < 'a'\
    \ || c > 'z')) {\n            return \"No\";\n        }\n        if (file_name.Substring(file_name.IndexOf(\"\
    .\") + 1).Any(c => c < 'a' || c > 'z')) {\n            return \"No\";\n      \
    \  }\n        return \"Yes\";", "        string dotIndex = file_name.IndexOf('.');\n\
    \        if (dotIndex == -1) {\n            return \"No\";\n        }\n      \
    \  string firstLetter = file_name.Substring(0, dotIndex);\n        string lastLetter\
    \ = file_name.Substring(dotIndex + 1);\n        if (firstLetter == \"\") {\n \
    \           return \"No\";\n        }\n        if (firstLetter[0] < 'a' || firstLetter[0]\
    \ > 'z') {\n            return \"No\";\n        }\n        if (lastLetter == \"\
    txt\" || lastLetter == \"exe\" || lastLetter == \"dll\") {\n            return\
    \ \"Yes\";\n        }\n        return \"No\";", "        string pattern = @\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n       \
    \ if (regex.IsMatch(file_name)) {\n            string sub_string = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            if (sub_string.Length > 0 && sub_string[0]\
    \ >= 'a' && sub_string[0] <= 'z') {\n                string extension = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n                if (extension == \"txt\" || extension == \"exe\" ||\
    \ extension == \"dll\") {\n                    return \"Yes\";\n             \
    \   }\n            }\n        }\n        return \"No\";", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            string file_name = file_name.Substring(0,\
    \ file_name.IndexOf('.'));\n            string extension = file_name.Substring(file_name.IndexOf('.'));\n\
    \            bool isFile = false;\n            bool isExe = false;\n         \
    \   bool isDll = false;\n            foreach (char c in extension) {\n       \
    \         if (c == 't' || c == 'e' || c == 'x' || c == 'd') {\n              \
    \      isFile = true;\n                }\n                if (c == 'e' || c ==\
    \ 'x' || c == 'd') {\n                    isExe = true;\n                }\n \
    \               if (c == 'd' || c == 'l' || c == 'l') {\n                    isDll\
    \ = true;\n                }\n            }\n            if (isFile == true &&\
    \ isExe == true && isDll == true) {\n                return \"Yes\";\n       \
    \     }\n            else {\n                return \"No\";\n            }\n \
    \       }\n        else {\n            return \"No\";\n        }", "        string\
    \ pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf(\"\
    .\") > 0) {\n                if (file_name.Substring(0, 1).ToUpper() == file_name.Substring(0,\
    \ 1).ToUpper()) {\n                    if (file_name.Substring(0, file_name.IndexOf(\"\
    .\") + 1).ToLower() == \"exe\") {\n                        return \"Yes\";\n \
    \                   }\n                }\n            }\n            return \"\
    No\";\n        }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string file_name = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n            string extension = file_name.Substring(file_name.LastIndexOf(\"\
    .\") + 1);\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                return \"Yes\";\n            }\n            else\
    \ {\n                return \"No\";\n            }\n        }\n        else {\n\
    \            return \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\\
    .[a-z][a-z][a-z]$\";\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string substr = file_name.Substring(0, file_name.IndexOf(\".\"\
    ));\n            if (substr.Length > 0) {\n                bool isLetter = char.IsLetter(substr[0]);\n\
    \                bool isLetterOrDigit = char.IsLetter(substr[0]) || char.IsDigit(substr[0]);\n\
    \                bool isDot = substr.IndexOf(\".\") > 0;\n                bool\
    \ isTxt = substr.ToLower().EndsWith(\"txt\");\n                bool isExe = substr.ToLower().EndsWith(\"\
    exe\");\n                bool isDll = substr.ToLower().EndsWith(\"dll\");\n  \
    \              return isLetter && isLetterOrDigit && isDot && isTxt && isExe &&\
    \ isDll;\n            }\n        }\n        return \"No\";", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        Match match = regex.Match(file_name);\n        if (match.Success) {\n\
    \            string sub_string = file_name.Substring(0, match.Index);\n      \
    \      if (sub_string.Length == 0) {\n                return \"No\";\n       \
    \     }\n            char first_letter = sub_string[0];\n            if (first_letter\
    \ < 'a' || first_letter > 'z') {\n                return \"No\";\n           \
    \ }\n            string extension = file_name.Substring(match.Index + 1);\n  \
    \          if (extension.Length != 3 || extension[0] != 'd' || extension[1] !=\
    \ 'e' || extension[2] != 'x') {\n                return \"No\";\n            }\n\
    \            return \"Yes\";\n        }\n        return \"No\";", "        //\
    \ Your code here\n        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n    \
    \    Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.Contains(\".\")) {\n                if (file_name.Substring(0,\
    \ 1).Length > 0) {\n                    if (!char.IsLetter(file_name.Substring(0,\
    \ 1))) {\n                        return \"No\";\n                    }\n    \
    \            }\n                if (file_name.Substring(file_name.IndexOf(\".\"\
    ) + 1).ToLower().Contains(\"exe\") || file_name.Substring(file_name.IndexOf(\"\
    .\") + 1).ToLower().Contains(\"dll\")) {\n                    return \"Yes\";\n\
    \                }\n            }\n        }\n        return \"No\";", "     \
    \   string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            string file_extension =\
    \ file_name.Substring(file_name.LastIndexOf('.'));\n            if (file_extension\
    \ == \"txt\" || file_extension == \"exe\" || file_extension == \"dll\") {\n  \
    \              return \"Yes\";\n            }\n        }\n        return \"No\"\
    ;", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex\
    \ = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n           \
    \ string sub_string = file_name.Substring(0, file_name.IndexOf(\".\"));\n    \
    \        if (sub_string.Length > 0 && sub_string[0] >= 'a' && sub_string[0] <=\
    \ 'z') {\n                string extension = file_name.Substring(file_name.IndexOf(\"\
    .\"));\n                switch (extension) {\n                    case \"txt\"\
    :\n                    case \"exe\":\n                    case \"dll\":\n    \
    \                case \"bat\":\n                    case \"ps1\":\n          \
    \          case \"ps1xml\":\n                    case \"ps1xml\":\n          \
    \          case \"ps1xml\":\n                    case \"ps1xml\":\n          \
    \          case \"ps1xml\":\n                    case \"ps1xml\":\n          \
    \          case \"ps1xml\":\n                    case \"ps1xml\":\n          \
    \          case \"ps1xml\":\n                    case \"ps1xml\":\n          \
    \          case \"ps1xml\":\n                    case \"ps1xml\":\n          \
    \          case \"ps1xml\":\n                    case \"ps1xml\":\n          \
    \          case \"ps1xml\":\n                    case \"ps1xml\":\n          \
    \          case \"ps1xml\":\n                    case \"ps1xml\":\n          \
    \          case \"ps1xml\":\n                    case \"ps1xml\":\n          \
    \          case \"ps1xml\":\n                    case \"ps1xml\":\n          \
    \          case \"ps1xml\":\n                    case \"ps1xml\":\n          \
    \          case \"ps1xml\":\n                    case \"ps1xml\":\n          \
    \          case \"ps1xml\":\n                    case \"ps1xml\":\n          \
    \          case \"ps1xml\":\n                    case \"ps1xml\":\n          \
    \          case \"ps1xml\":\n                    case \"ps1xml\":\n          \
    \          case \"ps1xml\":\n                    case \"ps1xml\":\n          \
    \          case \"ps1xml\":\n                    case \"ps1xml\":\n          \
    \          case \"ps1xml\":\n                    case \"ps1xml\":\n          \
    \          case \"ps1xml\":\n                    case \"ps1xml\":\n          \
    \          case \"ps1xml\":\n                    case \"ps1xml\":\n          \
    \          case \"ps1xml\":\n                    case \"ps1xml\":\n          \
    \          case \"ps1xml\":\n                    case \"ps1xml\":\n          \
    \          case \"ps1xml\":\n                    case \"ps1xml\":\n          \
    \          case \"ps1xml\":\n                    case \"ps1xml\":\n          \
    \          case \"ps1xml\":\n                    case \"ps1xml\":\n          \
    \          case \"ps1xml\":\n                    case \"ps1xml\":\n          \
    \          case \"ps1xml\":\n                    case \"ps1xml\":\n          \
    \          ", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n       \
    \ Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n\
    \            if (file_name.IndexOf('.') != -1) {\n                if (file_name.Substring(0,\
    \ 1).ToLower() != 'a' && file_name.Substring(0, 1).ToLower() != 'b' && file_name.Substring(0,\
    \ 1).ToLower() != 'c' && file_name.Substring(0, 1).ToLower() != 'd' && file_name.Substring(0,\
    \ 1).ToLower() != 'e' && file_name.Substring(0, 1).ToLower() != 'f' && file_name.Substring(0,\
    \ 1).ToLower() != 'g' && file_name.Substring(0, 1).ToLower() != 'h' && file_name.Substring(0,\
    \ 1).ToLower() != 'i' && file_name.Substring(0, 1).ToLower() != 'j' && file_name.Substring(0,\
    \ 1).ToLower() != 'k' && file_name.Substring(0, 1).ToLower() != 'l' && file_name.Substring(0,\
    \ 1).ToLower() != 'm' && file_name.Substring(0, 1).ToLower() != 'n' && file_name.Substring(0,\
    \ 1).ToLower() != 'o' && file_name.Substring(0, 1).ToLower() != 'p' && file_name.Substring(0,\
    \ 1).ToLower() != 'q' && file_name.Substring(0, 1).ToLower() != 'r' && file_name.Substring(0,\
    \ 1).ToLower() != 's' && file_name.Substring(0, 1).ToLower() != 't' && file_name.Substring(0,\
    \ 1).ToLower() != 'u' && file_name.Substring(0, 1).ToLower() != 'v' && file_name.Substring(0,\
    \ 1).ToLower() != 'w' && file_name.Substring(0, 1).ToLower() != 'x' && file_name.Substring(0,\
    \ 1).ToLower() != 'y' && file_name.Substring(0, 1).ToLower() != 'z') {\n     \
    \               return \"No\";\n                }\n            }\n        }\n\
    \        return \"Yes\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            int index = file_name.IndexOf('.');\n            if (index !=\
    \ -1) {\n                string substr = file_name.Substring(0, index);\n    \
    \            if (substr.Length > 0 && substr.StartsWith(\"a\") && substr.EndsWith(\"\
    z\") || substr.StartsWith(\"A\") && substr.EndsWith(\"Z\")) {\n              \
    \      return \"Yes\";\n                }\n            }\n        }\n        return\
    \ \"No\";", "        if (file_name.Length > 3) {\n            return \"No\";\n\
    \        }\n        if (file_name.Contains(\".\")) {\n            return \"No\"\
    ;\n        }\n        if (file_name.Substring(0, 1).IsEmpty()) {\n           \
    \ return \"No\";\n        }\n        if (file_name.Substring(0, 1).IndexOfAny(new\
    \ char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' }) == -1) {\n   \
    \         return \"No\";\n        }\n        if (file_name.Substring(0, file_name.IndexOf(\"\
    .\")).IndexOfAny(new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'\
    \ }) == -1) {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ file_name.IndexOf(\".\")).IndexOfAny(new char[] { 'a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z' }) != 0) {\n            return \"No\";\n        }\n     \
    \   if (file_name.Substring(0, file_name.IndexOf(\".\")).IndexOfAny(new char[]\
    \ { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' }) != 0) {\n         \
    \   return \"No\";\n        }\n        if (file_name.Substring(0, file_name.IndexOf(\"\
    .\")).IndexOfAny(new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'\
    \ }) != 0) {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ file_name.IndexOf(\".\")).IndexOfAny(new char[] { 'a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z' }) != 0) {\n            return \"No\";\n        }\n     \
    \   if (file_name.Substring(0, file_name.IndexOf(\".\")).IndexOfAny(new char[]\
    \ { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' }) != 0) {\n         \
    \   return \"No\";\n        }\n        if (file_name.Substring(0, file_name.IndexOf(\"\
    .\")).IndexOfAny(new ", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string file_name = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n            string extension = file_name.Substring(file_name.LastIndexOf(\"\
    .\") + 1);\n            bool valid = true;\n            if (extension == \"txt\"\
    \ || extension == \"exe\" || extension == \"dll\") {\n                valid =\
    \ true;\n            } else {\n                valid = false;\n            }\n\
    \            if (valid) {\n                return \"Yes\";\n            } else\
    \ {\n                return \"No\";\n            }\n        } else {\n       \
    \     return \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\.[a-z][a-z][a-z]$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf('.') != -1) {\n                string before_dot\
    \ = file_name.Substring(0, file_name.IndexOf('.'));\n                if (before_dot.Length\
    \ > 0) {\n                    char first_letter = before_dot[0];\n           \
    \         if (!(first_letter == 'a' || first_letter == 'b' || first_letter ==\
    \ 'c' || first_letter == 'd' || first_letter == 'e' || first_letter == 'f' ||\
    \ first_letter == 'g' || first_letter == 'h' || first_letter == 'i' || first_letter\
    \ == 'j' || first_letter == 'k' || first_letter == 'l' || first_letter == 'm'\
    \ || first_letter == 'n' || first_letter == 'o' || first_letter == 'p' || first_letter\
    \ == 'q' || first_letter == 'r' || first_letter == 's' || first_letter == 't'\
    \ || first_letter == 'u' || first_letter == 'v' || first_letter == 'w' || first_letter\
    \ == 'x' || first_letter == 'y' || first_letter == 'z')) {\n                 \
    \       return \"No\";\n                    }\n                }\n           \
    \ }\n            string after_dot = file_name.Substring(file_name.IndexOf('.')+1);\n\
    \            string[] extensions = { \"txt\", \"exe\", \"dll\" };\n          \
    \  foreach (string extension in extensions) {\n                if (after_dot.ToLower().EndsWith(extension))\
    \ {\n                    return \"Yes\";\n                }\n            }\n \
    \           return \"No\";\n        }\n        return \"No\";", "        string\
    \ pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            if (file_name.Contains(\"\
    .\")) {\n                if (file_name.Substring(0, 1).Length > 0) {\n       \
    \             string pattern1 = @\"^[a-zA-Z]+\";\n                    Regex regex1\
    \ = new Regex(pattern1);\n                    if (regex1.IsMatch(file_name.Substring(0,\
    \ 1))) {\n                        return file_name;\n                    }\n \
    \               }\n            }\n        }\n        return \"No\";", "      \
    \  string pattern = @\"^[0-9]{3}\\.[a-z][a-z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n            int index\
    \ = file_name.IndexOf(\".\");\n            if (index > 0) {\n                string\
    \ sub_string = file_name.Substring(0, index);\n                if (sub_string.Length\
    \ > 0) {\n                    char first_letter = sub_string[0];\n           \
    \         char last_letter = sub_string[sub_string.Length - 1];\n            \
    \        if (first_letter >= 'a' && first_letter <= 'z' || first_letter >= 'A'\
    \ && first_letter <= 'Z') {\n                        if (last_letter >= 'a' &&\
    \ last_letter <= 'z' || last_letter >= 'A' && last_letter <= 'Z') {\n        \
    \                    return \"Yes\";\n                        }\n            \
    \        }\n                }\n            }\n        }\n        return \"No\"\
    ;", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex\
    \ = new Regex(pattern);\n        Match match = regex.Match(file_name);\n     \
    \   if (match.Success) {\n            return file_name;\n        } else {\n  \
    \          return \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\\
    .[a-z][a-z]$\";\n        Regex regex = new Regex(pattern);\n        Match match\
    \ = regex.Match(file_name);\n        if (match.Success) {\n            string\
    \ file_name = file_name.Substring(0, file_name.IndexOf(\".\"));\n            string\
    \ extension = file_name.Substring(file_name.IndexOf(\".\") + 1);\n           \
    \ bool is_valid_extension = extension.Equals(\"txt\", StringComparison.OrdinalIgnoreCase)\n\
    \                || extension.Equals(\"exe\", StringComparison.OrdinalIgnoreCase)\n\
    \                || extension.Equals(\"dll\", StringComparison.OrdinalIgnoreCase);\n\
    \            bool is_valid_filename = !string.IsNullOrEmpty(file_name);\n    \
    \        return is_valid_filename && is_valid_extension;\n        }\n        return\
    \ \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z0-9]+$\";\n      \
    \  Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n\
    \            string name = file_name.Substring(0, file_name.IndexOf('.'));\n \
    \           string extension = file_name.Substring(file_name.IndexOf('.'));\n\
    \            string extension_array = extension.Split('.');\n            string\
    \ extension_array_check = extension_array.Where(x => x.ToUpper() == \"DLL\" ||\
    \ x.ToUpper() == \"EXE\").ToArray();\n            if (extension_array_check.Length\
    \ == 1 && extension_array_check[0] == \"DLL\" || extension_array_check[0] == \"\
    EXE\") {\n                return \"Yes\";\n            } else {\n            \
    \    return \"No\";\n            }\n        } else {\n            return \"No\"\
    ;\n        }", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n      \
    \  Regex regex = new Regex(pattern);\n        Match match = regex.Match(file_name);\n\
    \        if (match.Success) {\n            string file_name = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            string extension = file_name.Substring(file_name.LastIndexOf(\"\
    .\"));\n            List<string> extensions = new List<string> { \"txt\", \"exe\"\
    , \"dll\" };\n            if (extensions.Contains(extension)) {\n            \
    \    return \"Yes\";\n            }\n        }\n        return \"No\";", "   \
    \     string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n            if (file_name.Contains(\"\
    .\")) {\n                if (file_name.Substring(0, 1).IsLetter()) {\n       \
    \             string extension = file_name.Substring(file_name.IndexOf(\".\")\
    \ + 1);\n                    switch (extension) {\n                        case\
    \ \"txt\":\n                        case \"exe\":\n                        case\
    \ \"dll\":\n                            return \"Yes\";\n                    \
    \    default:\n                            return \"No\";\n                  \
    \  }\n                }\n            }\n            return \"No\";\n        }\n\
    \        return \"No\";", "        string dotPosition = file_name.IndexOf('.');\n\
    \        string dotSubstring = file_name.Substring(0, dotPosition);\n        string\
    \ dotSubstringWithoutSpace = dotSubstring.Replace(\" \", \"\");\n        string\
    \ dotSubstringWithoutSpaceUpper = dotSubstringWithoutSpace.ToUpper();\n      \
    \  string dotSubstringWithoutSpaceLower = dotSubstringWithoutSpace.ToLower();\n\
    \        string dotSubstringWithoutSpaceCapital = dotSubstringWithoutSpace.ToUpper();\n\
    \        string dotSubstringWithoutSpaceCapitalLower = dotSubstringWithoutSpace.ToLower();\n\
    \        string dotSubstringWithoutSpaceCapitalUpper = dotSubstringWithoutSpace.ToUpper();\n\
    \        string dotSubstringWithoutSpaceCapitalLowerUpper = dotSubstringWithoutSpace.ToUpper();\n\
    \        string dotSubstringWithoutSpaceCapitalLowerUpperUpper = dotSubstringWithoutSpace.ToUpper();\n\
    \        string dotSubstringWithoutSpaceCapitalLowerUpperUpperUpper = dotSubstringWithoutSpace.ToUpper();\n\
    \        string dotSubstringWithoutSpaceCapitalLowerUpperUpperUpperUpper = dotSubstringWithoutSpace.ToUpper();\n\
    \        string dotSubstringWithoutSpaceCapitalLowerUpperUpperUpperUpperUpper\
    \ = dotSubstringWithoutSpace.ToUpper();\n        string dotSubstringWithoutSpaceCapitalLowerUpperUpperUpperUpperUpperUpper\
    \ = dotSubstringWithoutSpace.ToUpper();\n        string dotSubstringWithoutSpaceCapitalLowerUpperUpperUpperUpperUpperUpperUpper\
    \ = dotSubstringWithoutSpace.ToUpper();\n        string dotSubstringWithoutSpaceCapitalLowerUpperUpperUpperUpperUpperUpperUpper\
    \ = dotSubstringWithoutSpace.ToUpper();\n        string dotSubstringWithoutSpaceCapitalLowerUpperUpperUpperUpperUpperUpperUpperUpper\
    \ = dotSubstringWithoutSpace.ToUpper();\n        string dotSubstringWithoutSpaceCapitalLowerUpperUpperUpperUpperUpperUpperUpperUpperUpper\
    \ = dotSubstringWithoutSpace.ToUpper();\n        string dotSubstringWithoutSpaceCapitalLowerUpperUpperUpperUpperUpperUpperUpperUpperUpperUpper\
    \ = dotSubstringWithoutSpace.ToUpper();\n        string dotSubstringWithoutSpaceCapitalLowerUpperUpperUpperUpperUpperUpperUpperUpperUpperUpper\
    \ = dotSubstringWithoutSpace.ToUpper();\n        string dotSubstringWithoutSpaceCapitalLowerUpperUpperUpperUpperUpperUpperUpperUpperUpperUpper\
    \ = dotSubstringWithoutSpace.ToUpper();\n        string dotSubstringWithoutSpaceCapitalLowerUpperUpperUpperUpper",
  "        // Your code goes here\n        string pattern = @\"^[0-9]{3}\\.[a-z][a-z][a-z]$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.Contains(\".\")) {\n                if (file_name.Substring(0,\
    \ 1).Equals(\"0\") || file_name.Substring(0, 1).Equals(\"9\")) {\n           \
    \         return \"No\";\n                }\n            }\n            if (file_name.Substring(0,\
    \ 1).Equals(\"a\") || file_name.Substring(0, 1).Equals(\"z\") || file_name.Substring(0,\
    \ 1).Equals(\"A\") || file_name.Substring(0, 1).Equals(\"Z\")) {\n           \
    \     string[] file_name_array = file_name.Split('.');\n                if (file_name_array.Length\
    \ == 2) {\n                    string file_name_check = file_name_array[0];\n\
    \                    string file_name_check_2 = file_name_array[1];\n        \
    \            if (file_name_check.Length > 0 && file_name_check.Length < 3 && file_name_check.Substring(0,\
    \ 1).Equals(\"0\") && file_name_check.Substring(0, 1).Equals(\"9\")) {\n     \
    \                   return \"No\";\n                    }\n                  \
    \  if (file_name_check_2.Length > 0 && file_name_check_2.Length < 3 && file_name_check_2.Substring(0,\
    \ 1).Equals(\"0\") && file_name_check_2.Substring(0, 1).Equals(\"9\")) {\n   \
    \                     return \"No\";\n                    }\n                }\n\
    \            }\n            return \"Yes\";\n        }\n        return \"No\";",
  "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf('.')\
    \ != -1) {\n                if (file_name.Substring(0, 1).ToLower() != \"a\" &&\
    \ file_name.Substring(0, 1).ToLower() != \"b\" && file_name.Substring(0, 1).ToLower()\
    \ != \"c\" && file_name.Substring(0, 1).ToLower() != \"d\" && file_name.Substring(0,\
    \ 1).ToLower() != \"e\" && file_name.Substring(0, 1).ToLower() != \"f\" && file_name.Substring(0,\
    \ 1).ToLower() != \"g\" && file_name.Substring(0, 1).ToLower() != \"h\" && file_name.Substring(0,\
    \ 1).ToLower() != \"i\" && file_name.Substring(0, 1).ToLower() != \"j\" && file_name.Substring(0,\
    \ 1).ToLower() != \"k\" && file_name.Substring(0, 1).ToLower() != \"l\" && file_name.Substring(0,\
    \ 1).ToLower() != \"m\" && file_name.Substring(0, 1).ToLower() != \"n\" && file_name.Substring(0,\
    \ 1).ToLower() != \"o\" && file_name.Substring(0, 1).ToLower() != \"p\" && file_name.Substring(0,\
    \ 1).ToLower() != \"q\" && file_name.Substring(0, 1).ToLower() != \"r\" && file_name.Substring(0,\
    \ 1).ToLower() != \"s\" && file_name.Substring(0, 1).ToLower() != \"t\" && file_name.Substring(0,\
    \ 1).ToLower() != \"u\" && file_name.Substring(0, 1).ToLower() != \"v\" && file_name.Substring(0,\
    \ 1).ToLower() != \"w\" && file_name.Substring(0, 1).ToLower() != \"x\" && file_name.Substring(0,\
    \ 1).ToLower() != \"y\" && file_name.Substring(0, 1).ToLower() != \"z\") {\n \
    \                   return \"No\";\n                }\n            }\n       \
    \ }\n        return \"Yes\";"]
stop_tokens:
- "\n    }\n"
