name: HumanEval_111_histogram
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string representing a space separated lowercase letters,\
  \ return a dictionary\n    // of the letter with the most repetition and containing\
  \ the corresponding count.\n    // If several letters have the same occurrence,\
  \ return all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b':\
  \ 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
  \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n   \
  \ // histogram('') == {}\n    public static Dictionary<string,long> Histogram(string\
  \ test) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
  a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
  \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
  a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
  \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
  \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
  r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\"\
  )).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
  r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"g\"\
  , 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
  \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"a\"\
  , 1L}})));\n    }\n\n}\n"
completions: ["        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        foreach (char c in test.ToCharArray()) {\n            if (!histogram.ContainsKey(c))\
    \ {\n                histogram.Add(c, 1);\n            } else {\n            \
    \    histogram[c]++;\n            }\n        }\n        return histogram;", " \
    \       Dictionary<string,long> result = new Dictionary<string,long>();\n    \
    \    foreach (string letter in test.Split(' ')){\n            long count;\n  \
    \          if (result.TryGetValue(letter, out count)){\n                result[letter]\
    \ = count + 1;\n            }\n            else{\n                result[letter]\
    \ = 1;\n            }\n        }\n        return result;", "        var letters\
    \ = test.ToCharArray().Select(c => c.ToString()).ToList();\n        var histogram\
    \ = new Dictionary<string,long>();\n        foreach (var letter in letters) {\n\
    \            if (!histogram.ContainsKey(letter)) {\n                histogram[letter]\
    \ = 1;\n            } else {\n                histogram[letter]++;\n         \
    \   }\n        }\n        return histogram;", "        var result = new Dictionary<string,long>();\n\
    \        foreach (var letter in test.ToLower()) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1;\n            }\n        }\n        return result;", "  \
    \      Dictionary<string,long> histogram = new Dictionary<string,long>();\n  \
    \      foreach (string letter in test.Split(' ')){\n            long count;\n\
    \            if (histogram.TryGetValue(letter, out count)) {\n               \
    \ histogram[letter] = count + 1;\n            } else {\n                histogram[letter]\
    \ = 1;\n            }\n        }\n        return histogram;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')){\n            long count;\n            if (result.TryGetValue(letter, out\
    \ count)) {\n                result[letter] = count + 1;\n            } else {\n\
    \                result[letter] = 1;\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        foreach (string word in test.Split(' '))\n        {\n            long\
    \ count;\n            if (histogram.TryGetValue(word, out count))\n          \
    \  {\n                histogram[word] = count + 1;\n            }\n          \
    \  else\n            {\n                histogram[word] = 1;\n            }\n\
    \        }\n        return histogram;", "        Dictionary<string,long> histogram\
    \ = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')){\n            long count;\n            if (histogram.TryGetValue(letter,\
    \ out count)){\n                histogram[letter] = count + 1;\n            }\n\
    \            else{\n                histogram[letter] = 1;\n            }\n  \
    \      }\n        return histogram;", "        var histogram = new Dictionary<string,long>();\n\
    \        foreach (var letter in test.Split(' '))\n        {\n            if (!histogram.ContainsKey(letter))\n\
    \            {\n                histogram[letter] = 1;\n            }\n      \
    \      else\n            {\n                histogram[letter]++;\n           \
    \ }\n        }\n        return histogram;", "        var histogram = new Dictionary<string,long>();\n\
    \        foreach (var letter in test.ToLower()) {\n            if (histogram.ContainsKey(letter))\
    \ {\n                histogram[letter]++;\n            } else {\n            \
    \    histogram[letter] = 1;\n            }\n        }\n        return histogram;",
  "        var histogram = new Dictionary<string,long>();\n        foreach (var letter\
    \ in test.ToLower()) {\n            if (histogram.ContainsKey(letter)) {\n   \
    \             histogram[letter]++;\n            } else {\n                histogram[letter]\
    \ = 1;\n            }\n        }\n        return histogram;", "        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (string letter in\
    \ test.Split(' '))\n        {\n            if (histogram.ContainsKey(letter))\n\
    \            {\n                histogram[letter]++;\n            }\n        \
    \    else\n            {\n                histogram.Add(letter, 1);\n        \
    \    }\n        }\n        return histogram;", "        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count;\n            if (histogram.TryGetValue(s, out\
    \ count)){\n                histogram[s] = histogram.Values.Sum() + 1;\n     \
    \       } else {\n                histogram[s] = 1;\n            }\n        }\n\
    \        return histogram;", "        Dictionary<string, long> histogram = new\
    \ Dictionary<string, long>();\n        foreach (string word in test.Split(' '))\n\
    \        {\n            long count;\n            if (histogram.TryGetValue(word,\
    \ out count))\n            {\n                histogram[word] = count + 1;\n \
    \           }\n            else\n            {\n                histogram[word]\
    \ = 1;\n            }\n        }\n        return histogram;", "        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (string word in\
    \ test.Split(' '))\n        {\n            long count;\n            if (histogram.TryGetValue(word,\
    \ out count))\n            {\n                histogram[word] = count + 1;\n \
    \           }\n            else\n            {\n                histogram[word]\
    \ = 1;\n            }\n        }\n        return histogram;", "        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count;\n            if (histogram.TryGetValue(s, out\
    \ count)){\n                histogram[s] = histogram.Values.Sum() + 1;\n     \
    \       } else {\n                histogram[s] = 1;\n            }\n        }\n\
    \        return histogram;", "        Dictionary<string,long> histogram = new\
    \ Dictionary<string,long>();\n        foreach (string letter in test.Split(' ')){\n\
    \            long count;\n            if (histogram.TryGetValue(letter, out count)){\n\
    \                histogram[letter] = count + 1;\n            }\n            else{\n\
    \                histogram[letter] = 1;\n            }\n        }\n        return\
    \ histogram;", "        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        foreach (string letter in test.Split(' ')){\n            long count;\n\
    \            if (histogram.TryGetValue(letter, out count)) {\n               \
    \ histogram[letter] = count + 1;\n            } else {\n                histogram[letter]\
    \ = 1;\n            }\n        }\n        return histogram;", "        var result\
    \ = new Dictionary<string,long>();\n        foreach (var letter in test.ToCharArray())\
    \ {\n            if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result.Add(letter, 1);\n            }\n\
    \        }\n        return result;", "        Dictionary<string,long> histogram\
    \ = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')){\n            long count;\n            if (histogram.TryGetValue(letter,\
    \ out count)){\n                histogram[letter] = count + 1;\n            }\
    \ else {\n                histogram[letter] = 1;\n            }\n        }\n \
    \       return histogram;"]
stop_tokens:
- "\n    }\n"
