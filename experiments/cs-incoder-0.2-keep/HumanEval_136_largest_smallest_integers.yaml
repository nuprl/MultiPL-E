name: HumanEval_136_largest_smallest_integers
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function that returns a tuple (a, b), where 'a' is\n\
  \    // the largest of negative integers, and 'b' is the smallest\n    // of positive\
  \ integers in a list.\n    // If there is no negative or positive integers, return\
  \ them as None.\n    // Examples:\n    // largest_smallest_integers([2, 4, 1, 3,\
  \ 5, 7]) == (None, 1)\n    // largest_smallest_integers([]) == (None, None)\n  \
  \  // largest_smallest_integers([0]) == (None, None)\n    public static Tuple<Nullable<long>,\
  \ Nullable<long>> LargestSmallestIntegers(List<long> lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestSmallestIntegers((new\
  \ List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L}))).Equals(Tuple.Create((Nullable<long>)null,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)2L,\
  \ (long)4L, (long)1L, (long)3L, (long)5L, (long)7L, (long)0L}))).Equals(Tuple.Create((Nullable<long>)null,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)1L,\
  \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)-2L}))).Equals(Tuple.Create(-2L,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)4L,\
  \ (long)5L, (long)3L, (long)6L, (long)2L, (long)7L, (long)-7L}))).Equals(Tuple.Create(-7L,\
  \ 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)7L,\
  \ (long)3L, (long)8L, (long)4L, (long)9L, (long)2L, (long)5L, (long)-9L}))).Equals(Tuple.Create(-9L,\
  \ 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>())).Equals(Tuple.Create((Nullable<long>)null,\
  \ (Nullable<long>)null)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new\
  \ long[]{(long)0L}))).Equals(Tuple.Create((Nullable<long>)null, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L,\
  \ (long)-3L, (long)-5L, (long)-6L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L,\
  \ (long)-3L, (long)-5L, (long)-6L, (long)0L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L,\
  \ (long)-4L, (long)-4L, (long)-3L, (long)1L}))).Equals(Tuple.Create(-3L, 1L)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L,\
  \ (long)-4L, (long)-4L, (long)-3L, (long)-100L, (long)1L}))).Equals(Tuple.Create(-3L,\
  \ 1L)));\n    }\n\n}\n"
completions: ["        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        else\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0) return new\
    \ Tuple<Nullable<long>, Nullable<long>>(null, null);\n        var largest = lst.Max();\n\
    \        var smallest = lst.Min();\n        if (largest < smallest) return new\
    \ Tuple<Nullable<long>, Nullable<long>>(null, null);\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        if (lst.Count == 0)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        var largest = lst.Max();\n        var smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        if (lst.Count == 0) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        if (lst.Count == 0) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long a = lst.FindIndex(x =>\
    \ x < 0);\n        long b = lst.FindIndex(x => x >= 0);\n        if (a<b) {\n\
    \            return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n \
    \       }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        else\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest)\n        \
    \    return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);", "        long\
    \ largest = lst.Max();\n        long smallest = lst.Min();\n        if (largest\
    \ < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        var largest = lst.Max();\n        var smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        if (lst.Count == 0) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        var largest = lst.Max();\n  \
    \      var smallest = lst.Min();\n        if (largest < smallest)\n          \
    \  return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);", "        long\
    \ largest = lst.Max();\n        long smallest = lst.Min();\n        if (largest\
    \ < smallest)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest)\n        \
    \    return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);", "        if\
    \ (lst.Count == 0)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < 0)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (smallest > 0)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        var largest = lst.Max();\n        var smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest)\n        \
    \    return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);", "        long\
    \ largest = lst.Max();\n        long smallest = lst.Min();\n        if (largest\
    \ < smallest)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        else\n            return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0) {\n     \
    \       return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        var largest = lst.Max();\n        var smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest)\n        \
    \    return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);", "        if\
    \ (lst.Count == 0) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest)\n        \
    \    return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);", "        long\
    \ largest = lst.Max();\n        long smallest = lst.Min();\n        if (largest\
    \ < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        if (lst.Count == 0) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        long a = lst.FindIndex(x => x < 0);\n        long b = lst.FindIndex(x\
    \ => x > 0);\n        if (a < b) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0) {\n     \
    \       return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest)\n        \
    \    return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        else\n\
    \            return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        var negatives = lst.Where(x => x < 0).ToList();\n        var positives\
    \ = lst.Where(x => x >= 0).ToList();\n        if (negatives.Count == 0 && positives.Count\
    \ == 0) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        if (negatives.Count > 0 && positives.Count > 0) {\n\
    \            return new Tuple<Nullable<long>, Nullable<long>>(negatives.Max(),\
    \ positives.Min());\n        }\n        if (negatives.Count > 0) {\n         \
    \   return new Tuple<Nullable<long>, Nullable<long>>(negatives.Max(), null);\n\
    \        }\n        if (positives.Count > 0) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, positives.Min());\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);", "        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest)\n            return new\
    \ Tuple<Nullable<long>, Nullable<long>>(null, null);\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        else\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest)\n        \
    \    return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);", "        long\
    \ largest = lst.Max();\n        long smallest = lst.Min();\n        if (largest\
    \ < smallest)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        if (lst.Count == 0) return (null, null);\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) return (null,\
    \ null);\n        return (new Tuple<Nullable<long>, Nullable<long>>(largest, smallest),\
    \ null);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        else\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0) {\n     \
    \       return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest)\n        \
    \    return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);", "        if\
    \ (lst.Count == 0)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest)\n        \
    \    return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        else\n\
    \            return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        if (lst.Count == 0) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        long largestNegative = lst.FindIndex(x => x < 0);\n        long\
    \ smallestPositive = lst.FindIndex(x => x > 0);\n        if (largestNegative ==\
    \ -1 && smallestPositive == -1) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largestNegative == -1)\
    \ {\n            return new Tuple<Nullable<long>, Nullable<long>>(null, smallestPositive);\n\
    \        }\n        if (smallestPositive == -1) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largestNegative, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largestNegative, smallestPositive);", "        var largest =\
    \ lst.Max();\n        var smallest = lst.Min();\n        if (largest < smallest)\n\
    \            return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n \
    \       return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        var largest = lst.Max();\n        var smallest = lst.Min();\n        if\
    \ (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        else\n            return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0)\n       \
    \     return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        var\
    \ largest = lst.Max();\n        var smallest = lst.Min();\n        if (largest\
    \ < smallest)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        else\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest)\n        \
    \    return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        else\n\
    \            return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        if (lst.Count == 0) return (null, null);\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) return (null,\
    \ null);\n        return (new Tuple<Nullable<long>, Nullable<long>>(largest, smallest),\
    \ null);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        if (lst.Count == 0) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        var largest = lst.Max();\n        var smallest =\
    \ lst.Min();\n        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0) {\n     \
    \       return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long a = lst.FindIndex(x =>\
    \ x < 0);\n        long b = lst.FindIndex(x => x >= 0);\n        if (a==-1) {\n\
    \            return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n \
    \       }\n        if (b==-1) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0) return new\
    \ Tuple<Nullable<long>, Nullable<long>>(null, null);\n        var smallest = lst.Min();\n\
    \        var largest = lst.Max();\n        if (smallest < 0 && largest > 0) {\n\
    \            return new Tuple<Nullable<long>, Nullable<long>>(smallest, largest);\n\
    \        }\n        if (smallest < 0 && largest < 0) {\n            return new\
    \ Tuple<Nullable<long>, Nullable<long>>(null, null);\n        }\n        if (smallest\
    \ > 0 && largest < 0) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ largest);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);", "        var largest = lst.Max();\n        var smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest)\n        \
    \    return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);", "        long\
    \ largest = lst.Max();\n        long smallest = lst.Min();\n        if (largest\
    \ < smallest)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        if (lst.Count == 0)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        var smallest = lst.Min();\n        var\
    \ largest = lst.Max();\n        if (smallest < 0)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest > 0)\n            return new\
    \ Tuple<Nullable<long>, Nullable<long>>(smallest, largest);\n        var negatives\
    \ = lst.Where(x => x < 0).ToList();\n        if (negatives.Count == 0)\n     \
    \       return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  var positives = lst.Where(x => x > 0).ToList();\n        if (positives.Count\
    \ == 0)\n            return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n\
    \        var smallestNegative = negatives.Min();\n        var largestPositive\
    \ = positives.Max();\n        return new Tuple<Nullable<long>, Nullable<long>>(smallestNegative,\
    \ largestPositive);", "        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        if (lst.Count == 0) return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        if (lst.Count == 0)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < 0)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (smallest > 0)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        if (lst.Count == 0) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        long largestNegative = lst.FindIndex(x => x < 0);\n        long\
    \ smallestPositive = lst.FindIndex(x => x >= 0);\n        if (largestNegative\
    \ == -1 && smallestPositive == -1) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largestNegative == -1)\
    \ {\n            return new Tuple<Nullable<long>, Nullable<long>>(null, lst.ElementAt(smallestPositive));\n\
    \        }\n        if (smallestPositive == -1) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(lst.ElementAt(largestNegative), null);\n        }\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(lst.ElementAt(largestNegative), lst.ElementAt(smallestPositive));",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        else\n            return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0) {\n     \
    \       return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest)\n        \
    \    return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);", "        long\
    \ largest = lst.Max();\n        long smallest = lst.Min();\n        if (largest\
    \ < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        var result = new List<long>();\n        var largest =\
    \ lst.Max();\n        var smallest = lst.Min();\n        if (largest < smallest)\
    \ {\n            result.Add(smallest);\n            result.Add(largest);\n   \
    \         return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n    \
    \    }\n        var largestIndex = 0;\n        var smallestIndex = 0;\n      \
    \  foreach (var item in lst) {\n            if (item > largest) {\n          \
    \      largestIndex = lst.IndexOf(item);\n                largest = item;\n  \
    \          }\n            if (item < smallest) {\n                smallestIndex\
    \ = lst.IndexOf(item);\n                smallest = item;\n            }\n    \
    \    }\n        if (smallestIndex > largestIndex) {\n            result.Add(smallest);\n\
    \            result.Add(largest);\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        result.Add(smallest);\n   \
    \     result.Add(largest);\n        return new Tuple<Nullable<long>, Nullable<long>>(result.First(),\
    \ result.Last());", "        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0)\n       \
    \     return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        long\
    \ largest = lst.Max();\n        long smallest = lst.Min();\n        if (largest\
    \ < 0)\n            return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n\
    \        if (smallest > 0)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        else\n            return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        var result = new List<long>();\n        foreach (var item\
    \ in lst) {\n            if (item < 0)\n                result.Add(item);\n  \
    \          else\n                result.Add(-item.Value);\n        }\n       \
    \ if (result.Count == 0)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (result.Count == 1)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(result.First(), null);\n        var max = result.Max();\n  \
    \      var min = result.Min();\n        return new Tuple<Nullable<long>, Nullable<long>>(max,\
    \ min);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0) {\n     \
    \       return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            largest = lst.Max();\n       \
    \     smallest = lst.Min();\n        }\n        if (largest == smallest) {\n \
    \           return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n  \
    \      }\n        List<long> negative = new List<long>();\n        List<long>\
    \ positive = new List<long>();\n        foreach (long i in lst) {\n          \
    \  if (i < 0) {\n                negative.Add(i);\n            } else {\n    \
    \            positive.Add(i);\n            }\n        }\n        if (negative.Count\
    \ > 0 && positive.Count > 0) {\n            long largestNegative = negative.Max();\n\
    \            long smallestPositive = positive.Min();\n            if (largestNegative\
    \ < smallestPositive) {\n                largestNegative = negative.Max();\n \
    \               smallestPositive = positive.Min();\n            }\n          \
    \  if (largestNegative == smallestPositive) {\n                return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n            }\n            long largestPositive\
    \ = positive.Max();\n            long smallestNegative = negative.Min();\n   \
    \         if (largestPositive < smallestNegative) {\n                largestPositive\
    \ = positive.Max();\n                smallestNegative = negative.Min();\n    \
    \        }\n            if (largestPositive == smallestNegative) {\n         \
    \       return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n      \
    \      }\n            long largest = positive.Max();\n            long smallest\
    \ = negative.Min();\n            if (largest < smallest) {\n                largest\
    \ = positive.Max();\n                smallest = negative.Min();\n            }\n\
    \            if (largest == smallest) {\n                return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest)\n        \
    \    return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);", "        long\
    \ largest = lst.Max();\n        long smallest = lst.Min();\n        if (largest\
    \ < smallest)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        if (lst.Count == 0) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest)\n        \
    \    return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);", "        if\
    \ (lst.Count == 0) return (null, null);\n        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) return (null,\
    \ null);\n        return (new Tuple<Nullable<long>, Nullable<long>>(largest, smallest),\
    \ null);", "        if (lst.Count == 0) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        long a = lst.FindIndex(x => x < 0);\n        long b = lst.FindIndex(x\
    \ => x > 0);\n        if (a==-1 && b==-1) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (a==-1) {\n            return\
    \ new Tuple<Nullable<long>, Nullable<long>>(null, smallest);\n        }\n    \
    \    if (b==-1) {\n            return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        if (lst.Count == 0)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        var largest = lst.Max();\n        var\
    \ smallest = lst.Min();\n        if (largest < 0)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (smallest > 0)\n            return\
    \ new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest)\n        \
    \    return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        else\n\
    \            return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest)\n        \
    \    return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);", "        if\
    \ (lst.Count == 0)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        var largest = lst.Max();\n        var smallest = lst.Min();\n\
    \        if (largest < 0)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (smallest > 0)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        if (lst.Count == 0) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        long largestNegative = lst.FindAll(x\
    \ => x < 0).Max();\n        long smallestPositive = lst.FindAll(x => x > 0).Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largest == smallest) {\n\
    \            return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n \
    \       }\n        if (largest < largestNegative) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largest == largestNegative)\
    \ {\n            return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        if (largest > largestPositive) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largest == largestPositive)\
    \ {\n            return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest)\n        \
    \    return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);", "        if\
    \ (lst.Count == 0)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst[0];\n        long smallest = lst[0];\n  \
    \      foreach (long i in lst) {\n            if (i < 0)\n                largest\
    \ = i;\n            else if (i > 0)\n                smallest = i;\n        }\n\
    \        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        if (lst.Count == 0) return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        else\n            return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0) {\n     \
    \       return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0) return new\
    \ Tuple<Nullable<long>, Nullable<long>>(null, null);\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) return new\
    \ Tuple<Nullable<long>, Nullable<long>>(null, null);\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        if (lst.Count == 0)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst[0];\n        long smallest = lst[0];\n  \
    \      foreach (long i in lst) {\n            if (i < 0) {\n                if\
    \ (largest < 0)\n                    largest = i;\n            }\n           \
    \ else if (i > 0)\n                smallest = i;\n        }\n        return new\
    \ Tuple<Nullable<long>, Nullable<long>>(largest, smallest);", "        if (lst.Count\
    \ == 0) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest)\n        \
    \    return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        else\n\
    \            return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        if (lst.Count == 0) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest)\n        \
    \    return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        else\n\
    \            return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        if (lst.Count == 0) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        var largest = lst.Max();\n        var smallest = lst.Min();\n        if\
    \ (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        if (lst.Count == 0) return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        else\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest)\n        \
    \    return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        else\n\
    \            return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        if (lst.Count == 0)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < 0)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (smallest > 0)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        if (lst.Count == 0) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        if (lst.Count == 0) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        var result = new List<long>();\n        foreach (var item in lst) {\n \
    \           if (item < 0)\n            {\n                result.Add(item);\n\
    \            }\n            else if (item > 0)\n            {\n              \
    \  result.Add(item);\n            }\n            else\n            {\n       \
    \         return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n    \
    \        }\n        }\n        if (result.Count == 0)\n        {\n           \
    \ return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        }\n \
    \       if (result.Count == 1)\n        {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(result.First(), null);\n        }\n        if (result.Count\
    \ == 2)\n        {\n            return new Tuple<Nullable<long>, Nullable<long>>(result.First(),\
    \ result.Last());\n        }\n        var max = new long();\n        var min =\
    \ new long();\n        foreach (var item in result)\n        {\n            if\
    \ (item > max)\n            {\n                max = item;\n            }\n  \
    \          if (item < min)\n            {\n                min = item;\n     \
    \       }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(max,\
    \ min);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest)\n        \
    \    return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);", "        long\
    \ largest = lst.Max();\n        long smallest = lst.Min();\n        if (largest\
    \ < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);"]
stop_tokens:
- "\n    }\n"
