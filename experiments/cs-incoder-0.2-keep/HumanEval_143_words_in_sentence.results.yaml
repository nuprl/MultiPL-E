language: cs
name: HumanEval_143_words_in_sentence
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        bool isPrime = true;\n        string word\
    \ = \"\";\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        char[] charArray\
    \ = word.ToCharArray();\n        Array.Sort(charArray);\n        foreach (char\
    \ c in charArray) {\n            if (char.IsLetter(c)) {\n                for\
    \ (int i = 2; i <= Math.Sqrt(char.MaxValue); i++) {\n                    if (c\
    \ % i == 0) {\n                        isPrime = false;\n                    \
    \    break;\n                    }\n                }\n            }\n       \
    \ }\n        if (isPrime) {\n            foreach (char c in charArray) {\n   \
    \             result += c;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <873a229dac5b448e874872946b7d194a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <873a229dac5b448e874872946b7d194a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794007
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<string> words = new List<string>();\n        foreach (char c in\
    \ chars) {\n            if (char.IsLetter(c)) {\n                string word =\
    \ c.ToString();\n                words.Add(word);\n            }\n        }\n\
    \        List<int> lengths = new List<int>();\n        foreach (string word in\
    \ words) {\n            int length = word.Length;\n            lengths.Add(length);\n\
    \        }\n        List<int> primes = new List<int>();\n        foreach (int\
    \ length in lengths) {\n            bool isPrime = true;\n            for (int\
    \ i = 2; i <= length / 2; i++) {\n                if (length % i == 0) {\n   \
    \                 isPrime = false;\n                    break;\n             \
    \   }\n            }\n            if (isPrime) {\n                primes.Add(length);\n\
    \            }\n        }\n        foreach (int length in primes) {\n        \
    \    string word = \"\";\n            foreach (string word in words) {\n     \
    \           if (word.Length == length) {\n                    result += \" \"\
    \ + word;\n                }\n            }\n        }\n        return result.Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3ru2dplv.cs(53,29): error CS0136: A local or parameter named ''word''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp3ru2dplv.cs(52,20): warning CS0219: The variable ''word'' is assigned
    but its value is never used

    '
  timestamp: 1659794007
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            if (IsPrime(length))\n\
    \            {\n                result += word;\n            }\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n  \
    \  Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6zlmot9f.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794007
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        List<string> list = new List<string>();\n\
    \        foreach (string word in sentence.Split(' '))\n        {\n           \
    \ list.Add(word);\n        }\n        list.Sort();\n        foreach (string word\
    \ in list)\n        {\n            int length = word.Length;\n            if (IsPrime(length))\n\
    \            {\n                result += \" \" + word;\n            }\n     \
    \   }\n        return result.Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm_5zfelk.cs(34,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794007
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            int length = word.Length;\n            int count = 0;\n     \
    \       int start = 0;\n            int end = 0;\n            int prime = 0;\n\
    \            while (end < length) {\n                prime = Convert.ToInt32(Math.Sqrt(Convert.ToDouble(length)));\n\
    \                for (int i = start; i <= prime; i++) {\n                    if\
    \ (word.Substring(i, 1).Equals(word.Substring(i - 1, 1))) {\n                \
    \        count++;\n                    }\n                }\n                if\
    \ (count == prime) {\n                    result = result + word.Substring(start,\
    \ end - start);\n                    start = end + 1;\n                    count\
    \ = 0;\n                }\n                end++;\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ca060a59327d4dcb9f254124cd783de2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ca060a59327d4dcb9f254124cd783de2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794007
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int prime = PrimeNumber(c);\n            if (prime > 0)\n   \
    \             primes.Add(prime);\n        }\n        primes.Sort();\n        foreach\
    \ (int prime in primes) {\n            string temp = string.Empty;\n         \
    \   for (int i = 0; i < chars.Length; i++) {\n                if (chars[i] ==\
    \ ' ') {\n                    temp += chars[i];\n                }\n         \
    \   }\n            if (temp.Length == prime) {\n                result += temp;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp72kqqlz3.cs(28,25): error CS0103: The name ''PrimeNumber'' does not exist
    in the current context

    '
  timestamp: 1659794007
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                isPrime\
    \ = false;\n            }\n        }\n        string wordsInSentence = sentence.Split(\"\
    \ \").ToList();\n        List<int> primeNumbers = new List<int>();\n        for\
    \ (int i = 2; i <= Math.Sqrt(wordsInSentence.Count); i++) {\n            if (wordsInSentence.All(x\
    \ => x % i == 0)) {\n                primeNumbers.Add(i);\n            }\n   \
    \     }\n        foreach (int primeNumber in primeNumbers) {\n            int\
    \ count = 0;\n            foreach (string word in wordsInSentence) {\n       \
    \         if (word.Length == primeNumber) {\n                    count++;\n  \
    \              }\n            }\n            if (count == wordsInSentence.Count)\
    \ {\n                result += \" \" + word;\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn0fdp_lo.cs(34,34): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<string>''
    to ''string''

    /tmp/tmpn0fdp_lo.cs(36,40): error CS1503: Argument 1: cannot convert from ''method
    group'' to ''double''

    /tmp/tmpn0fdp_lo.cs(43,29): error CS0136: A local or parameter named ''word''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpn0fdp_lo.cs(43,13): error CS0030: Cannot convert type ''char'' to ''string''

    /tmp/tmpn0fdp_lo.cs(48,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''int'' and ''method group''

    /tmp/tmpn0fdp_lo.cs(26,14): warning CS0219: The variable ''isPrime'' is assigned
    but its value is never used

    '
  timestamp: 1659794007
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                if (word.Length\
    \ > 0) {\n                    temp = word;\n                    word = \"\";\n\
    \                    result += temp;\n                }\n            }\n     \
    \   }\n        if (word.Length > 0) {\n            temp = word;\n            word\
    \ = \"\";\n            result += temp;\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0c44da7d879548a28401ecb17e8a0390>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0c44da7d879548a28401ecb17e8a0390>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794007
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        char[] charArray = sentence.ToCharArray();\n        Array.Sort(charArray);\n\
    \        foreach (char c in charArray) {\n            if (char.IsLetter(c)) {\n\
    \                word += c;\n            }\n        }\n        char[] charArray2\
    \ = word.ToCharArray();\n        Array.Sort(charArray2);\n        foreach (char\
    \ c in charArray2) {\n            if (char.IsLetter(c)) {\n                temp\
    \ += c;\n            }\n        }\n        char[] charArray3 = temp.ToCharArray();\n\
    \        Array.Sort(charArray3);\n        foreach (char c in charArray3) {\n \
    \           if (char.IsLetter(c)) {\n                result += c;\n          \
    \  }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <76aad22c62c14a4eac59df849248b101>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <76aad22c62c14a4eac59df849248b101>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794007
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        int n = sentence.Length;\n        string newWord = \"\";\n\
    \        for (int i = 0; i < n; i++) {\n            word = sentence[i];\n    \
    \        int count = 0;\n            while (word != \" \") {\n               \
    \ count++;\n                word = word.Substring(1);\n            }\n       \
    \     if (isPrime) {\n                for (int j = 2; j < count; j++) {\n    \
    \                if (count % j == 0) {\n                        isPrime = false;\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n            if (isPrime) {\n                newWord = word + \"\
    \ \" + newWord;\n            }\n        }\n        result = newWord;\n       \
    \ return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeberr0us.cs(30,20): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659794007
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (char c in sentence) {\n            if (char.IsLetter(c)) {\n\
    \                words.Add(c.ToString());\n            }\n        }\n        foreach\
    \ (string word in words) {\n            int length = word.Length;\n          \
    \  if (length == 1) {\n                result += word;\n            }\n      \
    \      else if (length == 2 && word[0] != word[1]) {\n                result +=\
    \ word;\n            }\n            else if (length == 3 && word[0] != word[1]\
    \ && word[0] != word[2] && word[1] != word[2]) {\n                result += word;\n\
    \            }\n            else if (length == 4 && word[0] != word[1] && word[0]\
    \ != word[2] && word[0] != word[3] && word[1] != word[2] && word[1] != word[3]\
    \ && word[2] != word[3]) {\n                result += word;\n            }\n \
    \           else if (length == 5 && word[0] != word[1] && word[0] != word[2] &&\
    \ word[0] != word[3] && word[0] != word[4] && word[1] != word[2] && word[1] !=\
    \ word[3] && word[1] != word[4] && word[2] != word[3] && word[2] != word[4] &&\
    \ word[3] != word[4]) {\n                result += word;\n            }\n    \
    \        else if (length == 6 && word[0] != word[1] && word[0] != word[2] && word[0]\
    \ != word[3] && word[0] != word[4] && word[0] != word[5] && word[1] != word[2]\
    \ && word[1] != word[3] && word[1] != word[4] && word[1] != word[5] && word[2]\
    \ != word[3] && word[2] != word[4] && word[2] != word[5] && word[3] != word[4]\
    \ && word[3] != word[5]) {\n                result += word;\n            }\n \
    \           else if (length == 7 && word[0] != word[1] && word[0] != word[2] &&\
    \ word[0] != word[3] && word[0] != word[4] && word[0] != word[5] && word[0] !=\
    \ word[6] && word[1] != word[2] && word[1] != word[3] && word[1] != word[4] &&\
    \ word[1] != word[5] && word[1] != word[6] && word[2] != word[3] && word[2] !=\
    \ word[4] && word[2] != word[5] && word[2] != word[6] && word[3] != word[4] &&\
    \ word[3] != word[5] && word[3] != word[6]) {\n                result += word;\n\
    \            }\n            else if (length == 8 && word[0] != word[1] && word[0]\
    \ != word[2] && word[0] != word[3] && word[0] != word[4] && word[0] != word[5]\
    \ && word[0] != word[6] && word[0] != word[7] && word[1] != word[2] && word[1]\
    \ != word[3] && word[1] != word[4] && word[1] != word[5] && word[1] != word[6]\
    \ && word[1] != word[7] && \n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppyi6dwc1.cs(54,322): error CS1525: Invalid expression term ''}''

    /tmp/tmppyi6dwc1.cs(54,322): error CS1026: ) expected

    /tmp/tmppyi6dwc1.cs(54,322): error CS1002: ; expected

    /tmp/tmppyi6dwc1.cs(56,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmppyi6dwc1.cs(66,2): error CS1513: } expected

    '
  timestamp: 1659794007
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)\
    \ {\n            if (char.IsLetter(c)) {\n                word += c;\n       \
    \     }\n        }\n        foreach (char c in word) {\n            temp = c +\
    \ temp;\n        }\n        foreach (char c in temp) {\n            isPrime =\
    \ isPrime && IsPrime(Convert.ToInt32(c));\n        }\n        if (isPrime) {\n\
    \            foreach (char c in word) {\n                result += c;\n      \
    \      }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjcyxb3ko.cs(37,34): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794007
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in charArray)\
    \ {\n            int n = Convert.ToInt32(c);\n            primes.Add(n);\n   \
    \     }\n        primes.Sort();\n        foreach (int n in primes) {\n       \
    \     if (n % 2 == 0) {\n                for (int i = 3; i <= Math.Sqrt(n); i\
    \ += 2) {\n                    if (n % i == 0) {\n                        for\
    \ (int j = 3; j <= Math.Sqrt(n); j += 2) {\n                            if (n\
    \ % j == 0) {\n                                result = result + charArray[primes.IndexOf(j)];\n\
    \                                break;\n                            }\n     \
    \                   }\n                    }\n                }\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.WordsInSentence (System.String sentence)\
    \ [0x000a7] in <358b4eae918f47119ec304637ff81de7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <358b4eae918f47119ec304637ff81de7>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.WordsInSentence (System.String sentence) [0x000a7]\
    \ in <358b4eae918f47119ec304637ff81de7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <358b4eae918f47119ec304637ff81de7>:0 \n"
  stdout: ''
  timestamp: 1659794007
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (char c in sentence) {\n            if (char.IsLetter(c)) {\n\
    \                words.Add(c.ToString());\n            }\n        }\n        foreach\
    \ (string word in words) {\n            int length = word.Length;\n          \
    \  if (length == 1) {\n                result += word;\n            }\n      \
    \      else if (length == 2 && IsPrime(length)) {\n                result += word;\n\
    \            }\n            else if (length == 3 && IsPrime(length)) {\n     \
    \           result += word;\n            }\n            else if (length == 4 &&\
    \ IsPrime(length)) {\n                result += word;\n            }\n       \
    \     else if (length == 5 && IsPrime(length)) {\n                result += word;\n\
    \            }\n            else if (length == 6 && IsPrime(length)) {\n     \
    \           result += word;\n            }\n            else if (length == 7 &&\
    \ IsPrime(length)) {\n                result += word;\n            }\n       \
    \     else if (length == 8 && IsPrime(length)) {\n                result += word;\n\
    \            }\n            else if (length == 9 && IsPrime(length)) {\n     \
    \           result += word;\n            }\n            else if (length == 10\
    \ && IsPrime(length)) {\n                result += word;\n            }\n    \
    \        else if (length == 11 && IsPrime(length)) {\n                result +=\
    \ word;\n            }\n            else if (length == 12 && IsPrime(length))\
    \ {\n                result += word;\n            }\n            else if (length\
    \ == 13 && IsPrime(length)) {\n                result += word;\n            }\n\
    \            else if (length == 14 && IsPrime(length)) {\n                result\
    \ += word;\n            }\n            else if (length == 15 && IsPrime(length))\
    \ {\n                result += word;\n            }\n            else if (length\
    \ == 16 && IsPrime(length)) {\n                result += word;\n            }\n\
    \            else if (length == 17 && IsPrime(length)) {\n                result\
    \ += word;\n            }\n            else if (length == 18 && IsPrime(length))\
    \ {\n                result += word;\n            }\n            else if (length\
    \ == 19 && IsPrime(length)) {\n                result += word;\n            }\n\
    \            else if (length == 20 && IsPrime(length)) {\n                result\
    \ += word;\n            }\n            else if (length == 21 && IsPrime(length))\
    \ {\n                result += word;\n            }\n            else if (length\
    \ == 22 && IsPrime(length)) {\n                result += word;\n            }\n\
    \            else if (length == 23 && IsPrime(length)) {\n                result\
    \ += word;\n            }\n            else if (length == 24 && IsPrime(length))\
    \ {\n                result += word;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8sq1sntx.cs(105,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp8sq1sntx.cs(115,2): error CS1513: } expected

    '
  timestamp: 1659794007
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)\
    \ {\n            word = word + c;\n        }\n        char[] charArray = word.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in charArray)\
    \ {\n            int num = Convert.ToInt32(c);\n            primes.Add(num);\n\
    \        }\n        primes.Sort();\n        for (int i = 0; i < primes.Count;\
    \ i++) {\n            if (primes[i] != i) {\n                isPrime = false;\n\
    \            }\n        }\n        if (isPrime) {\n            foreach (char c\
    \ in charArray) {\n                int num = Convert.ToInt32(c);\n           \
    \     if (num % 2 == 0) {\n                    temp = temp + c;\n            \
    \    }\n            }\n            result = temp;\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19602cf65a61448d8f76a5557e3db4f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19602cf65a61448d8f76a5557e3db4f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794007
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            bool isPrime\
    \ = true;\n            int i = 2;\n            while (i <= length)\n         \
    \   {\n                if (length%i == 0)\n                {\n               \
    \     isPrime = false;\n                    break;\n                }\n      \
    \          i++;\n            }\n            if (isPrime)\n            {\n    \
    \            result += word;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4737591f933d46548a9b2258b7f864d6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4737591f933d46548a9b2258b7f864d6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794007
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int len = word.Length;\n            if (IsPrime(len))\n\
    \            {\n                result += \" \" + word;\n            }\n     \
    \   }\n        return result.Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmponhlxm1e.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794007
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            if (IsPrime(length))\n\
    \            {\n                result += word;\n            }\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n  \
    \  Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6zlmot9f.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794007
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n\
    \        Array.Sort(charArray);\n        List<int> primes = new List<int>();\n\
    \        foreach (char c in charArray) {\n            if (char.IsLetter(c)) {\n\
    \                primes.Add(c);\n            }\n        }\n        foreach (int\
    \ prime in primes) {\n            if (primes.Contains(prime)) {\n            \
    \    for (int i = 2; i <= Math.Sqrt(prime); i++) {\n                    if (prime\
    \ % i == 0) {\n                        break;\n                    }\n       \
    \         }\n                if (i == Math.Sqrt(prime)) {\n                  \
    \  result += \" \" + prime;\n                }\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n   \
    \ Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeuwvmtzq.cs(40,21): error CS0103: The name ''i'' does not exist in the
    current context

    '
  timestamp: 1659794007
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        bool isPrime = true;\n        string temp\
    \ = \"\";\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                temp = temp + c;\n            }\n        }\n        char[]\
    \ arr = temp.ToCharArray();\n        Array.Sort(arr);\n        foreach (char c\
    \ in arr) {\n            int n = Convert.ToInt32(c);\n            if (isPrime)\
    \ {\n                for (int i = 2; i <= Math.Sqrt(n); i++) {\n             \
    \       if (n % i == 0) {\n                        isPrime = false;\n        \
    \                break;\n                    }\n                }\n          \
    \  }\n            if (isPrime) {\n                result += \" \" + c;\n     \
    \       }\n        }\n        return result.Trim();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67da84f8b8ee45009ecc6093c26a961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67da84f8b8ee45009ecc6093c26a961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794007
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n\
    \        List<string> list = new List<string>();\n        foreach (char c in charArray)\
    \ {\n            if (char.IsLetter(c)) {\n                list.Add(c.ToString());\n\
    \            }\n        }\n        foreach (string s in list) {\n            int\
    \ n = s.Length;\n            if (n == 1) {\n                result += s;\n   \
    \         }\n            else if (n % 2 == 0) {\n                for (int i =\
    \ 3; i <= Math.Sqrt(n); i += 2) {\n                    if (n % i == 0) {\n   \
    \                     result += s;\n                        break;\n         \
    \           }\n                }\n            }\n            else {\n        \
    \        for (int i = 3; i <= Math.Sqrt(n); i += 2) {\n                    if\
    \ (n % i == 0) {\n                        result += s;\n                     \
    \   break;\n                    }\n                }\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f022796a712942828e61f6d56d249e22>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f022796a712942828e61f6d56d249e22>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794007
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        char[] charArray = sentence.ToCharArray();\n        List<int>\
    \ primes = new List<int>();\n        foreach (char c in charArray) {\n       \
    \     primes.Add(c);\n        }\n        primes.Sort();\n        foreach (int\
    \ prime in primes) {\n            if (prime == 0) {\n                result +=\
    \ \" \" + word;\n                word = \"\";\n            }\n            else\
    \ if (prime == 1) {\n                word += c;\n            }\n            else\
    \ {\n                for (int i = 2; i <= Math.Sqrt(prime); i++) {\n         \
    \           if (prime % i == 0) {\n                        temp = temp + \" \"\
    \ + i;\n                        break;\n                    }\n              \
    \  }\n                result += \" \" + temp + \" \" + word;\n               \
    \ word = \"\";\n                temp = temp + \" \" + i;\n            }\n    \
    \    }\n        result += \" \" + word;\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt6b4pnia.cs(39,25): error CS0103: The name ''c'' does not exist in the
    current context

    /tmp/tmpt6b4pnia.cs(50,37): error CS0103: The name ''i'' does not exist in the
    current context

    '
  timestamp: 1659794007
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (string word in sentence.Split(' '))\n        {\n           \
    \ words.Add(word);\n        }\n        foreach (string word in words)\n      \
    \  {\n            int length = word.Length;\n            if (length == 1)\n  \
    \          {\n                result += word;\n            }\n            else\n\
    \            {\n                bool isPrime = true;\n                for (int\
    \ i = 2; i <= Math.Sqrt(length); i++)\n                {\n                   \
    \ if (length % i == 0)\n                    {\n                        isPrime\
    \ = false;\n                        break;\n                    }\n          \
    \      }\n                if (isPrime)\n                {\n                  \
    \  result += word;\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <58a7975823854fbe852d02e682f668fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <58a7975823854fbe852d02e682f668fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794007
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        foreach (char\
    \ c in sentence) {\n            if (char.IsLetter(c)) {\n                word\
    \ += c;\n            } else {\n                if (word.Length > 0) {\n      \
    \              result += \" \" + word;\n                    word = \"\";\n   \
    \             }\n            }\n        }\n        if (word.Length > 0) {\n  \
    \          result += \" \" + word;\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1116a9b1f8184e5580ebd3c1d6d5cdaa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1116a9b1f8184e5580ebd3c1d6d5cdaa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794007
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string newWord\
    \ = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)\
    \ {\n            if (char.IsLetter(c)) {\n                word += c;\n       \
    \     } else {\n                newWord = word;\n                word = \"\";\n\
    \                isPrime = true;\n                for (int i = 0; i < newWord.Length;\
    \ i++) {\n                    char newChar = newWord[i];\n                   \
    \ for (int j = 0; j < newWord.Length; j++) {\n                        if (newChar\
    \ == newWord[j]) {\n                            isPrime = false;\n           \
    \             }\n                    }\n                }\n                if\
    \ (isPrime) {\n                    result += newWord;\n                }\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39fa12f7efe14b0ab6d089a34115aa7b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39fa12f7efe14b0ab6d089a34115aa7b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794008
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> set = new HashSet<string>();\n        foreach (char c\
    \ in chars) {\n            if (char.IsLetter(c)) {\n                string temp\
    \ = c.ToString();\n                if (set.Contains(temp)) {\n               \
    \     set.Remove(temp);\n                } else {\n                    set.Add(temp);\n\
    \                }\n            }\n        }\n        foreach (string s in set)\
    \ {\n            if (s.Length > 1) {\n                result += \" \" + s;\n \
    \           }\n        }\n        return result.Trim();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0436f77be0d4fb1978bf71952e4499b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0436f77be0d4fb1978bf71952e4499b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794007
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ if (IsPrime(c.ToString().Length)) {\n                result += c;\n        \
    \    }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxfykuv3z.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794008
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        char[] charArray = sentence.ToCharArray();\n        Array.Sort(charArray);\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ == ' ') {\n                result += \" \" + word;\n                word = \"\
    \";\n            } else {\n                word += charArray[i];\n           \
    \ }\n        }\n        result += \" \" + word;\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <17c3b1a8b684488ebf96995ac768e452>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <17c3b1a8b684488ebf96995ac768e452>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794008
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            bool isPrime = true;\n\
    \            for (int i = 2; i <= Math.Sqrt(n); i++) {\n                if (n\
    \ % i == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  primes.Add(n);\n            }\n        }\n        foreach (int p in primes)\
    \ {\n            result += \" \" + chars[p];\n        }\n        return result.Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.WordsInSentence (System.String sentence)\
    \ [0x0009c] in <d3124979cff443c8ad4ab4774e109d2a>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <d3124979cff443c8ad4ab4774e109d2a>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.WordsInSentence (System.String sentence) [0x0009c]\
    \ in <d3124979cff443c8ad4ab4774e109d2a>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <d3124979cff443c8ad4ab4774e109d2a>:0 \n"
  stdout: ''
  timestamp: 1659794008
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            }\n        }\n        char[] charArray\
    \ = word.ToCharArray();\n        List<int> primes = new List<int>();\n       \
    \ foreach (char c in charArray) {\n            int n = Convert.ToInt32(c);\n \
    \           int count = 0;\n            while (n % 2 == 0) {\n               \
    \ n = n / 2;\n                count++;\n            }\n            if (count ==\
    \ 0) {\n                primes.Add(n);\n            }\n        }\n        foreach\
    \ (int prime in primes) {\n            int count = 0;\n            while (prime\
    \ % 2 == 0) {\n                prime = prime / 2;\n                count++;\n\
    \            }\n            if (count == 0) {\n                isPrime = true;\n\
    \                break;\n            }\n        }\n        if (isPrime) {\n  \
    \          foreach (char c in charArray) {\n                int n = Convert.ToInt32(c);\n\
    \                int count = 0;\n                while (n % 2 == 0) {\n      \
    \              n = n / 2;\n                    count++;\n                }\n \
    \               if (count == 0) {\n                    result += c;\n        \
    \        }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphzxeqq7m.cs(48,17): error CS1656: Cannot assign to ''prime'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659794008
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string temp = sentence;\n        char[]\
    \ chars = temp.ToCharArray();\n        Array.Sort(chars);\n        foreach (char\
    \ c in chars) {\n            int length = c.ToString().Length;\n            int\
    \ count = 0;\n            while (count < length) {\n                if (IsPrime(length))\
    \ {\n                    result += c;\n                    count++;\n        \
    \        }\n                length--;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8nc4dgsf.cs(32,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794008
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in sentence) {\n            word += c;\n  \
    \      }\n        char[] charArray = word.ToCharArray();\n        Array.Sort(charArray);\n\
    \        foreach (char c in charArray) {\n            int length = Convert.ToInt32(Math.Floor(Math.Sqrt(Convert.ToDouble(c))));\n\
    \            if (charArray.Length > 1) {\n                for (int i = 0; i <\
    \ charArray.Length; i++) {\n                    if (charArray[i] == charArray[i\
    \ + 1]) {\n                        isPrime = false;\n                        break;\n\
    \                    }\n                }\n            }\n            if (isPrime)\
    \ {\n                result += \" \" + c;\n            }\n        }\n        return\
    \ result.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidCastException: Invalid cast from\
    \ 'Char' to 'Double'.\n  at System.Char.System.IConvertible.ToDouble (System.IFormatProvider\
    \ provider) [0x00014] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToDouble\
    \ (System.Char value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.WordsInSentence (System.String sentence) [0x00066] in <41b4953525d94dba9e79ffbb9cc0597a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <41b4953525d94dba9e79ffbb9cc0597a>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidCastException: Invalid cast\
    \ from 'Char' to 'Double'.\n  at System.Char.System.IConvertible.ToDouble (System.IFormatProvider\
    \ provider) [0x00014] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToDouble\
    \ (System.Char value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.WordsInSentence (System.String sentence) [0x00066] in <41b4953525d94dba9e79ffbb9cc0597a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <41b4953525d94dba9e79ffbb9cc0597a>:0\
    \ \n"
  stdout: ''
  timestamp: 1659794008
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int prime = PrimeNumber(c);\n            if (primes.Contains(prime))\
    \ {\n                primes.Remove(prime);\n            } else {\n           \
    \     primes.Add(prime);\n            }\n        }\n        foreach (int prime\
    \ in primes) {\n            result += \" \" + chars[prime - 1];\n        }\n \
    \       return result.Trim();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1nyhlbza.cs(28,25): error CS0103: The name ''PrimeNumber'' does not exist
    in the current context

    '
  timestamp: 1659794008
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> primes = new HashSet<string>();\n        foreach (char\
    \ c in chars) {\n            int n = Convert.ToInt32(c);\n            if (n %\
    \ 2 == 0) {\n                for (int i = 3; i * i <= n; i += 2) {\n         \
    \           if (n % i == 0) {\n                        primes.Add(i.ToString());\n\
    \                    }\n                }\n            }\n        }\n        foreach\
    \ (string prime in primes) {\n            result += \" \" + prime;\n        }\n\
    \        return result.Trim();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f03fc2bb72244999b51eae3e99579119>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f03fc2bb72244999b51eae3e99579119>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794008
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)\
    \ {\n            temp = c + temp;\n            isPrime = true;\n            foreach\
    \ (char d in temp) {\n                if (d != ' ') {\n                    isPrime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (isPrime) {\n                result += temp + \" \";\n          \
    \  }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54c2d3b5e1454ecabee8dc627b4b099e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54c2d3b5e1454ecabee8dc627b4b099e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794008
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                primes.Add(n);\n            }\n        }\n        primes.Sort();\n\
    \        foreach (int p in primes) {\n            if (p > 1) {\n             \
    \   for (int i = 2; i <= p; i++) {\n                    if (p % i == 0) {\n  \
    \                      break;\n                    }\n                }\n    \
    \            if (i == p) {\n                    result += \" \" + chars[primes.IndexOf(p)\
    \ - 1];\n                }\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt7zstmer.cs(41,21): error CS0103: The name ''i'' does not exist in the
    current context

    '
  timestamp: 1659794008
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> set = new HashSet<string>();\n        foreach (char c\
    \ in chars) {\n            if (char.IsLetter(c)) {\n                string s =\
    \ c.ToString();\n                if (set.Contains(s)) {\n                    set.Remove(s);\n\
    \                } else {\n                    set.Add(s);\n                }\n\
    \            }\n        }\n        foreach (string s in set) {\n            int\
    \ n = s.Length;\n            if (n == 1) {\n                result += s;\n   \
    \         } else if (n % 2 == 0) {\n                result += s;\n           \
    \     result += \" \";\n            }\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <41358744167f452a8796a2b21c8f0fa0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <41358744167f452a8796a2b21c8f0fa0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794008
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        foreach (char\
    \ c in sentence) {\n            if (char.IsLetter(c)) {\n                word\
    \ += c;\n            }\n        }\n        char[] chars = word.ToCharArray();\n\
    \        Array.Sort(chars);\n        string sortedWord = string.Join(\" \", chars);\n\
    \        char[] sortedChars = sortedWord.ToCharArray();\n        Array.Sort(sortedChars);\n\
    \        string sortedWord2 = string.Join(\" \", sortedChars);\n        char[]\
    \ sortedChars2 = sortedWord2.ToCharArray();\n        Array.Sort(sortedChars2);\n\
    \        string sortedWord3 = string.Join(\" \", sortedChars2);\n        char[]\
    \ sortedChars3 = sortedWord3.ToCharArray();\n        Array.Sort(sortedChars3);\n\
    \        string sortedWord4 = string.Join(\" \", sortedChars3);\n        char[]\
    \ sortedChars4 = sortedWord4.ToCharArray();\n        Array.Sort(sortedChars4);\n\
    \        string sortedWord5 = string.Join(\" \", sortedChars4);\n        char[]\
    \ sortedChars5 = sortedWord5.ToCharArray();\n        Array.Sort(sortedChars5);\n\
    \        string sortedWord6 = string.Join(\" \", sortedChars5);\n        char[]\
    \ sortedChars6 = sortedWord6.ToCharArray();\n        Array.Sort(sortedChars6);\n\
    \        string sortedWord7 = string.Join(\" \", sortedChars6);\n        char[]\
    \ sortedChars7 = sortedWord7.ToCharArray();\n        Array.Sort(sortedChars7);\n\
    \        string sortedWord8 = string.Join(\" \", sortedChars7);\n        char[]\
    \ sortedChars8 = sortedWord8.ToCharArray();\n        Array.Sort(sortedChars8);\n\
    \        string sortedWord9 = string.Join(\" \", sortedChars8);\n        char[]\
    \ sortedChars9 = sortedWord9.ToCharArray();\n        Array.Sort(sortedChars9);\n\
    \        string sortedWord10 = string.Join(\" \", sortedChars9);\n        char[]\
    \ sortedChars10 = sortedWord10.ToCharArray();\n        Array.Sort(sortedChars10);\n\
    \        string sortedWord11 = string.Join(\" \", sortedChars10);\n        char[]\
    \ sortedChars11 = sortedWord11.ToCharArray();\n        Array.Sort(sortedChars11);\n\
    \        string sortedWord12 = string.Join(\" \", sortedChars11);\n        char[]\
    \ sortedChars12 = sortedWord12.ToCharArray();\n        Array.Sort(sortedChars\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyhg3_ipm.cs(68,31): error CS1026: ) expected

    /tmp/tmpyhg3_ipm.cs(68,31): error CS1002: ; expected

    '
  timestamp: 1659794007
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)\
    \ {\n            if (char.IsLetter(c)) {\n                word += c;\n       \
    \     } else {\n                temp = word;\n                word = \"\";\n \
    \               result += temp;\n                isPrime = true;\n           \
    \ }\n        }\n        temp = word;\n        word = \"\";\n        result +=\
    \ temp;\n        bool isPrime = true;\n        for (int i = 2; i < Convert.ToInt32(Math.Sqrt(Convert.ToDouble(sentence.Length)));\
    \ i++) {\n            if (isPrime) {\n                isPrime = false;\n     \
    \           for (int j = 0; j < sentence.Length; j++) {\n                    if\
    \ (sentence.Substring(j, 1).Equals(word.Substring(0, j))) {\n                \
    \        isPrime = true;\n                        break;\n                   \
    \ }\n                }\n            }\n            temp = word;\n            word\
    \ = \"\";\n            result += temp;\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl4a51197.cs(41,14): error CS0128: A local variable or function named ''isPrime''
    is already defined in this scope

    /tmp/tmpl4a51197.cs(41,14): warning CS0219: The variable ''isPrime'' is assigned
    but its value is never used

    '
  timestamp: 1659794008
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        int n = sentence.Length;\n        for(int i = 0; i < n; i++)\
    \ {\n            word = sentence[i];\n            isPrime = true;\n          \
    \  for(int j = 2; j < n; j++) {\n                if(j % i == 0) {\n          \
    \          isPrime = false;\n                    break;\n                }\n \
    \           }\n            if(isPrime) {\n                result += \" \" + word;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwv04ieh9.cs(29,20): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659794008
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            int count = 0;\n   \
    \         while (n % 2 == 0) {\n                n = n / 2;\n                count++;\n\
    \            }\n            if (count > 2) {\n                primes.Add(n);\n\
    \            }\n        }\n        foreach (int p in primes) {\n            string\
    \ temp = \"\";\n            int count = 0;\n            while (p % 2 == 0) {\n\
    \                p = p / 2;\n                count++;\n            }\n       \
    \     for (int i = 0; i < count; i++) {\n                temp = temp + chars[i];\n\
    \            }\n            result = result + temp + \" \";\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3ogx3k3.cs(42,17): error CS1656: Cannot assign to ''p'' because it is
    a ''foreach iteration variable''

    '
  timestamp: 1659794008
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            }\n        }\n        char[] charArray\
    \ = word.ToCharArray();\n        Array.Sort(charArray);\n        foreach (char\
    \ c in charArray) {\n            int length = Convert.ToInt32(c);\n          \
    \  if (isPrime) {\n                for (int i = 2; i <= length / 2; i++) {\n \
    \                   if (length % i == 0) {\n                        isPrime =\
    \ false;\n                        break;\n                    }\n            \
    \    }\n            }\n            if (!isPrime) {\n                result +=\
    \ \" \" + word;\n                isPrime = true;\n            }\n        }\n \
    \       return result.Trim();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2848a08bd91941cba54f726d1de9e6b4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2848a08bd91941cba54f726d1de9e6b4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794008
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string temp = sentence.ToLower();\n  \
    \      char[] charArray = temp.ToCharArray();\n        List<char> charList = new\
    \ List<char>();\n        foreach (char c in charArray) {\n            if (char.IsLetter(c))\
    \ {\n                charList.Add(c);\n            }\n        }\n        char[]\
    \ charArray2 = charList.ToArray();\n        List<int> intList = new List<int>();\n\
    \        foreach (char c in charArray2) {\n            int num = Convert.ToInt32(c);\n\
    \            if (num > 0) {\n                intList.Add(num);\n            }\n\
    \        }\n        int[] intArray = intList.ToArray();\n        int[] primeArray\
    \ = new int[intArray.Length];\n        for (int i = 0; i < intArray.Length; i++)\
    \ {\n            primeArray[i] = (intArray[i] + 1);\n        }\n        Array.Sort(primeArray);\n\
    \        for (int i = 0; i < primeArray.Length; i++) {\n            if (primeArray[i]\
    \ == intArray[i]) {\n                for (int j = i + 1; j < primeArray.Length;\
    \ j++) {\n                    if (primeArray[j] == intArray[i]) {\n          \
    \              for (int k = j + 1; k < primeArray.Length; k++) {\n           \
    \                 if (primeArray[k] == intArray[i]) {\n                      \
    \          for (int l = k + 1; l < primeArray.Length; l++) {\n               \
    \                     if (primeArray[l] == intArray[i]) {\n                  \
    \                      for (int m = l + 1; m < primeArray.Length; m++) {\n   \
    \                                         if (primeArray[m] == intArray[i]) {\n\
    \                                                for (int n = m + 1; n < primeArray.Length;\
    \ n++) {\n                                                    if (primeArray[n]\
    \ == intArray[i]) {\n                                                        for\
    \ (int o = n + 1; o < primeArray.Length; o++) {\n                            \
    \                                if (primeArray[o] == intArray[i]) {\n       \
    \                                                         for (int p = o + 1;\
    \ p < primeArray.Length; p++) {\n                                            \
    \                        if (primeArray[p] == intArray[i]) {\n               \
    \                                                         for (int q = p + 1;\
    \ q < primeArray.Length; q++) {\n                                            \
    \                                if (primeArray[q] == intArray[i]) {\n       \
    \                                                                         for\
    \ (int r = q + 1; r < primeArray.Length; r++) {\n                            \
    \                                                        if (primeArray[r] ==\
    \ intArray[i]) {\n                                                           \
    \                             for (int s = r + 1; s < primeArray.Length; s++)\
    \ {\n                                                                        \
    \                    if (primeArray[s] == intArray[i]) {\n                   \
    \                                                                            \
    \ for (int t = s + 1; t < primeArray.Length; t++) {\n                        \
    \                                                                            if\
    \ (primeArray[t] == intArray[i]) {\n                                         \
    \                                                               for (int u = t\
    \ + 1; u < primeArray.Length; u++) {\n                                       \
    \                                                                     if (primeArray[u]\
    \ == intArray[i]) {\n                                                        \
    \                                                        for (int v = u + 1; v\
    \ < primeArray.Length; v++) {\n                                              \
    \                                                                      if (primeArray[v]\
    \ == intArray[i]) {\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"\
    lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6pli9x60.cs(76,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp6pli9x60.cs(86,2): error CS1513: } expected

    '
  timestamp: 1659794007
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        char[] charArray = sentence.ToCharArray();\n        Array.Sort(charArray);\n\
    \        foreach (char c in charArray) {\n            if (char.IsLetter(c)) {\n\
    \                word += c;\n            }\n        }\n        temp = word;\n\
    \        List<int> primes = new List<int>();\n        primes.Add(2);\n       \
    \ primes.Add(3);\n        primes.Add(5);\n        primes.Add(7);\n        primes.Add(11);\n\
    \        primes.Add(13);\n        primes.Add(17);\n        primes.Add(19);\n \
    \       primes.Add(23);\n        primes.Add(29);\n        primes.Add(31);\n  \
    \      primes.Add(37);\n        primes.Add(41);\n        primes.Add(43);\n   \
    \     primes.Add(47);\n        primes.Add(53);\n        primes.Add(59);\n    \
    \    primes.Add(61);\n        primes.Add(67);\n        primes.Add(71);\n     \
    \   primes.Add(73);\n        primes.Add(79);\n        primes.Add(83);\n      \
    \  primes.Add(89);\n        primes.Add(97);\n        primes.Add(103);\n      \
    \  primes.Add(109);\n        primes.Add(113);\n        primes.Add(127);\n    \
    \    primes.Add(131);\n        primes.Add(137);\n        primes.Add(139);\n  \
    \      primes.Add(143);\n        primes.Add(147);\n        primes.Add(151);\n\
    \        primes.Add(157);\n        primes.Add(163);\n        primes.Add(167);\n\
    \        primes.Add(173);\n        primes.Add(179);\n        primes.Add(181);\n\
    \        primes.Add(191);\n        primes.Add(193);\n        primes.Add(197);\n\
    \        primes.Add(199);\n        primes.Add(211);\n        primes.Add(223);\n\
    \        primes.Add(227);\n        primes.Add(229);\n        primes.Add(233);\n\
    \        primes.Add(239);\n        primes.Add(241);\n        primes.Add(251);\n\
    \        primes.Add(257);\n        primes.Add(263);\n        primes.Add(269);\n\
    \        primes.Add(271);\n        primes.Add(277);\n        primes.Add(281);\n\
    \        primes.Add(283);\n        primes.Add(293);\n        primes.Add(307);\n\
    \        primes.Add(311);\n        primes.\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ygbtg1e.cs(99,16): error CS1001: Identifier expected

    /tmp/tmp_ygbtg1e.cs(99,16): error CS1002: ; expected

    '
  timestamp: 1659794007
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        bool isPrime = true;\n        string temp\
    \ = sentence;\n        string temp2 = \"\";\n        foreach (char c in temp)\
    \ {\n            int n = Convert.ToInt32(c);\n            int count = 0;\n   \
    \         while (n % 2 == 0) {\n                n = n / 2;\n                count++;\n\
    \            }\n            if (count == 3) {\n                isPrime = false;\n\
    \            }\n        }\n        if (isPrime) {\n            int length = sentence.Length;\n\
    \            int count = 0;\n            while (length > 0) {\n              \
    \  string temp = sentence.Substring(0, length);\n                string temp2\
    \ = sentence.Substring(length, length);\n                string temp3 = \"\";\n\
    \                foreach (char c in temp) {\n                    int n = Convert.ToInt32(c);\n\
    \                    int count = 0;\n                    while (n % 2 == 0) {\n\
    \                        n = n / 2;\n                        count++;\n      \
    \              }\n                    if (count == 3) {\n                    \
    \    temp3 += c;\n                    }\n                }\n                if\
    \ (temp3 == temp2) {\n                    result += temp3;\n                }\n\
    \                length--;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpefvu_0o4.cs(43,24): error CS0136: A local or parameter named ''temp''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpefvu_0o4.cs(44,24): error CS0136: A local or parameter named ''temp2''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpefvu_0o4.cs(48,25): error CS0136: A local or parameter named ''count''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpefvu_0o4.cs(41,17): warning CS0219: The variable ''count'' is assigned
    but its value is never used

    /tmp/tmpefvu_0o4.cs(27,16): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    '
  timestamp: 1659794008
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (string word in sentence.Split(' '))\n        {\n           \
    \ words.Add(word);\n        }\n        foreach (string word in words)\n      \
    \  {\n            int length = word.Length;\n            if (length == 1)\n  \
    \          {\n                result += word;\n            }\n            else\n\
    \            {\n                for (int i = 2; i <= Math.Sqrt(length); i++)\n\
    \                {\n                    if (length % i == 0)\n               \
    \     {\n                        result += word;\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fc0c580a71094e4c9b22bc66e247c55c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fc0c580a71094e4c9b22bc66e247c55c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794008
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string newWord\
    \ = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)\
    \ {\n            word += c;\n        }\n        List<int> primes = new List<int>();\n\
    \        primes.Add(2);\n        for (int i = 3; i <= Math.Sqrt(word.Length);\
    \ i++) {\n            bool isPrime = true;\n            for (int j = 0; j < primes.Count;\
    \ j++) {\n                if (i % primes[j] == 0) {\n                    isPrime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (isPrime) {\n                primes.Add(i);\n            }\n    \
    \    }\n        foreach (int prime in primes) {\n            int count = 0;\n\
    \            int start = 0;\n            int end = 0;\n            while (end\
    \ < word.Length) {\n                start = end;\n                end = start\
    \ + 1;\n                while (end < word.Length && word[end] == ' ') {\n    \
    \                end++;\n                }\n                if (end == word.Length)\
    \ {\n                    newWord = word.Substring(start, word.Length - start);\n\
    \                    result += newWord;\n                    break;\n        \
    \        }\n                while (end < word.Length && word[end] != ' ') {\n\
    \                    end++;\n                }\n                if (end == word.Length)\
    \ {\n                    newWord = word.Substring(start, word.Length - start);\n\
    \                    result += newWord;\n                    break;\n        \
    \        }\n                while (end < word.Length && word[end] == ' ') {\n\
    \                    end++;\n                }\n                if (end == word.Length)\
    \ {\n                    newWord = word.Substring(start, word.Length - start);\n\
    \                    result += newWord;\n                    break;\n        \
    \        }\n                while (end < word.Length && word[end] != ' ') {\n\
    \                    end++;\n                }\n                if (end == word.Length)\
    \ {\n                    newWord = word.Substring(start, word.Length - start);\n\
    \                    result += newWord;\n                    break;\n        \
    \        }\n                while (end < word.Length && word[end] == ' ') {\n\
    \                    end++;\n                }\n                if (end == word.Length)\
    \ {\n                    newWord = word.Substring(start, word.Length - start);\n\
    \                    result += newWord;\n                    break;\n        \
    \        }\n                while (end < word.Length && word[end] != ' ') {\n\
    \                    end++;\n                }\n                if (end == word.Length)\
    \ {\n                    newWord = word.Substring(start, word.Length - start);\n\
    \                    result += newWord;\n                    break;\n        \
    \        }\n                while (end < word.Length && word[end] == ' ') {\n\
    \                    end++;\n                }\n                if (end == word.Length)\
    \ {\n                    newWord = word.Substring(start, word.Length - start);\n\
    \                    result += newWord;\n                    break;\n        \
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpswj451f5.cs(109,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpswj451f5.cs(119,2): error CS1513: } expected

    '
  timestamp: 1659794007
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> words = new HashSet<string>();\n        foreach (char\
    \ c in chars) {\n            if (char.IsLetter(c)) {\n                string word\
    \ = c.ToString();\n                if (words.Contains(word)) {\n             \
    \       result = result + word;\n                } else {\n                  \
    \  words.Add(word);\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aed0ca7ec2b444108617c41dc585bf06>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aed0ca7ec2b444108617c41dc585bf06>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794008
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n\
    \        Array.Sort(charArray);\n        foreach (char c in charArray) {\n   \
    \         int count = 0;\n            while (c != ' ') {\n                count++;\n\
    \                c = charArray[count];\n            }\n            if (IsPrime(count))\
    \ {\n                result += \" \" + c;\n            }\n        }\n        return\
    \ result.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwbtsabgf.cs(31,17): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    /tmp/tmpwbtsabgf.cs(33,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794008
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (string word in sentence.Split(' '))\n        {\n           \
    \ words.Add(word);\n        }\n        List<int> primes = new List<int>();\n \
    \       foreach (string word in words)\n        {\n            int count = 0;\n\
    \            foreach (char c in word)\n            {\n                count +=\
    \ (int)Math.Pow(word.Length, word.Length - 1 - c);\n            }\n          \
    \  if (count > 1)\n            {\n                primes.Add(count);\n       \
    \     }\n        }\n        primes.Sort();\n        foreach (int prime in primes)\n\
    \        {\n            bool isPrime = true;\n            for (int i = 0; i <\
    \ prime; i++)\n            {\n                if (primes.ElementAt(i) != prime)\n\
    \                {\n                    isPrime = false;\n                   \
    \ break;\n                }\n            }\n            if (isPrime)\n       \
    \     {\n                foreach (string word in words)\n                {\n \
    \                   if (word.Length == prime)\n                    {\n       \
    \                 result += \" \" + word;\n                    }\n           \
    \     }\n            }\n        }\n        return result.Trim();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f88da587c35d480ba38759d5f598dfc1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f88da587c35d480ba38759d5f598dfc1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794008
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string newSentence\
    \ = \"\";\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                newSentence\
    \ += word;\n                word = \"\";\n                newSentence += c;\n\
    \            }\n        }\n        if (word != \"\") {\n            newSentence\
    \ += word;\n        }\n        char[] charArray = newSentence.ToCharArray();\n\
    \        Array.Sort(charArray);\n        string newWord = \"\";\n        for (int\
    \ i = 0; i < charArray.Length; i++) {\n            if (charArray[i] == ' ') {\n\
    \                newWord += charArray[i];\n            } else {\n            \
    \    newWord += charArray[i];\n            }\n        }\n        result = newWord;\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6348b446532541739a3e15bdae2de50b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6348b446532541739a3e15bdae2de50b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794008
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            int count = 0;\n   \
    \         while (n != 1) {\n                n = n / 2;\n                count++;\n\
    \            }\n            if (count == 2) {\n                primes.Add(n);\n\
    \            }\n        }\n        foreach (int p in primes) {\n            string\
    \ s = \"\";\n            int count = 0;\n            while (p != 1) {\n      \
    \          p = p / 2;\n                count++;\n            }\n            while\
    \ (count > 0) {\n                s = s + chars[count];\n                count--;\n\
    \            }\n            result = result + s;\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp63y9xmxr.cs(42,17): error CS1656: Cannot assign to ''p'' because it is
    a ''foreach iteration variable''

    '
  timestamp: 1659794008
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string word2\
    \ = \"\";\n        bool isPrime = true;\n        string temp = \"\";\n       \
    \ char[] charArray = sentence.ToCharArray();\n        foreach (char c in charArray)\
    \ {\n            word = word + c;\n        }\n        char[] charArray2 = word.ToCharArray();\n\
    \        foreach (char c in charArray2) {\n            word2 = word2 + c;\n  \
    \      }\n        char[] charArray3 = word2.ToCharArray();\n        foreach (char\
    \ c in charArray3) {\n            temp = temp + c;\n        }\n        char[]\
    \ charArray4 = temp.ToCharArray();\n        foreach (char c in charArray4) {\n\
    \            isPrime = IsPrime(c);\n            if (isPrime) {\n             \
    \   result = result + c;\n            }\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa1b6r67m.cs(43,23): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794008
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            }\n        }\n        temp = word;\n\
    \        List<int> primes = new List<int>();\n        primes.Add(2);\n       \
    \ primes.Add(3);\n        primes.Add(5);\n        primes.Add(7);\n        primes.Add(11);\n\
    \        primes.Add(13);\n        primes.Add(17);\n        primes.Add(19);\n \
    \       primes.Add(23);\n        primes.Add(29);\n        primes.Add(31);\n  \
    \      primes.Add(37);\n        primes.Add(41);\n        primes.Add(43);\n   \
    \     primes.Add(47);\n        primes.Add(53);\n        primes.Add(59);\n    \
    \    primes.Add(61);\n        primes.Add(67);\n        primes.Add(71);\n     \
    \   primes.Add(73);\n        primes.Add(79);\n        primes.Add(83);\n      \
    \  primes.Add(89);\n        primes.Add(97);\n        primes.Add(103);\n      \
    \  primes.Add(109);\n        primes.Add(113);\n        primes.Add(127);\n    \
    \    primes.Add(131);\n        primes.Add(137);\n        primes.Add(139);\n  \
    \      primes.Add(143);\n        primes.Add(147);\n        primes.Add(151);\n\
    \        primes.Add(157);\n        primes.Add(163);\n        primes.Add(167);\n\
    \        primes.Add(173);\n        primes.Add(179);\n        primes.Add(181);\n\
    \        primes.Add(191);\n        primes.Add(193);\n        primes.Add(197);\n\
    \        primes.Add(199);\n        primes.Add(211);\n        primes.Add(223);\n\
    \        primes.Add(227);\n        primes.Add(229);\n        primes.Add(233);\n\
    \        primes.Add(239);\n        primes.Add(241);\n        primes.Add(251);\n\
    \        primes.Add(257);\n        primes.Add(263);\n        primes.Add(269);\n\
    \        primes.Add(271);\n        primes.Add(277);\n        primes.Add(281);\n\
    \        primes.Add(283);\n        primes.Add(293);\n        primes.Add(307);\n\
    \        primes.Add(311);\n        primes.Add(313;\n        primes.Add(317;\n\
    \        primes.Add(319);\n        primes.\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxvjd428u.cs(97,23): error CS1026: ) expected

    /tmp/tmpxvjd428u.cs(98,23): error CS1026: ) expected

    /tmp/tmpxvjd428u.cs(100,16): error CS1001: Identifier expected

    /tmp/tmpxvjd428u.cs(100,16): error CS1002: ; expected

    '
  timestamp: 1659794008
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            if (IsPrime(length))\n\
    \            {\n                result += word;\n            }\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n  \
    \  Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6zlmot9f.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794007
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        foreach (char\
    \ c in sentence) {\n            if (char.IsLetter(c)) {\n                word\
    \ += c;\n            }\n        }\n        char[] charArray = word.ToCharArray();\n\
    \        Array.Sort(charArray);\n        foreach (char c in charArray) {\n   \
    \         int count = 0;\n            foreach (char c2 in charArray) {\n     \
    \           if (c == c2) {\n                    count++;\n                }\n\
    \            }\n            if (count == 2) {\n                result += c;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0fbc2343068f419cb6a289b15367d559>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0fbc2343068f419cb6a289b15367d559>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794008
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in sentence) {\n            isPrime = true;\n\
    \            int length = Convert.ToInt32(c);\n            int counter = 1;\n\
    \            while (counter <= length) {\n                if (length % counter\
    \ == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n                counter++;\n            }\n            if\
    \ (isPrime) {\n                word += c;\n            }\n        }\n        result\
    \ = word;\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75bbddb00198461d9d59b540c1417956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75bbddb00198461d9d59b540c1417956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794008
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (string word in sentence.Split(' '))\n        {\n           \
    \ words.Add(word);\n        }\n        foreach (string word in words)\n      \
    \  {\n            int length = word.Length;\n            if (length == 1)\n  \
    \          {\n                result += word;\n            }\n            else\n\
    \            {\n                for (int i = 2; i <= length; i++)\n          \
    \      {\n                    if (IsPrimeNumber(length))\n                   \
    \ {\n                        result += word;\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps4axqt3l.cs(41,25): error CS0103: The name ''IsPrimeNumber'' does not
    exist in the current context

    '
  timestamp: 1659794008
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> words = new HashSet<string>();\n        foreach (char\
    \ c in chars) {\n            if (char.IsLetter(c)) {\n                string word\
    \ = c.ToString();\n                if (!words.Contains(word)) {\n            \
    \        words.Add(word);\n                }\n            }\n        }\n     \
    \   foreach (string word in words) {\n            int length = word.Length;\n\
    \            if (length == 1) {\n                result += word;\n           \
    \ } else {\n                for (int i = 2; i <= Math.Sqrt(length); i++) {\n \
    \                   if (length % i == 0) {\n                        string newWord\
    \ = word.Substring(0, i) + \" \" + word.Substring(i);\n                      \
    \  if (!words.Contains(newWord)) {\n                            words.Add(newWord);\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d393f1e2c2eb4a8894c56f68bf174c26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d393f1e2c2eb4a8894c56f68bf174c26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794008
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        char[] chars = sentence.ToCharArray();\n        Array.Sort(chars);\n\
    \        foreach (char c in chars) {\n            if (chars.Contains(c)) {\n \
    \               word += c;\n            }\n        }\n        char[] chars2 =\
    \ word.ToCharArray();\n        Array.Sort(chars2);\n        foreach (char c in\
    \ chars2) {\n            if (chars2.Contains(c)) {\n                temp += c;\n\
    \            }\n        }\n        char[] chars3 = temp.ToCharArray();\n     \
    \   Array.Sort(chars3);\n        foreach (char c in chars3) {\n            if\
    \ (chars3.Contains(c)) {\n                result += c;\n            }\n      \
    \  }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <48e918c1c0454312a1ea5e375f524f03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <48e918c1c0454312a1ea5e375f524f03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794009
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        foreach (char\
    \ c in sentence) {\n            if (char.IsLetter(c)) {\n                word\
    \ += c;\n            }\n        }\n        char[] charArray = word.ToCharArray();\n\
    \        Array.Sort(charArray);\n        foreach (char c in charArray) {\n   \
    \         int length = c;\n            while (length < 100) {\n              \
    \  if (IsPrime(length)) {\n                    result += \" \" + word;\n     \
    \               break;\n                }\n                length++;\n       \
    \     }\n        }\n        return result.Trim();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxttua4m7.cs(36,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794008
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string temp = sentence.ToLower();\n  \
    \      char[] charArray = temp.ToCharArray();\n        List<int> primes = new\
    \ List<int>();\n        foreach (char c in charArray) {\n            int number\
    \ = (int)c;\n            if (number == 0) {\n                continue;\n     \
    \       }\n            int prime = number;\n            while (prime > 1) {\n\
    \                if (number % prime == 0) {\n                    break;\n    \
    \            }\n                prime = prime / 2;\n            }\n          \
    \  if (prime > 1) {\n                primes.Add(prime);\n            }\n     \
    \   }\n        foreach (int prime in primes) {\n            int count = 0;\n \
    \           foreach (char c in charArray) {\n                int number = (int)c;\n\
    \                if (number == 0) {\n                    continue;\n         \
    \       }\n                int prime2 = (int)prime;\n                if (number\
    \ % prime2 == 0) {\n                    count++;\n                }\n        \
    \    }\n            if (count == 0) {\n                result += \" \" + temp;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d0d72d7327a4671a28715551221fbec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d0d72d7327a4671a28715551221fbec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794009
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        bool isPrime = true;\n        int length = sentence.Length;\n\
    \        for (int i = 0; i < length; i++) {\n            word = sentence[i];\n\
    \            if (isPrime) {\n                temp = word + \" \";\n          \
    \      isPrime = false;\n            }\n            else if (IsPrime(word.Length))\
    \ {\n                temp = temp + word + \" \";\n                isPrime = true;\n\
    \            }\n            else {\n                temp = temp + word + \" \"\
    ;\n            }\n        }\n        result = temp.Trim();\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe43rlj2z.cs(30,20): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpe43rlj2z.cs(35,22): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794008
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (string word in sentence.Split(' '))\n        {\n           \
    \ words.Add(word);\n        }\n        foreach (string word in words)\n      \
    \  {\n            int count = 0;\n            int length = word.Length;\n    \
    \        int prime = 0;\n            while (count < length)\n            {\n \
    \               prime = PrimeNumber(length);\n                if (prime == 0)\n\
    \                {\n                    break;\n                }\n          \
    \      else\n                {\n                    prime = PrimeNumber(length);\n\
    \                    if (prime == 0)\n                    {\n                \
    \        break;\n                    }\n                    else\n           \
    \         {\n                        prime = PrimeNumber(length);\n          \
    \              if (prime == 0)\n                        {\n                  \
    \          break;\n                        }\n                        else\n \
    \                       {\n                            prime = PrimeNumber(length);\n\
    \                            if (prime == 0)\n                            {\n\
    \                                break;\n                            }\n     \
    \                       else\n                            {\n                \
    \                prime = PrimeNumber(length);\n                              \
    \  if (prime == 0)\n                                {\n                      \
    \              break;\n                                }\n                   \
    \             else\n                                {\n                      \
    \              prime = PrimeNumber(length);\n                                \
    \    if (prime == 0)\n                                    {\n                \
    \                        break;\n                                    }\n     \
    \                               else\n                                    {\n\
    \                                        prime = PrimeNumber(length);\n      \
    \                                  if (prime == 0)\n                         \
    \               {\n                                            break;\n      \
    \                                  }\n                                       \
    \ else\n                                        {\n                          \
    \                  prime = PrimeNumber(length);\n                            \
    \                if (prime == 0)\n                                           \
    \ {\n                                                break;\n                \
    \                            }\n                                            else\n\
    \                                            {\n                             \
    \                   prime = PrimeNumber(length);\n                           \
    \                     if (prime == 0)\n                                      \
    \          {\n                                                    break;\n   \
    \                                             }\n                            \
    \                    else\n                                                {\n\
    \                                                    prime = PrimeNumber(length);\n\
    \                                                    if (prime == 0)\n       \
    \                                             {\n                            \
    \                            break;\n                                        \
    \            }\n                                                    else\n   \
    \                                                 {\n                        \
    \                                prime = PrimeNumber(length);\n              \
    \                                          if (prime == 0)\n                 \
    \                                       {\n                                  \
    \                          break;\n                                          \
    \              }\n                                                        else\n\
    \                                                        {\n                 \
    \                                           prime = PrimeNumber(length);\n   \
    \                                                         if (prime == 0)\n  \
    \                                                          {\n               \
    \                                                 break;\n                   \
    \                                         }\n                                \
    \                            else\n                                          \
    \                  {\n                                                       \
    \         prime = PrimeNumber(length);\n                                     \
    \                           if (prime == 0)\n                                \
    \                                {\n                                         \
    \                           break;\n                                         \
    \                       }\n                                                  \
    \              else\n                                                        \
    \        {\n                                                                 \
    \   prime = PrimeNumber(length);\n                                           \
    \                         if (prime == 0)\n                                  \
    \                                  {\n                                       \
    \                                 break;\n                                   \
    \                                 }\n                                        \
    \                            else\n                                          \
    \                          {\n                                               \
    \                         prime = PrimeNumber(length);\n                     \
    \                                                   if (prime == 0)\n        \
    \                                                                {\n         \
    \                                                                   break;\n \
    \                                                                       }\n  \
    \                                                                      else\n\
    \                                                                        {\n \
    \                                                                           prime\
    \ = PrimeNumber(length);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8e94ult3.cs(144,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp8e94ult3.cs(154,2): error CS1513: } expected

    '
  timestamp: 1659794008
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)\
    \ {\n            temp = c + temp;\n        }\n        char[] charArray = temp.ToCharArray();\n\
    \        Array.Sort(charArray);\n        foreach (char c in charArray) {\n   \
    \         isPrime = true;\n            for (int i = 1; i < charArray.Length; i++)\
    \ {\n                if (charArray[i] % i == 0) {\n                    isPrime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (isPrime) {\n                result += c;\n            }\n      \
    \  }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e800a1de50bb4263941e224f897b5e79>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e800a1de50bb4263941e224f897b5e79>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794009
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            if (IsPrime(length))\n\
    \            {\n                result += word;\n            }\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n  \
    \  Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6zlmot9f.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794007
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> set = new HashSet<string>();\n        foreach (char c\
    \ in chars) {\n            if (chars.IndexOf(c) == chars.Length - 1) {\n     \
    \           set.Add(c.ToString());\n            }\n        }\n        foreach\
    \ (string s in set) {\n            if (IsPrime(s.Length)) {\n                result\
    \ += s;\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy7zd5ifs.cs(28,23): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    /tmp/tmpy7zd5ifs.cs(33,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794008
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        char[] chars = sentence.ToCharArray();\n        foreach (char\
    \ c in chars) {\n            if (char.IsLetter(c)) {\n                word +=\
    \ c;\n            } else {\n                if (word.Length > 0) {\n         \
    \           temp = word;\n                    word = \"\";\n                 \
    \   result += temp;\n                }\n            }\n        }\n        if (word.Length\
    \ > 0) {\n            temp = word;\n            word = \"\";\n            result\
    \ += temp;\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e62fabee90154502b8bd4866834b92d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e62fabee90154502b8bd4866834b92d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794009
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        bool isPrime = true;\n        bool isPrime2 = true;\n     \
    \   bool isPrime3 = true;\n        bool isPrime4 = true;\n        bool isPrime5\
    \ = true;\n        bool isPrime6 = true;\n        bool isPrime7 = true;\n    \
    \    bool isPrime8 = true;\n        bool isPrime9 = true;\n        bool isPrime10\
    \ = true;\n        bool isPrime11 = true;\n        bool isPrime12 = true;\n  \
    \      bool isPrime13 = true;\n        bool isPrime14 = true;\n        bool isPrime15\
    \ = true;\n        bool isPrime16 = true;\n        bool isPrime17 = true;\n  \
    \      bool isPrime18 = true;\n        bool isPrime19 = true;\n        bool isPrime20\
    \ = true;\n        bool isPrime21 = true;\n        bool isPrime22 = true;\n  \
    \      bool isPrime23 = true;\n        bool isPrime24 = true;\n        bool isPrime25\
    \ = true;\n        bool isPrime26 = true;\n        bool isPrime27 = true;\n  \
    \      bool isPrime28 = true;\n        bool isPrime29 = true;\n        bool isPrime30\
    \ = true;\n        bool isPrime31 = true;\n        bool isPrime32 = true;\n  \
    \      bool isPrime33 = true;\n        bool isPrime34 = true;\n        bool isPrime35\
    \ = true;\n        bool isPrime36 = true;\n        bool isPrime37 = true;\n  \
    \      bool isPrime38 = true;\n        bool isPrime39 = true;\n        bool isPrime40\
    \ = true;\n        bool isPrime41 = true;\n        bool isPrime42 = true;\n  \
    \      bool isPrime43 = true;\n        bool isPrime44 = true;\n        bool isPrime45\
    \ = true;\n        bool isPrime46 = true;\n        bool isPrime47 = true;\n  \
    \      bool isPrime48 = true;\n        bool isPrime49 = true;\n        bool isPrime50\
    \ = true;\n        bool isPrime51 = true;\n        bool isPrime52 = true;\n  \
    \      bool isPrime53 = true;\n        bool isPrime54 = true;\n        bool isPrime55\
    \ = true;\n        bool isPrime56 = true;\n        bool isPrime57 = true;\n  \
    \      bool isPrime58 = true;\n        bool isPrime59 = true;\n        bool isPrime60\
    \ = true;\n        bool isPrime61 = true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg7h1_hkc.cs(24,16): warning CS0219: The variable ''result'' is assigned
    but its value is never used

    /tmp/tmpg7h1_hkc.cs(25,16): warning CS0219: The variable ''word'' is assigned
    but its value is never used

    /tmp/tmpg7h1_hkc.cs(26,16): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmpg7h1_hkc.cs(27,14): warning CS0219: The variable ''isPrime'' is assigned
    but its value is never used

    /tmp/tmpg7h1_hkc.cs(28,14): warning CS0219: The variable ''isPrime2'' is assigned
    but its value is never used

    /tmp/tmpg7h1_hkc.cs(29,14): warning CS0219: The variable ''isPrime3'' is assigned
    but its value is never used

    /tmp/tmpg7h1_hkc.cs(30,14): warning CS0219: The variable ''isPrime4'' is assigned
    but its value is never used

    /tmp/tmpg7h1_hkc.cs(31,14): warning CS0219: The variable ''isPrime5'' is assigned
    but its value is never used

    /tmp/tmpg7h1_hkc.cs(32,14): warning CS0219: The variable ''isPrime6'' is assigned
    but its value is never used

    /tmp/tmpg7h1_hkc.cs(33,14): warning CS0219: The variable ''isPrime7'' is assigned
    but its value is never used

    /tmp/tmpg7h1_hkc.cs(34,14): warning CS0219: The variable ''isPrime8'' is assigned
    but its value is never used

    /tmp/tmpg7h1_hkc.cs(35,14): warning CS0219: The variable ''isPrime9'' is assigned
    but its value is never used

    /tmp/tmpg7h1_hkc.cs(36,14): warning CS0219: The variable ''isPrime10'' is assigned
    but its value is never used

    /tmp/tmpg7h1_hkc.cs(37,14): warning CS0219: The variable ''isPrime11'' is assigned
    but its value is never used

    /tmp/tmpg7h1_hkc.cs(38,14): warning CS0219: The variable ''isPrime12'' is assigned
    but its value is never used

    /tmp/tmpg7h1_hkc.cs(39,14): warning CS0219: The variable ''isPrime13'' is assigned
    but its value is never used

    /tmp/tmpg7h1_hkc.cs(40,14): warning CS0219: The variable ''isPrime14'' is assigned
    but its value is never used

    /tmp/tmpg7h1_hkc.cs(41,14): warning CS0219: The variable ''isPrime15'' is assigned
    but its va'
  timestamp: 1659794008
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> primes = new HashSet<string>();\n        foreach (char\
    \ c in chars) {\n            string s = c.ToString();\n            int n = Convert.ToInt32(s);\n\
    \            if (primes.Contains(s)) {\n                primes.Add(s);\n     \
    \       }\n            else {\n                primes.Add(s);\n              \
    \  for (int i = 2; i <= Math.Sqrt(n); i++) {\n                    if (n % i ==\
    \ 0) {\n                        primes.Add(s);\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        foreach\
    \ (string s in primes) {\n            result += s + \" \";\n        }\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider)\
    \ [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32\
    \ (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n \
    \ at Problem.WordsInSentence (System.String sentence) [0x0002f] in <99c7d1150ed2488fa4196b82f177da84>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <99c7d1150ed2488fa4196b82f177da84>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider)\
    \ [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32\
    \ (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n \
    \ at Problem.WordsInSentence (System.String sentence) [0x0002f] in <99c7d1150ed2488fa4196b82f177da84>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <99c7d1150ed2488fa4196b82f177da84>:0\
    \ \n"
  stdout: ''
  timestamp: 1659794009
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (char c in sentence) {\n            if (char.IsLetter(c)) {\n\
    \                words.Add(c.ToString());\n            }\n        }\n        foreach\
    \ (string word in words) {\n            int length = word.Length;\n          \
    \  if (length == 1) {\n                result += word;\n            }\n      \
    \      else if (length == 2 && word.StartsWith(\"a\") && word.EndsWith(\"a\"))\
    \ {\n                result += word;\n            }\n            else if (length\
    \ == 2 && word.StartsWith(\"a\") && word.EndsWith(\"e\")) {\n                result\
    \ += word;\n            }\n            else if (length == 2 && word.StartsWith(\"\
    e\") && word.EndsWith(\"e\")) {\n                result += word;\n           \
    \ }\n            else if (length == 3 && word.StartsWith(\"a\") && word.EndsWith(\"\
    e\") && word.StartsWith(\"i\") && word.EndsWith(\"i\")) {\n                result\
    \ += word;\n            }\n            else if (length == 3 && word.StartsWith(\"\
    e\") && word.EndsWith(\"e\") && word.StartsWith(\"i\") && word.EndsWith(\"i\"\
    )) {\n                result += word;\n            }\n            else if (length\
    \ == 3 && word.StartsWith(\"a\") && word.EndsWith(\"e\") && word.StartsWith(\"\
    i\") && word.EndsWith(\"o\")) {\n                result += word;\n           \
    \ }\n            else if (length == 3 && word.StartsWith(\"e\") && word.EndsWith(\"\
    e\") && word.StartsWith(\"i\") && word.EndsWith(\"o\")) {\n                result\
    \ += word;\n            }\n            else if (length == 3 && word.StartsWith(\"\
    a\") && word.EndsWith(\"e\") && word.StartsWith(\"o\") && word.EndsWith(\"o\"\
    )) {\n                result += word;\n            }\n            else if (length\
    \ == 3 && word.StartsWith(\"e\") && word.EndsWith(\"e\") && word.StartsWith(\"\
    o\") && word.EndsWith(\"o\")) {\n                result += word;\n           \
    \ }\n            else if (length == 4 && word.StartsWith(\"a\") && word.EndsWith(\"\
    e\") && word.StartsWith(\"i\") && word.EndsWith(\"o\") && word.StartsWith(\"u\"\
    )) {\n                result += word;\n            }\n            else if (length\
    \ == 4 && word.StartsWith(\"e\") && word.EndsWith(\"e\") && word.StartsWith(\"\
    i\") && word.EndsWith(\"o\") && word.StartsWith(\"u\")) {\n                result\
    \ += word;\n            }\n            else if (length == 4 && word.StartsWith(\"\
    a\") \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcdz0umic.cs(69,57): error CS1026: ) expected

    /tmp/tmpcdz0umic.cs(69,57): error CS1525: Invalid expression term ''}''

    /tmp/tmpcdz0umic.cs(69,57): error CS1002: ; expected

    /tmp/tmpcdz0umic.cs(71,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpcdz0umic.cs(81,2): error CS1513: } expected

    '
  timestamp: 1659794008
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n\
    \        Array.Sort(charArray);\n        List<int> primes = new List<int>();\n\
    \        foreach (char c in charArray) {\n            int n = Convert.ToInt32(c);\n\
    \            int count = 0;\n            while (n % 2 == 0) {\n              \
    \  n = n / 2;\n                count++;\n            }\n            if (count\
    \ == 0) {\n                primes.Add(n);\n            }\n        }\n        foreach\
    \ (int p in primes) {\n            int count = 0;\n            while (p % 2 ==\
    \ 0) {\n                p = p / 2;\n                count++;\n            }\n\
    \            if (count == 0) {\n                result += \" \" + charArray[p];\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa16erp_y.cs(42,17): error CS1656: Cannot assign to ''p'' because it is
    a ''foreach iteration variable''

    '
  timestamp: 1659794009
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        bool isPrime = true;\n        string prime\
    \ = \"\";\n        foreach (char c in chars) {\n            int n = Convert.ToInt32(c);\n\
    \            if (n % 2 == 0) {\n                isPrime = false;\n           \
    \     break;\n            }\n        }\n        if (isPrime) {\n            foreach\
    \ (char c in chars) {\n                int n = Convert.ToInt32(c);\n         \
    \       if (n % 2 == 0) {\n                    prime = prime + c;\n          \
    \      }\n            }\n            result = prime + \" \" + result;\n      \
    \  }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19ab0d23202d46bca35897f1aa89ceb9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19ab0d23202d46bca35897f1aa89ceb9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794009
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            bool isPrime\
    \ = true;\n            for (int i = 2; i <= Math.Sqrt(length); i++)\n        \
    \    {\n                if (length % i == 0)\n                {\n            \
    \        isPrime = false;\n                    break;\n                }\n   \
    \         }\n            if (isPrime)\n            {\n                result +=\
    \ word;\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46ff36c8c59a48249547972ff364dc79>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46ff36c8c59a48249547972ff364dc79>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794009
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int len = word.Length;\n            if (len == 1)\n\
    \            {\n                result += word;\n            }\n            else\n\
    \            {\n                for (int i = 2; i <= Math.Sqrt(len); i++)\n  \
    \              {\n                    if (len % i == 0)\n                    {\n\
    \                        result += word;\n                        break;\n   \
    \                 }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d1a90ef0eea437797100fb87743257c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d1a90ef0eea437797100fb87743257c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794009
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (char c in sentence) {\n            if (char.IsLetter(c)) {\n\
    \                words.Add(c);\n            }\n        }\n        foreach (string\
    \ word in words) {\n            int length = word.Length;\n            if (length\
    \ == 1) {\n                result += word;\n                continue;\n      \
    \      }\n            int prime = 1;\n            while (true) {\n           \
    \     if (length == prime) {\n                    result += word;\n          \
    \          break;\n                }\n                if (length * prime < length)\
    \ {\n                    break;\n                }\n                prime++;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqhaiu7jm.cs(28,27): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659794009
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        int[] primes = new int[100];\n        primes[0] = 2;\n        primes[1]\
    \ = 3;\n        primes[2] = 5;\n        primes[3] = 7;\n        primes[4] = 11;\n\
    \        primes[5] = 13;\n        primes[6] = 17;\n        primes[7] = 19;\n \
    \       primes[8] = 23;\n        primes[9] = 29;\n        primes[10] = 31;\n \
    \       primes[11] = 37;\n        primes[12] = 41;\n        primes[13] = 43;\n\
    \        primes[14] = 59;\n        primes[15] = 61;\n        primes[16] = 67;\n\
    \        primes[17] = 71;\n        primes[18] = 73 // 73 prime\n        primes[19]\
    \ = 79;\n        primes[20] = 83;\n        primes[21] = 89;\n        primes[22]\
    \ = 97;\n        primes[23] = 101;\n        primes[24] = 103;\n        primes[25]\
    \ = 107;\n        primes[26] = 113;\n        primes[27] = 119;\n        primes[28]\
    \ = 127;\n        primes[29] = 131;\n        primes[30] = 137;\n        primes[31]\
    \ = 139;\n        primes[32] = 143;\n        primes[33] = 147;\n        primes[34]\
    \ = 151;\n        primes[35] = 157;\n        primes[36] = 163;\n        primes[37]\
    \ = 167;\n        primes[38] = 173;\n        primes[39] = 179;\n        primes[40]\
    \ = 181;\n        primes[41] = 183;\n        primes[42] = 191;\n        primes[43]\
    \ = 193;\n        primes[44] = 197;\n        primes[45] = 199;\n        primes[46]\
    \ = 203;\n        primes[47] = 207;\n        primes[48] = 211;\n        primes[49]\
    \ = 213;\n        primes[50] = 217;\n        primes[51] = 219;\n        primes[52]\
    \ = 223;\n        primes[53] = 227;\n        primes[54] = 229;\n        primes[55]\
    \ = 233;\n        primes[56] = 239;\n        primes[57] = 241;\n        primes[58]\
    \ = 243;\n        primes[59] = 247;\n        primes[60] = 251;\n        primes[61]\
    \ = 257;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0vuxmopw.cs(45,24): error CS1002: ; expected

    '
  timestamp: 1659794008
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in charArray)\
    \ {\n            int prime = PrimeNumber(c);\n            if (prime > 1) {\n \
    \               primes.Add(prime);\n            }\n        }\n        foreach\
    \ (int prime in primes) {\n            string newWord = string.Empty;\n      \
    \      for (int i = 0; i < charArray.Length; i++) {\n                if (charArray[i]\
    \ == ' ') {\n                    newWord = newWord + charArray[i];\n         \
    \       }\n            }\n            if (newWord.Length == prime) {\n       \
    \         result = result + newWord;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6m2lyux0.cs(28,25): error CS0103: The name ''PrimeNumber'' does not exist
    in the current context

    '
  timestamp: 1659794009
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (string word in sentence.Split(' '))\n        {\n           \
    \ words.Add(word);\n        }\n        List<int> primes = new List<int>();\n \
    \       foreach (string word in words)\n        {\n            primes.Add(new\
    \ BigInteger(word).Sieve());\n        }\n        foreach (int prime in primes)\n\
    \        {\n            if (primes.Contains(prime))\n            {\n         \
    \       result += \" \" + words[primes.IndexOf(prime)];\n            }\n     \
    \   }\n        return result.Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfy8x2oqb.cs(33,39): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    '
  timestamp: 1659794009
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in sentence) {\n            isPrime = true;\n\
    \            int n = Convert.ToInt32(c);\n            int count = 0;\n       \
    \     while (n != 1) {\n                if (n % 2 == 0) {\n                  \
    \  isPrime = false;\n                    break;\n                }\n         \
    \       n = n / 2;\n                count++;\n            }\n            if (isPrime)\
    \ {\n                word += c;\n            }\n        }\n        foreach (char\
    \ c in word) {\n            int n = Convert.ToInt32(c);\n            int count\
    \ = 0;\n            while (n != 1) {\n                if (n % 2 == 0) {\n    \
    \                isPrime = false;\n                    break;\n              \
    \  }\n                n = n / 2;\n                count++;\n            }\n  \
    \          if (isPrime) {\n                result += c;\n            }\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c36707cf95e04d7f9a3702e718e3c224>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c36707cf95e04d7f9a3702e718e3c224>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794009
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                isPrime\
    \ = false;\n            }\n        }\n        char[] chars = word.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ int length = c.ToString().Length;\n            if (isPrime) {\n            \
    \    if (length == 2) {\n                    result += c;\n                }\n\
    \                if (length == 3) {\n                    result += c;\n      \
    \          }\n                if (length == 5) {\n                    result +=\
    \ c;\n                }\n                if (length == 7) {\n                \
    \    result += c;\n                }\n                if (length == 9) {\n   \
    \                 result += c;\n                }\n                if (length\
    \ == 11) {\n                    result += c;\n                }\n            \
    \    if (length == 13) {\n                    result += c;\n                }\n\
    \                if (length == 17) {\n                    result += c;\n     \
    \           }\n                if (length == 19) {\n                    result\
    \ += c;\n                }\n                if (length == 23) {\n            \
    \        result += c;\n                }\n                if (length == 29) {\n\
    \                    result += c;\n                }\n                if (length\
    \ == 31) {\n                    result += c;\n                }\n            \
    \    if (length == 37) {\n                    result += c;\n                }\n\
    \                if (length == 43) {\n                    result += c;\n     \
    \           }\n                if (length == 49) {\n                    result\
    \ += c;\n                }\n                if (length == 71) {\n            \
    \        result += c;\n                }\n                if (length == 79) {\n\
    \                    result += c;\n                }\n                if (length\
    \ == 89) {\n                    result += c;\n                }\n            \
    \    if (length == 111) {\n                    result += c;\n                }\n\
    \                if (length == 127) {\n                    result += c;\n    \
    \            }\n                if (length == 131) {\n                    result\
    \ += c;\n                }\n                if (length == 137) {\n           \
    \         result += c;\n                }\n                if (length == 191)\
    \ {\n                    result += c;\n                }\n                if (length\
    \ == 199) {\n                    result += c;\n                }\n           \
    \     if (length == 239) {\n                    result += c;\n               \
    \ }\n                if (length == 291) {\n                    result += c;\n\
    \                }\n                if (length == 307) {\n                   \
    \ result += c;\n                }\n                if (length == 371) {\n    \
    \                result += c;\n                }\n                if (length ==\
    \ 379) {\n                    result += c;\n                }\n              \
    \  if (length == 383) {\n                    result += c;\n                }\n\
    \                if (length == 407) {\n                    result += c;\n    \
    \            }\n                if (length == 419) {\n                    result\
    \ += c;\n                }\n                if (length == 439) {\n           \
    \         result += c;\n                }\n                if (length == 471)\
    \ {\n                    result += c;\n                }\n                if (length\
    \ == 509) {\n                    result += c;\n                }\n           \
    \     if (length == 591) {\n                    result += c;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3vyx5t3y.cs(147,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp3vyx5t3y.cs(157,2): error CS1513: } expected

    '
  timestamp: 1659794009
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        int[] primes = new int[100];\n        primes[0] = 2;\n        primes[1]\
    \ = 3;\n        primes[2] = 5;\n        primes[3] = 7;\n        primes[4] = 11;\n\
    \        primes[5] = 13;\n        primes[6] = 17;\n        primes[7] = 19;\n \
    \       primes[8] = 23;\n        primes[9] = 29;\n        primes[10] = 41;\n \
    \       primes[11] = 53;\n        primes[12] = 59;\n        primes[13] = 67;\n\
    \        primes[14] = 71;\n        primes[15] = 79;\n        primes[16] = 87;\n\
    \        primes[17] = 97;\n        primes[18] = 103;\n        primes[19] = 109;\
    \ \n        primes[20] = 113;\n        primes[21] == 121;\n        primes[22]\
    \ = 127;\n        primes[23] = 131;\n        primes[24] = 137;\n        primes[25]\
    \ = 139;\n        primes[26] = 143;\n        primes[27] = 147;\n        primes[28]\
    \ = 151;\n        primes[29] = 153;\n        primes[30] = 15;\n        primes[31]\
    \ = 17;\n        primes[32] = 19;\n        primes[33] = 23;\n        primes[34]\
    \ = 29;\n        primes[35] = 31;\n        primes[36] = 37;\n        primes[37]\
    \ = 41;\n        primes[38] = 43;\n        primes[39] = 47;\n        primes[40]\
    \ = 51;\n        primes[41] = 53 \n        primes[42] = 59;\n        primes[43]\
    \ = 61;\n        primes[44] = 67;\n        primes[45] = 71;\n        primes[46]\
    \ = 73 \n        primes[47] = 79;\n        primes[48] = 83;\n        primes[49]\
    \ = 89;\n        primes[50] = 97;\n        primes[51] = 101;\n        primes[52]\
    \ = 103;\n        primes[53] = 107;\n        primes[54] = 113;\n        primes[55]\
    \ = 119;\n        primes[56] = 127;\n        primes[57] = 131;\n        primes[58]\
    \ = 137;\n        primes[59] = 143;\n        primes[60] = 149;\n        primes[61]\
    \ = 151;\n        primes[62] = 157;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5nk3okmj.cs(68,24): error CS1002: ; expected

    /tmp/tmp5nk3okmj.cs(73,24): error CS1002: ; expected

    '
  timestamp: 1659794009
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string temp = sentence;\n        char[]\
    \ chars = temp.ToCharArray();\n        List<int> primes = new List<int>();\n \
    \       foreach (char c in chars) {\n            int n = Convert.ToInt32(c);\n\
    \            int count = 0;\n            while (n % 2 == 0) {\n              \
    \  n = n / 2;\n                count++;\n            }\n            if (count\
    \ == 2) {\n                primes.Add(n);\n            }\n        }\n        foreach\
    \ (int p in primes) {\n            int count = 0;\n            while (p % 2 ==\
    \ 0) {\n                p = p / 2;\n                count++;\n            }\n\
    \            if (count == 2) {\n                result += temp.Substring(0, temp.IndexOf(p));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7u47ai4t.cs(42,17): error CS1656: Cannot assign to ''p'' because it is
    a ''foreach iteration variable''

    /tmp/tmp7u47ai4t.cs(46,58): error CS1503: Argument 1: cannot convert from ''int''
    to ''char''

    '
  timestamp: 1659794009
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int len = word.Length;\n            if (len == 1)\n\
    \            {\n                result += word;\n            }\n            else\n\
    \            {\n                for (int i = 2; i <= Math.Sqrt(len); i++)\n  \
    \              {\n                    if (len % i == 0)\n                    {\n\
    \                        result += word;\n                        break;\n   \
    \                 }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d1a90ef0eea437797100fb87743257c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d1a90ef0eea437797100fb87743257c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794009
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string temp = sentence.ToLower();\n  \
    \      char[] charArray = temp.ToCharArray();\n        Array.Sort(charArray);\n\
    \        foreach (char c in charArray) {\n            if (IsPrimeNumber(c)) {\n\
    \                result += \" \" + c;\n            }\n        }\n        return\
    \ result.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2jxii5ss.cs(29,17): error CS0103: The name ''IsPrimeNumber'' does not
    exist in the current context

    '
  timestamp: 1659794009
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            if (IsPrime(length))\n\
    \            {\n                result += \" \" + word;\n            }\n     \
    \   }\n        return result.Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfc8pfp28.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794009
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                isPrime\
    \ = false;\n            }\n        }\n        char[] charArray = word.ToCharArray();\n\
    \        Array.Sort(charArray);\n        foreach (char c in charArray) {\n   \
    \         if (char.IsLetter(c)) {\n                for (int i = 1; i < charArray.Length;\
    \ i++) {\n                    if (charArray[i] == c) {\n                     \
    \   isPrime = false;\n                        break;\n                    }\n\
    \                }\n            }\n        }\n        if (isPrime) {\n       \
    \     foreach (char c in charArray) {\n                result += c;\n        \
    \    }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <37eecaa963a94d5bab2a02bf5b37fbef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <37eecaa963a94d5bab2a02bf5b37fbef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794009
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> set = new HashSet<string>();\n        foreach (char c\
    \ in chars) {\n            if (chars.IndexOf(c) == chars.Length - 1) {\n     \
    \           set.Add(c.ToString());\n            }\n        }\n        foreach\
    \ (string s in set) {\n            int length = s.Length;\n            bool isPrime\
    \ = true;\n            for (int i = 2; i <= Math.Sqrt(length); i++) {\n      \
    \          if (length % i == 0) {\n                    isPrime = false;\n    \
    \                break;\n                }\n            }\n            if (isPrime)\
    \ {\n                result += s;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9lpqoxm0.cs(28,23): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    '
  timestamp: 1659794009
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int n = Convert.ToInt32(word);\n            if (IsPrime(n))\n\
    \            {\n                result += word;\n            }\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n  \
    \  Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpenq5uibw.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794009
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)\
    \ {\n            temp = c + temp;\n            isPrime = IsPrime(temp);\n    \
    \        if (isPrime) {\n                result += temp + \" \";\n           \
    \ }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdukzxr8q.cs(30,23): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    /tmp/tmpdukzxr8q.cs(25,16): warning CS0219: The variable ''word'' is assigned
    but its value is never used

    '
  timestamp: 1659794009
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (string word in sentence.Split(' '))\n        {\n           \
    \ words.Add(word);\n        }\n        foreach (string word in words)\n      \
    \  {\n            int length = word.Length;\n            bool isPrime = true;\n\
    \            for (int i = 2; i <= Math.Sqrt(length); i++)\n            {\n   \
    \             if (length % i == 0)\n                {\n                    isPrime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (isPrime)\n            {\n                result += \" \" + word;\n\
    \            }\n        }\n        return result.Trim();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f78eedb8c9f24218b6656aabdbb19ebc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f78eedb8c9f24218b6656aabdbb19ebc>:0 \n"
  stdout: ''
  timestamp: 1659794009
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ int count = 0;\n            while (c != ' ') {\n                count++;\n \
    \               c = chars[count];\n            }\n            if (IsPrime(count))\
    \ {\n                result += \" \" + c;\n            }\n        }\n        return\
    \ result.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnsnnsngu.cs(31,17): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    /tmp/tmpnsnnsngu.cs(33,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794009
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ int n = Convert.ToInt32(c);\n            if (IsPrime(n)) {\n               \
    \ result += \" \" + c;\n            }\n        }\n        return result.Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbnw512qs.cs(29,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794009
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)\
    \ {\n            temp = c + temp;\n        }\n        char[] charArray = temp.ToCharArray();\n\
    \        Array.Sort(charArray);\n        foreach (char c in charArray) {\n   \
    \         isPrime = true;\n            for (int i = 1; i < charArray.Length; i++)\
    \ {\n                if (c % charArray[i] == 0) {\n                    isPrime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (isPrime) {\n                result += \" \" + c;\n            }\n\
    \        }\n        return result.Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ccea5374269e4b8e9eb6b6902585b0b0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ccea5374269e4b8e9eb6b6902585b0b0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794009
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            bool isPrime\
    \ = true;\n            int counter = 1;\n            while (counter < length)\n\
    \            {\n                if (length%counter == 0)\n                {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n                counter++;\n            }\n            if (isPrime)\n\
    \            {\n                result += word;\n            }\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n  \
    \  Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ac55e0b38594d488791b945987bfc40>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ac55e0b38594d488791b945987bfc40>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794009
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in sentence) {\n            isPrime = true;\n\
    \            int length = Convert.ToInt32(c);\n            for (int i = 1; i <=\
    \ length / 2; i++) {\n                if (length % i == 0) {\n               \
    \     isPrime = false;\n                    break;\n                }\n      \
    \      }\n            if (isPrime) {\n                result += word;\n      \
    \          word = \"\";\n            }\n            word += c;\n        }\n  \
    \      result += word;\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5c12fe31f1a94328bb60d44e17825aac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5c12fe31f1a94328bb60d44e17825aac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794010
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        foreach (char\
    \ c in sentence) {\n            if (char.IsLetter(c)) {\n                word\
    \ += c;\n            }\n        }\n        char[] charArray = word.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in charArray)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                primes.Add(n);\n            }\n        }\n        primes.Sort();\n\
    \        foreach (int p in primes) {\n            string s = \"\";\n         \
    \   for (int i = 0; i < p; i++) {\n                s += charArray[i];\n      \
    \      }\n            result += s;\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.WordsInSentence (System.String sentence)\
    \ [0x000c8] in <a81bae2730dd4b0db8d28fe1d8fea32e>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <a81bae2730dd4b0db8d28fe1d8fea32e>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.WordsInSentence (System.String sentence) [0x000c8]\
    \ in <a81bae2730dd4b0db8d28fe1d8fea32e>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <a81bae2730dd4b0db8d28fe1d8fea32e>:0 \n"
  stdout: ''
  timestamp: 1659794009
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                isPrime\
    \ = false;\n            }\n        }\n        char[] charArray = word.ToCharArray();\n\
    \        Array.Sort(charArray);\n        foreach (char c in charArray) {\n   \
    \         if (char.IsLetter(c)) {\n                for (int i = 2; i < char.MaxValue;\
    \ i++) {\n                    if (IsPrime(i)) {\n                        result\
    \ += \" \" + c;\n                    }\n                }\n            }\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf0sojlr0.cs(39,25): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    /tmp/tmpf0sojlr0.cs(26,14): warning CS0219: The variable ''isPrime'' is assigned
    but its value is never used

    '
  timestamp: 1659794009
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string word2\
    \ = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)\
    \ {\n            word += c;\n        }\n        foreach (char c in word) {\n \
    \           word2 += c;\n        }\n        char[] charArray = word2.ToCharArray();\n\
    \        Array.Sort(charArray);\n        foreach (char c in charArray) {\n   \
    \         isPrime = isPrime && (c % 2 == 0);\n        }\n        if (isPrime)\
    \ {\n            int length = word2.Length;\n            int index = 0;\n    \
    \        while (index < length) {\n                string temp = word2;\n    \
    \            string temp2 = word;\n                while (index < length) {\n\
    \                    int tempLength = temp.Length;\n                    int temp2Length\
    \ = temp2.Length;\n                    if (tempLength == temp2Length) {\n    \
    \                    break;\n                    }\n                    if (tempLength\
    \ > temp2Length) {\n                        temp = temp + temp2;\n           \
    \             temp2 = temp2 + temp;\n                        index++;\n      \
    \              } else {\n                        temp = temp2 + temp;\n      \
    \                  temp2 = temp2 + temp;\n                        index++;\n \
    \                   }\n                }\n                result += temp;\n  \
    \              temp = temp2;\n                index++;\n            }\n      \
    \  }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eb87bdadd66744f9ac07a26cc9772c0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eb87bdadd66744f9ac07a26cc9772c0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794010
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        bool isPrime = true;\n        string temp\
    \ = sentence;\n        string temp2 = sentence;\n        int length = sentence.Length;\n\
    \        string temp3 = \"\";\n        for (int i = 0; i < length; i++) {\n  \
    \          int count = 0;\n            int j = 0;\n            while (j < length)\
    \ {\n                if (temp[j] == ' ') {\n                    count++;\n   \
    \                 j++;\n                } else {\n                    break;\n\
    \                }\n            }\n            if (count % 2 == 0) {\n       \
    \         isPrime = false;\n            }\n            if (isPrime) {\n      \
    \          temp3 = temp2 + \" \" + temp3;\n                temp2 = temp;\n   \
    \             temp = temp3;\n                isPrime = true;\n            }\n\
    \        }\n        temp = temp2 + \" \" + temp3;\n        temp = temp.Replace(\"\
    \ \", \"\");\n        temp = temp.Replace(\"  \", \" \");\n        temp = temp.Replace(\"\
    \  \", \" \");\n        temp = temp.Replace(\"  \", \" \");\n        temp = temp.Replace(\"\
    \  \", \" \");\n        temp = temp.Replace(\"  \", \" \");\n        temp = temp.Replace(\"\
    \  \", \" \");\n        temp = temp.Replace(\"  \", \" \");\n        temp = temp.Replace(\"\
    \  \", \" \");\n        temp = temp.Replace(\"  \", \" \");\n        temp = temp.Replace(\"\
    \  \", \" \");\n        temp = temp.Replace(\"  \", \" \");\n        temp = temp.Replace(\"\
    \  \", \" \");\n        temp = temp.Replace(\"  \", \" \");\n        temp = temp.Replace(\"\
    \  \", \" \");\n        temp = temp.Replace(\"  \", \" \");\n        temp = temp.Replace(\"\
    \  \", \" \");\n        temp = temp.Replace(\"  \", \" \");\n        temp = temp.Replace(\"\
    \  \", \" \");\n        temp = temp.Replace(\"  \", \" \");\n        temp = temp.Replace(\"\
    \  \", \" \");\n        temp = temp.Replace(\"  \", \" \");\n        temp = temp.Replace(\"\
    \  \", \" \");\n        temp = temp.Replace(\"  \", \" \");\n        temp = temp.Replace(\"\
    \  \", \" \");\n        temp = temp.Replace(\"  \", \" \");\n        temp = temp.Replace(\"\
    \  \", \" \");\n        temp = temp.Replace(\"  \", \" \");\n        temp = temp.Replace(\"\
    \  \", \" \");\n        temp = temp.Replace(\"  \", \" \");\n        temp = temp.Replace(\"\
    \  \", \" \");\n        temp = temp.Replace(\"  \", \" \");\n        temp = temp.Replace(\"\
    \  \", \" \");\n        temp = temp.Replace(\"  \", \" \");\n        temp = temp.Replace(\"\
    \  \", \" \");\n        temp = temp.Replace(\"  \", \" \");\n        temp = temp.Replace(\"\
    \  \", \" \");\n        temp = temp.Replace(\"  \n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0aa03e0s.cs(89,29): error CS1010: Newline in constant

    /tmp/tmp0aa03e0s.cs(89,32): error CS1026: ) expected

    /tmp/tmp0aa03e0s.cs(89,32): error CS1002: ; expected

    '
  timestamp: 1659794009
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            if (IsPrime(length))\n\
    \            {\n                result += \" \" + word;\n            }\n     \
    \   }\n        return result.Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfc8pfp28.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794009
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n\
    \        Array.Sort(charArray);\n        string word = \"\";\n        foreach\
    \ (char c in charArray) {\n            word += c;\n        }\n        char[] charArray2\
    \ = word.ToCharArray();\n        Array.Sort(charArray2);\n        bool isPrime\
    \ = true;\n        bool isPrime2 = true;\n        bool isPrime3 = true;\n    \
    \    bool isPrime4 = true;\n        bool isPrime5 = true;\n        bool isPrime6\
    \ = true;\n        bool isPrime7 = true;\n        bool isPrime8 = true;\n    \
    \    bool isPrime9 = true;\n        bool isPrime10 = true;\n        bool isPrime11\
    \ = true;\n        bool isPrime12 = true;\n        bool isPrime13 = true;\n  \
    \      bool isPrime14 = true;\n        bool isPrime15 = true;\n        bool isPrime16\
    \ = true;\n        bool isPrime17 = true;\n        bool isPrime18 = true;\n  \
    \      bool isPrime19 = true;\n        bool isPrime20 = true;\n        bool isPrime21\
    \ = true;\n        bool isPrime22 = true;\n        bool isPrime23 = true;\n  \
    \      bool isPrime24 = true;\n        bool isPrime25 = true;\n        bool isPrime26\
    \ = true;\n        bool isPrime27 = true;\n        bool isPrime28 = true;\n  \
    \      bool isPrime29 = true;\n        bool isPrime30 = true;\n        bool isPrime31\
    \ = true;\n        bool isPrime32 = true;\n        bool isPrime33 = true;\n  \
    \      bool isPrime34 = true;\n        bool isPrime35 = true;\n        bool isPrime36\
    \ = true;\n        bool isPrime37 = true;\n        bool isPrime38 = true;\n  \
    \      bool isPrime39 = true;\n        bool isPrime40 = true;\n        bool isPrime41\
    \ = true;\n        bool isPrime42 = true;\n        bool isPrime43 = true;\n  \
    \      bool isPrime44 = true;\n        bool isPrime45 = true;\n        bool isPrime46\
    \ = true;\n        bool isPrime47 = true;\n        bool isPrime48 = true;\n  \
    \      bool isPrime49 = true;\n        bool isPrime50 = true;\n        bool isPrime51\
    \ = true;\n        bool isPrime52 = true;\n        bool isPrime53 = true;\n  \
    \      bool isPrime54 = true;\n        bool isPrime55 = true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpid8ill_9.cs(24,16): warning CS0219: The variable ''result'' is assigned
    but its value is never used

    /tmp/tmpid8ill_9.cs(33,14): warning CS0219: The variable ''isPrime'' is assigned
    but its value is never used

    /tmp/tmpid8ill_9.cs(34,14): warning CS0219: The variable ''isPrime2'' is assigned
    but its value is never used

    /tmp/tmpid8ill_9.cs(35,14): warning CS0219: The variable ''isPrime3'' is assigned
    but its value is never used

    /tmp/tmpid8ill_9.cs(36,14): warning CS0219: The variable ''isPrime4'' is assigned
    but its value is never used

    /tmp/tmpid8ill_9.cs(37,14): warning CS0219: The variable ''isPrime5'' is assigned
    but its value is never used

    /tmp/tmpid8ill_9.cs(38,14): warning CS0219: The variable ''isPrime6'' is assigned
    but its value is never used

    /tmp/tmpid8ill_9.cs(39,14): warning CS0219: The variable ''isPrime7'' is assigned
    but its value is never used

    /tmp/tmpid8ill_9.cs(40,14): warning CS0219: The variable ''isPrime8'' is assigned
    but its value is never used

    /tmp/tmpid8ill_9.cs(41,14): warning CS0219: The variable ''isPrime9'' is assigned
    but its value is never used

    /tmp/tmpid8ill_9.cs(42,14): warning CS0219: The variable ''isPrime10'' is assigned
    but its value is never used

    /tmp/tmpid8ill_9.cs(43,14): warning CS0219: The variable ''isPrime11'' is assigned
    but its value is never used

    /tmp/tmpid8ill_9.cs(44,14): warning CS0219: The variable ''isPrime12'' is assigned
    but its value is never used

    /tmp/tmpid8ill_9.cs(45,14): warning CS0219: The variable ''isPrime13'' is assigned
    but its value is never used

    /tmp/tmpid8ill_9.cs(46,14): warning CS0219: The variable ''isPrime14'' is assigned
    but its value is never used

    /tmp/tmpid8ill_9.cs(47,14): warning CS0219: The variable ''isPrime15'' is assigned
    but its value is never used

    /tmp/tmpid8ill_9.cs(48,14): warning CS0219: The variable ''isPrime16'' is assigned
    but its value is never used

    /tmp/tmpid8ill_9.cs(49,14): warning CS0219: The variable ''isPrime17'' is assigned '
  timestamp: 1659794009
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)\
    \ {\n            temp = c + temp;\n        }\n        char[] charArray = temp.ToCharArray();\n\
    \        Array.Sort(charArray);\n        foreach (char c in charArray) {\n   \
    \         if (charArray.Contains(c)) {\n                isPrime = false;\n   \
    \         }\n        }\n        if (isPrime) {\n            int count = 0;\n \
    \           foreach (char c in charArray) {\n                if (charArray.Contains(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    int i = 2;\n            while (count != i) {\n                i++;\n    \
    \        }\n            foreach (char c in charArray) {\n                if (charArray.Contains(c))\
    \ {\n                    result += \" \" + c;\n                }\n           \
    \ }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e6d58e3271744ca9e1e9c12371c3742>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e6d58e3271744ca9e1e9c12371c3742>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794010
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string words = sentence.Split(' ');\n\
    \        List<int> primes = new List<int>();\n        foreach (string word in\
    \ words) {\n            int length = word.Length;\n            int prime = 1;\n\
    \            while (prime * prime <= length) {\n                if (length ==\
    \ prime * prime) {\n                    primes.Add(prime);\n                 \
    \   break;\n                }\n                prime++;\n            }\n     \
    \   }\n        foreach (int prime in primes) {\n            string temp = sentence.Substring(0,\
    \ sentence.IndexOf(\" \", 0));\n            int count = 0;\n            while\
    \ (temp.Length > 0) {\n                if (temp.Length % prime == 0) {\n     \
    \               count++;\n                }\n                temp = temp.Substring(1);\n\
    \            }\n            if (count == 0) {\n                result += \" \"\
    \ + word;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_oclonff.cs(25,24): error CS0029: Cannot implicitly convert type ''string[]''
    to ''string''

    /tmp/tmp_oclonff.cs(27,9): error CS0030: Cannot convert type ''char'' to ''string''

    /tmp/tmp_oclonff.cs(48,33): error CS0103: The name ''word'' does not exist in
    the current context

    '
  timestamp: 1659794010
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                isPrime\
    \ = false;\n            }\n        }\n        char[] charArray = word.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in charArray)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                primes.Add(n);\n            }\n        }\n        primes.Sort();\n\
    \        foreach (int prime in primes) {\n            if (isPrime) {\n       \
    \         for (int i = 0; i < charArray.Length; i++) {\n                    if\
    \ (charArray[i] == ' ') {\n                        charArray[i] = '0';\n     \
    \               }\n                }\n                string s = string.Join(\"\
    \", charArray);\n                string t = s.Replace(\" \", string.Empty);\n\
    \                string u = t.Replace(\"0\", string.Empty);\n                if\
    \ (u.Length == prime) {\n                    result += u;\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <731df9e3fedc4f139dad1e68a7bc4ffc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <731df9e3fedc4f139dad1e68a7bc4ffc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794010
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        bool isPrime = true;\n        string temp\
    \ = sentence;\n        string temp2 = \"\";\n        foreach (char c in temp)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                isPrime = false;\n            }\n        }\n        if (isPrime)\
    \ {\n            int length = temp.Length;\n            int length2 = temp2.Length;\n\
    \            int count = 0;\n            while (count < length) {\n          \
    \      for (int i = count; i < length2; i++) {\n                    if (temp[i]\
    \ == temp2[i]) {\n                        count++;\n                    }\n  \
    \              }\n                result += temp[count];\n                count++;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <71746bdfd3a146b485ddd306968621ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <71746bdfd3a146b485ddd306968621ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794010
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            if (IsPrime(length))\n\
    \            {\n                result += \" \" + word;\n            }\n     \
    \   }\n        return result.Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfc8pfp28.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794009
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            int prime\
    \ = 1;\n            while (prime * prime <= length)\n            {\n         \
    \       if (length == prime)\n                {\n                    result +=\
    \ word;\n                    break;\n                }\n                if (length\
    \ % prime == 0)\n                {\n                    length = (length / prime)\
    \ + 1;\n                }\n                else\n                {\n         \
    \           length = (length / prime) + 1;\n                }\n              \
    \  prime++;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <129c4a7882974d948d82f632dc9b1619>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <129c4a7882974d948d82f632dc9b1619>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794010
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                primes.Add(n);\n            }\n        }\n        primes.Sort();\n\
    \        foreach (int n in primes) {\n            string s = \"\";\n         \
    \   for (int i = 0; i < n; i++) {\n                s += chars[i];\n          \
    \  }\n            result += s;\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.WordsInSentence (System.String sentence)\
    \ [0x0007b] in <2844355c95f44fa294ff39b726625fc7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <2844355c95f44fa294ff39b726625fc7>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.WordsInSentence (System.String sentence) [0x0007b]\
    \ in <2844355c95f44fa294ff39b726625fc7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <2844355c95f44fa294ff39b726625fc7>:0 \n"
  stdout: ''
  timestamp: 1659794010
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)\
    \ {\n            if (char.IsLetter(c)) {\n                word += c;\n       \
    \     } else {\n                temp = word;\n                word = \"\";\n \
    \               result += temp;\n                result += \" \";\n          \
    \  }\n        }\n        temp = word;\n        word = \"\";\n        result +=\
    \ temp;\n        result += \" \";\n        foreach (char c in sentence) {\n  \
    \          if (char.IsLetter(c)) {\n                word += c;\n            }\
    \ else {\n                temp = word;\n                word = \"\";\n       \
    \         result += temp;\n                result += \" \";\n            }\n \
    \       }\n        temp = word;\n        word = \"\";\n        result += temp;\n\
    \        result += \" \";\n        foreach (char c in sentence) {\n          \
    \  if (char.IsLetter(c)) {\n                word += c;\n            } else {\n\
    \                temp = word;\n                word = \"\";\n                result\
    \ += temp;\n                result += \" \";\n            }\n        }\n     \
    \   temp = word;\n        word = \"\";\n        result += temp;\n        result\
    \ += \" \";\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                temp =\
    \ word;\n                word = \"\";\n                result += temp;\n     \
    \           result += \" \";\n            }\n        }\n        temp = word;\n\
    \        word = \"\";\n        result += temp;\n        result += \" \";\n   \
    \     foreach (char c in sentence) {\n            if (char.IsLetter(c)) {\n  \
    \              word += c;\n            } else {\n                temp = word;\n\
    \                word = \"\";\n                result += temp;\n             \
    \   result += \" \";\n            }\n        }\n        temp = word;\n       \
    \ word = \"\";\n        result += temp;\n        result += \" \";\n        foreach\
    \ (char c in sentence) {\n            if (char.IsLetter(c)) {\n              \
    \  word += c;\n            } else {\n                temp = word;\n          \
    \      word = \"\";\n                result += temp;\n                result +=\
    \ \" \";\n            }\n        }\n        temp = word;\n        word = \"\"\
    ;\n        result += temp;\n        result += \" \";\n        foreach (char c\
    \ in sentence) {\n            if (char.IsLetter(c)) {\n                word +=\
    \ c;\n            } else {\n                temp = word;\n                word\
    \ = \"\";\n                result += temp;\n                result += \" \";\n\
    \            }\n        }\n        temp = word;\n        word = \"\";\n      \
    \  result += temp;\n        result += \" \";\n        foreach (char c in sentence)\
    \ {\n            if (char.IsLetter(c)) {\n                word += c;\n       \
    \     } else {\n                temp = word;\n                word = \"\";\n \
    \               result += temp;\n                result += \" \";\n          \
    \  }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj_ol4t2n.cs(136,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpj_ol4t2n.cs(146,2): error CS1513: } expected

    '
  timestamp: 1659794009
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)\
    \ {\n            isPrime = true;\n            foreach (char d in sentence.ToCharArray())\
    \ {\n                if (c == d) {\n                    isPrime = false;\n   \
    \                 break;\n                }\n            }\n            if (isPrime)\
    \ {\n                result += \" \" + word;\n                word = \"\";\n \
    \           } else {\n                word += c;\n            }\n        }\n \
    \       result += \" \" + word;\n        return result.Trim();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <89cc7a3982c24f60b8576017eac5c277>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <89cc7a3982c24f60b8576017eac5c277>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794010
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (char c in sentence) {\n            if (char.IsLetter(c)) {\n\
    \                words.Add(c.ToString());\n            }\n        }\n        foreach\
    \ (string word in words) {\n            int length = word.Length;\n          \
    \  if (length == 1) {\n                result += word;\n            } else {\n\
    \                for (int i = 2; i <= Math.Sqrt(length); i++) {\n            \
    \        if (length % i == 0) {\n                        int count = 0;\n    \
    \                    for (int j = 0; j < word.Length; j++) {\n               \
    \             if (word[j] == word[j]) {\n                                count++;\n\
    \                            }\n                        }\n                  \
    \      if (count == i) {\n                            result += word;\n      \
    \                      break;\n                        }\n                   \
    \ }\n                }\n            }\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <729e8d48050f47c3863c7f1125136c84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <729e8d48050f47c3863c7f1125136c84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794010
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                primes.Add(n);\n            }\n        }\n        primes.Sort();\n\
    \        foreach (int p in primes) {\n            string s = \"\";\n         \
    \   for (int i = 0; i < p; i++) {\n                s += chars[i];\n          \
    \  }\n            result += s;\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.WordsInSentence (System.String sentence)\
    \ [0x0007b] in <ac244d0c91d740e1aad0ecab4548df81>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <ac244d0c91d740e1aad0ecab4548df81>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.WordsInSentence (System.String sentence) [0x0007b]\
    \ in <ac244d0c91d740e1aad0ecab4548df81>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <ac244d0c91d740e1aad0ecab4548df81>:0 \n"
  stdout: ''
  timestamp: 1659794010
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        bool isPrime = true;\n        int n = sentence.Length;\n  \
    \      for (int i = 0; i < n; i++) {\n            word = sentence.Substring(i,\
    \ 1);\n            if (isPrime) {\n                temp = word + \" \";\n    \
    \            isPrime = false;\n            }\n            else if (IsPrime(word))\
    \ {\n                temp = temp + word + \" \";\n                isPrime = true;\n\
    \            }\n            else {\n                temp = temp + word + \" \"\
    ;\n            }\n        }\n        result = temp.Trim();\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu0v14tfz.cs(35,22): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794010
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        char[] chars = sentence.ToCharArray();\n        Array.Sort(chars);\n\
    \        foreach (char c in chars) {\n            if (chars.IndexOf(c) == 0) {\n\
    \                result += \" \" + word;\n                word = \"\";\n     \
    \       } else {\n                word += c;\n            }\n        }\n     \
    \   result += \" \" + word;\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb5xq5uxo.cs(30,23): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    /tmp/tmpb5xq5uxo.cs(26,16): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    '
  timestamp: 1659794010
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in sentence) {\n            isPrime = true;\n\
    \            int length = Convert.ToInt32(c);\n            for (int i = 2; i <=\
    \ Math.Sqrt(length); i++) {\n                if (length % i == 0) {\n        \
    \            isPrime = false;\n                    break;\n                }\n\
    \            }\n            if (isPrime) {\n                result += \" \" +\
    \ word;\n                word = \"\";\n            }\n            else {\n   \
    \             word += c;\n            }\n        }\n        return result.Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac998de2324b42889e19f5e538507e2b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac998de2324b42889e19f5e538507e2b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794010
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in sentence) {\n            isPrime = true;\n\
    \            int n = Convert.ToInt32(c);\n            for (int i = 2; i <= Math.Sqrt(n);\
    \ i++) {\n                if (n % i == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime) {\n                result += word;\n                word = \"\";\n\
    \            } else {\n                word += c;\n            }\n        }\n\
    \        result += word;\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8fec0ba319d441e8971c2fdc2b86e08f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8fec0ba319d441e8971c2fdc2b86e08f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794010
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            if (IsPrime(length))\n\
    \            {\n                result += word;\n            }\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n  \
    \  Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6zlmot9f.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794007
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)\
    \ {\n            word = word + c;\n        }\n        char[] charArray = word.ToCharArray();\n\
    \        Array.Sort(charArray);\n        foreach (char c in charArray) {\n   \
    \         temp = temp + c;\n        }\n        char[] charArray2 = temp.ToCharArray();\n\
    \        Array.Sort(charArray2);\n        foreach (char c in charArray2) {\n \
    \           isPrime = isPrime && IsPrime(c);\n        }\n        if (isPrime)\
    \ {\n            foreach (char c in charArray2) {\n                result += c;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnbhgo0wm.cs(39,34): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794010
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            int d = (int)Math.Sqrt(n);\n\
    \            while (d % 2 == 0) {\n                d /= 2;\n            }\n  \
    \          if (n % 2 == 0) {\n                primes.Add(n);\n            }\n\
    \        }\n        foreach (int prime in primes) {\n            int count = 0;\n\
    \            foreach (char c in chars) {\n                if (Convert.ToInt32(c)\
    \ == prime) {\n                    count++;\n                }\n            }\n\
    \            if (count == chars.Length) {\n                result += \" \" + Convert.ToString(prime);\n\
    \            }\n        }\n        return result.Trim();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <07d97fa8523240958002c78e0e1a035a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <07d97fa8523240958002c78e0e1a035a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794010
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n\
    \        Array.Sort(charArray);\n        foreach (char c in charArray) {\n   \
    \         if (IsPrimeNumber(c)) {\n                result += \" \" + c;\n    \
    \        }\n        }\n        return result.Trim();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4cgpz0tr.cs(28,17): error CS0103: The name ''IsPrimeNumber'' does not
    exist in the current context

    '
  timestamp: 1659794010
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (string word in sentence.Split(' '))\n        {\n           \
    \ words.Add(word);\n        }\n        foreach (string word in words)\n      \
    \  {\n            int n = Convert.ToInt32(word);\n            if (IsPrime(n))\n\
    \            {\n                result += word;\n            }\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n  \
    \  Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppyrtz28o.cs(33,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794010
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in charArray)\
    \ {\n            int prime = PrimeNumber(c);\n            if (primes.Contains(prime))\
    \ {\n                primes.Remove(prime);\n            }\n            else {\n\
    \                primes.Add(prime);\n            }\n        }\n        foreach\
    \ (int prime in primes) {\n            result += \" \" + charArray[prime];\n \
    \       }\n        return result.Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa2vz4_pe.cs(28,25): error CS0103: The name ''PrimeNumber'' does not exist
    in the current context

    '
  timestamp: 1659794010
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                isPrime\
    \ = false;\n            }\n        }\n        char[] charArray = word.ToCharArray();\n\
    \        Array.Sort(charArray);\n        foreach (char c in charArray) {\n   \
    \         if (char.IsLetter(c)) {\n                for (int i = 2; i <= Math.Sqrt(char.IsLetter(c))\
    \ && !isPrime; i++) {\n                    if (char.IsLetter(c)) {\n         \
    \               isPrime = true;\n                        break;\n            \
    \        }\n                }\n            }\n        }\n        foreach (char\
    \ c in charArray) {\n            if (char.IsLetter(c)) {\n                for\
    \ (int i = 2; i <= Math.Sqrt(char.IsLetter(c)) && !isPrime; i++) {\n         \
    \           if (char.IsLetter(c)) {\n                        isPrime = true;\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        foreach (char c in charArray) {\n           \
    \ if (char.IsLetter(c)) {\n                for (int i = 2; i <= Math.Sqrt(char.IsLetter(c))\
    \ && !isPrime; i++) {\n                    if (char.IsLetter(c)) {\n         \
    \               isPrime = true;\n                        break;\n            \
    \        }\n                }\n            }\n        }\n        foreach (char\
    \ c in charArray) {\n            if (char.IsLetter(c)) {\n                for\
    \ (int i = 2; i <= Math.Sqrt(char.IsLetter(c)) && !isPrime; i++) {\n         \
    \           if (char.IsLetter(c)) {\n                        isPrime = true;\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        foreach (char c in charArray) {\n           \
    \ if (char.IsLetter(c)) {\n                for (int i = 2; i <= Math.Sqrt(char.IsLetter(c))\
    \ && !isPrime; i++) {\n                    if (char.IsLetter(c)) {\n         \
    \               isPrime = true;\n                        break;\n            \
    \        }\n                }\n            }\n        }\n        foreach (char\
    \ c in charArray) {\n            if (char.IsLetter(c)) {\n                for\
    \ (int i = 2; i <= Math.Sqrt(char.IsLetter(c)) && !isPrime; i++) {\n         \
    \           if (char.IsLetter(c)) {\n                        isPrime = true;\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        foreach (char c in charArray) {\n           \
    \ if (char.IsLetter(c)) {\n                for (int i = 2; i <= Math.Sqrt(char.IsLetter(c))\
    \ && !isPrime; i++) {\n                    if (char.IsLetter(c)) {\n         \
    \               isPrime = true;\n                        break;\n            \
    \        }\n                }\n            }\n        }\n        foreach (char\
    \ c in charArray) {\n            if (\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkzjay5hc.cs(107,17): error CS1525: Invalid expression term ''}''

    /tmp/tmpkzjay5hc.cs(107,17): error CS1026: ) expected

    /tmp/tmpkzjay5hc.cs(107,17): error CS1002: ; expected

    /tmp/tmpkzjay5hc.cs(109,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpkzjay5hc.cs(119,2): error CS1513: } expected

    '
  timestamp: 1659794010
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        bool isPrime = true;\n        string word\
    \ = \"\";\n        foreach (char c in sentence) {\n            isPrime = true;\n\
    \            int length = c.ToString().Length;\n            for (int i = 2; i\
    \ <= length / 2; i++) {\n                if (length % i == 0) {\n            \
    \        isPrime = false;\n                    break;\n                }\n   \
    \         }\n            if (isPrime) {\n                word += c;\n        \
    \    }\n        }\n        foreach (char c in word) {\n            result += c;\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <64714f292ca74244b9c922be21a203c6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <64714f292ca74244b9c922be21a203c6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794010
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        foreach (char\
    \ c in sentence) {\n            if (char.IsLetter(c)) {\n                word\
    \ += c;\n            }\n        }\n        char[] chars = word.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ int count = 0;\n            int start = 0;\n            int end = 0;\n     \
    \       while (end < chars.Length) {\n                start = end;\n         \
    \       end = start + 1;\n                while (end < chars.Length && chars[end]\
    \ == c) {\n                    end++;\n                }\n                if (end\
    \ - start > 1) {\n                    for (int i = start; i <= end; i++) {\n \
    \                       if (chars[i] == c) {\n                            count++;\n\
    \                        }\n                    }\n                    if (count\
    \ == 2) {\n                        result += chars[start];\n                 \
    \   }\n                }\n            }\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.WordsInSentence (System.String sentence)\
    \ [0x000c1] in <a38fc29013234f49bcccec4e370dca9f>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <a38fc29013234f49bcccec4e370dca9f>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.WordsInSentence (System.String sentence) [0x000c1]\
    \ in <a38fc29013234f49bcccec4e370dca9f>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <a38fc29013234f49bcccec4e370dca9f>:0 \n"
  stdout: ''
  timestamp: 1659794010
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> set = new HashSet<string>();\n        foreach (char c\
    \ in chars) {\n            if (chars.Length > 0) {\n                string temp\
    \ = chars.Aggregate((x, y) => x + \" \" + y);\n                set.Add(temp);\n\
    \                chars = chars.Where(x => x != c).ToArray();\n            }\n\
    \        }\n        foreach (string s in set) {\n            int count = 0;\n\
    \            foreach (char c in s.ToCharArray()) {\n                count++;\n\
    \            }\n            if (count == 2) {\n                result += s;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7jx8oi6q.cs(29,57): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmp7jx8oi6q.cs(29,57): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659794010
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        int[] primes = new int[chars.Length];\n        bool isPrime = true;\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            primes[i] = true;\n\
    \        }\n        for (int i = 0; i < chars.Length; i++) {\n            int\
    \ count = 0;\n            for (int j = 0; j < chars.Length; j++) {\n         \
    \       if (chars[i] == chars[j]) {\n                    count++;\n          \
    \      }\n            }\n            if (count > 1) {\n                isPrime\
    \ = false;\n            }\n            if (isPrime) {\n                primes[i]\
    \ = false;\n            }\n        }\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (primes[i]) {\n                result += chars[i];\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp64nngm7e.cs(29,25): error CS0029: Cannot implicitly convert type ''bool''
    to ''int''

    /tmp/tmp64nngm7e.cs(42,29): error CS0029: Cannot implicitly convert type ''bool''
    to ''int''

    /tmp/tmp64nngm7e.cs(46,17): error CS0029: Cannot implicitly convert type ''int''
    to ''bool''

    '
  timestamp: 1659794010
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                primes.Add(n);\n            }\n        }\n        primes.Sort();\n\
    \        foreach (int n in primes) {\n            string temp = sentence.Substring(0,\
    \ n);\n            result += temp + \" \";\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length\
    \ must refer to a location within the string.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.WordsInSentence (System.String sentence) [0x0006e] in <4fe5c312344844c8893b657dbea932cb>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <4fe5c312344844c8893b657dbea932cb>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ and length must refer to a location within the string.\nParameter name: length\n\
    \  at System.String.Substring (System.Int32 startIndex, System.Int32 length) [0x0004c]\
    \ in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.WordsInSentence (System.String\
    \ sentence) [0x0006e] in <4fe5c312344844c8893b657dbea932cb>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4fe5c312344844c8893b657dbea932cb>:0 \n"
  stdout: ''
  timestamp: 1659794010
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            primes.Add(n);\n   \
    \     }\n        primes.Sort();\n        foreach (int p in primes) {\n       \
    \     int count = 0;\n            foreach (char c in chars) {\n              \
    \  if (Convert.ToInt32(c) == p) {\n                    count++;\n            \
    \    }\n            }\n            if (count == 2) {\n                result +=\
    \ \" \" + Convert.ToString(p);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <80aed7ad446744fabd9797b2b79747db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <80aed7ad446744fabd9797b2b79747db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794010
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        bool isPrime = true;\n        bool isFirst = true;\n      \
    \  bool isLast = true;\n        bool isFirstOrLast = true;\n        bool isFirstOrLastOrPrime\
    \ = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            }\n        }\n        foreach (char\
    \ c in word) {\n            temp = c + temp;\n        }\n        temp = temp.ToUpper();\n\
    \        foreach (char c in temp) {\n            if (char.IsLetter(c)) {\n   \
    \             isPrime = true;\n                for (int i = 1; i < word.Length;\
    \ i++) {\n                    if (word.Substring(i, 1).Equals(c)) {\n        \
    \                isPrime = false;\n                    }\n                }\n\
    \                if (isPrime) {\n                    if (isFirst) {\n        \
    \                result += c;\n                        isFirst = false;\n    \
    \                } else if (isLast) {\n                        result += c;\n\
    \                        isLast = false;\n                    } else if (isFirstOrLast)\
    \ {\n                        result += c;\n                        isFirstOrLast\
    \ = false;\n                    } else if (isFirstOrLastOrPrime) {\n         \
    \               result += c;\n                        isFirstOrLastOrPrime = false;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <33031c17221749c3977af4697100b65d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <33031c17221749c3977af4697100b65d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794011
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in sentence) {\n            isPrime = true;\n\
    \            int n = Convert.ToInt32(c);\n            for (int i = 2; i <= n /\
    \ 2; i++) {\n                if (n % i == 0) {\n                    isPrime =\
    \ false;\n                    break;\n                }\n            }\n     \
    \       if (isPrime) {\n                result += \" \" + word;\n            \
    \    word = \"\";\n            }\n            else {\n                word +=\
    \ c;\n            }\n        }\n        return result.Trim();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <146a2268031e456d9f00c368d60ebfb4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <146a2268031e456d9f00c368d60ebfb4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794011
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            if (length\
    \ == 1)\n            {\n                result += word;\n            }\n     \
    \       else if (length == 2 && IsPrime(length))\n            {\n            \
    \    result += word;\n            }\n            else if (length == 3 && IsPrime(length))\n\
    \            {\n                result += word;\n            }\n            else\
    \ if (length == 4 && IsPrime(length))\n            {\n                result +=\
    \ word;\n            }\n            else if (length == 5 && IsPrime(length))\n\
    \            {\n                result += word;\n            }\n            else\
    \ if (length == 6 && IsPrime(length))\n            {\n                result +=\
    \ word;\n            }\n            else if (length == 7 && IsPrime(length))\n\
    \            {\n                result += word;\n            }\n            else\
    \ if (length == 8 && IsPrime(length))\n            {\n                result +=\
    \ word;\n            }\n            else if (length == 9 && IsPrime(length))\n\
    \            {\n                result += word;\n            }\n            else\
    \ if (length == 10 && IsPrime(length))\n            {\n                result\
    \ += word;\n            }\n            else if (length == 11 && IsPrime(length))\n\
    \            {\n                result += word;\n            }\n            else\
    \ if (length == 12 && IsPrime(length))\n            {\n                result\
    \ += word;\n            }\n            else if (length == 13 && IsPrime(length))\n\
    \            {\n                result += word;\n            }\n            else\
    \ if (length == 14 && IsPrime(length))\n            {\n                result\
    \ += word;\n            }\n            else if (length == 15 && IsPrime(length))\n\
    \            {\n                result += word;\n            }\n            else\
    \ if (length == 16 && IsPrime(length))\n            {\n                result\
    \ += word;\n            }\n            else if (length == 17 && IsPrime(length))\n\
    \            {\n                result += word;\n            }\n            else\
    \ if (length == 18 && IsPrime(length))\n            {\n                result\
    \ += word;\n            }\n            else if (length == 19 && IsPrime(length))\n\
    \            {\n                result += word;\n            }\n            else\
    \ if (length == 20 && IsPrime(length))\n            {\n                result\
    \ += word;\n            }\n            else if (length == 21 && IsPrime(length))\n\
    \            {\n                result += word;\n            }\n            else\
    \ if (length == 22 && IsPrime(length))\n            {\n                result\
    \ += word;\n            }\n            else if (length == 23 && IsPrime(length))\n\
    \            {\n                result += word;\n            }\n            else\
    \ if (\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_duvkbht.cs(120,22): error CS1525: Invalid expression term ''}''

    /tmp/tmp_duvkbht.cs(120,22): error CS1026: ) expected

    /tmp/tmp_duvkbht.cs(120,22): error CS1002: ; expected

    /tmp/tmp_duvkbht.cs(122,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp_duvkbht.cs(132,2): error CS1513: } expected

    '
  timestamp: 1659794010
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        char[] chars = sentence.ToCharArray();\n        List<int> primes\
    \ = new List<int>();\n        foreach (char c in chars) {\n            primes.Add(c);\n\
    \        }\n        primes.Sort();\n        foreach (int prime in primes) {\n\
    \            temp = temp + \" \" + word;\n            word = \"\";\n         \
    \   for (int i = 0; i < prime; i++) {\n                word += chars[i];\n   \
    \         }\n            if (IsPrime(Convert.ToInt32(temp))) {\n             \
    \   result += \" \" + word;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr7s9tomy.cs(39,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794010
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        bool isPrime = true;\n        string word\
    \ = \"\";\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                isPrime\
    \ = false;\n            }\n        }\n        char[] charArray = word.ToCharArray();\n\
    \        int[] primes = new int[charArray.Length];\n        primes[0] = 2;\n \
    \       for (int i = 1; i < charArray.Length; i++) {\n            primes[i] =\
    \ 1;\n            for (int j = i; j < charArray.Length; j++) {\n             \
    \   if (charArray[i] == charArray[j]) {\n                    primes[i]++;\n  \
    \                  break;\n                }\n            }\n        }\n     \
    \   for (int i = 0; i < charArray.Length; i++) {\n            if (primes[i] ==\
    \ charArray.Length) {\n                result += charArray[i];\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a1068ccc9ab24ac0865468abe8584860>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a1068ccc9ab24ac0865468abe8584860>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794011
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string temp = sentence;\n        char[]\
    \ chars = temp.ToCharArray();\n        List<int> primes = new List<int>();\n \
    \       foreach (char c in chars) {\n            int n = Convert.ToInt32(c);\n\
    \            bool isPrime = true;\n            for (int i = 2; i <= Math.Sqrt(n);\
    \ i++) {\n                if (n % i == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime) {\n                primes.Add(n);\n            }\n        }\n    \
    \    foreach (int p in primes) {\n            temp = temp.Replace(p.ToString(),\
    \ \"\");\n        }\n        foreach (char c in chars) {\n            int n =\
    \ Convert.ToInt32(c);\n            bool isPrime = true;\n            for (int\
    \ i = 2; i <= Math.Sqrt(n); i++) {\n                if (n % i == 0) {\n      \
    \              isPrime = false;\n                    break;\n                }\n\
    \            }\n            if (isPrime) {\n                result += c.ToString();\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a81fadd634d44fa970b05cac43681cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a81fadd634d44fa970b05cac43681cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794011
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string newWord\
    \ = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)\
    \ {\n            if (char.IsLetter(c)) {\n                word += c;\n       \
    \     } else {\n                isPrime = false;\n            }\n        }\n \
    \       foreach (char c in word) {\n            int n = Convert.ToInt32(c);\n\
    \            int count = 0;\n            for (int i = 2; i <= Math.Sqrt(n); i++)\
    \ {\n                if (n % i == 0) {\n                    count++;\n       \
    \         }\n            }\n            if (count == 2) {\n                newWord\
    \ += c;\n            }\n        }\n        if (isPrime) {\n            result\
    \ += newWord;\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a32015b40e69466e8c198d6ee2651622>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a32015b40e69466e8c198d6ee2651622>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794011
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (char c in sentence) {\n            if (char.IsLetter(c)) {\n\
    \                words.Add(c);\n            }\n        }\n        foreach (string\
    \ word in words) {\n            int length = word.Length;\n            if (length\
    \ == 1) {\n                result += word;\n            }\n            else if\
    \ (length == 2 && word[0] == 'a' && word[1] == 's') {\n                result\
    \ += word;\n            }\n            else if (length == 2 && word[0] == 'a'\
    \ && word[1] == 'd') {\n                result += word;\n            }\n     \
    \       else if (length == 2 && word[0] == 'a' && word[1] == 'e') {\n        \
    \        result += word;\n            }\n            else if (length == 2 && word[0]\
    \ == 'a' && word[1] == 'i') {\n                result += word;\n            }\n\
    \            else if (length == 2 && word[0] == 'a' && word[1] == 'o') {\n   \
    \             result += word;\n            }\n            else if (length == 2\
    \ && word[0] == 'a' && word[1] == 'u') {\n                result += word;\n  \
    \          }\n            else if (length == 2 && word[0] == 'a' && word[1] ==\
    \ 'n') {\n                result += word;\n            }\n            else if\
    \ (length == 2 && word[0] == 'a' && word[1] == 'g') {\n                result\
    \ += word;\n            }\n            else if (length == 2 && word[0] == 'a'\
    \ && word[1] == 'h') {\n                result += word;\n            }\n     \
    \       else if (length == 2 && word[0] == 'a' && word[1] == 't') {\n        \
    \        result += word;\n            }\n            else if (length == 2 && word[0]\
    \ == 'a' && word[1] == 's') {\n                result += word;\n            }\n\
    \            else if (length == 2 && word[0] == 'a' && word[1] == 'w') {\n   \
    \             result += word;\n            }\n            else if (length == 2\
    \ && word[0] == 'a' && word[1] == 'm') {\n                result += word;\n  \
    \          }\n            else if (length == 2 && word[0] == 'a' && word[1] ==\
    \ 'e') {\n                result += word;\n            }\n            else if\
    \ (length == 2 && word[0] == 'a' && word[1] == 'r') {\n                result\
    \ += word;\n            }\n            else if (length == 2 && word[0] == 'a'\
    \ && word[1] == 'm') {\n                result += word;\n            }\n     \
    \       else if (length == 2 && word[0] == 'a' && word[1] == 'i') {\n        \
    \        result += word;\n            }\n            else if (length == 2 && word[0]\
    \ == 'a' && word[1] == 'n') {\n                result += word;\n            }\n\
    \            else if (length == 2 && word[0] == 'a' && word[1] == 'g') {\n   \
    \             result += word;\n            }\n            else if (length == 2\
    \ && word[0] == 'a' && word[1] == 'h') {\n                result += word;\n  \
    \          }\n            else if (length == 2 && word[0] == '\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbbtozr4i.cs(96,48): error CS1010: Newline in constant

    /tmp/tmpbbtozr4i.cs(96,48): error CS1011: Empty character literal

    /tmp/tmpbbtozr4i.cs(96,49): error CS1026: ) expected

    /tmp/tmpbbtozr4i.cs(96,49): error CS1525: Invalid expression term ''}''

    /tmp/tmpbbtozr4i.cs(96,49): error CS1002: ; expected

    /tmp/tmpbbtozr4i.cs(98,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpbbtozr4i.cs(108,2): error CS1513: } expected

    '
  timestamp: 1659794010
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in sentence) {\n            isPrime = true;\n\
    \            int n = Convert.ToInt32(c);\n            for (int i = 2; i <= Math.Sqrt(n);\
    \ i++) {\n                if (n % i == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime) {\n                result += \" \" + word;\n                word =\
    \ \"\";\n            }\n            else {\n                word += c;\n     \
    \       }\n        }\n        return result.Trim();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <686db937ffc5461fac6b46991d6f10f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <686db937ffc5461fac6b46991d6f10f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794011
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ int n = Convert.ToInt32(c);\n            if (IsPrime(n)) {\n               \
    \ result += \" \" + c;\n            }\n        }\n        return result.Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbnw512qs.cs(29,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794009
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (string word in sentence.Split(' '))\n        {\n           \
    \ words.Add(word);\n        }\n        List<int> lengths = new List<int>();\n\
    \        foreach (string word in words)\n        {\n            int length = word.Length;\n\
    \            if (lengths.Contains(length))\n            {\n                lengths.Remove(length);\n\
    \            }\n            else\n            {\n                lengths.Add(length);\n\
    \            }\n        }\n        foreach (int length in lengths)\n        {\n\
    \            if (IsPrime(length))\n            {\n                result += \"\
    \ \" + words[lengths.IndexOf(length)];\n            }\n        }\n        return\
    \ result.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbfn17cse.cs(45,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794010
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (string word in sentence.Split(' '))\n        {\n           \
    \ words.Add(word);\n        }\n        foreach (string word in words)\n      \
    \  {\n            int length = word.Length;\n            if (length == 1)\n  \
    \          {\n                result += word;\n            }\n            else\
    \ if (length == 2 && IsPrime(length))\n            {\n                result +=\
    \ word;\n            }\n            else if (length == 3 && IsPrime(length))\n\
    \            {\n                result += word;\n            }\n            else\
    \ if (length == 4 && IsPrime(length))\n            {\n                result +=\
    \ word;\n            }\n            else if (length == 5 && IsPrime(length))\n\
    \            {\n                result += word;\n            }\n            else\
    \ if (length == 6 && IsPrime(length))\n            {\n                result +=\
    \ word;\n            }\n            else if (length == 7 && IsPrime(length))\n\
    \            {\n                result += word;\n            }\n            else\
    \ if (length == 8 && IsPrime(length))\n            {\n                result +=\
    \ word;\n            }\n            else if (length == 9 && IsPrime(length))\n\
    \            {\n                result += word;\n            }\n            else\
    \ if (length == 10 && IsPrime(length))\n            {\n                result\
    \ += word;\n            }\n            else if (length == 11 && IsPrime(length))\n\
    \            {\n                result += word;\n            }\n            else\
    \ if (length == 12 && IsPrime(length))\n            {\n                result\
    \ += word;\n            }\n            else if (length == 13 && IsPrime(length))\n\
    \            {\n                result += word;\n            }\n            else\
    \ if (length == 14 && IsPrime(length))\n            {\n                result\
    \ += word;\n            }\n            else if (length == 15 && IsPrime(length))\n\
    \            {\n                result += word;\n            }\n            else\
    \ if (length == 16 && IsPrime(length))\n            {\n                result\
    \ += word;\n            }\n            else if (length == 17 && IsPrime(length))\n\
    \            {\n                result += word;\n            }\n            else\
    \ if (length == 18 && IsPrime(length))\n            {\n                result\
    \ += word;\n            }\n            else if (length == 19 && IsPrime(length))\n\
    \            {\n                result += word;\n            }\n            else\
    \ if (length == 20 && IsPrime(length))\n            {\n                result\
    \ += word;\n            }\n            else if (length == 21 && IsPrime(length))\n\
    \            {\n                result += word;\n            }\n            else\
    \ if (length == 22 && IsPrime(length))\n            {\n                result\
    \ += word;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx8wcoaua.cs(122,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpx8wcoaua.cs(132,2): error CS1513: } expected

    '
  timestamp: 1659794010
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<string> words = new List<string>();\n        foreach (char c in\
    \ chars) {\n            if (char.IsLetter(c)) {\n                words.Add(c.ToString());\n\
    \            }\n        }\n        foreach (string word in words) {\n        \
    \    int n = Convert.ToInt32(word);\n            if (IsPrime(n)) {\n         \
    \       result += word;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpex2sxwjv.cs(34,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794011
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<string> words = new List<string>();\n        foreach (char c in\
    \ chars) {\n            if (char.IsLetter(c)) {\n                string word =\
    \ c.ToString();\n                words.Add(word);\n            }\n        }\n\
    \        foreach (string word in words) {\n            int length = word.Length;\n\
    \            if (length == 1) {\n                result += word;\n           \
    \ }\n            else if (length == 2 && word.StartsWith(\"a\") && word.EndsWith(\"\
    a\")) {\n                result += word;\n            }\n            else if (length\
    \ == 2 && word.StartsWith(\"a\") && word.EndsWith(\"e\")) {\n                result\
    \ += word;\n            }\n            else if (length == 2 && word.StartsWith(\"\
    e\") && word.EndsWith(\"a\")) {\n                result += word;\n           \
    \ }\n            else if (length == 2 && word.StartsWith(\"e\") && word.EndsWith(\"\
    e\")) {\n                result += word;\n            }\n            else if (length\
    \ == 3 && word.StartsWith(\"a\") && word.EndsWith(\"e\")) {\n                result\
    \ += word;\n            }\n            else if (length == 3 && word.StartsWith(\"\
    e\") && word.EndsWith(\"a\")) {\n                result += word;\n           \
    \ }\n            else if (length == 3 && word.StartsWith(\"e\") && word.EndsWith(\"\
    e\")) {\n                result += word;\n            }\n            else if (length\
    \ == 4 && word.StartsWith(\"a\") && word.EndsWith(\"e\")) {\n                result\
    \ += word;\n            }\n            else if (length == 4 && word.StartsWith(\"\
    e\") && word.EndsWith(\"a\")) {\n                result += word;\n           \
    \ }\n            else if (length == 4 && word.StartsWith(\"e\") && word.EndsWith(\"\
    e\")) {\n                result += word;\n            }\n            else if (length\
    \ == 5 && word.StartsWith(\"a\") && word.EndsWith(\"e\")) {\n                result\
    \ += word;\n            }\n            else if (length == 5 && word.StartsWith(\"\
    e\") && word.EndsWith(\"a\")) {\n                result += word;\n           \
    \ }\n            else if (length == 5 && word.StartsWith(\"e\") && word.EndsWith(\"\
    e\")) {\n                result += word;\n            }\n            else if (length\
    \ == 6 && word.StartsWith(\"a\") && word.EndsWith(\"e\")) {\n                result\
    \ += word;\n            }\n            else if (length == 6 && word.StartsWith(\"\
    e\") && word.EndsWith(\"a\")) {\n                result += word;\n           \
    \ }\n            else if (length == 6 && word.StartsWith(\"e\") && word.EndsWith(\"\
    e\")) {\n                result += word\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpocode98l.cs(84,31): error CS1002: ; expected

    /tmp/tmpocode98l.cs(86,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpocode98l.cs(96,2): error CS1513: } expected

    '
  timestamp: 1659794010
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            int prime\
    \ = 1;\n            while (prime < length)\n            {\n                if\
    \ (length%prime == 0)\n                {\n                    prime++;\n     \
    \           }\n                else\n                {\n                    length--;\n\
    \                }\n            }\n            result += word;\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n  \
    \  Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5494bfa80fd34e82b7ae533b3a18e5d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5494bfa80fd34e82b7ae533b3a18e5d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794011
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n\
    \        Array.Sort(charArray);\n        bool isPrime = true;\n        foreach\
    \ (char c in charArray) {\n            int n = Convert.ToInt32(c);\n         \
    \   if (n % 2 == 0) {\n                isPrime = false;\n            }\n     \
    \   }\n        if (isPrime) {\n            int n = charArray.Length;\n       \
    \     int count = 0;\n            int start = 0;\n            int end = n - 1;\n\
    \            while (start < end) {\n                while (start < end && charArray[start]\
    \ % 2 == 0) {\n                    start++;\n                }\n             \
    \   while (start < end && charArray[end] % 2 == 0) {\n                    end--;\n\
    \                }\n                if (start < end) {\n                    count++;\n\
    \                    int mid = (start + end) / 2;\n                    while (charArray[mid]\
    \ % 2 == 0) {\n                        mid++;\n                    }\n       \
    \             while (charArray[mid] % 3 == 0) {\n                        mid++;\n\
    \                    }\n                    if (mid == n) {\n                \
    \        result += charArray[start];\n                    }\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d896cf951c9a45efbc391aec15a17d84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d896cf951c9a45efbc391aec15a17d84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794011
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                temp =\
    \ word;\n                word = \"\";\n                result += temp;\n     \
    \       }\n        }\n        temp = word;\n        word = \"\";\n        result\
    \ += temp;\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <87862884129b4c399773a6215d749d2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <87862884129b4c399773a6215d749d2f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794011
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in charArray)\
    \ {\n            int prime = PrimeNumber(c);\n            if (prime > 0)\n   \
    \             primes.Add(prime);\n        }\n        foreach (int prime in primes)\
    \ {\n            string newWord = \"\";\n            foreach (char c in charArray)\
    \ {\n                if (PrimeNumber(c) == prime)\n                    newWord\
    \ += c;\n            }\n            result += newWord;\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8ztl0weo.cs(28,25): error CS0103: The name ''PrimeNumber'' does not exist
    in the current context

    /tmp/tmp8ztl0weo.cs(35,21): error CS0103: The name ''PrimeNumber'' does not exist
    in the current context

    '
  timestamp: 1659794011
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            int length = word.Length;\n            int primeNumber = 2;\n\
    \            while (primeNumber < length) {\n                if (IsPrime(primeNumber))\
    \ {\n                    result += \" \" + word.Substring(0, primeNumber);\n \
    \                   word = word.Substring(primeNumber);\n                    length--;\n\
    \                }\n                primeNumber++;\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpktleuduf.cs(39,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794011
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> set = new HashSet<string>();\n        foreach (char c\
    \ in chars) {\n            if (char.IsLetter(c)) {\n                string s =\
    \ c.ToString();\n                if (set.Contains(s)) {\n                    set.Remove(s);\n\
    \                } else {\n                    set.Add(s);\n                }\n\
    \            }\n        }\n        foreach (string s in set) {\n            int\
    \ n = s.Length;\n            if (n % 2 == 0) {\n                for (int i = 1;\
    \ i <= n / 2; i++) {\n                    if (s.Substring(0, i).Equals(s.Substring(i)))\
    \ {\n                        result += s.Substring(i);\n                     \
    \   break;\n                    }\n                }\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <37f52514208e4d86b2afcc830f9b8e66>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <37f52514208e4d86b2afcc830f9b8e66>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794011
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> set = new HashSet<string>();\n        foreach (char c\
    \ in chars) {\n            if (char.IsLetter(c)) {\n                string temp\
    \ = c.ToString();\n                for (int i = 0; i < temp.Length; i++) {\n \
    \                   if (!set.Contains(temp)) {\n                        set.Add(temp);\n\
    \                        result += temp + \" \";\n                    }\n    \
    \            }\n            }\n        }\n        return result.Trim();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <25fe52c867bc4a58bbc0b24232550e98>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <25fe52c867bc4a58bbc0b24232550e98>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794011
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ if (IsPrime(c.ToString())) {\n                result += \" \" + c;\n       \
    \     }\n        }\n        return result.Trim();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpve2ubxwh.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794011
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in sentence) {\n            isPrime = true;\n\
    \            int n = Convert.ToInt32(c);\n            int count = 0;\n       \
    \     while (n != 1) {\n                if (n % 2 == 0) {\n                  \
    \  isPrime = false;\n                    break;\n                }\n         \
    \       n = n / 2;\n                count++;\n            }\n            if (isPrime)\
    \ {\n                word += c;\n            }\n        }\n        foreach (char\
    \ c in word) {\n            int n = Convert.ToInt32(c);\n            int count\
    \ = 0;\n            while (n != 1) {\n                if (n % 2 == 0) {\n    \
    \                isPrime = false;\n                    break;\n              \
    \  }\n                n = n / 2;\n                count++;\n            }\n  \
    \          if (isPrime) {\n                result += c;\n            }\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c36707cf95e04d7f9a3702e718e3c224>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c36707cf95e04d7f9a3702e718e3c224>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794009
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in charArray)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                primes.Add(n);\n            }\n        }\n        primes.Sort();\n\
    \        foreach (int p in primes) {\n            string newWord = string.Empty;\n\
    \            for (int i = 0; i < charArray.Length; i++) {\n                if\
    \ (charArray[i] == ' ') {\n                    newWord = newWord + charArray[i];\n\
    \                }\n            }\n            if (newWord.Length == p) {\n  \
    \              result = result + newWord;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a6b54b73071460b9b4ee79337166a18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a6b54b73071460b9b4ee79337166a18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794011
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        bool isPrime = true;\n        string word\
    \ = \"\";\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                if (isPrime)\
    \ {\n                    result += word;\n                    isPrime = false;\n\
    \                }\n                word = \"\";\n            }\n        }\n \
    \       if (isPrime) {\n            result += word;\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <78e8f0b49b734dcab334575710e281ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <78e8f0b49b734dcab334575710e281ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794011
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                for (int i = 3; i <= Math.Sqrt(n); i += 2) {\n              \
    \      if (n % i == 0) {\n                        primes.Add(i);\n           \
    \             break;\n                    }\n                }\n            }\n\
    \        }\n        foreach (int p in primes) {\n            string s = \"\";\n\
    \            for (int i = 0; i < chars.Length; i++) {\n                if (chars[i]\
    \ == ' ') {\n                    s += chars[i];\n                }\n         \
    \   }\n            if (s.Length == p) {\n                result += s;\n      \
    \      }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cf6b95fe8f98495194095295db2bc7cc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cf6b95fe8f98495194095295db2bc7cc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794011
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        string primes = \"\";\n        bool isPrime\
    \ = true;\n        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i]\
    \ == ' ') {\n                primes += chars[i];\n                isPrime = true;\n\
    \            } else {\n                isPrime = false;\n            }\n     \
    \   }\n        for (int i = 0; i < chars.Length; i++) {\n            if (isPrime)\
    \ {\n                result += chars[i];\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39775db694b2466abf43db9f5e140f76>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39775db694b2466abf43db9f5e140f76>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794011
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                if (word.Length\
    \ > 0) {\n                    temp = word;\n                    word = \"\";\n\
    \                    result += temp;\n                }\n            }\n     \
    \   }\n        if (word.Length > 0) {\n            temp = word;\n            word\
    \ = \"\";\n            result += temp;\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0c44da7d879548a28401ecb17e8a0390>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0c44da7d879548a28401ecb17e8a0390>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794007
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (string word in sentence.Split(' '))\n        {\n           \
    \ words.Add(word);\n        }\n        foreach (string word in words)\n      \
    \  {\n            int length = word.Length;\n            bool isPrime = true;\n\
    \            for (int i = 2; i <= Math.Sqrt(length); i++)\n            {\n   \
    \             if (length % i == 0)\n                {\n                    isPrime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (isPrime)\n            {\n                result += \" \" + word;\n\
    \            }\n        }\n        return result.Trim();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f78eedb8c9f24218b6656aabdbb19ebc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f78eedb8c9f24218b6656aabdbb19ebc>:0 \n"
  stdout: ''
  timestamp: 1659794009
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            int prime\
    \ = 1;\n            while (prime * prime <= length)\n            {\n         \
    \       if (length == prime || length == prime + 1)\n                {\n     \
    \               result += word;\n                    break;\n                }\n\
    \                else\n                {\n                    prime++;\n     \
    \           }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f4c642f7e8bd4b54ae92ce05420aa777>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f4c642f7e8bd4b54ae92ce05420aa777>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794011
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int n = Convert.ToInt32(word);\n            if (IsPrime(n))\n\
    \            {\n                result += word;\n            }\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n  \
    \  Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpenq5uibw.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794009
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string newWord\
    \ = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)\
    \ {\n            if (char.IsLetter(c)) {\n                word += c;\n       \
    \     } else {\n                result += word;\n                word = \"\";\n\
    \            }\n        }\n        result += word;\n        foreach (char c in\
    \ sentence) {\n            if (char.IsLetter(c)) {\n                newWord =\
    \ word + c;\n            } else {\n                newWord = word + c;\n     \
    \           isPrime = IsPrime(newWord);\n                if (isPrime) {\n    \
    \                result += newWord;\n                }\n                word =\
    \ \"\";\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfdwteoou.cs(42,27): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794011
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                primes.Add(n);\n            }\n        }\n        primes.Sort();\n\
    \        foreach (int p in primes) {\n            int count = 0;\n           \
    \ foreach (char c in chars) {\n                if (Convert.ToInt32(c) == p) {\n\
    \                    count++;\n                }\n            }\n            if\
    \ (count == 0) {\n                result += p.ToString();\n            }\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <33c4d65aacd54f90af5f2d3571e77eda>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <33c4d65aacd54f90af5f2d3571e77eda>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794011
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in sentence) {\n            isPrime = true;\n\
    \            for (int i = 2; i <= Math.Sqrt(c); i++) {\n                if (c\
    \ % i == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  result += \" \" + word;\n                word = \"\";\n            }\n    \
    \        word += c;\n        }\n        return result.Trim();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea604dc2424346bfbaad62decbf452d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea604dc2424346bfbaad62decbf452d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794011
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (string word in sentence.Split(' '))\n        {\n           \
    \ words.Add(word);\n        }\n        foreach (string word in words)\n      \
    \  {\n            int length = word.Length;\n            if (length == 1)\n  \
    \          {\n                result += word;\n            }\n            else\n\
    \            {\n                for (int i = 2; i <= Math.Sqrt(length); i++)\n\
    \                {\n                    if (length % i == 0)\n               \
    \     {\n                        result += word;\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fc0c580a71094e4c9b22bc66e247c55c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fc0c580a71094e4c9b22bc66e247c55c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794008
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                temp =\
    \ word;\n                word = \"\";\n                if (IsPrime(temp.Length))\
    \ {\n                    result += temp;\n                }\n            }\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwnuevqe6.cs(33,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794011
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            if (IsPrime(length))\n\
    \            {\n                result += \" \" + word;\n            }\n     \
    \   }\n        return result.Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfc8pfp28.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794009
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n\
    \        Array.Sort(charArray);\n        foreach (char c in charArray) {\n   \
    \         int count = 0;\n            int len = c.ToString().Length;\n       \
    \     int prime = 1;\n            while (prime <= len) {\n                if (len\
    \ % prime == 0) {\n                    count += 1;\n                }\n      \
    \          prime += 2;\n            }\n            if (count == 0) {\n       \
    \         result += c;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2deee485f2364b22a3284ebd0ef41c26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2deee485f2364b22a3284ebd0ef41c26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794011
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ if (IsPrimeNumber(c)) {\n                result += c;\n            }\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9go68in9.cs(28,17): error CS0103: The name ''IsPrimeNumber'' does not
    exist in the current context

    '
  timestamp: 1659794011
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            }\n        }\n        char[] charArray\
    \ = word.ToCharArray();\n        Array.Sort(charArray);\n        foreach (char\
    \ c in charArray) {\n            int length = Convert.ToInt32(c);\n          \
    \  if (isPrime) {\n                for (int i = 3; i <= Math.Sqrt(length); i++)\
    \ {\n                    if (length % i == 0) {\n                        isPrime\
    \ = false;\n                        break;\n                    }\n          \
    \      }\n            }\n            if (isPrime) {\n                result +=\
    \ \" \" + word;\n            }\n        }\n        return result.Trim();\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad9de0399bc94373bdea386063a193d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad9de0399bc94373bdea386063a193d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794012
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        string word = \"\";\n        foreach (char\
    \ c in chars) {\n            if (chars.IndexOf(c) == 0) {\n                word\
    \ += c;\n            }\n            if (chars.IndexOf(c) == chars.Length - 1)\
    \ {\n                word += c;\n                if (IsPrime(word.Length)) {\n\
    \                    result += word;\n                    word = \"\";\n     \
    \           }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe2eaows9.cs(29,23): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    /tmp/tmpe2eaows9.cs(32,23): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    /tmp/tmpe2eaows9.cs(34,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794011
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (string word in sentence.Split(' '))\n        {\n           \
    \ words.Add(word);\n        }\n        foreach (string word in words)\n      \
    \  {\n            int length = word.Length;\n            bool isPrime = true;\n\
    \            for (int i = 2; i <= Math.Sqrt(length); i++)\n            {\n   \
    \             if (length % i == 0)\n                {\n                    isPrime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (isPrime)\n            {\n                result += \" \" + word;\n\
    \            }\n        }\n        return result.Trim();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f78eedb8c9f24218b6656aabdbb19ebc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f78eedb8c9f24218b6656aabdbb19ebc>:0 \n"
  stdout: ''
  timestamp: 1659794009
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                if (word.Length\
    \ > 0) {\n                    temp = word;\n                    word = \"\";\n\
    \                    result += temp;\n                }\n            }\n     \
    \   }\n        if (word.Length > 0) {\n            temp = word;\n            word\
    \ = \"\";\n            result += temp;\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0c44da7d879548a28401ecb17e8a0390>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0c44da7d879548a28401ecb17e8a0390>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794007
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string word2\
    \ = \"\";\n        string word3 = \"\";\n        string word4 = \"\";\n      \
    \  string word5 = \"\";\n        string word6 = \"\";\n        string word7 =\
    \ \"\";\n        string word8 = \"\";\n        string word9 = \"\";\n        string\
    \ word10 = \"\";\n        string word11 = \"\";\n        string word12 = \"\"\
    ;\n        string word13 = \"\";\n        string word14 = \"\";\n        string\
    \ word15 = \"\";\n        string word16 = \"\";\n        string word17 = \"\"\
    ;\n        string word18 = \"\";\n        string word19 = \"\";\n        string\
    \ word20 = \"\";\n        string word21 = \"\";\n        string word22 = \"\"\
    ;\n        string word23 = \"\";\n        string word24 = \"\";\n        string\
    \ word25 = \"\";\n        string word26 = \"\";\n        string word27 = \"\"\
    ;\n        string word28 = \"\";\n        string word29 = \"\";\n        string\
    \ word30 = \"\";\n        string word31 = \"\";\n        string word32 = \"\"\
    ;\n        string word33 = \"\";\n        string word34 = \"\";\n        string\
    \ word35 = \"\";\n        string word36 = \"\";\n        string word37 = \"\"\
    ;\n        string word38 = \"\";\n        string word39 = \"\";\n        string\
    \ word40 = \"\";\n        string word41 = \"\";\n        string word42 = \"\"\
    ;\n        string word43 = \"\";\n        string word44 = \"\";\n        string\
    \ word45 = \"\";\n        string word46 = \"\";\n        string word47 = \"\"\
    ;\n        string word48 = \"\";\n        string word49 = \"\";\n        string\
    \ word50 = \"\";\n        string word51 = \"\";\n        string word52 = \"\"\
    ;\n        string word53 = \"\";\n        string word54 = \"\";\n        string\
    \ word55 = \"\";\n        string word56 = \"\";\n        string word57 = \"\"\
    ;\n        string word58 = \"\";\n        string word59 = \"\";\n        string\
    \ word60 = \"\";\n        string word61 = \"\";\n        string word62 = \"\"\
    ;\n        string word63 = \"\";\n        string word64 = \"\";\n        string\
    \ word65 = \"\";\n        string word66 = \"\";\n        string word67 = \"\"\
    ;\n        string word68 = \"\";\n        string word69 = \"\";\n        string\
    \ word70 = \"\";\n        string word71 = \"\";\n        string word72 = \"\"\
    ;\n        string word73 = \"\";\n        string word74 = \"\";\n        string\
    \ word75 = \"\";\n        string word76 = \"\";\n        string word77 = \"\"\
    ;\n        string word78 = \"\";\n        string word79 = \"\";\n        string\
    \ word80 = \"\";\n        string word81 = \"\";\n        string word82 = \n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_wvglg2x.cs(106,24): error CS1525: Invalid expression term ''}''

    /tmp/tmp_wvglg2x.cs(106,24): error CS1002: ; expected

    '
  timestamp: 1659794011
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> primes = new HashSet<string>();\n        foreach (char\
    \ c in chars) {\n            int n = Convert.ToInt32(c);\n            if (n %\
    \ 2 == 0) {\n                primes.Add(n.ToString());\n            }\n      \
    \  }\n        foreach (string prime in primes) {\n            int count = 0;\n\
    \            foreach (char c in chars) {\n                if (Convert.ToInt32(c)\
    \ == prime) {\n                    count++;\n                }\n            }\n\
    \            if (count == chars.Length) {\n                result += prime + \"\
    \ \";\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpksu28nre.cs(36,21): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''int'' and ''string''

    '
  timestamp: 1659794011
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in sentence) {\n            isPrime = true;\n\
    \            int length = c.ToString().Length;\n            for (int i = 1; i\
    \ < length; i++) {\n                if (Convert.ToInt32(c.ToString()) % i == 0)\
    \ {\n                    isPrime = false;\n                    break;\n      \
    \          }\n            }\n            if (isPrime) {\n                word\
    \ += c;\n            }\n        }\n        foreach (char c in word) {\n      \
    \      result += c;\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0909b0e9131f49e8bb71c2cee5ab780d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0909b0e9131f49e8bb71c2cee5ab780d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            bool isPrime\
    \ = true;\n            int counter = 1;\n            while (counter < length)\n\
    \            {\n                if (length%counter == 0)\n                {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n                counter++;\n            }\n            if (isPrime)\n\
    \            {\n                result += word;\n            }\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n  \
    \  Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ac55e0b38594d488791b945987bfc40>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ac55e0b38594d488791b945987bfc40>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794009
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        bool isPrime = true;\n        string word\
    \ = \"\";\n        string temp = \"\";\n        foreach (char c in sentence) {\n\
    \            if (char.IsLetter(c)) {\n                word += c;\n           \
    \ } else {\n                temp = word;\n                word = \"\";\n     \
    \           isPrime = true;\n                for (int i = 0; i < temp.Length;\
    \ i++) {\n                    if (temp[i] == ' ') {\n                        isPrime\
    \ = false;\n                        break;\n                    }\n          \
    \      }\n                if (isPrime) {\n                    result += word;\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b1ea18e665534894a152180a2688d318>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b1ea18e665534894a152180a2688d318>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794012
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        foreach (char\
    \ c in sentence) {\n            if (char.IsLetter(c)) {\n                word\
    \ += c;\n            }\n        }\n        char[] chars = word.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                primes.Add(n);\n            }\n        }\n        foreach (int\
    \ p in primes) {\n            if (p > result.Length) {\n                result\
    \ = result.Substring(0, p);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length\
    \ must refer to a location within the string.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.WordsInSentence (System.String sentence) [0x000c5] in <74f500354b1d4b64a5098a9cada41183>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <74f500354b1d4b64a5098a9cada41183>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ and length must refer to a location within the string.\nParameter name: length\n\
    \  at System.String.Substring (System.Int32 startIndex, System.Int32 length) [0x0004c]\
    \ in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.WordsInSentence (System.String\
    \ sentence) [0x000c5] in <74f500354b1d4b64a5098a9cada41183>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <74f500354b1d4b64a5098a9cada41183>:0 \n"
  stdout: ''
  timestamp: 1659794012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        List<int> primes = new List<int>();\n   \
    \     foreach (char c in chars) {\n            int n = Convert.ToInt32(c);\n \
    \           if (n % 2 == 0) {\n                for (int i = 3; i <= Math.Sqrt(n);\
    \ i += 2) {\n                    if (n % i == 0) {\n                        primes.Add(i);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        foreach (int p in primes) {\n            string\
    \ s = \"\";\n            int count = 0;\n            foreach (char c in chars)\
    \ {\n                if (Convert.ToInt32(c) == p) {\n                    count++;\n\
    \                    s += c;\n                }\n            }\n            if\
    \ (count == chars.Length) {\n                result += s;\n            }\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <37bbd44e7fe040cfb647de260a94f944>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <37bbd44e7fe040cfb647de260a94f944>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string temp\
    \ = \"\";\n        char[] charArray = sentence.ToCharArray();\n        foreach\
    \ (char c in charArray) {\n            if (char.IsLetter(c)) {\n             \
    \   word += c;\n            }\n        }\n        char[] charArray2 = word.ToCharArray();\n\
    \        foreach (char c in charArray2) {\n            if (char.IsLetter(c)) {\n\
    \                temp = temp + c;\n            }\n        }\n        char[] charArray3\
    \ = temp.ToCharArray();\n        foreach (char c in charArray3) {\n          \
    \  if (char.IsLetter(c)) {\n                result += c;\n            }\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd15b0735dac4ac5ab4440e715e25fbe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd15b0735dac4ac5ab4440e715e25fbe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (string word in sentence.Split(' '))\n        {\n           \
    \ words.Add(word);\n        }\n        foreach (string word in words)\n      \
    \  {\n            int length = word.Length;\n            bool isPrime = true;\n\
    \            int i = 2;\n            while (i <= Math.Sqrt(length))\n        \
    \    {\n                if (length%i == 0)\n                {\n              \
    \      isPrime = false;\n                    break;\n                }\n     \
    \           i++;\n            }\n            if (isPrime)\n            {\n   \
    \             result += \" \" + word;\n            }\n        }\n        return\
    \ result.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c2324d49888649ed82b7f82f83abe417>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c2324d49888649ed82b7f82f83abe417>:0 \n"
  stdout: ''
  timestamp: 1659794012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (char c in sentence) {\n            if (char.IsLetter(c)) {\n\
    \                words.Add(c.ToString());\n            }\n        }\n        foreach\
    \ (string word in words) {\n            int length = word.Length;\n          \
    \  bool isPrime = true;\n            for (int i = 2; i <= Math.Sqrt(length); i++)\
    \ {\n                if (length % i == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime) {\n                result += \" \" + word;\n            }\n      \
    \  }\n        return result.Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <686f91f686e544feaa6d381cc489c69b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <686f91f686e544feaa6d381cc489c69b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string newWord\
    \ = \"\";\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                result\
    \ += word;\n                word = \"\";\n            }\n        }\n        result\
    \ += word;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                newWord += c;\n            } else {\n                if (newWord.Length\
    \ % 2 == 0) {\n                    result += newWord;\n                    newWord\
    \ = \"\";\n                }\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0f574601a1e84777b698beff2f50371d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0f574601a1e84777b698beff2f50371d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794012
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                primes.Add(n);\n            }\n        }\n        foreach (int\
    \ p in primes) {\n            int count = 0;\n            while (p != 1) {\n \
    \               if (p % 2 == 0) {\n                    p = p / 2;\n          \
    \      } else {\n                    p = 3 * p + 1;\n                }\n     \
    \           count++;\n            }\n            if (count == 2) {\n         \
    \       result += chars[primes.IndexOf(p)];\n            }\n        }\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4gf4n3bi.cs(37,21): error CS1656: Cannot assign to ''p'' because it is
    a ''foreach iteration variable''

    /tmp/tmp4gf4n3bi.cs(39,21): error CS1656: Cannot assign to ''p'' because it is
    a ''foreach iteration variable''

    '
  timestamp: 1659794012
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            if (IsPrime(length))\n\
    \            {\n                result += \" \" + word;\n            }\n     \
    \   }\n        return result.Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfc8pfp28.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794009
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ int length = c;\n            while (length >= 2) {\n                if (IsPrime(length))\
    \ {\n                    result += \" \" + c;\n                    break;\n  \
    \              }\n                length--;\n            }\n        }\n      \
    \  return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyng_1t9s.cs(30,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            bool isPrime\
    \ = true;\n            int counter = 1;\n            while (counter <= length)\n\
    \            {\n                if (length%counter == 0)\n                {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n                counter++;\n            }\n            if (isPrime)\n\
    \            {\n                result += \" \" + word;\n            }\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <24fe2d7f1b964b79846a95c62956cac3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <24fe2d7f1b964b79846a95c62956cac3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794012
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            int n = Convert.ToInt32(word);\n            int count = 0;\n\
    \            int i = 2;\n            while (i <= n) {\n                if (n %\
    \ i == 0) {\n                    count++;\n                }\n               \
    \ i++;\n            }\n            if (count == 2) {\n                result =\
    \ word;\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <90238c31a3894ba4a42d9832071b119a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <90238c31a3894ba4a42d9832071b119a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794012
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ if (IsPrime(c.ToString().Length)) {\n                result += c;\n        \
    \    }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxfykuv3z.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794008
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string word2\
    \ = \"\";\n        string word3 = \"\";\n        string word4 = \"\";\n      \
    \  string word5 = \"\";\n        string word6 = \"\";\n        string word7 =\
    \ \"\";\n        string word8 = \"\";\n        string word9 = \"\";\n        string\
    \ word10 = \"\";\n        string word11 = \"\";\n        string word12 = \"\"\
    ;\n        string word13 = \"\";\n        string word14 = \"\";\n        string\
    \ word15 = \"\";\n        string word16 = \"\";\n        string word17 = \"\"\
    ;\n        string word18 = \"\";\n        string word19 = \"\";\n        string\
    \ word20 = \"\";\n        string word21 = \"\";\n        string word22 = \"\"\
    ;\n        string word23 = \"\";\n        string word24 = \"\";\n        string\
    \ word25 = \"\";\n        string word26 = \"\";\n        string word27 = \"\"\
    ;\n        string word28 = \"\";\n        string word29 = \"\";\n        string\
    \ word30 = \"\";\n        string word31 = \"\";\n        string word32 = \"\"\
    ;\n        string word33 = \"\";\n        string word34 = \"\";\n        string\
    \ word35 = \"\";\n        string word36 = \"\";\n        string word37 = \"\"\
    ;\n        string word38 = \"\";\n        string word39 = \"\";\n        string\
    \ word40 = \"\";\n        string word41 = \"\";\n        string word42 = \"\"\
    ;\n        string word43 = \"\";\n        string word44 = \"\";\n        string\
    \ word45 = \"\";\n        string word46 = \"\";\n        string word47 = \"\"\
    ;\n        string word48 = \"\";\n        string word49 = \"\";\n        string\
    \ word50 = \"\";\n        string word51 = \"\";\n        string word52 = \"\"\
    ;\n        string word53 = \"\";\n        string word54 = \"\";\n        string\
    \ word55 = \"\";\n        string word56 = \"\";\n        string word57 = \"\"\
    ;\n        string word58 = \"\";\n        string word59 = \"\";\n        string\
    \ word60 = \"\";\n        string word61 = \"\";\n        string word62 = \"\"\
    ;\n        string word63 = \"\";\n        string word64 = \"\";\n        string\
    \ word65 = \"\";\n        string word66 = \"\";\n        string word67 = \"\"\
    ;\n        string word68 = \"\";\n        string word69 = \"\";\n        string\
    \ word70 = \"\";\n        string word71 = \"\";\n        string word72 = \"\"\
    ;\n        string word73 = \"\";\n        string word74 = \"\";\n        string\
    \ word75 = \"\";\n        string word76 = \"\";\n        string word77 = \"\"\
    ;\n        string word78 = \"\";\n        string word79 = \"\";\n        string\
    \ word80 = \"\";\n        string word81 = \"\";\n        string word82 = \n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_wvglg2x.cs(106,24): error CS1525: Invalid expression term ''}''

    /tmp/tmp_wvglg2x.cs(106,24): error CS1002: ; expected

    '
  timestamp: 1659794011
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n\
    \        List<string> words = new List<string>();\n        foreach (char c in\
    \ charArray) {\n            if (char.IsLetter(c)) {\n                words.Add(c.ToString());\n\
    \            }\n        }\n        foreach (string word in words) {\n        \
    \    int length = word.Length;\n            if (length == 1) {\n             \
    \   result += word;\n            } else if (length == 2 && word[0] != word[1])\
    \ {\n                result += word;\n            } else if (length == 3 && word[0]\
    \ != word[1] && word[0] != word[2] && word[1] != word[2]) {\n                result\
    \ += word;\n            } else if (length == 4 && word[0] != word[1] && word[0]\
    \ != word[2] && word[1] != word[2] && word[0] != word[3] && word[1] != word[3]\
    \ && word[2] != word[3]) {\n                result += word;\n            } else\
    \ if (length == 5 && word[0] != word[1] && word[0] != word[2] && word[1] != word[2]\
    \ && word[0] != word[3] && word[1] != word[3] && word[2] != word[3] && word[0]\
    \ != word[4] && word[1] != word[4] && word[2] != word[4] && word[0] != word[5]\
    \ && word[1] != word[5] && word[2] != word[5] && word[0] != word[6] && word[1]\
    \ != word[6] && word[2] != word[6]) {\n                result += word;\n     \
    \       } else if (length == 6 && word[0] != word[1] && word[0] != word[2] &&\
    \ word[1] != word[2] && word[0] != word[3] && word[1] != word[3] && word[0] !=\
    \ word[4] && word[1] != word[4] && word[0] != word[5] && word[1] != word[5] &&\
    \ word[0] != word[6] && word[1] != word[6] && word[0] != word[7] && word[1] !=\
    \ word[7] && word[2] != word[7]) {\n                result += word;\n        \
    \    } else if (length == 7 && word[0] != word[1] && word[0] != word[2] && word[1]\
    \ != word[2] && word[0] != word[3] && word[1] != word[3] && word[0] != word[4]\
    \ && word[1] != word[4] && word[0] != word[5] && word[1] != word[5] && word[0]\
    \ != word[6] && word[1] != word[6] && word[0] != word[7] && word[1] != word[7]\
    \ && word[2] != word[7] && word[0] != word[8] && word[1] != word[8] && word[2]\
    \ != word[8] && word[0] != word[9] && word[1] != word[9] && word[2] != word[9]\
    \ && word[0] != word[10] && word[1] != word[10] && word[2] != word[10] && word[0]\
    \ != word[11] && word[1] != word[11] && word[2] != word[11] && word[0] != word[12]\
    \ && word[1] != word[12] && word[2] != word[12] && \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi0_2ng4j.cs(46,685): error CS1525: Invalid expression term ''}''

    /tmp/tmpi0_2ng4j.cs(46,685): error CS1026: ) expected

    /tmp/tmpi0_2ng4j.cs(46,685): error CS1002: ; expected

    /tmp/tmpi0_2ng4j.cs(48,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpi0_2ng4j.cs(58,2): error CS1513: } expected

    '
  timestamp: 1659794011
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        bool isPrime = true;\n        bool isPrime2\
    \ = true;\n        bool isPrime3 = true;\n        bool isPrime4 = true;\n    \
    \    bool isPrime5 = true;\n        bool isPrime6 = true;\n        bool isPrime7\
    \ = true;\n        bool isPrime8 = true;\n        bool isPrime9 = true;\n    \
    \    bool isPrime10 = true;\n        bool isPrime11 = true;\n        bool isPrime12\
    \ = true;\n        bool isPrime13 = true;\n        bool isPrime14 = true;\n  \
    \      bool isPrime15 = true;\n        bool isPrime16 = true;\n        bool isPrime17\
    \ = true;\n        bool isPrime18 = true;\n        bool isPrime19 = true;\n  \
    \      bool isPrime20 = true;\n        bool isPrime21 = true;\n        bool isPrime22\
    \ = true;\n        bool isPrime23 = true;\n        bool isPrime24 = true;\n  \
    \      bool isPrime25 = true;\n        bool isPrime26 = true;\n        bool isPrime27\
    \ = true;\n        bool isPrime28 = true;\n        bool isPrime29 = true;\n  \
    \      bool isPrime30 = true;\n        bool isPrime31 = true;\n        bool isPrime32\
    \ = true;\n        bool isPrime33 = true;\n        bool isPrime34 = true;\n  \
    \      bool isPrime35 = true;\n        bool isPrime36 = true;\n        bool isPrime37\
    \ = true;\n        bool isPrime38 = true;\n        bool isPrime39 = true;\n  \
    \      bool isPrime40 = true;\n        bool isPrime41 = true;\n        bool isPrime42\
    \ = true;\n        bool isPrime43 = true;\n        bool isPrime44 = true;\n  \
    \      bool isPrime45 = true;\n        bool isPrime46 = true;\n        bool isPrime47\
    \ = true;\n        bool isPrime48 = true;\n        bool isPrime49 = true;\n  \
    \      bool isPrime50 = true;\n        bool isPrime51 = true;\n        bool isPrime52\
    \ = true;\n        bool isPrime53 = true;\n        bool isPrime54 = true;\n  \
    \      bool isPrime55 = true;\n        bool isPrime56 = true;\n        bool isPrime57\
    \ = true;\n        bool isPrime58 = true;\n        bool isPrime59 = true;\n  \
    \      bool isPrime60 = true;\n\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4x4sivrq.cs(24,16): warning CS0219: The variable ''result'' is assigned
    but its value is never used

    /tmp/tmp4x4sivrq.cs(27,14): warning CS0219: The variable ''isPrime'' is assigned
    but its value is never used

    /tmp/tmp4x4sivrq.cs(28,14): warning CS0219: The variable ''isPrime2'' is assigned
    but its value is never used

    /tmp/tmp4x4sivrq.cs(29,14): warning CS0219: The variable ''isPrime3'' is assigned
    but its value is never used

    /tmp/tmp4x4sivrq.cs(30,14): warning CS0219: The variable ''isPrime4'' is assigned
    but its value is never used

    /tmp/tmp4x4sivrq.cs(31,14): warning CS0219: The variable ''isPrime5'' is assigned
    but its value is never used

    /tmp/tmp4x4sivrq.cs(32,14): warning CS0219: The variable ''isPrime6'' is assigned
    but its value is never used

    /tmp/tmp4x4sivrq.cs(33,14): warning CS0219: The variable ''isPrime7'' is assigned
    but its value is never used

    /tmp/tmp4x4sivrq.cs(34,14): warning CS0219: The variable ''isPrime8'' is assigned
    but its value is never used

    /tmp/tmp4x4sivrq.cs(35,14): warning CS0219: The variable ''isPrime9'' is assigned
    but its value is never used

    /tmp/tmp4x4sivrq.cs(36,14): warning CS0219: The variable ''isPrime10'' is assigned
    but its value is never used

    /tmp/tmp4x4sivrq.cs(37,14): warning CS0219: The variable ''isPrime11'' is assigned
    but its value is never used

    /tmp/tmp4x4sivrq.cs(38,14): warning CS0219: The variable ''isPrime12'' is assigned
    but its value is never used

    /tmp/tmp4x4sivrq.cs(39,14): warning CS0219: The variable ''isPrime13'' is assigned
    but its value is never used

    /tmp/tmp4x4sivrq.cs(40,14): warning CS0219: The variable ''isPrime14'' is assigned
    but its value is never used

    /tmp/tmp4x4sivrq.cs(41,14): warning CS0219: The variable ''isPrime15'' is assigned
    but its value is never used

    /tmp/tmp4x4sivrq.cs(42,14): warning CS0219: The variable ''isPrime16'' is assigned
    but its value is never used

    /tmp/tmp4x4sivrq.cs(43,14): warning CS0219: The variable ''isPrime17'' is assigned '
  timestamp: 1659794012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in charArray)\
    \ {\n            if (char.IsLetter(c)) {\n                primes.Add(c);\n   \
    \         }\n        }\n        primes.Sort();\n        foreach (int prime in\
    \ primes) {\n            int count = 0;\n            foreach (char c in charArray)\
    \ {\n                if (c == prime) {\n                    count++;\n       \
    \         }\n            }\n            if (count == 0) {\n                result\
    \ += prime + \" \";\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a51c7f96f46a427884d646877b1e91aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a51c7f96f46a427884d646877b1e91aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794012
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            if (length\
    \ == 1)\n            {\n                result += word;\n            }\n     \
    \       else\n            {\n                int count = 0;\n                for\
    \ (int i = 2; i <= length; i++)\n                {\n                    if (IsPrime(i))\n\
    \                    {\n                        count++;\n                   \
    \ }\n                }\n                if (count == length)\n               \
    \ {\n                    result += word;\n                }\n            }\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpabbi3dts.cs(37,25): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in sentence) {\n            isPrime = true;\n\
    \            int n = Convert.ToInt32(c);\n            for (int i = 2; i <= Math.Sqrt(n);\
    \ i++) {\n                if (n % i == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime) {\n                result += word;\n                word = \"\";\n\
    \            }\n            else {\n                word += c;\n            }\n\
    \        }\n        result += word;\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ee00851583384c8d996bc290817967c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ee00851583384c8d996bc290817967c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794012
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string word = \"\";\n        string newWord\
    \ = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)\
    \ {\n            isPrime = true;\n            for (int i = 2; i <= Math.Sqrt(Convert.ToDouble(c));\
    \ i++) {\n                if (c % i == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime) {\n                word += c;\n            }\n        }\n        foreach\
    \ (char c in word) {\n            newWord += c;\n        }\n        foreach (char\
    \ c in newWord) {\n            if (newWord.IndexOf(c) == newWord.Length - 1) {\n\
    \                result += newWord;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidCastException: Invalid cast from\
    \ 'Char' to 'Double'.\n  at System.Char.System.IConvertible.ToDouble (System.IFormatProvider\
    \ provider) [0x00014] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToDouble\
    \ (System.Char value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.WordsInSentence (System.String sentence) [0x0004c] in <5d916aa5e59f477788d4da154a21da92>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <5d916aa5e59f477788d4da154a21da92>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidCastException: Invalid cast\
    \ from 'Char' to 'Double'.\n  at System.Char.System.IConvertible.ToDouble (System.IFormatProvider\
    \ provider) [0x00014] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToDouble\
    \ (System.Char value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.WordsInSentence (System.String sentence) [0x0004c] in <5d916aa5e59f477788d4da154a21da92>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <5d916aa5e59f477788d4da154a21da92>:0\
    \ \n"
  stdout: ''
  timestamp: 1659794012
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ int n = Convert.ToInt32(c);\n            if (IsPrime(n)) {\n               \
    \ result += \" \" + c;\n            }\n        }\n        return result.Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbnw512qs.cs(29,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659794009
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            primes.Add(n);\n   \
    \     }\n        primes.Sort();\n        foreach (int n in primes) {\n       \
    \     if (n % 2 == 0) {\n                for (int i = 3; i <= Math.Sqrt(n); i\
    \ += 2) {\n                    if (n % i == 0) {\n                        break;\n\
    \                    }\n                }\n                if (i == Math.Sqrt(n))\
    \ {\n                    result += \" \" + n;\n                }\n           \
    \ }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppt_51o7b.cs(39,21): error CS0103: The name ''i'' does not exist in the
    current context

    '
  timestamp: 1659794012
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string result = \"\";\n        string temp = \"\";\n        char[] chars\
    \ = sentence.ToCharArray();\n        List<int> primes = new List<int>();\n   \
    \     foreach (char c in chars) {\n            int n = Convert.ToInt32(c);\n \
    \           int count = 0;\n            while (n > 1) {\n                if (n\
    \ % 2 == 0) {\n                    n = (n / 2);\n                    count++;\n\
    \                }\n                else {\n                    n = (3 * n) +\
    \ 1;\n                    count++;\n                }\n            }\n       \
    \     if (count == 0) {\n                primes.Add(n);\n            }\n     \
    \   }\n        foreach (int p in primes) {\n            temp = temp + \" \" +\
    \ p;\n        }\n        result = temp.Trim();\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcffeecf644f47558a6219e820307115>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcffeecf644f47558a6219e820307115>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794012
