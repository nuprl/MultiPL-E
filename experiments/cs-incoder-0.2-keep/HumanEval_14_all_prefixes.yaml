name: HumanEval_14_all_prefixes
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return list of all prefixes from shortest to longest of the\
  \ input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    public\
  \ static List<string> AllPrefixes(string str) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
  \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new\
  \ List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"\
  asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
  WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
  WWW\"}))));\n    }\n\n}\n"
completions: ["        List<string> prefixes = new List<string>();\n        prefixes.Add(\"\
    \");\n        prefixes.AddRange(AllPrefixesHelper(str, prefixes));\n        return\
    \ prefixes;", "        if (str.Length == 0) return new List<string>();\n     \
    \   var result = new List<string>();\n        var prefix = new StringBuilder(str.Substring(0,\
    \ 1));\n        foreach (var c in str.Substring(1)) {\n            result.Add(prefix.ToString());\n\
    \            prefix.Append(c);\n        }\n        return result;", "        List<string>\
    \ prefixes = new List<string>();\n        int len = str.Length;\n        for (int\
    \ i = 0; i < len; i++) {\n            prefixes.Add(str.Substring(0, i));\n   \
    \     }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> prefixes = new\
    \ List<string>();\n        string prefix = \"\";\n        foreach (char c in str)\
    \ {\n            prefix = prefix + c;\n            prefixes.Add(prefix);\n   \
    \     }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        string prefix = \"\";\n        for (int i = 0; i < str.Length; i++) {\n\
    \            prefix += str[i];\n            prefixes.Add(prefix);\n        }\n\
    \        return prefixes;", "        var result = new List<string>();\n      \
    \  var prefixes = new List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> prefixes = new\
    \ List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> prefixes = new\
    \ List<string>();\n        prefixes.Add(\"\");\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            prefixes.Add(prefixes[prefixes.Count - 1] + str.Substring(0,\
    \ i));\n        }\n        return prefixes;", "        List<string> prefixes =\
    \ new List<string>();\n        prefixes.Add(\"\");\n        foreach (char c in\
    \ str) {\n            prefixes.AddRange(AllPrefixes(c + str));\n        }\n  \
    \      return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(str);\n        prefixes.AddRange(AllPrefixes(str, 1));\n\
    \        return prefixes;", "        var result = new List<string>();\n      \
    \  var prefixes = new List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> prefixes = new\
    \ List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> prefixes = new\
    \ List<string>();\n        string prefix = \"\";\n        for (int i = 0; i <\
    \ str.Length; i++) {\n            prefix += str[i];\n            prefixes.Add(prefix);\n\
    \        }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        var result = new List<string>();\n\
    \        var prefixes = new List<string>();\n        prefixes.Add(str);\n    \
    \    while (prefixes.Count > 0) {\n            var prefix = prefixes.First();\n\
    \            prefixes.Remove(prefix);\n            result.Add(prefix);\n     \
    \       foreach (var c in prefix) {\n                prefixes.Add(c + prefix);\n\
    \            }\n        }\n        return result;", "        List<string> prefixes\
    \ = new List<string>();\n        string prefix = \"\";\n        for (int i = 0;\
    \ i < str.Length; i++) {\n            prefix = prefix + str[i];\n            prefixes.Add(prefix);\n\
    \        }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> prefixes = new\
    \ List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        var result = new List<string>();\n\
    \        var prefix = new StringBuilder();\n        foreach (var c in str) {\n\
    \            prefix.Append(c);\n            result.Add(prefix.ToString());\n \
    \           prefix.Remove(0, 1);\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
