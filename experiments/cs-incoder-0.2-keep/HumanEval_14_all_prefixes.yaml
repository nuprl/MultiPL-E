name: HumanEval_14_all_prefixes
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return list of all prefixes from shortest to longest of the\
  \ input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    public\
  \ static List<string> AllPrefixes(string str) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
  \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new\
  \ List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"\
  asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
  WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
  WWW\"}))));\n    }\n\n}\n"
completions: ["        List<string> prefixes = new List<string>();\n        prefixes.Add(\"\
    \");\n        prefixes.AddRange(AllPrefixesHelper(str, prefixes));\n        return\
    \ prefixes;", "        if (str.Length == 0) return new List<string>();\n     \
    \   var result = new List<string>();\n        var prefix = new StringBuilder(str.Substring(0,\
    \ 1));\n        foreach (var c in str.Substring(1)) {\n            result.Add(prefix.ToString());\n\
    \            prefix.Append(c);\n        }\n        return result;", "        List<string>\
    \ prefixes = new List<string>();\n        int len = str.Length;\n        for (int\
    \ i = 0; i < len; i++) {\n            prefixes.Add(str.Substring(0, i));\n   \
    \     }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> prefixes = new\
    \ List<string>();\n        string prefix = \"\";\n        foreach (char c in str)\
    \ {\n            prefix = prefix + c;\n            prefixes.Add(prefix);\n   \
    \     }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        string prefix = \"\";\n        for (int i = 0; i < str.Length; i++) {\n\
    \            prefix += str[i];\n            prefixes.Add(prefix);\n        }\n\
    \        return prefixes;", "        var result = new List<string>();\n      \
    \  var prefixes = new List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> prefixes = new\
    \ List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> prefixes = new\
    \ List<string>();\n        prefixes.Add(\"\");\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            prefixes.Add(prefixes[prefixes.Count - 1] + str.Substring(0,\
    \ i));\n        }\n        return prefixes;", "        List<string> prefixes =\
    \ new List<string>();\n        prefixes.Add(\"\");\n        foreach (char c in\
    \ str) {\n            prefixes.AddRange(AllPrefixes(c + str));\n        }\n  \
    \      return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(str);\n        prefixes.AddRange(AllPrefixes(str, 1));\n\
    \        return prefixes;", "        var result = new List<string>();\n      \
    \  var prefixes = new List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> prefixes = new\
    \ List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> prefixes = new\
    \ List<string>();\n        string prefix = \"\";\n        for (int i = 0; i <\
    \ str.Length; i++) {\n            prefix += str[i];\n            prefixes.Add(prefix);\n\
    \        }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        var result = new List<string>();\n\
    \        var prefixes = new List<string>();\n        prefixes.Add(str);\n    \
    \    while (prefixes.Count > 0) {\n            var prefix = prefixes.First();\n\
    \            prefixes.Remove(prefix);\n            result.Add(prefix);\n     \
    \       foreach (var c in prefix) {\n                prefixes.Add(c + prefix);\n\
    \            }\n        }\n        return result;", "        List<string> prefixes\
    \ = new List<string>();\n        string prefix = \"\";\n        for (int i = 0;\
    \ i < str.Length; i++) {\n            prefix = prefix + str[i];\n            prefixes.Add(prefix);\n\
    \        }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> prefixes = new\
    \ List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        var result = new List<string>();\n\
    \        var prefix = new StringBuilder();\n        foreach (var c in str) {\n\
    \            prefix.Append(c);\n            result.Add(prefix.ToString());\n \
    \           prefix.Remove(0, 1);\n        }\n        return result;", "      \
    \  var prefixes = new List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> prefixes = new\
    \ List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> prefixes = new\
    \ List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesRec(str,\
    \ prefixes));\n        return prefixes;", "        List<string> prefixes = new\
    \ List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesRec(str,\
    \ prefixes));\n        return prefixes;", "        List<string> prefixes = new\
    \ List<string>();\n        prefixes.Add(str);\n        prefixes.AddRange(AllPrefixes(str,\
    \ 1));\n        return prefixes;", "        if (str == null || str.Length == 0)\n\
    \            return new List<string>();\n        var prefixes = new List<string>();\n\
    \        var prefix = new StringBuilder(str.Length);\n        prefixes.Add(prefix.ToString());\n\
    \        foreach (var c in str) {\n            prefix.Append(c);\n           \
    \ prefixes.Add(prefix.ToString());\n        }\n        return prefixes;", "  \
    \      List<string> result = new List<string>();\n        string prefix = \"\"\
    ;\n        for (int i = 0; i < str.Length; i++) {\n            prefix = prefix\
    \ + str[i];\n            result.Add(prefix);\n        }\n        return result;",
  "        List<string> prefixes = new List<string>();\n        prefixes.Add(\"\"\
    );\n        prefixes.AddRange(AllPrefixesHelper(str, prefixes));\n        return\
    \ prefixes;", "        var result = new List<string>();\n        var prefixes\
    \ = new List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> prefixes = new\
    \ List<string>();\n        prefixes.Add(str);\n        prefixes.AddRange(AllPrefixes(str,\
    \ 1));\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixes(str, prefixes));\n\
    \        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        string prefix = \"\";\n        for (int i = 0; i < str.Length; i++) {\n\
    \            prefix = prefix + str[i];\n            prefixes.Add(prefix);\n  \
    \      }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        string prefix = \"\";\n        foreach (char c in str) {\n          \
    \  prefix = prefix + c;\n            prefixes.Add(prefix);\n        }\n      \
    \  return prefixes;", "        List<string> prefixes = new List<string>();\n \
    \       prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        var result = new List<string>();\n\
    \        var prefixes = new List<string>();\n        prefixes.Add(\"\");\n   \
    \     prefixes.AddRange(AllPrefixesHelper(str, prefixes));\n        return prefixes;",
  "        List<string> result = new List<string>();\n        foreach (var c in str)\
    \ {\n            result.Add(c);\n            result.AddRange(AllPrefixes(c.ToString()));\n\
    \        }\n        return result;", "        List<string> result = new List<string>();\n\
    \        string prefix = \"\";\n        for (int i = 0; i < str.Length; i++) {\n\
    \            prefix = prefix + str[i];\n            result.Add(prefix);\n    \
    \    }\n        return result;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesRec(str, prefixes));\n\
    \        return prefixes;", "        if (str.Length == 0) return new List<string>();\n\
    \        List<string> prefixes = new List<string>();\n        prefixes.Add(str);\n\
    \        prefixes.AddRange(AllPrefixes(str.Substring(0, str.Length - 1)));\n \
    \       return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> prefixes = new\
    \ List<string>();\n        prefixes.Add(str);\n        prefixes.AddRange(AllPrefixes(str,\
    \ 1));\n        return prefixes;", "        var result = new List<string>();\n\
    \        var prefixes = new List<string>();\n        prefixes.Add(\"\");\n   \
    \     prefixes.AddRange(AllPrefixesHelper(str, prefixes));\n        return prefixes;",
  "        if (str == null || str.Length == 0)\n            return new List<string>();\n\
    \        var prefixes = new List<string>();\n        var prefix = new StringBuilder(str);\n\
    \        while (prefix.Length > 0) {\n            prefixes.Add(prefix.ToString());\n\
    \            prefix.Remove(0, 1);\n        }\n        return prefixes;", "   \
    \     var result = new List<string>();\n        var prefixes = new List<string>();\n\
    \        var prefix = new StringBuilder();\n        foreach (var c in str) {\n\
    \            prefix.Append(c);\n            prefixes.Add(prefix.ToString());\n\
    \        }\n        foreach (var p in prefixes) {\n            result.AddRange(AllPrefixes(p));\n\
    \        }\n        return result;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixes(str, prefixes));\n\
    \        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(str);\n        int len = str.Length;\n        for (int i\
    \ = 1; i < len; i++) {\n            prefixes.Add(str.Substring(0, i));\n     \
    \   }\n        return prefixes;", "        var result = new List<string>();\n\
    \        foreach (var c in str) {\n            result.AddRange(AllPrefixes(c));\n\
    \        }\n        return result;", "        List<string> prefixes = new List<string>();\n\
    \        string prefix = \"\";\n        for (int i = 0; i < str.Length; i++) {\n\
    \            prefix = prefix + str[i];\n            prefixes.Add(prefix);\n  \
    \      }\n        return prefixes;", "        List<string> result = new List<string>();\n\
    \        foreach (var c in str) {\n            result.Add(c);\n            result.AddRange(AllPrefixes(c.ToString()));\n\
    \        }\n        return result;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> result = new List<string>();\n\
    \        foreach (var c in str) {\n            result.AddRange(AllPrefixes(c));\n\
    \        }\n        return result;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(str);\n        foreach (string s in AllPrefixes(str, str))\
    \ {\n            prefixes.Add(s);\n        }\n        return prefixes;", "   \
    \     List<string> prefixes = new List<string>();\n        prefixes.Add(\"\");\n\
    \        prefixes.AddRange(AllPrefixesHelper(str, prefixes));\n        return\
    \ prefixes;", "        List<string> prefixes = new List<string>();\n        string\
    \ prefix = \"\";\n        for (int i = 0; i < str.Length; i++) {\n           \
    \ prefix = prefix + str[i];\n            prefixes.Add(prefix);\n        }\n  \
    \      return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        string prefix = \"\";\n        for (int i = 0; i < str.Length; i++) {\n\
    \            prefix += str[i];\n            prefixes.Add(prefix);\n        }\n\
    \        return prefixes;", "        List<string> result = new List<string>();\n\
    \        foreach (var c in str) {\n            result.AddRange(AllPrefixes(c));\n\
    \        }\n        return result;", "        List<string> result = new List<string>();\n\
    \        string prefix = \"\";\n        foreach (char c in str) {\n          \
    \  prefix = prefix + c;\n            result.Add(prefix);\n        }\n        return\
    \ result;", "        List<string> prefixes = new List<string>();\n        prefixes.Add(\"\
    \");\n        prefixes.AddRange(AllPrefixesHelper(str, prefixes));\n        return\
    \ prefixes;", "        List<string> prefixes = new List<string>();\n        prefixes.Add(\"\
    \");\n        prefixes.AddRange(AllPrefixesHelper(str, prefixes));\n        return\
    \ prefixes;", "        List<string> prefixes = new List<string>();\n        prefixes.Add(str);\n\
    \        int len = str.Length;\n        for (int i = 0; i < len; i++) {\n    \
    \        prefixes.Add(str.Substring(0, i));\n        }\n        return prefixes;",
  "        if (str == null || str.Length == 0)\n            return new List<string>();\n\
    \        List<string> prefixes = new List<string>();\n        prefixes.Add(str);\n\
    \        prefixes.AddRange(AllPrefixes(str.Substring(0, str.Length - 1)));\n \
    \       return prefixes;", "        List<string> result = new List<string>();\n\
    \        string prefix = \"\";\n        for (int i = 0; i < str.Length; i++) {\n\
    \            prefix = prefix + str[i];\n            result.Add(prefix);\n    \
    \    }\n        return result;", "        if (str == null || str.Length == 0)\n\
    \            return new List<string>();\n        var prefixes = new List<string>();\n\
    \        prefixes.Add(str);\n        foreach (var s in AllPrefixes(str.Substring(1))\
    \ {\n            prefixes.Add(s + str);\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        prefixes.Add(str);\n\
    \        prefixes.AddRange(AllPrefixes(str.Substring(0, str.Length - 1)));\n \
    \       return prefixes;", "        var result = new List<string>();\n       \
    \ var prefix = new List<string>();\n        foreach (var c in str) {\n       \
    \     prefix.Add(c);\n            result.AddRange(AllPrefixes(prefix.ToArray()));\n\
    \            prefix.RemoveAt(prefix.Count - 1);\n        }\n        return result;",
  "        List<string> prefixes = new List<string>();\n        prefixes.Add(\"\"\
    );\n        prefixes.AddRange(AllPrefixesHelper(str, prefixes));\n        return\
    \ prefixes;", "        List<string> prefixes = new List<string>();\n        prefixes.Add(\"\
    \");\n        prefixes.AddRange(AllPrefixesRec(str, prefixes));\n        return\
    \ prefixes;", "        var result = new List<string>();\n        foreach (var\
    \ c in str) {\n            result.AddRange(AllPrefixes(new string[] { c }));\n\
    \        }\n        return result;", "        if (str == null || str.Length ==\
    \ 0)\n            return new List<string>();\n        List<string> prefixes =\
    \ new List<string>();\n        prefixes.Add(str);\n        string prefix = str.Substring(0,\
    \ 1);\n        string rest = str.Substring(1);\n        foreach (string s in AllPrefixes(rest))\
    \ {\n            prefixes.Add(prefix + s);\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        string prefix = \"\
    \";\n        foreach (char c in str) {\n            prefix = prefix + c;\n   \
    \         prefixes.Add(prefix);\n        }\n        return prefixes;", "     \
    \   List<string> prefixes = new List<string>();\n        prefixes.Add(str);\n\
    \        prefixes.AddRange(AllPrefixes(str, 1));\n        return prefixes;", " \
    \       if (str == null)\n            throw new ArgumentNullException(\"str\"\
    );\n        if (str.Length == 0)\n            return new List<string>();\n   \
    \     List<string> result = new List<string>();\n        Stack<string> stack =\
    \ new Stack<string>();\n        stack.Push(str);\n        while (stack.Count >\
    \ 0) {\n            string prefix = stack.Pop();\n            result.Add(prefix);\n\
    \            foreach (char c in prefix)\n                stack.Push(prefix + c);\n\
    \        }\n        return result;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(str);\n        foreach (string prefix in AllPrefixes(str,\
    \ 1))\n            prefixes.Add(prefix);\n        return prefixes;", "       \
    \ List<string> prefixes = new List<string>();\n        prefixes.Add(\"\");\n \
    \       prefixes.AddRange(AllPrefixesHelper(str, prefixes));\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        string prefix = \"\
    \";\n        foreach (char c in str) {\n            prefix = prefix + c;\n   \
    \         prefixes.Add(prefix);\n        }\n        return prefixes;", "     \
    \   List<string> prefixes = new List<string>();\n        prefixes.Add(str);\n\
    \        prefixes.AddRange(AllPrefixes(str, 1));\n        return prefixes;", " \
    \       List<string> prefixes = new List<string>();\n        int len = str.Length;\n\
    \        for (int i = 0; i < len; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i));\n        }\n        return prefixes;", "        var prefixes = new List<string>();\n\
    \        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> result = new List<string>();\n\
    \        string prefix = \"\";\n        for (int i = 0; i < str.Length; i++) {\n\
    \            prefix = prefix + str[i];\n            result.Add(prefix);\n    \
    \    }\n        return result;", "        List<string> result = new List<string>();\n\
    \        foreach (var c in str) {\n            result.AddRange(AllPrefixes(c));\n\
    \        }\n        return result;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(str);\n        prefixes.AddRange(AllPrefixes(str.Substring(0,\
    \ str.Length - 1)));\n        return prefixes;", "        var result = new List<string>();\n\
    \        var prefix = new StringBuilder();\n        foreach (var c in str) {\n\
    \            prefix.Append(c);\n            result.Add(prefix.ToString());\n \
    \           prefix.Remove(0, 1);\n        }\n        return result;", "      \
    \  List<string> prefixes = new List<string>();\n        prefixes.Add(\"\");\n\
    \        prefixes.AddRange(AllPrefixesRec(str, prefixes));\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        prefixes.Add(\"\"\
    );\n        prefixes.AddRange(AllPrefixesHelper(str, prefixes));\n        return\
    \ prefixes;", "        List<string> result = new List<string>();\n        foreach\
    \ (string s in AllPrefixesRec(str, \"\")) {\n            result.Add(s);\n    \
    \    }\n        return result;", "        List<string> result = new List<string>();\n\
    \        List<string> prefixes = new List<string>();\n        prefixes.Add(str);\n\
    \        while (prefixes.Count > 0) {\n            string prefix = prefixes.First();\n\
    \            prefixes.Remove(prefix);\n            result.Add(prefix);\n     \
    \       foreach (string suffix in prefixes) {\n                string newPrefix\
    \ = prefix + suffix;\n                prefixes.Remove(newPrefix);\n          \
    \      result.Add(newPrefix);\n            }\n        }\n        return result;",
  "        var result = new List<string>();\n        var prefixes = new List<string>();\n\
    \        var prefix = new StringBuilder(str);\n        while (prefix.Length >\
    \ 0) {\n            prefixes.Add(prefix.ToString());\n            prefix = prefix.Remove(0,\
    \ 1);\n        }\n        foreach (var prefix in prefixes) {\n            result.AddRange(AllPrefixes(prefix));\n\
    \        }\n        return result;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> result = new List<string>();\n\
    \        foreach (char c in str) {\n            result.Add(c);\n            result.AddRange(AllPrefixes(c.ToString()));\n\
    \        }\n        return result;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesRec(str, prefixes));\n\
    \        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(\"\");\n        for (int i = 0; i < str.Length; i++) {\n\
    \            prefixes.Add(prefixes[prefixes.Count - 1] + str[i]);\n        }\n\
    \        return prefixes;", "        if (str == null || str.Length == 0)\n   \
    \         return new List<string>();\n        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(str);\n        prefixes.AddRange(AllPrefixes(str.Substring(0,\
    \ str.Length - 1)));\n        return prefixes;", "        List<string> result\
    \ = new List<string>();\n        string prefix = \"\";\n        for (int i = 0;\
    \ i < str.Length; i++) {\n            prefix = prefix + str[i];\n            result.Add(prefix);\n\
    \        }\n        return result;", "        List<string> result = new List<string>();\n\
    \        string prefix = \"\";\n        foreach (char c in str) {\n          \
    \  prefix = prefix + c;\n            result.Add(prefix);\n        }\n        return\
    \ result;", "        List<string> prefixes = new List<string>();\n        string\
    \ prefix = \"\";\n        for (int i = 0; i < str.Length; i++) {\n           \
    \ prefix = prefix + str[i];\n            prefixes.Add(prefix);\n        }\n  \
    \      return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        var result = new List<string>();\n\
    \        foreach (var c in str) {\n            result.Add(c);\n            result.AddRange(AllPrefixes(c.ToString()));\n\
    \        }\n        return result;", "        List<string> result = new List<string>();\n\
    \        string prefix = \"\";\n        for (int i = 0; i < str.Length; i++) {\n\
    \            prefix = prefix + str[i];\n            result.Add(prefix);\n    \
    \    }\n        return result;", "        List<string> result = new List<string>();\n\
    \        foreach (var c in str) {\n            result.AddRange(AllPrefixes(c));\n\
    \        }\n        return result;", "        var result = new List<string>();\n\
    \        var prefixes = new List<string>();\n        var prefix = new StringBuilder();\n\
    \        foreach (var c in str) {\n            prefix.Append(c);\n           \
    \ prefixes.Add(prefix.ToString());\n            prefix.Remove(0, 1);\n       \
    \ }\n        foreach (var p in prefixes) {\n            result.Add(p);\n     \
    \   }\n        return result;", "        var result = new List<string>();\n  \
    \      var prefix = new StringBuilder(str);\n        while (prefix.Length > 0)\
    \ {\n            result.Add(prefix.ToString());\n            prefix.Remove(0,\
    \ 1);\n        }\n        return result;", "        var result = new List<string>();\n\
    \        var prefixes = new List<string>();\n        prefixes.Add(\"\");\n   \
    \     prefixes.AddRange(AllPrefixesHelper(str, prefixes));\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        int len = str.Length;\n\
    \        for (int i = 0; i < len; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i));\n        }\n        return prefixes;", "        List<string> prefixes =\
    \ new List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> prefixes = new\
    \ List<string>();\n        string prefix = \"\";\n        foreach (char c in str)\
    \ {\n            prefix = prefix + c;\n            prefixes.Add(prefix);\n   \
    \     }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(\"\");\n        for (int i = 0; i < str.Length; i++) {\n\
    \            prefixes.Add(prefixes[prefixes.Count - 1] + str[i]);\n        }\n\
    \        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        string prefix = \"\";\n        for (int i = 0; i < str.Length; i++) {\n\
    \            prefix = prefix + str[i];\n            prefixes.Add(prefix);\n  \
    \      }\n        return prefixes;", "        List<string> result = new List<string>();\n\
    \        string prefix = \"\";\n        foreach (char c in str) {\n          \
    \  prefix = prefix + c;\n            result.Add(prefix);\n        }\n        return\
    \ result;", "        if (str == null || str.Length == 0) return new List<string>();\n\
    \        var result = new List<string>();\n        foreach (var c in str) {\n\
    \            result.AddRange(AllPrefixes(c));\n        }\n        return result;",
  "        List<string> prefixes = new List<string>();\n        prefixes.Add(str);\n\
    \        while (prefixes.Count < str.Length) {\n            prefixes.Add(prefixes[prefixes.Count\
    \ - 1] + str[prefixes.Count - 1]);\n        }\n        return prefixes;", "  \
    \      if (str == null || str.Length == 0)\n            return new List<string>();\n\
    \        List<string> prefixes = new List<string>();\n        prefixes.Add(str);\n\
    \        foreach (string s in AllPrefixes(str.Substring(1)) {\n            prefixes.Add(s\
    \ + str.Substring(0, s.Length));\n        }\n        return prefixes;", "    \
    \    List<string> prefixes = new List<string>();\n        prefixes.Add(\"\");\n\
    \        prefixes.AddRange(AllPrefixesHelper(str, prefixes));\n        return\
    \ prefixes;", "        List<string> prefixes = new List<string>();\n        prefixes.Add(str);\n\
    \        prefixes.AddRange(AllPrefixes(str.Substring(0, str.Length - 1)));\n \
    \       return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> result = new List<string>();\n\
    \        foreach (var c in str) {\n            result.AddRange(AllPrefixes(new\
    \ string[] { c }));\n        }\n        return result;", "        List<string>\
    \ result = new List<string>();\n        string prefix = \"\";\n        foreach\
    \ (char c in str) {\n            prefix = prefix + c;\n            result.Add(prefix);\n\
    \        }\n        return result;", "        var result = new List<string>();\n\
    \        var prefix = new StringBuilder();\n        foreach (var c in str) {\n\
    \            prefix.Append(c);\n            result.Add(prefix.ToString());\n \
    \           prefix.Remove(0, 1);\n        }\n        return result;", "      \
    \  List<string> prefixes = new List<string>();\n        prefixes.Add(\"\");\n\
    \        prefixes.AddRange(AllPrefixesRec(str, prefixes));\n        return prefixes;",
  "        List<string> result = new List<string>();\n        foreach (string s in\
    \ AllPrefixes(str, new List<string>())) {\n            result.Add(s);\n      \
    \  }\n        return result;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        if (str == null || str.Length\
    \ == 0)\n            return new List<string>();\n        var prefixes = new List<string>();\n\
    \        var prefix = new StringBuilder(str);\n        while (prefix.Length >\
    \ 0) {\n            prefixes.Add(prefix.ToString());\n            prefix.Remove(0,\
    \ 1);\n        }\n        return prefixes;", "        var result = new List<string>();\n\
    \        var prefix = new StringBuilder();\n        foreach (var c in str) {\n\
    \            prefix.Append(c);\n            result.Add(prefix.ToString());\n \
    \           prefix.Remove(0, 1);\n        }\n        return result;", "      \
    \  List<string> result = new List<string>();\n        string prefix = \"\";\n\
    \        foreach (char c in str) {\n            prefix = prefix + c;\n       \
    \     result.Add(prefix);\n        }\n        return result;", "        List<string>\
    \ prefixes = new List<string>();\n        string prefix = \"\";\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            prefix = prefix + str[i];\n     \
    \       prefixes.Add(prefix);\n        }\n        return prefixes;", "       \
    \ List<string> prefixes = new List<string>();\n        prefixes.Add(\"\");\n \
    \       prefixes.AddRange(AllPrefixesHelper(str, prefixes));\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        string prefix = \"\
    \";\n        for (int i = 0; i < str.Length; i++) {\n            prefix = prefix\
    \ + str[i];\n            prefixes.Add(prefix);\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        prefixes.Add(\"\"\
    );\n        prefixes.AddRange(AllPrefixesRec(str, prefixes));\n        return\
    \ prefixes;", "        var prefixes = new List<string>();\n        prefixes.Add(str);\n\
    \        prefixes.AddRange(AllPrefixes(str, 1));\n        return prefixes;", " \
    \       List<string> prefixes = new List<string>();\n        prefixes.Add(\"\"\
    );\n        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(prefixes[prefixes.Count\
    \ - 1] + str[i]);\n        }\n        return prefixes;", "        List<string>\
    \ result = new List<string>();\n        string prefix = \"\";\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            prefix = prefix + str[i];\n     \
    \       result.Add(prefix);\n        }\n        return result;", "        if (str\
    \ == null || str.Length == 0) return new List<string>();\n        var prefixes\
    \ = new List<string>();\n        prefixes.Add(str);\n        var prefix = new\
    \ StringBuilder();\n        foreach (var c in str) {\n            prefix.Append(c);\n\
    \            prefixes.Add(prefix.ToString());\n            prefix.Remove(0, 1);\n\
    \        }\n        return prefixes;", "        if (str == null || str.Length\
    \ == 0)\n            return new List<string>();\n        List<string> prefixes\
    \ = new List<string>();\n        prefixes.Add(str);\n        prefixes.AddRange(AllPrefixes(str.Substring(0,\
    \ str.Length - 1)));\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        var result = new List<string>();\n\
    \        var prefix = new StringBuilder();\n        foreach (var c in str) {\n\
    \            prefix.Append(c);\n            result.Add(prefix.ToString());\n \
    \           prefix.Remove(0, 1);\n        }\n        return result;", "      \
    \  var result = new List<string>();\n        var prefix = new StringBuilder();\n\
    \        foreach (var c in str) {\n            prefix.Append(c);\n           \
    \ result.Add(prefix.ToString());\n            prefix.Remove(0, 1);\n        }\n\
    \        return result;", "        List<string> result = new List<string>();\n\
    \        foreach (var c in str) {\n            result.AddRange(AllPrefixes(c));\n\
    \        }\n        return result;", "        if (str == null || str.Length ==\
    \ 0)\n            return new List<string>();\n        List<string> prefixes =\
    \ new List<string>();\n        prefixes.Add(str);\n        int len = str.Length;\n\
    \        while (len > 0) {\n            prefixes.Add(str.Substring(0, len));\n\
    \            str = str.Substring(len);\n            len--;\n        }\n      \
    \  return prefixes;", "        var result = new List<string>();\n        foreach\
    \ (var c in str) {\n            result.Add(c);\n            result.AddRange(AllPrefixes(c.ToString()));\n\
    \        }\n        return result;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> prefixes = new\
    \ List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> result = new List<string>();\n\
    \        Stack<string> stack = new Stack<string>();\n        foreach (char c in\
    \ str) {\n            stack.Add(c);\n            while (stack.Count > 0) {\n \
    \               string prefix = stack.Count > 1 ? string.Join(\"\", stack) : stack.Pop();\n\
    \                result.Add(prefix);\n                foreach (char d in str)\
    \ {\n                    if (d == c) {\n                        break;\n     \
    \               }\n                    stack.Add(prefix + d);\n              \
    \  }\n            }\n        }\n        return result;", "        List<string>\
    \ prefixes = new List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> prefixes = new\
    \ List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        var prefixes = new List<string>();\n\
    \        var prefix = new StringBuilder();\n        foreach (var c in str) {\n\
    \            prefix.Append(c);\n            prefixes.Add(prefix.ToString());\n\
    \            prefix = new StringBuilder();\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        prefixes.Add(\"\"\
    );\n        prefixes.AddRange(AllPrefixesHelper(str, prefixes));\n        return\
    \ prefixes;", "        var result = new List<string>();\n        foreach (var\
    \ c in str) {\n            result.AddRange(AllPrefixes(c));\n        }\n     \
    \   return result;", "        List<string> prefixes = new List<string>();\n  \
    \      prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str, prefixes));\n\
    \        return prefixes;", "        var result = new List<string>();\n      \
    \  var prefixes = new List<string>();\n        prefixes.Add(str);\n        while\
    \ (prefixes.Count > 0) {\n            var prefix = prefixes.First();\n       \
    \     prefixes.Remove(prefix);\n            result.Add(prefix);\n            foreach\
    \ (var suffix in prefixes) {\n                result.Add(prefix + suffix);\n \
    \           }\n        }\n        return result;", "        List<string> result\
    \ = new List<string>();\n        foreach (var c in str) {\n            result.Add(c);\n\
    \            result.AddRange(AllPrefixes(c.ToString()));\n        }\n        return\
    \ result;", "        var result = new List<string>();\n        var prefix = new\
    \ StringBuilder();\n        var len = str.Length;\n        var i = 0;\n      \
    \  while (i < len) {\n            prefix.Append(str.Substring(0, i));\n      \
    \      result.Add(prefix.ToString());\n            i += 1;\n        }\n      \
    \  return result;", "        List<string> prefixes = new List<string>();\n   \
    \     string prefix = \"\";\n        foreach (char c in str) {\n            prefix\
    \ = prefix + c;\n            prefixes.Add(prefix);\n        }\n        return\
    \ prefixes;", "        List<string> prefixes = new List<string>();\n        string\
    \ prefix = \"\";\n        for (int i = 0; i < str.Length; i++) {\n           \
    \ prefix += str[i];\n            prefixes.Add(prefix);\n        }\n        return\
    \ prefixes;", "        List<string> prefixes = new List<string>();\n        prefixes.Add(\"\
    \");\n        prefixes.AddRange(AllPrefixesHelper(str, prefixes));\n        return\
    \ prefixes;", "        if (str == null || str.Length == 0)\n            return\
    \ new List<string>();\n        List<string> result = new List<string>();\n   \
    \     char c = str[0];\n        for (int i = 1; i < str.Length; i++) {\n     \
    \       if (str[i] == c)\n                result.Add(c);\n            else\n \
    \               result.Add(c + str[i]);\n            c = str[i];\n        }\n\
    \        return result;", "        List<string> prefixes = new List<string>();\n\
    \        string prefix = \"\";\n        for (int i = 0; i < str.Length; i++) {\n\
    \            prefix = prefix + str[i];\n            prefixes.Add(prefix);\n  \
    \      }\n        return prefixes;", "        var result = new List<string>();\n\
    \        var prefixes = new List<string>();\n        var prefix = new StringBuilder();\n\
    \        foreach (var c in str) {\n            prefix.Append(c);\n           \
    \ if (prefix.Length > 0) {\n                prefixes.Add(prefix.ToString());\n\
    \                prefix = new StringBuilder();\n            }\n        }\n   \
    \     result.AddRange(prefixes);\n        return result;", "        var result\
    \ = new List<string>();\n        var prefix = new StringBuilder(str);\n      \
    \  while (prefix.Length > 0) {\n            result.Add(prefix.ToString());\n \
    \           prefix.Remove(0, 1);\n        }\n        return result;", "      \
    \  List<string> prefixes = new List<string>();\n        prefixes.Add(\"\");\n\
    \        prefixes.AddRange(AllPrefixesHelper(str, prefixes));\n        return\
    \ prefixes;", "        List<string> prefixes = new List<string>();\n        prefixes.Add(\"\
    \");\n        prefixes.AddRange(AllPrefixesRec(str, prefixes));\n        return\
    \ prefixes;", "        var result = new List<string>();\n        foreach (var\
    \ c in str) {\n            result.Add(c);\n            result.AddRange(AllPrefixes(c));\n\
    \        }\n        return result;", "        List<string> result = new List<string>();\n\
    \        foreach (var c in str) {\n            result.AddRange(AllPrefixes(c,\
    \ result.Count));\n        }\n        return result;", "        List<string> result\
    \ = new List<string>();\n        foreach (string s in AllPrefixesRec(str, \"\"\
    )) {\n            result.Add(s);\n        }\n        return result;", "      \
    \  List<string> prefixes = new List<string>();\n        prefixes.Add(\"\");\n\
    \        prefixes.AddRange(AllPrefixesHelper(str, prefixes));\n        return\
    \ prefixes;", "        List<string> prefixes = new List<string>();\n        int\
    \ n = str.Length;\n        for (int i = 0; i < n; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i));\n        }\n        return prefixes;", "        List<string> prefixes =\
    \ new List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesRec(str,\
    \ prefixes));\n        return prefixes;", "        List<string> prefixes = new\
    \ List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesRec(str,\
    \ prefixes));\n        return prefixes;", "        List<string> prefixes = new\
    \ List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> result = new List<string>();\n\
    \        foreach (var c in str) {\n            result.Add(c);\n            result.AddRange(AllPrefixes(c.ToString()));\n\
    \        }\n        return result;", "        List<string> result = new List<string>();\n\
    \        foreach (string s in AllPrefixesRecursive(str)) {\n            result.Add(s);\n\
    \        }\n        return result;", "        List<string> result = new List<string>();\n\
    \        string prefix = \"\";\n        for (int i = 0; i < str.Length; i++) {\n\
    \            prefix = prefix + str[i];\n            result.Add(prefix);\n    \
    \    }\n        return result;", "        var result = new List<string>();\n \
    \       foreach (var c in str) {\n            result.AddRange(AllPrefixes(new\
    \ string[] { c }));\n        }\n        return result;", "        List<string>\
    \ prefixes = new List<string>();\n        int len = str.Length;\n        for (int\
    \ i = 0; i < len; i++) {\n            prefixes.Add(str.Substring(0, i));\n   \
    \     }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> prefixes = new\
    \ List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> result = new List<string>();\n\
    \        string prefix = \"\";\n        for (int i = 0; i < str.Length; i++) {\n\
    \            prefix = prefix + str[i];\n            result.Add(prefix);\n    \
    \    }\n        return result;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        var result = new List<string>();\n\
    \        var prefixes = new List<string>();\n        prefixes.Add(\"\");\n   \
    \     prefixes.AddRange(str.Select(c => c.ToString()));\n        while (prefixes.Count\
    \ > 0) {\n            var prefix = prefixes.First();\n            result.Add(prefix);\n\
    \            prefixes.Remove(prefix);\n            foreach (var c in prefix) {\n\
    \                prefixes.Add(c + prefix);\n            }\n        }\n       \
    \ return result;", "        var result = new List<string>();\n        var prefixes\
    \ = new List<string>();\n        var prefix = new StringBuilder();\n        foreach\
    \ (var c in str) {\n            prefix.Append(c);\n            if (prefix.Length\
    \ > 0) {\n                prefixes.Add(prefix.ToString());\n                prefix\
    \ = new StringBuilder();\n            }\n        }\n        if (prefix.Length\
    \ > 0) {\n            prefixes.Add(prefix.ToString());\n        }\n        foreach\
    \ (var p in prefixes) {\n            result.Add(p);\n        }\n        return\
    \ result;", "        List<string> prefixes = new List<string>();\n        prefixes.Add(\"\
    \");\n        prefixes.AddRange(AllPrefixes(str, prefixes));\n        return prefixes;",
  "        List<string> result = new List<string>();\n        List<string> prefixes\
    \ = new List<string>();\n        prefixes.Add(str);\n        while (prefixes.Count\
    \ > 0) {\n            string prefix = prefixes.First();\n            prefixes.Remove(prefix);\n\
    \            result.Add(prefix);\n            foreach (string suffix in prefixes)\
    \ {\n                string newPrefix = prefix + suffix;\n                if (newPrefix.Length\
    \ > str.Length) {\n                    result.Add(newPrefix);\n              \
    \  }\n            }\n        }\n        return result;", "        List<string>\
    \ result = new List<string>();\n        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesRec(str, prefixes));\n\
    \        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(str);\n        int len = str.Length;\n        for (int i\
    \ = 1; i < len; i++) {\n            prefixes.Add(str.Substring(0, i));\n     \
    \   }\n        return prefixes;", "        List<string> result = new List<string>();\n\
    \        List<string> prefixes = new List<string>();\n        prefixes.Add(str);\n\
    \        while (prefixes.Count > 0) {\n            string prefix = prefixes.First();\n\
    \            prefixes.Remove(prefix);\n            result.Add(prefix);\n     \
    \       foreach (string suffix in prefixes) {\n                string newPrefix\
    \ = prefix + suffix;\n                if (newPrefix.Length < str.Length) {\n \
    \                   prefixes.Add(newPrefix);\n                }\n            }\n\
    \        }\n        return result;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> prefixes = new\
    \ List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> result = new List<string>();\n\
    \        foreach (var c in str) {\n            result.AddRange(AllPrefixes(c));\n\
    \        }\n        return result;", "        List<string> prefixes = new List<string>();\n\
    \        string prefix = \"\";\n        foreach (char c in str) {\n          \
    \  prefix = prefix + c;\n            prefixes.Add(prefix);\n        }\n      \
    \  return prefixes;", "        if (str == null || str.Length == 0)\n         \
    \   return new List<string>();\n        var prefixes = new List<string>();\n \
    \       var prefix = new StringBuilder(str.Length);\n        prefix.Append(str[0]);\n\
    \        prefixes.Add(prefix.ToString());\n        for (int i = 1; i < str.Length;\
    \ i++) {\n            prefix.Append(str[i]);\n            prefixes.Add(prefix.ToString());\n\
    \        }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> prefixes = new\
    \ List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> prefixes = new\
    \ List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        List<string> prefixes = new\
    \ List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;", "        if (str == null || str.Length\
    \ == 0)\n            return new List<string>();\n        List<string> prefixes\
    \ = new List<string>();\n        prefixes.Add(str);\n        prefixes.AddRange(AllPrefixes(str.Substring(0,\
    \ str.Length - 1)));\n        return prefixes;", "        if (str == null || str.Length\
    \ == 0) return new List<string>();\n        var result = new List<string>();\n\
    \        var prefix = new StringBuilder(str.Length);\n        prefix.Append(str[0]);\n\
    \        result.Add(prefix.ToString());\n        for (int i = 1; i < str.Length;\
    \ i++) {\n            prefix.Append(str[i]);\n            result.Add(prefix.ToString());\n\
    \        }\n        return result;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(str);\n        foreach (string s in AllPrefixes(str, prefixes))\
    \ {\n            prefixes.Add(s);\n        }\n        return prefixes;", "   \
    \     List<string> prefixes = new List<string>();\n        prefixes.Add(\"\");\n\
    \        prefixes.AddRange(AllPrefixes(str, prefixes));\n        return prefixes;",
  "        if (str.Length == 0)\n            return new List<string>();\n        var\
    \ result = new List<string>();\n        var prefix = new StringBuilder(str.Substring(0,\
    \ 1));\n        result.Add(prefix.ToString());\n        var rest = str.Substring(1);\n\
    \        while (rest.Length > 0) {\n            prefix.Append(rest.Substring(0,\
    \ 1));\n            result.Add(prefix.ToString());\n            rest = rest.Substring(1);\n\
    \        }\n        return result;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(str);\n        prefixes.AddRange(AllPrefixes(str, 1));\n\
    \        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesRec(str, prefixes));\n\
    \        return prefixes;", "        if (str.Length == 0)\n            return\
    \ new List<string>();\n        List<string> prefixes = new List<string>();\n \
    \       prefixes.Add(str);\n        int n = str.Length;\n        for (int i =\
    \ 0; i < n; i++) {\n            prefixes.Add(str.Substring(0, i));\n        }\n\
    \        return prefixes;"]
stop_tokens:
- "\n    }\n"
