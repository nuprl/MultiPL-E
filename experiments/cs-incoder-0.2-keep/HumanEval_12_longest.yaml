name: HumanEval_12_longest
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Out of list of strings, return the longest one. Return the first\
  \ one in case of multiple\n    // strings of the same length. Return None in case\
  \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
  \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n    public\
  \ static string Longest(List<string> strings) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Longest((new\
  \ List<string>())).Equals(null));\n    Debug.Assert(Longest((new List<string>(new\
  \ string[]{(string)\"x\", (string)\"y\", (string)\"z\"}))).Equals((\"x\")));\n \
  \   Debug.Assert(Longest((new List<string>(new string[]{(string)\"x\", (string)\"\
  yyy\", (string)\"zzzz\", (string)\"www\", (string)\"kkkk\", (string)\"abc\"}))).Equals((\"\
  zzzz\")));\n    }\n\n}\n"
completions: ["        if (strings == null || strings.Count == 0)\n            return\
    \ null;\n        string longest = strings.Max(s => s.Length);\n        foreach\
    \ (string s in strings)\n            if (s.Length == longest.Length)\n       \
    \         return s;\n        return longest;", "        if (strings == null ||\
    \ strings.Count == 0)\n            return null;\n        var longest = strings.OrderByDescending(s\
    \ => s.Length).FirstOrDefault();\n        if (longest != null && longest.Length\
    \ > 0)\n            return longest;\n        return strings.OrderByDescending(s\
    \ => s.Length).FirstOrDefault();", "        if (strings == null || strings.Count\
    \ == 0) return null;\n        var longest = strings.OrderByDescending(s => s.Length).FirstOrDefault();\n\
    \        if (longest != null && longest.Length > strings.Max(s => s.Length)) {\n\
    \            return longest;\n        }\n        return strings.FirstOrDefault();",
  "        if (strings == null || strings.Count == 0)\n            return null;\n\
    \        var longest = strings.OrderByDescending(s => s.Length).FirstOrDefault();\n\
    \        if (longest != null)\n            return longest;\n        var longest2\
    \ = strings.OrderByDescending(s => s.Length).FirstOrDefault();\n        if (longest2\
    \ != null)\n            return longest2;\n        return null;", "        if (strings\
    \ == null || strings.Count == 0) {\n            return null;\n        }\n    \
    \    string longest = strings.Max();\n        foreach (string s in strings) {\n\
    \            if (s.Length == longest.Length) {\n                return s;\n  \
    \          }\n        }\n        return longest;", "        if (strings == null\
    \ || strings.Count == 0) {\n            return null;\n        }\n        var longest\
    \ = strings.OrderByDescending(s => s.Length).FirstOrDefault();\n        if (longest\
    \ == null) {\n            return null;\n        }\n        return longest;", " \
    \       if (strings == null || strings.Count == 0)\n            return null;\n\
    \        string longest = strings.OrderByDescending(s => s.Length).FirstOrDefault();\n\
    \        if (longest != null)\n            return longest;\n        return strings.OrderByDescending(s\
    \ => s.Length).FirstOrDefault();", "        if (strings == null || strings.Count\
    \ == 0)\n            return null;\n        string longest = strings.OrderByDescending(s\
    \ => s.Length).FirstOrDefault();\n        if (longest == null || longest.Length\
    \ == 0)\n            return null;\n        return longest;", "        if (strings\
    \ == null || strings.Count == 0) {\n            return null;\n        }\n    \
    \    string longest = string.Empty;\n        string firstLongest = string.Empty;\n\
    \        foreach (string s in strings) {\n            if (s.Length > longest.Length)\
    \ {\n                longest = s;\n            }\n            if (s.Length ==\
    \ longest.Length) {\n                firstLongest = s;\n            }\n      \
    \  }\n        return firstLongest;", "        if (strings == null || strings.Count\
    \ == 0) {\n            return null;\n        }\n        var longest = strings.OrderByDescending(s\
    \ => s.Length).FirstOrDefault();\n        if (longest == null) {\n           \
    \ return null;\n        }\n        return longest;", "        if (strings == null\
    \ || strings.Count == 0)\n            return null;\n        var maxLength = 0;\n\
    \        var longest = strings.First();\n        foreach (var s in strings) {\n\
    \            if (s.Length > maxLength) {\n                maxLength = s.Length;\n\
    \                longest = s;\n            }\n        }\n        return longest;",
  "        if (strings == null || strings.Count == 0) {\n            return null;\n\
    \        }\n        string longest = strings.OrderByDescending(s => s.Length).FirstOrDefault();\n\
    \        if (longest == null) {\n            return null;\n        }\n       \
    \ return longest;", "        if (strings == null || strings.Count == 0)\n    \
    \        return null;\n        string longest = strings.OrderByDescending(s =>\
    \ s.Length).First();\n        if (longest != null && longest.Length == strings.Max(s\
    \ => s.Length))\n            return longest;\n        return strings.Max(s =>\
    \ s.Length);", "        if (strings == null || strings.Count == 0)\n         \
    \   return null;\n        string longest = strings.OrderByDescending(s => s.Length).FirstOrDefault();\n\
    \        if (longest != null)\n            return longest;\n        longest =\
    \ strings.OrderByDescending(s => s.Length).FirstOrDefault();\n        if (longest\
    \ != null)\n            return longest;\n        return strings.FirstOrDefault();",
  "        if (strings == null || strings.Count == 0)\n            return null;\n\
    \        string longest = strings.Max();\n        foreach (string s in strings)\n\
    \            if (s.Length > longest.Length)\n                longest = s;\n  \
    \      return longest;", "        if (strings == null || strings.Count == 0)\n\
    \            return null;\n        string longest = strings.Max();\n        int\
    \ longestLength = longest.Length;\n        for (int i = 0; i < strings.Count;\
    \ i++) {\n            string s = strings[i];\n            if (s.Length > longestLength)\n\
    \                longest = s;\n        }\n        return longest;", "        if\
    \ (strings == null || strings.Count == 0) {\n            return null;\n      \
    \  }\n        string longest = strings.First();\n        foreach (string s in\
    \ strings) {\n            if (s.Length > longest.Length) {\n                longest\
    \ = s;\n            }\n        }\n        return longest;", "        if (strings\
    \ == null || strings.Count == 0)\n            return null;\n        var longest\
    \ = strings.OrderByDescending(s => s.Length).FirstOrDefault();\n        if (longest\
    \ != null)\n            return longest;\n        return strings.OrderByDescending(s\
    \ => s.Length).FirstOrDefault();", "        if (strings == null || strings.Count\
    \ == 0)\n            return null;\n        string longest = strings.OrderByDescending(s\
    \ => s.Length).FirstOrDefault();\n        if (longest != null && longest.Length\
    \ > 0)\n            return longest;\n        return strings.OrderByDescending(s\
    \ => s.Length).FirstOrDefault();", "        if (strings == null || strings.Count\
    \ == 0) {\n            return null;\n        }\n        string longest = strings.Max(s\
    \ => s.Length);\n        List<string> longestStrings = strings.Where(s => s.Length\
    \ == longest).ToList();\n        if (longestStrings.Count > 1) {\n           \
    \ return longestStrings.Max();\n        }\n        return longest;"]
stop_tokens:
- "\n    }\n"
