name: HumanEval_119_match_parens
language: ruby
prompt: "# You are given a list of two strings, both strings consist of open\n# parentheses\
  \ '(' or close parentheses ')' only.\n# Your job is to check if it is possible to\
  \ concatenate the two strings in\n# some order, that the resulting string will be\
  \ good.\n# A string S is considered to be good if and only if all parentheses in\
  \ S\n# are balanced. For example: the string '(())()' is good, while the string\n\
  # '())' is not.\n# Return 'Yes' if there's a way to make a good string, and return\
  \ 'No' otherwise.\n# Examples:\n# match_parens(['()(', ')']) == 'Yes'\n# match_parens([')',\
  \ ')']) == 'No'\ndef match_parens(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_match_parens\n\
  \    candidate = method(:match_parens)\n    assert_equal(\"Yes\", candidate.call([\"\
  ()(\", \")\"]))\n    assert_equal(\"No\", candidate.call([\")\", \")\"]))\n    assert_equal(\"\
  No\", candidate.call([\"(()(())\", \"())())\"]))\n    assert_equal(\"Yes\", candidate.call([\"\
  )())\", \"(()()(\"]))\n    assert_equal(\"Yes\", candidate.call([\"(())))\", \"\
  (()())((\"]))\n    assert_equal(\"No\", candidate.call([\"()\", \"())\"]))\n   \
  \ assert_equal(\"Yes\", candidate.call([\"(()(\", \"()))()\"]))\n    assert_equal(\"\
  No\", candidate.call([\"((((\", \"((())\"]))\n    assert_equal(\"No\", candidate.call([\"\
  )(()\", \"(()(\"]))\n    assert_equal(\"No\", candidate.call([\")(\", \")(\"]))\n\
  \    assert_equal(\"Yes\", candidate.call([\"(\", \")\"]))\n    assert_equal(\"\
  Yes\", candidate.call([\")\", \"(\"]))\n  end\nend\n"
completions: ["  # your code here\nend", "  # your code here\nend", "  return 'No'\
    \ if lst.first.count('(') != lst.last.count(')')\n  return 'Yes' if lst.first.count('(')\
    \ == lst.last.count(')')\n  return 'Yes' if lst.first.count('(') > lst.last.count(')')\n\
    \  return 'Yes' if lst.first.count('(') < lst.last.count(')')\nend", "  # your\
    \ code here\nend", "  # your code here\nend", "  str1, str2 = lst\n  str1_open\
    \ = str1.count('(')\n  str1_close = str1.count(')')\n  str2_open = str2.count('(')\n\
    \  str2_close = str2.count(')')\n  if str1_open == str1_close && str2_open ==\
    \ str2_close\n    'Yes'\n  elsif str1_open == str1_close && str2_open != str2_close\n\
    \    'No'\n  elsif str1_open != str1_close && str2_open == str2_close\n    'No'\n\
    \  else\n    'Yes'\n  end\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # Your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  open = 0\n  close = 0\n  lst.each do |str|\n    str.each_char do |char|\n\
    \      if char == '('\n        open += 1\n      else\n        close += 1\n   \
    \   end\n    end\n  end\n  open == close ? 'Yes' : 'No'\nend", "  # your code\
    \ here\nend", "  return 'No' if lst.first.count('(') != lst.last.count(')')\n\
    \  return 'Yes' if lst.first.count('(') == lst.last.count(')')\n  return 'Yes'\
    \ if lst.first.count('(') < lst.last.count(')')\n  return 'Yes' if lst.first.count('(')\
    \ > lst.last.count(')')\nend", "  # your code here\nend", "  return 'No' if lst.any?\
    \ { |str| str.count('(') != str.count(')') }\n  lst.join.scan(/\\(\\)/).size ==\
    \ lst.join.size / 2 ? 'Yes' : 'No'\nend", "  # your code here\nend", "  return\
    \ 'No' if lst.first.count('(') != lst.last.count(')')\n  return 'Yes' if lst.first.count('(')\
    \ == lst.last.count(')')\n  'No'\nend", "  # your code here\nend", "  # your code\
    \ here\nend", "  return 'No' if lst.any? { |str| str.count('(') != str.count(')')\
    \ }\n  return 'Yes' if lst.join.count('(') == lst.join.count(')')\n  'No'\nend",
  "  return 'No' if lst.include?('(') && lst.include?(')')\n  return 'Yes' if lst.include?('(')\
    \ && !lst.include?(')')\n  return 'Yes' if !lst.include?('(') && lst.include?(')')\n\
    \  return 'No' if !lst.include?('(') && !lst.include?(')')\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  lst.join.count('(') == lst.join.count(')')\
    \ ? 'Yes' : 'No'\nend", "  lst.join.count('(') == lst.join.count(')') ? 'Yes'\
    \ : 'No'\nend", "  # your code here\nend", "  # your code here\nend", "  # your\
    \ code here\nend", "  lst.join.count('(') == lst.join.count(')') ? 'Yes' : 'No'\n\
    end", "  # your code here\nend", "  # your code here\nend", "  lst.join.gsub(/\\\
    (\\)/, '').empty? ? 'Yes' : 'No'\nend", "  # your code here\nend", "  # your code\
    \ here\nend", "  lst.join.count('(') == lst.join.count(')') ? 'Yes' : 'No'\nend",
  "  lst.join.count('(') == lst.join.count(')') ? 'Yes' : 'No'\nend", "  # your code\
    \ here\nend", "  lst.join.count('(') == lst.join.count(')') ? 'Yes' : 'No'\nend",
  "  lst.join.chars.each_with_object([]) do |char, stack|\n    if char == '('\n  \
    \    stack << char\n    else\n      return 'No' if stack.empty?\n      stack.pop\n\
    \    end\n  end\n  'Yes'\nend", "  # your code here\nend", "  lst.join.gsub(/\\\
    (\\)/, '').empty? ? 'Yes' : 'No'\nend", "  # your code here\nend", "  open = 0\n\
    \  close = 0\n  lst.each do |str|\n    str.each_char do |char|\n      open +=\
    \ 1 if char == '('\n      close += 1 if char == ')'\n    end\n  end\n  open ==\
    \ close ? 'Yes' : 'No'\nend", "  # your code here\nend", "  # your code here\n\
    end", "  return 'No' if lst.any? { |str| str.count('(') != str.count(')') }\n\
    \  return 'Yes' if lst.join.count('(') == lst.join.count(')')\n  'No'\nend", " \
    \ # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  return 'No' if lst.include?(')') && lst.include?('(')\n\
    \  return 'Yes' if lst.include?(')') && !lst.include?('(')\n  return 'Yes' if\
    \ !lst.include?(')') && lst.include?('(')\n  return 'Yes' if !lst.include?(')')\
    \ && !lst.include?('(')\nend", "  # your code here\nend", "  str = lst.join\n\
    \  return 'Yes' if str.empty?\n  return 'No' if str.count('(') != str.count(')')\n\
    \  return 'No' if str[0] == ')'\n  return 'No' if str[-1] == '('\n  return 'No'\
    \ if str.count('()') == 0\n  return 'Yes'\nend", "  lst.join.gsub(/\\(\\)/, '').empty?\
    \ ? 'Yes' : 'No'\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  return 'No' if lst.include?(')') && lst.include?('(')\n\
    \  return 'Yes' if lst.include?(')') && !lst.include?('(')\n  return 'Yes' if\
    \ !lst.include?(')') && lst.include?('(')\n  return 'Yes' if !lst.include?(')')\
    \ && !lst.include?('(')\nend", "  # your code here\nend", "  # your code here\n\
    end", "  return 'No' if lst.any? { |str| str.count('(') != str.count(')') }\n\
    \  return 'Yes' if lst.join.count('(') == lst.join.count(')')\n  'No'\nend", " \
    \ # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  return 'No' if lst.any? { |str| str.count('(') != str.count(')') }\n  lst.join.chars.each_with_object(0)\
    \ do |char, count|\n    count += 1 if char == '('\n    count -= 1 if char == ')'\n\
    \    return 'No' if count < 0\n  end\n  'Yes'\nend", "  lst.join.count('(') ==\
    \ lst.join.count(')') ? 'Yes' : 'No'\nend", "  # your code here\nend", "  # your\
    \ code here\nend", "  # your code here\nend", "  # your code here\nend", "  return\
    \ 'No' if lst.first.count('(') != lst.last.count(')')\n  return 'Yes' if lst.first.count('(')\
    \ == lst.last.count(')')\n  return 'Yes' if lst.first.count('(') < lst.last.count(')')\n\
    \  return 'Yes' if lst.first.count('(') > lst.last.count(')')\nend", "  # Your\
    \ code here\nend", "  lst.join.count('(') == lst.join.count(')') ? 'Yes' : 'No'\n\
    end", "  str = lst.join\n  return 'Yes' if str.empty?\n  return 'No' if str.count('(')\
    \ != str.count(')')\n  return 'No' if str[0] == ')'\n  return 'No' if str[-1]\
    \ == '('\n  return 'No' if str.count('(') > str.count(')')\n  return 'No' if str.count(')')\
    \ > str.count('(')\n  return 'Yes'\nend", "  return 'No' if lst.include?('(')\
    \ && lst.include?(')')\n  return 'Yes' if lst.include?('(') && !lst.include?(')')\n\
    \  return 'Yes' if !lst.include?('(') && lst.include?(')')\n  return 'No' if !lst.include?('(')\
    \ && !lst.include?(')')\nend", "  return 'No' if lst.first.count('(') != lst.last.count(')')\n\
    \  return 'Yes' if lst.first.count('(') == lst.last.count(')')\n  lst.first.count('(')\
    \ > lst.last.count(')') ? 'Yes' : 'No'\nend", "  # your code here\nend", "  lst.join.count('(')\
    \ == lst.join.count(')') ? 'Yes' : 'No'\nend", "  # your code here\nend", "  #\
    \ your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  return 'No' if lst.any? { |str| str.count('(') !=\
    \ str.count(')') }\n  lst.permutation.any? { |str1, str2| str1 + str2 == str1\
    \ + str2.reverse } ? 'Yes' : 'No'\nend", "  # your code here\nend", "  # your\
    \ code here\nend", "  # your code here\nend", "  lst.join.count('(') == lst.join.count(')')\
    \ ? 'Yes' : 'No'\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  lst.each do |str|\n    return 'No' if str.count('(') != str.count(')')\n  end\n\
    \  'Yes'\nend", "  # your code here\nend", "  str1, str2 = lst\n  str1.gsub!(/\\\
    (\\)/, '')\n  str2.gsub!(/\\(\\)/, '')\n  return 'Yes' if str1.empty? && str2.empty?\n\
    \  return 'No' if str1.empty? && str2.count('(') != str2.count(')')\n  return\
    \ 'No' if str2.empty? && str1.count('(') != str1.count(')')\n  return 'No' if\
    \ str1.count('(') != str1.count(')') && str2.count('(') != str2.count(')')\n \
    \ return 'Yes' if str1.count('(') == str1.count(')') && str2.count('(') == str2.count(')')\n\
    \  return 'Yes' if str1.count('(') == str1.count(')') && str2.count('(') != str2.count(')')\n\
    \  return 'Yes' if str1.count('(') != str1.count(')') && str2.count('(') == str2.count(')')\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  lst.join.count('(') == lst.join.count(')') ? 'Yes' : 'No'\nend", "  lst.join.gsub(/\\\
    (\\)/, '').empty? ? 'Yes' : 'No'\nend", "  lst.join.gsub(/\\(\\)/, '').match(/\\\
    (\\)|\\)\\(/) ? 'No' : 'Yes'\nend", "  lst.join.chars.reduce(0) do |acc, char|\n\
    \    return 'No' if acc < 0\n    char == '(' ? acc + 1 : acc - 1\n  end == 0 ?\
    \ 'Yes' : 'No'\nend", "  # your code here\nend", "  # your code here\nend", " \
    \ # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  lst.join.chars.reduce(0) do |acc, char|\n    if acc < 0\n      return 'No'\n\
    \    else\n      char == '(' ? acc + 1 : acc - 1\n    end\n  end == 0 ? 'Yes'\
    \ : 'No'\nend", "  # your code here\nend", "  # your code here\nend", "  # your\
    \ code here\nend", "  # your code here\nend", "  # your code here\nend", "  #\
    \ your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  return 'No' if lst.any? { |str| str.count('(') != str.count(')') }\n  return\
    \ 'Yes' if lst.join.count('(') == lst.join.count(')')\n  'No'\nend", "  # your\
    \ code here\nend", "  str1 = lst[0]\n  str2 = lst[1]\n  if str1.length == 0\n\
    \    return 'Yes' if str2.count('(') == str2.count(')')\n    return 'No'\n  elsif\
    \ str2.length == 0\n    return 'Yes' if str1.count('(') == str1.count(')')\n \
    \   return 'No'\n  end\n  if str1[0] == '('\n    if str2[0] == '('\n      match_parens([str1[1..-1],\
    \ str2])\n    elsif str2[0] == ')'\n      match_parens([str1[1..-1], str2[1..-1]])\n\
    \    end\n  elsif str1[0] == ')'\n    if str2[0] == '('\n      match_parens([str1,\
    \ str2[1..-1]])\n    elsif str2[0] == ')'\n      match_parens([str1[1..-1], str2[1..-1]])\n\
    \    end\n  end\nend", "  lst.join.count('(') == lst.join.count(')') ? 'Yes' :\
    \ 'No'\nend", "  open = 0\n  close = 0\n  lst.each do |str|\n    open += str.count('(')\n\
    \    close += str.count(')')\n  end\n  open == close ? 'Yes' : 'No'\nend", " \
    \ # your code here\nend", "  open = 0\n  close = 0\n  lst.each do |str|\n    str.each_char\
    \ do |char|\n      open += 1 if char == '('\n      close += 1 if char == ')'\n\
    \    end\n  end\n  open == close ? 'Yes' : 'No'\nend", "  # your code here\nend",
  "  open = 0\n  lst.each do |str|\n    str.each_char do |char|\n      open += 1 if\
    \ char == '('\n      open -= 1 if char == ')'\n      return 'No' if open < 0\n\
    \    end\n  end\n  open == 0 ? 'Yes' : 'No'\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  lst.join.count('(') ==\
    \ lst.join.count(')') ? 'Yes' : 'No'\nend", "  lst.join.count('(') == lst.join.count(')')\
    \ ? 'Yes' : 'No'\nend", "  return 'No' if lst.include?('(') && lst.include?(')')\n\
    \  return 'Yes' if lst.include?('(')\n  return 'Yes' if lst.include?(')')\n  'No'\n\
    end", "  # your code here\nend", "  lst.join.count('(') == lst.join.count(')')\
    \ ? 'Yes' : 'No'\nend", "  # your code here\nend", "  # your code here\nend",
  "  return 'No' if lst.first.count('(') != lst.last.count(')')\n  return 'Yes' if\
    \ lst.first.count('(') == lst.last.count(')')\n  return 'Yes' if lst.first.count('(')\
    \ < lst.last.count(')')\n  return 'Yes' if lst.first.count('(') > lst.last.count(')')\n\
    end", "  # your code here\nend", "  parens = { '(' => ')', ')' => '(' }\n  str1\
    \ = lst[0]\n  str2 = lst[1]\n  str1.each_char do |char|\n    if parens[char] ==\
    \ str2[0]\n      str2 = str2[1..-1]\n    end\n  end\n  str2.empty? ? 'Yes' : 'No'\n\
    end", "  # your code here\nend", "  # your code here\nend", "  return 'No' if\
    \ lst.any? { |str| str.count('(') != str.count(')') }\n  return 'Yes' if lst.all?\
    \ { |str| str.count('(') == str.count(')') }\n  'Yes'\nend", "  return 'No' if\
    \ lst.first.count('(') != lst.last.count(')')\n  return 'Yes' if lst.first.count('(')\
    \ == lst.last.count(')')\n  'No'\nend", "  # your code here\nend", "  lst.join.count('(')\
    \ == lst.join.count(')') ? 'Yes' : 'No'\nend", "  # your code here\nend", "  #\
    \ your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  lst.join.scan(/\\(\\)/).size == lst.join.size / 2 ? 'Yes' : 'No'\nend", "  lst.join.scan(/\\\
    (/).count == lst.join.scan(/\\)/).count ? 'Yes' : 'No'\nend", "  # your code here\n\
    end", "  # your code here\nend", "  lst.join.count('(') == lst.join.count(')')\
    \ ? 'Yes' : 'No'\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  open = 0\n  close = 0\n\
    \  lst.each do |str|\n    str.each_char do |char|\n      if char == '('\n    \
    \    open += 1\n      else\n        close += 1\n      end\n    end\n  end\n  open\
    \ == close ? 'Yes' : 'No'\nend", "  # your code here\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
