name: HumanEval_20_find_closest_elements
language: ruby
prompt: "# From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n# other and return them in order (smaller number,\
  \ larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
  # (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n# (2.0,\
  \ 2.0)\ndef find_closest_elements(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
  \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0,\
  \ 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0,\
  \ 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0,\
  \ 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2,\
  \ 3.1, 4.1, 5.1]))\n  end\nend\n"
completions: ["  numbers.combination(2).to_a.min_by { |a, b| (a - b).abs }\nend",
  "  numbers.sort!\n  closest = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]).abs\
    \ < (closest[1] - closest[0]).abs\n      closest = [numbers[index - 1], num]\n\
    \    end\n  end\n  closest\nend", "  numbers.combination(2).min_by { |a, b| (a\
    \ - b).abs }\nend", "  numbers.sort!\n  closest = numbers[1] - numbers[0]\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number, index|\n \
    \   if index < numbers.length - 1\n      if numbers[index + 1] - number < closest\n\
    \        closest = numbers[index + 1] - number\n        closest_pair = [number,\
    \ numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\nend", "  closest\
    \ = numbers.combination(2).map { |a, b| (a - b).abs }.min\n  numbers.combination(2).select\
    \ { |a, b| (a - b).abs == closest }.flatten.sort\nend", "  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend", "  numbers.combination(2).min_by { |x, y| (x -\
    \ y).abs }\nend", "  numbers.sort!\n  closest = numbers[1] - numbers[0]\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number, index|\n \
    \   if index < numbers.length - 1\n      if numbers[index + 1] - number < closest\n\
    \        closest = numbers[index + 1] - number\n        closest_pair = [number,\
    \ numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n\
    \  closest_distance = numbers[1] - numbers[0]\n  closest_elements = [numbers[0],\
    \ numbers[1]]\n  numbers.each_with_index do |number, index|\n    next if index\
    \ == 0\n    if (number - numbers[index - 1]) < closest_distance\n      closest_distance\
    \ = number - numbers[index - 1]\n      closest_elements = [numbers[index - 1],\
    \ number]\n    end\n  end\n  closest_elements\nend", "  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff =\
    \ (num - numbers[index - 1]).abs\n    if diff < closest_diff\n      closest_pair\
    \ = [numbers[index - 1], num]\n      closest_diff = diff\n    end\n  end\n  closest_pair\n\
    end", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_diff\
    \ = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |num, index|\n\
    \    next if index == 0\n    diff = (num - numbers[index - 1]).abs\n    if diff\
    \ < closest_diff\n      closest_pair = [numbers[index - 1], num]\n      closest_diff\
    \ = diff\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff =\
    \ (num - numbers[index - 1]).abs\n    if diff < closest_diff\n      closest_pair\
    \ = [numbers[index - 1], num]\n      closest_diff = diff\n    end\n  end\n  closest_pair\n\
    end", "  numbers.sort!\n  closest = numbers[1] - numbers[0]\n  closest_pair =\
    \ [numbers[0], numbers[1]]\n  numbers.each_with_index do |number, index|\n   \
    \ if index == numbers.length - 1\n      break\n    end\n    if numbers[index +\
    \ 1] - number < closest\n      closest = numbers[index + 1] - number\n      closest_pair\
    \ = [number, numbers[index + 1]]\n    end\n  end\n  closest_pair\nend", "  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend", "  # TODO: implement this method\n  numbers.sort!\n\
    \  closest_elements = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1]\
    \ - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    if index\
    \ < numbers.length - 1\n      if (numbers[index + 1] - number).abs < closest_difference\n\
    \        closest_elements = [number, numbers[index + 1]]\n        closest_difference\
    \ = (numbers[index + 1] - number).abs\n      end\n    end\n  end\n  closest_elements\n\
    end", "  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference\
    \ = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n\
    \    next if index == 0\n    difference = (number - numbers[index - 1]).abs\n\
    \    if difference < closest_difference\n      closest_elements = [numbers[index\
    \ - 1], number]\n      closest_difference = difference\n    end\n  end\n  closest_elements\n\
    end", "  numbers.combination(2).min_by { |x, y| (x - y).abs }\nend", "  numbers.sort!\n\
    \  closest = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  numbers.each_with_index do |num, index|\n    if index < numbers.length - 1\n\
    \      if numbers[index + 1] - num < closest\n        closest = numbers[index\
    \ + 1] - num\n        closest_pair = [num, numbers[index + 1]]\n      end\n  \
    \  end\n  end\n  closest_pair\nend", "  numbers.combination(2).min_by { |a, b|\
    \ (a - b).abs }\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_diff = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do\
    \ |num, i|\n    next if i == 0\n    diff = (num - numbers[i - 1]).abs\n    if\
    \ diff < closest_diff\n      closest_pair = [numbers[i - 1], num]\n      closest_diff\
    \ = diff\n    end\n  end\n  closest_pair\nend", "  numbers.combination(2).min_by\
    \ { |x, y| (x - y).abs }\nend", "  numbers.combination(2).map { |a, b| [a, b,\
    \ (a - b).abs] }.min_by { |a, b, c| c }[0..1]\nend", "  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend", "  numbers.sort!\n  closest = numbers[1] - numbers[0]\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num,\
    \ index|\n    if index < numbers.length - 1\n      if numbers[index + 1] - num\
    \ < closest\n        closest = numbers[index + 1] - num\n        closest_pair\
    \ = [num, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\nend",
  "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1]\
    \ - numbers[0]).abs\n  numbers.each_with_index do |num, index|\n    next if index\
    \ == 0\n    if (num - numbers[index - 1]).abs < closest_diff\n      closest_pair\
    \ = [numbers[index - 1], num]\n      closest_diff = (num - numbers[index - 1]).abs\n\
    \    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest = numbers[1]\
    \ - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |number, index|\n    if index < numbers.length - 1\n      if numbers[index\
    \ + 1] - number < closest\n        closest = numbers[index + 1] - number\n   \
    \     closest_pair = [number, numbers[index + 1]]\n      end\n    end\n  end\n\
    \  closest_pair\nend", "  numbers.combination(2).min_by { |a, b| (a - b).abs }\n\
    end", "  numbers.sort!\n  closest = [numbers[0], numbers[1]]\n  (0..numbers.length-2).each\
    \ do |i|\n    if (numbers[i+1] - numbers[i]).abs < (closest[1] - closest[0]).abs\n\
    \      closest = [numbers[i], numbers[i+1]]\n    end\n  end\n  closest\nend",
  "  numbers.combination(2).map { |x, y| [x, y, (x - y).abs] }.sort_by { |x, y, z|\
    \ z }.first[0..1]\nend", "  numbers.combination(2).min_by { |x, y| (x - y).abs\
    \ }\nend", "  numbers.sort!\n  closest = numbers[1] - numbers[0]\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number, index|\n \
    \   if index < numbers.length - 1\n      if numbers[index + 1] - number < closest\n\
    \        closest = numbers[index + 1] - number\n        closest_pair = [number,\
    \ numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff =\
    \ (num - numbers[index - 1]).abs\n    if diff < closest_diff\n      closest_pair\
    \ = [numbers[index - 1], num]\n      closest_diff = diff\n    end\n  end\n  closest_pair\n\
    end", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_diff\
    \ = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |num, i|\n   \
    \ next if i == numbers.length - 1\n    diff = (numbers[i + 1] - num).abs\n   \
    \ if diff < closest_diff\n      closest_pair = [num, numbers[i + 1]]\n      closest_diff\
    \ = diff\n    end\n  end\n  closest_pair\nend", "  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend", "  numbers.combination(2).min_by { |a, b| (a -\
    \ b).abs }\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_diff = closest_pair[1] - closest_pair[0]\n  numbers.each_with_index\
    \ do |num, index|\n    next if index == 0\n    diff = num - numbers[index - 1]\n\
    \    if diff < closest_diff\n      closest_pair = [numbers[index - 1], num]\n\
    \      closest_diff = diff\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n\
    \  closest = [numbers[0], numbers[1]]\n  closest_diff = (closest[0] - closest[1]).abs\n\
    \  numbers.each_with_index do |num, i|\n    next if i == 0\n    diff = (num -\
    \ numbers[i - 1]).abs\n    if diff < closest_diff\n      closest = [numbers[i\
    \ - 1], num]\n      closest_diff = diff\n    end\n  end\n  closest\nend", "  numbers.sort!\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff =\
    \ (num - numbers[index - 1]).abs\n    if diff < closest_diff\n      closest_pair\
    \ = [numbers[index - 1], num]\n      closest_diff = diff\n    end\n  end\n  closest_pair\n\
    end", "  # TODO: implement this function\n  numbers.sort!\n  closest = numbers[1]\
    \ - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    if index < numbers.length - 1\n      if numbers[index +\
    \ 1] - num < closest\n        closest = numbers[index + 1] - num\n        closest_pair\
    \ = [num, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\nend",
  "  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference\
    \ = closest_elements[1] - closest_elements[0]\n  numbers.each_with_index do |number,\
    \ index|\n    next if index == 0\n    difference = numbers[index] - numbers[index\
    \ - 1]\n    if difference < closest_difference\n      closest_elements = [numbers[index\
    \ - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n\
    \  closest_elements\nend", "  numbers.combination(2).min_by { |a, b| (a - b).abs\
    \ }\nend", "  numbers.combination(2).min_by { |a, b| (a - b).abs }\nend", "  numbers.sort!\n\
    \  closest = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  numbers.each_with_index do |num, index|\n    if index < numbers.length - 1\n\
    \      if numbers[index + 1] - num < closest\n        closest = numbers[index\
    \ + 1] - num\n        closest_pair = [num, numbers[index + 1]]\n      end\n  \
    \  end\n  end\n  closest_pair\nend", "  # TODO: implement this method\n  numbers.sort!\n\
    \  closest = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  for i in 0..numbers.length-2\n    if numbers[i+1] - numbers[i] < closest\n\
    \      closest = numbers[i+1] - numbers[i]\n      closest_pair = [numbers[i],\
    \ numbers[i+1]]\n    end\n  end\n  return closest_pair\nend", "  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend", "  numbers.sort!\n  closest_elements = [numbers[0],\
    \ numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |number, index|\n    next if index == 0\n    difference = (number - numbers[index\
    \ - 1]).abs\n    if difference < closest_difference\n      closest_elements =\
    \ [numbers[index - 1], number]\n      closest_difference = difference\n    end\n\
    \  end\n  closest_elements\nend", "  numbers.sort!\n  closest = numbers[1] - numbers[0]\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num,\
    \ index|\n    if index != numbers.length - 1\n      if numbers[index + 1] - num\
    \ < closest\n        closest = numbers[index + 1] - num\n        closest_pair\
    \ = [num, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\nend",
  "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1]\
    \ - numbers[0]).abs\n  numbers.each_with_index do |num, index|\n    next if index\
    \ == 0\n    if (num - numbers[index - 1]).abs < closest_diff\n      closest_pair\
    \ = [numbers[index - 1], num]\n      closest_diff = (num - numbers[index - 1]).abs\n\
    \    end\n  end\n  closest_pair\nend", "  # TODO: implement this method\n  numbers.sort!\n\
    \  min = numbers[1] - numbers[0]\n  result = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |number, index|\n    if index < numbers.length - 1\n      if numbers[index\
    \ + 1] - number < min\n        min = numbers[index + 1] - number\n        result\
    \ = [number, numbers[index + 1]]\n      end\n    end\n  end\n  result\nend", " \
    \ numbers.sort!\n  closest = numbers[1] - numbers[0]\n  closest_pair = [numbers[0],\
    \ numbers[1]]\n  numbers.each_with_index do |num, index|\n    if index < numbers.length\
    \ - 1\n      if numbers[index + 1] - num < closest\n        closest = numbers[index\
    \ + 1] - num\n        closest_pair = [num, numbers[index + 1]]\n      end\n  \
    \  end\n  end\n  closest_pair\nend", "  numbers.combination(2).min_by { |a, b|\
    \ (a - b).abs }\nend", "  # TODO: implement this function\n  numbers.sort!\n \
    \ closest_pair = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |number, index|\n    if index == numbers.length\
    \ - 1\n      break\n    end\n    if (numbers[index + 1] - number).abs < closest_diff\n\
    \      closest_pair = [number, numbers[index + 1]]\n      closest_diff = (numbers[index\
    \ + 1] - number).abs\n    end\n  end\n  closest_pair\nend", "  # Your code here\n\
    end", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_diff\
    \ = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |num, index|\n\
    \    next if index == 0\n    diff = (num - numbers[index - 1]).abs\n    if diff\
    \ < closest_diff\n      closest_pair = [numbers[index - 1], num]\n      closest_diff\
    \ = diff\n    end\n  end\n  closest_pair\nend", "  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend", "  numbers.combination(2).min_by { |x, y| (x -\
    \ y).abs }\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_diff = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do\
    \ |num, index|\n    next if index == 0\n    diff = (num - numbers[index - 1]).abs\n\
    \    if diff < closest_diff\n      closest_pair = [numbers[index - 1], num]\n\
    \      closest_diff = diff\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n\
    \  closest = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  for i in 0..numbers.length-2\n    if numbers[i+1] - numbers[i] < closest\n\
    \      closest = numbers[i+1] - numbers[i]\n      closest_pair = [numbers[i],\
    \ numbers[i+1]]\n    end\n  end\n  return closest_pair\nend", "  numbers.sort!\n\
    \  closest = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    if num\
    \ - numbers[index - 1] < closest\n      closest = num - numbers[index - 1]\n \
    \     closest_pair = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\n\
    end", "  numbers.sort!\n  closest = numbers[1] - numbers[0]\n  closest_pair =\
    \ [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    if\
    \ index < numbers.length - 1\n      if numbers[index + 1] - num < closest\n  \
    \      closest = numbers[index + 1] - num\n        closest_pair = [num, numbers[index\
    \ + 1]]\n      end\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n \
    \ closest_elements = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1]\
    \ - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if\
    \ index == 0\n    difference = (number - numbers[index - 1]).abs\n    if difference\
    \ < closest_difference\n      closest_elements = [numbers[index - 1], number]\n\
    \      closest_difference = difference\n    end\n  end\n  closest_elements\nend",
  "  numbers.combination(2).min_by { |a, b| (a - b).abs }\nend", "  numbers.sort!\n\
    \  closest = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  numbers.each_with_index do |num, index|\n    if index < numbers.length - 1\n\
    \      if numbers[index + 1] - num < closest\n        closest = numbers[index\
    \ + 1] - num\n        closest_pair = [num, numbers[index + 1]]\n      end\n  \
    \  end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0],\
    \ numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |num, index|\n    next if index == 0\n    diff = (num - numbers[index - 1]).abs\n\
    \    if diff < closest_diff\n      closest_pair = [numbers[index - 1], num]\n\
    \      closest_diff = diff\n    end\n  end\n  closest_pair\nend", "  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend", "  numbers.combination(2).min_by { |a, b| (a -\
    \ b).abs }\nend", "  numbers.combination(2).map { |a, b| [a, b, (a - b).abs] }.sort_by\
    \ { |a, b, c| c }.first[0..1]\nend", "  numbers.combination(2).min_by { |a, b|\
    \ (a - b).abs }\nend", "  numbers.combination(2).min_by { |x, y| (x - y).abs }\n\
    end", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance\
    \ = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n\
    \    next if index == 0\n    if (number - numbers[index - 1]).abs < closest_distance\n\
    \      closest_distance = (number - numbers[index - 1]).abs\n      closest_pair\
    \ = [numbers[index - 1], number]\n    end\n  end\n  closest_pair\nend", "  numbers.combination(2).map\
    \ { |a, b| [a, b, (a - b).abs] }.sort_by { |a, b, c| c }.first[0..1]\nend", " \
    \ numbers.combination(2).min_by { |a, b| (a - b).abs }\nend", "  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend", "  numbers.sort!\n  closest_diff = numbers[1]\
    \ - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]) <\
    \ closest_diff\n      closest_diff = num - numbers[index - 1]\n      closest_pair\
    \ = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\nend", "  numbers.combination(2).min_by\
    \ { |x, y| (x - y).abs }\nend", "  numbers.sort!\n  closest = numbers[1] - numbers[0]\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number,\
    \ index|\n    if index < numbers.length - 1\n      if numbers[index + 1] - number\
    \ < closest\n        closest = numbers[index + 1] - number\n        closest_pair\
    \ = [number, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\n\
    end", "  numbers.combination(2).min_by { |a, b| (a - b).abs }\nend", "  numbers.sort!\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num\
    \ - numbers[index - 1]).abs < closest_diff\n      closest_pair = [numbers[index\
    \ - 1], num]\n      closest_diff = (num - numbers[index - 1]).abs\n    end\n \
    \ end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_diff = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do\
    \ |num, i|\n    next if i == 0\n    diff = (num - numbers[i - 1]).abs\n    if\
    \ diff < closest_diff\n      closest_pair = [numbers[i - 1], num]\n      closest_diff\
    \ = diff\n    end\n  end\n  closest_pair\nend", "  numbers.combination(2).to_a.map\
    \ { |x, y| [x, y, (x - y).abs] }.min_by { |x, y, z| z }[0..1]\nend", "  numbers.combination(2).to_a.min_by\
    \ { |x, y| (x - y).abs }\nend", "  # your code here\nend", "  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend", "  numbers.combination(2).min_by { |a, b| (a -\
    \ b).abs }\nend", "  numbers.sort!\n  closest = numbers[1] - numbers[0]\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    if\
    \ index == numbers.length - 1\n      break\n    end\n    if numbers[index + 1]\
    \ - num < closest\n      closest = numbers[index + 1] - num\n      closest_pair\
    \ = [num, numbers[index + 1]]\n    end\n  end\n  closest_pair\nend", "  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend", "  numbers.combination(2).min_by { |a, b| (a -\
    \ b).abs }\nend", "  numbers.combination(2).min_by { |a, b| (a - b).abs }\nend",
  "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1]\
    \ - numbers[0]).abs\n  numbers.each_with_index do |num, index|\n    next if index\
    \ == 0\n    if (num - numbers[index - 1]).abs < closest_diff\n      closest_pair\
    \ = [numbers[index - 1], num]\n      closest_diff = (num - numbers[index - 1]).abs\n\
    \    end\n  end\n  closest_pair\nend", "  numbers.combination(2).min_by { |a,\
    \ b| (a - b).abs }\nend", "  numbers.combination(2).min_by { |a, b| (a - b).abs\
    \ }\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_diff\
    \ = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |num, index|\n\
    \    next if index == 0\n    diff = (num - numbers[index - 1]).abs\n    if diff\
    \ < closest_diff\n      closest_pair = [numbers[index - 1], num]\n      closest_diff\
    \ = diff\n    end\n  end\n  closest_pair\nend", "  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend", "  numbers.combination(2).min_by { |a, b| (a -\
    \ b).abs }\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_distance = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |number, index|\n    next if index == 0\n    if (number - numbers[index -\
    \ 1]).abs < closest_distance\n      closest_distance = (number - numbers[index\
    \ - 1]).abs\n      closest_pair = [numbers[index - 1], number]\n    end\n  end\n\
    \  closest_pair\nend", "  numbers.sort!\n  closest = numbers[1] - numbers[0]\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  for i in 0..numbers.length-2\n \
    \   if (numbers[i+1] - numbers[i]) < closest\n      closest = numbers[i+1] - numbers[i]\n\
    \      closest_pair = [numbers[i], numbers[i+1]]\n    end\n  end\n  return closest_pair\n\
    end", "  numbers.combination(2).min_by { |a, b| (a - b).abs }\nend", "  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend", "  numbers.combination(2).min_by { |a, b| (a -\
    \ b).abs }\nend", "  numbers.combination(2).map { |a, b| [a, b, (a - b).abs] }.min_by\
    \ { |a, b, c| c }[0..1]\nend", "  numbers.combination(2).min_by { |a, b| (a -\
    \ b).abs }\nend", "  # TODO: implement this method\n  numbers.sort!\n  closest_elements\
    \ = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number, index|\n \
    \   if index < numbers.length - 1\n      if (number - numbers[index + 1]).abs\
    \ < (closest_elements[0] - closest_elements[1]).abs\n        closest_elements\
    \ = [number, numbers[index + 1]]\n      end\n    end\n  end\n  closest_elements\n\
    end", "  numbers.sort!\n  closest = numbers[1] - numbers[0]\n  closest_pair =\
    \ [numbers[0], numbers[1]]\n  for i in 0..numbers.length-2\n    if numbers[i+1]\
    \ - numbers[i] < closest\n      closest = numbers[i+1] - numbers[i]\n      closest_pair\
    \ = [numbers[i], numbers[i+1]]\n    end\n  end\n  return closest_pair\nend", " \
    \ numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0],\
    \ numbers[1]]\n  numbers.each_with_index do |num, index|\n    next if index ==\
    \ 0\n    diff = num - numbers[index - 1]\n    if diff < closest_diff\n      closest_diff\
    \ = diff\n      closest_pair = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\n\
    end", "  numbers.combination(2).min_by { |x, y| (x - y).abs }\nend", "  numbers.combination(2).map\
    \ { |n1, n2| [n1, n2, (n1 - n2).abs] }.sort_by { |n1, n2, diff| diff }.first[0..1]\n\
    end", "  numbers.combination(2).min_by { |a, b| (a - b).abs }\nend", "  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend", "  numbers.sort!\n  closest_pair = [numbers[0],\
    \ numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |num, index|\n    if index < numbers.length - 1\n      distance = (numbers[index\
    \ + 1] - num).abs\n      if distance < closest_distance\n        closest_distance\
    \ = distance\n        closest_pair = [num, numbers[index + 1]]\n      end\n  \
    \  end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_elements = [numbers[0],\
    \ numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |number, index|\n    next if index == 0\n    difference = (number - numbers[index\
    \ - 1]).abs\n    if difference < closest_difference\n      closest_elements =\
    \ [numbers[index - 1], number]\n      closest_difference = difference\n    end\n\
    \  end\n  closest_elements\nend", "  numbers.sort!\n  closest = numbers[1] - numbers[0]\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  for i in 0..numbers.length-2\n \
    \   if numbers[i+1] - numbers[i] < closest\n      closest = numbers[i+1] - numbers[i]\n\
    \      closest_pair = [numbers[i], numbers[i+1]]\n    end\n  end\n  return closest_pair\n\
    end", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance\
    \ = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |num, index|\n\
    \    next if index == 0\n    if (num - numbers[index - 1]).abs < closest_distance\n\
    \      closest_distance = (num - numbers[index - 1]).abs\n      closest_pair =\
    \ [numbers[index - 1], num]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n\
    \  closest = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  numbers.each_with_index do |number, index|\n    if index == numbers.length\
    \ - 1\n      break\n    end\n    if numbers[index + 1] - number < closest\n  \
    \    closest = numbers[index + 1] - number\n      closest_pair = [number, numbers[index\
    \ + 1]]\n    end\n  end\n  closest_pair\nend", "  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend", "  numbers.combination(2).min_by { |a, b| (a -\
    \ b).abs }\nend", "  numbers.sort!\n  closest = [numbers[0], numbers[1]]\n  closest_diff\
    \ = (closest[0] - closest[1]).abs\n  numbers.each_with_index do |num, i|\n   \
    \ next if i == numbers.length - 1\n    diff = (num - numbers[i + 1]).abs\n   \
    \ if diff < closest_diff\n      closest = [num, numbers[i + 1]]\n      closest_diff\
    \ = diff\n    end\n  end\n  closest\nend", "  numbers.sort!\n  closest = numbers[1]\
    \ - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    if index < numbers.length - 1\n      if numbers[index +\
    \ 1] - num < closest\n        closest = numbers[index + 1] - num\n        closest_pair\
    \ = [num, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\nend",
  "  numbers.combination(2).to_a.min_by { |x, y| (x - y).abs }\nend", "  numbers.sort!\n\
    \  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num\
    \ - numbers[index - 1]) < closest_diff\n      closest_diff = num - numbers[index\
    \ - 1]\n      closest_pair = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\n\
    end", "  # YOUR CODE HERE\n  numbers.combination(2).min_by { |a, b| (a - b).abs\
    \ }\nend", "  # TODO: implement this method\n  numbers.combination(2).min_by {\
    \ |a, b| (a - b).abs }\nend", "  numbers.combination(2).map { |x, y| [x, y, (x\
    \ - y).abs] }.min_by { |x, y, z| z }[0..1]\nend", "  numbers.sort!\n  closest\
    \ = numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n \
    \ numbers.each_with_index do |number, index|\n    next if index == 0\n    if numbers[index]\
    \ - numbers[index - 1] < closest\n      closest = numbers[index] - numbers[index\
    \ - 1]\n      closest_elements = [numbers[index - 1], numbers[index]]\n    end\n\
    \  end\n  closest_elements\nend", "  numbers.sort!\n  closest = numbers[1] - numbers[0]\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num,\
    \ index|\n    if index < numbers.length - 1\n      if numbers[index + 1] - num\
    \ < closest\n        closest = numbers[index + 1] - num\n        closest_pair\
    \ = [num, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\nend",
  "  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference\
    \ = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n  \
    \  next if index == 0\n    difference = number - numbers[index - 1]\n    if difference\
    \ < closest_difference\n      closest_elements = [numbers[index - 1], number]\n\
    \      closest_difference = difference\n    end\n  end\n  closest_elements\nend",
  "  numbers.combination(2).min_by { |x, y| (x - y).abs }\nend", "  numbers.sort!\n\
    \  closest = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  numbers.each_with_index do |num, index|\n    if index < numbers.length - 1\n\
    \      if numbers[index + 1] - num < closest\n        closest = numbers[index\
    \ + 1] - num\n        closest_pair = [num, numbers[index + 1]]\n      end\n  \
    \  end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest = [numbers[0],\
    \ numbers[1]]\n  (0..numbers.length-2).each do |i|\n    if (numbers[i+1] - numbers[i]).abs\
    \ < (closest[1] - closest[0]).abs\n      closest = [numbers[i], numbers[i+1]]\n\
    \    end\n  end\n  closest\nend", "  numbers.combination(2).min_by { |x, y| (x\
    \ - y).abs }\nend", "  numbers.combination(2).min_by { |a, b| (a - b).abs }\n\
    end", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance\
    \ = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |num, index|\n\
    \    if index < numbers.length - 1\n      if (numbers[index + 1] - num).abs <\
    \ closest_distance\n        closest_pair = [num, numbers[index + 1]]\n       \
    \ closest_distance = (numbers[index + 1] - num).abs\n      end\n    end\n  end\n\
    \  closest_pair\nend", "  # TODO: implement this method\nend", "  numbers.sort!\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num\
    \ - numbers[index - 1]).abs < closest_diff\n      closest_pair = [numbers[index\
    \ - 1], num]\n      closest_diff = (num - numbers[index - 1]).abs\n    end\n \
    \ end\n  closest_pair\nend", "  numbers.combination(2).min_by { |a, b| (a - b).abs\
    \ }\nend", "  numbers.combination(2).min_by { |a, b| (a - b).abs }\nend", "  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend", "  numbers.sort!\n  closest_pair = [numbers[0],\
    \ numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |num, index|\n    next if index == 0\n    diff = (num - numbers[index - 1]).abs\n\
    \    if diff < closest_diff\n      closest_pair = [numbers[index - 1], num]\n\
    \      closest_diff = diff\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n\
    \  closest = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  numbers.each_with_index do |num, index|\n    if index < numbers.length - 1\n\
    \      if numbers[index + 1] - num < closest\n        closest = numbers[index\
    \ + 1] - num\n        closest_pair = [num, numbers[index + 1]]\n      end\n  \
    \  end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_elements = [numbers[0],\
    \ numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index\
    \ do |number, index|\n    next if index == 0\n    difference = number - numbers[index\
    \ - 1]\n    if difference < closest_difference\n      closest_elements = [numbers[index\
    \ - 1], number]\n      closest_difference = difference\n    end\n  end\n  closest_elements\n\
    end", "  numbers.combination(2).min_by { |a, b| (a - b).abs }\nend", "  numbers.sort!\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  closest_diff = numbers[1] - numbers[0]\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    if num\
    \ - numbers[index - 1] < closest_diff\n      closest_pair = [numbers[index - 1],\
    \ num]\n      closest_diff = num - numbers[index - 1]\n    end\n  end\n  closest_pair\n\
    end", "  # TODO: Implement this function\n  # TODO: Implement this function\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  closest_diff = (numbers[0] - numbers[1]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num\
    \ - numbers[index - 1]).abs < closest_diff\n      closest_pair = [numbers[index\
    \ - 1], num]\n      closest_diff = (num - numbers[index - 1]).abs\n    end\n \
    \ end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_distance = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |num, i|\n    if i < numbers.length - 1\n      distance = (numbers[i + 1]\
    \ - num).abs\n      if distance < closest_distance\n        closest_distance =\
    \ distance\n        closest_pair = [num, numbers[i + 1]]\n      end\n    end\n\
    \  end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0],\
    \ numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |number, index|\n    next if index == 0\n    if (number - numbers[index -\
    \ 1]).abs < closest_diff\n      closest_pair = [numbers[index - 1], number]\n\
    \      closest_diff = (number - numbers[index - 1]).abs\n    end\n  end\n  closest_pair\n\
    end", "  numbers.sort!\n  closest = numbers[1] - numbers[0]\n  closest_pair =\
    \ [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    if\
    \ index < numbers.length - 1\n      if numbers[index + 1] - num < closest\n  \
    \      closest = numbers[index + 1] - num\n        closest_pair = [num, numbers[index\
    \ + 1]]\n      end\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n \
    \ closest = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  numbers.each_with_index do |num, index|\n    if index < numbers.length - 1\n\
    \      if numbers[index + 1] - num < closest\n        closest = numbers[index\
    \ + 1] - num\n        closest_pair = [num, numbers[index + 1]]\n      end\n  \
    \  end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_diff = numbers[1]\
    \ - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    if index < numbers.length - 1\n      diff = numbers[index\
    \ + 1] - num\n      if diff < closest_diff\n        closest_diff = diff\n    \
    \    closest_pair = [num, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\n\
    end", "  numbers.sort!\n  closest = numbers[1] - numbers[0]\n  closest_pair =\
    \ [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    if\
    \ index < numbers.length - 1\n      if numbers[index + 1] - num < closest\n  \
    \      closest = numbers[index + 1] - num\n        closest_pair = [num, numbers[index\
    \ + 1]]\n      end\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n \
    \ closest = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  numbers.each_with_index do |number, index|\n    if index < numbers.length -\
    \ 1\n      if numbers[index + 1] - number < closest\n        closest = numbers[index\
    \ + 1] - number\n        closest_pair = [number, numbers[index + 1]]\n      end\n\
    \    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest = numbers[1]\
    \ - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    if index < numbers.length - 1\n      if numbers[index +\
    \ 1] - num < closest\n        closest = numbers[index + 1] - num\n        closest_pair\
    \ = [num, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\nend",
  "  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference\
    \ = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n\
    \    next if index == 0\n    difference = (number - numbers[index - 1]).abs\n\
    \    if difference < closest_difference\n      closest_elements = [numbers[index\
    \ - 1], number]\n      closest_difference = difference\n    end\n  end\n  closest_elements\n\
    end", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_diff\
    \ = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |num, index|\n\
    \    next if index == 0\n    if (num - numbers[index - 1]).abs < closest_diff\n\
    \      closest_pair = [numbers[index - 1], num]\n      closest_diff = (num - numbers[index\
    \ - 1]).abs\n    end\n  end\n  closest_pair\nend", "  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend", "  numbers.sort!\n  closest = numbers[1] - numbers[0]\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number,\
    \ index|\n    if index < numbers.length - 1\n      if numbers[index + 1] - number\
    \ < closest\n        closest = numbers[index + 1] - number\n        closest_pair\
    \ = [number, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\n\
    end", "  numbers.combination(2).min_by { |a, b| (a - b).abs }\nend", "  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend", "  numbers.sort!\n  closest_pair = [numbers[0],\
    \ numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |num, index|\n    next if index == 0\n    diff = (num - numbers[index - 1]).abs\n\
    \    if diff < closest_diff\n      closest_pair = [numbers[index - 1], num]\n\
    \      closest_diff = diff\n    end\n  end\n  closest_pair\nend", "  # TODO: implement\
    \ this method\n  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n\
    \  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |number, index|\n    if index < numbers.length - 1\n      difference = (numbers[index\
    \ + 1] - number).abs\n      if difference < closest_difference\n        closest_difference\
    \ = difference\n        closest_elements = [number, numbers[index + 1]]\n    \
    \  end\n    end\n  end\n  closest_elements\nend", "  numbers.sort!\n  closest_elements\
    \ = [numbers[0], numbers[1]]\n  closest_difference = closest_elements[1] - closest_elements[0]\n\
    \  for i in 0..numbers.length-2\n    for j in i+1..numbers.length-1\n      if\
    \ (numbers[j] - numbers[i]) < closest_difference\n        closest_elements = [numbers[i],\
    \ numbers[j]]\n        closest_difference = closest_elements[1] - closest_elements[0]\n\
    \      end\n    end\n  end\n  return closest_elements\nend", "  numbers.sort!\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num\
    \ - numbers[index - 1]).abs < closest_diff\n      closest_pair = [numbers[index\
    \ - 1], num]\n      closest_diff = (num - numbers[index - 1]).abs\n    end\n \
    \ end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_distance = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |number, index|\n    if index < numbers.length - 1\n      distance = (numbers[index\
    \ + 1] - number).abs\n      if distance < closest_distance\n        closest_distance\
    \ = distance\n        closest_pair = [number, numbers[index + 1]]\n      end\n\
    \    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0],\
    \ numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]).abs\
    \ < closest_diff\n      closest_pair = [numbers[index - 1], num]\n      closest_diff\
    \ = (num - numbers[index - 1]).abs\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n\
    \  closest = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  numbers.each_with_index do |number, index|\n    if index < numbers.length -\
    \ 1\n      if numbers[index + 1] - number < closest\n        closest = numbers[index\
    \ + 1] - number\n        closest_pair = [number, numbers[index + 1]]\n      end\n\
    \    end\n  end\n  closest_pair\nend", "  numbers.combination(2).to_a.min_by {\
    \ |x, y| (x - y).abs }\nend", "  numbers.sort!\n  closest = [numbers[0], numbers[1]]\n\
    \  closest_diff = numbers[1] - numbers[0]\n  numbers.each_with_index do |number,\
    \ index|\n    next if index == 0\n    if number - numbers[index - 1] < closest_diff\n\
    \      closest = [numbers[index - 1], number]\n      closest_diff = number - numbers[index\
    \ - 1]\n    end\n  end\n  closest\nend", "  numbers.sort!\n  closest_pair = [numbers[0],\
    \ numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |num, i|\n    next if i == 0\n    diff = (num - numbers[i - 1]).abs\n   \
    \ if diff < closest_diff\n      closest_pair = [numbers[i - 1], num]\n      closest_diff\
    \ = diff\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_cons(2) do |pair|\n    diff = (pair[1] - pair[0]).abs\n    if\
    \ diff < closest_diff\n      closest_pair = pair\n      closest_diff = diff\n\
    \    end\n  end\n  closest_pair\nend", "  numbers.combination(2).min_by { |x,\
    \ y| (x - y).abs }\nend", "  numbers.combination(2).min_by { |a, b| (a - b).abs\
    \ }\nend", "  numbers.combination(2).min_by { |a, b| (a - b).abs }\nend", "  numbers.sort!\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] -\
    \ numbers[0]).abs\n  numbers.each_with_index do |num, index|\n    next if index\
    \ == 0\n    if (num - numbers[index - 1]).abs < closest_distance\n      closest_distance\
    \ = (num - numbers[index - 1]).abs\n      closest_pair = [numbers[index - 1],\
    \ num]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest = numbers[1]\
    \ - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    if index < numbers.length - 1\n      if numbers[index +\
    \ 1] - num < closest\n        closest = numbers[index + 1] - num\n        closest_pair\
    \ = [num, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\nend",
  "  numbers.sort!\n  closest = numbers[1] - numbers[0]\n  closest_pair = [numbers[0],\
    \ numbers[1]]\n  numbers.each_with_index do |num, index|\n    if index < numbers.length\
    \ - 1\n      if numbers[index + 1] - num < closest\n        closest = numbers[index\
    \ + 1] - num\n        closest_pair = [num, numbers[index + 1]]\n      end\n  \
    \  end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest = numbers[1]\
    \ - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  for i in 0..numbers.length-2\n\
    \    if numbers[i+1] - numbers[i] < closest\n      closest = numbers[i+1] - numbers[i]\n\
    \      closest_pair = [numbers[i], numbers[i+1]]\n    end\n  end\n  return closest_pair\n\
    end", "  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference\
    \ = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n\
    \    next if index == 0\n    difference = (number - numbers[index - 1]).abs\n\
    \    if difference < closest_difference\n      closest_elements = [numbers[index\
    \ - 1], number]\n      closest_difference = difference\n    end\n  end\n  closest_elements\n\
    end", "  numbers.combination(2).min_by { |a, b| (a - b).abs }\nend", "  numbers.sort!\n\
    \  closest = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  numbers.each_with_index do |num, i|\n    if i < numbers.length - 1\n      if\
    \ numbers[i + 1] - num < closest\n        closest = numbers[i + 1] - num\n   \
    \     closest_pair = [num, numbers[i + 1]]\n      end\n    end\n  end\n  closest_pair\n\
    end", "  numbers.sort!\n  closest = numbers[1] - numbers[0]\n  closest_pair =\
    \ [numbers[0], numbers[1]]\n  numbers.each_with_index do |number, index|\n   \
    \ next if index == 0\n    if (number - numbers[index - 1]) < closest\n      closest\
    \ = number - numbers[index - 1]\n      closest_pair = [numbers[index - 1], number]\n\
    \    end\n  end\n  closest_pair\nend", "  numbers.combination(2).min_by { |a,\
    \ b| (a - b).abs }\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_distance = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |number, index|\n    if index < numbers.length - 1\n      distance = (numbers[index\
    \ + 1] - number).abs\n      if distance < closest_distance\n        closest_distance\
    \ = distance\n        closest_pair = [number, numbers[index + 1]]\n      end\n\
    \    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0],\
    \ numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |num, index|\n    next if index == 0\n    diff = (num - numbers[index - 1]).abs\n\
    \    if diff < closest_diff\n      closest_pair = [numbers[index - 1], num]\n\
    \      closest_diff = diff\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] -\
    \ numbers[0]).abs\n  numbers.each_with_index do |num, index|\n    next if index\
    \ == 0\n    if (num - numbers[index - 1]).abs < closest_distance\n      closest_distance\
    \ = (num - numbers[index - 1]).abs\n      closest_pair = [numbers[index - 1],\
    \ num]\n    end\n  end\n  closest_pair\nend", "  numbers.combination(2).to_a.min_by\
    \ { |x, y| (x - y).abs }\nend", "  numbers.sort!\n  closest = numbers[1] - numbers[0]\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  for i in 0..numbers.length-2\n \
    \   if numbers[i+1] - numbers[i] < closest\n      closest = numbers[i+1] - numbers[i]\n\
    \      closest_pair = [numbers[i], numbers[i+1]]\n    end\n  end\n  return closest_pair\n\
    end", "  numbers.combination(2).map { |a, b| [a, b, (a - b).abs] }.sort_by { |a,\
    \ b, c| c }.first[0..1]\nend", "  numbers.combination(2).min_by { |a, b| (a -\
    \ b).abs }\nend", "  numbers.combination(2).min_by { |a, b| (a - b).abs }\nend",
  "  # TODO: Implement this method\n  numbers.sort!\n  closest = numbers[1] - numbers[0]\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number,\
    \ index|\n    if index < numbers.length - 1\n      if numbers[index + 1] - number\
    \ < closest\n        closest = numbers[index + 1] - number\n        closest_pair\
    \ = [number, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\n\
    end", "  numbers.combination(2).min_by { |a, b| (a - b).abs }\nend", "  numbers.sort!\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff =\
    \ (num - numbers[index - 1]).abs\n    if diff < closest_diff\n      closest_pair\
    \ = [numbers[index - 1], num]\n      closest_diff = diff\n    end\n  end\n  closest_pair\n\
    end", "  numbers.sort!\n  closest = numbers[1] - numbers[0]\n  closest_pair =\
    \ [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    next\
    \ if index == 0\n    if numbers[index] - numbers[index - 1] < closest\n      closest\
    \ = numbers[index] - numbers[index - 1]\n      closest_pair = [numbers[index -\
    \ 1], numbers[index]]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n\
    \  closest = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  numbers.each_with_index do |number, index|\n    next if index == numbers.length\
    \ - 1\n    if (numbers[index + 1] - number) < closest\n      closest = numbers[index\
    \ + 1] - number\n      closest_pair = [number, numbers[index + 1]]\n    end\n\
    \  end\n  closest_pair\nend", "  numbers.sort!\n  closest_numbers = [numbers[0],\
    \ numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |number, index|\n    next if index == 0\n    difference = (number - numbers[index\
    \ - 1]).abs\n    if difference < closest_difference\n      closest_numbers = [numbers[index\
    \ - 1], number]\n      closest_difference = difference\n    end\n  end\n  closest_numbers\n\
    end", "  numbers.sort!\n  closest = [numbers[0], numbers[1]]\n  (0..numbers.length-2).each\
    \ do |i|\n    if (numbers[i+1] - numbers[i]) < (closest[1] - closest[0])\n   \
    \   closest = [numbers[i], numbers[i+1]]\n    end\n  end\n  closest\nend", " \
    \ numbers.combination(2).min_by { |a, b| (a - b).abs }\nend", "  numbers.combination(2).to_a.min_by\
    \ { |a, b| (a - b).abs }\nend", "  numbers.sort!\n  closest_pair = [numbers[0],\
    \ numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |number, index|\n    next if index == 0\n    difference = (number - numbers[index\
    \ - 1]).abs\n    if difference < closest_difference\n      closest_pair = [numbers[index\
    \ - 1], number]\n      closest_difference = difference\n    end\n  end\n  closest_pair\n\
    end", "  numbers.combination(2).min_by { |a, b| (a - b).abs }\nend", "  numbers.combination(2).min_by\
    \ { |x, y| (x - y).abs }\nend", "  numbers.combination(2).min_by { |x, y| (x -\
    \ y).abs }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
