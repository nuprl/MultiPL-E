name: HumanEval_48_is_palindrome
language: ruby
prompt: "# Checks if given string is a palindrome\n# >>> is_palindrome('')\n# True\n\
  # >>> is_palindrome('aba')\n# True\n# >>> is_palindrome('aaaaa')\n# True\n# >>>\
  \ is_palindrome('zbcd')\n# False\ndef is_palindrome(text)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_palindrome\n\
  \    candidate = method(:is_palindrome)\n    assert_equal(true, candidate.call(\"\
  \"))\n    assert_equal(true, candidate.call(\"aba\"))\n    assert_equal(true, candidate.call(\"\
  aaaaa\"))\n    assert_equal(false, candidate.call(\"zbcd\"))\n    assert_equal(true,\
  \ candidate.call(\"xywyx\"))\n    assert_equal(false, candidate.call(\"xywyz\"))\n\
  \    assert_equal(false, candidate.call(\"xywzx\"))\n  end\nend\n"
completions: ["  text == text.reverse\nend", "  text == text.reverse\nend", "  text\
    \ == text.reverse\nend", "  text == text.reverse\nend", "  text.reverse == text\n\
    end", "  text.reverse == text\nend", "  text == text.reverse\nend", "  text ==\
    \ text.reverse\nend", "  text == text.reverse\nend", "  text.reverse == text\n\
    end", "  text == text.reverse\nend", "  text == text.reverse\nend", "  text ==\
    \ text.reverse\nend", "  # TODO: Implement this method\n  text.downcase!\n  text.gsub!(/[^a-z]/,\
    \ '')\n  text == text.reverse\nend", "  text == text.reverse\nend", "  text.reverse\
    \ == text\nend", "  text.length <= 1 || (text[0] == text[-1] && is_palindrome(text[1..-2]))\n\
    end", "  text.reverse == text\nend", "  text.downcase!\n  text.gsub!(/[^a-z]/,\
    \ '')\n  text == text.reverse\nend", "  text == text.reverse\nend", "  text.reverse\
    \ == text\nend", "  text == text.reverse\nend", "  text == text.reverse\nend",
  "  text == text.reverse\nend", "  return true if text.length == 0\n  return false\
    \ if text[0] != text[-1]\n  is_palindrome(text[1..-2])\nend", "  text == text.reverse\n\
    end", "  text == text.reverse\nend", "  text == text.reverse\nend", "  text ==\
    \ text.reverse\nend", "  text == text.reverse\nend", "  text == text.reverse\n\
    end", "  text == text.reverse\nend", "  text == text.reverse\nend", "  text ==\
    \ text.reverse\nend", "  if text.length == 0\n    return true\n  end\n  if text[0]\
    \ == text[-1]\n    return is_palindrome(text[1..-2])\n  else\n    return false\n\
    \  end\nend", "  text.downcase == text.downcase.reverse\nend", "  text == text.reverse\n\
    end", "  text.reverse == text\nend", "  text.downcase!\n  text.gsub!(/[^a-z]/,\
    \ '')\n  text == text.reverse\nend", "  text == text.reverse\nend", "  text ==\
    \ text.reverse\nend", "  text.downcase == text.downcase.reverse\nend", "  text\
    \ == text.reverse\nend", "  text == text.reverse\nend", "  text == text.reverse\n\
    end", "  text == text.reverse\nend", "  text == text.reverse\nend", "  text ==\
    \ text.reverse\nend", "  text.downcase == text.downcase.reverse\nend", "  text\
    \ == text.reverse\nend", "  text == text.reverse\nend", "  text.downcase == text.downcase.reverse\n\
    end", "  text == text.reverse\nend", "  text.reverse == text\nend", "  text ==\
    \ text.reverse\nend", "  text.reverse == text\nend", "  text.downcase!\n  text.gsub!(/[^a-z]/,\
    \ '')\n  text == text.reverse\nend", "  text == text.reverse\nend", "  text ==\
    \ text.reverse\nend", "  text == text.reverse\nend", "  text == text.reverse\n\
    end", "  text == text.reverse\nend", "  text == text.reverse\nend", "  text.downcase!\n\
    \  text.gsub!(/[^a-z]/, '')\n  text == text.reverse\nend", "  text == text.reverse\n\
    end", "  text.reverse == text\nend", "  text == text.reverse\nend", "  text.reverse\
    \ == text\nend", "  return text == text.reverse\nend", "  text.downcase == text.downcase.reverse\n\
    end", "  text == text.reverse\nend", "  text == text.reverse\nend", "  text ==\
    \ text.reverse\nend", "  text == text.reverse\nend", "  text == text.reverse\n\
    end", "  text == text.reverse\nend", "  text == text.reverse\nend", "  text ==\
    \ text.reverse\nend", "  text == text.reverse\nend", "  text.reverse == text\n\
    end", "  text.downcase!\n  text.gsub!(/[^a-z]/, '')\n  text == text.reverse\n\
    end", "  text.downcase!\n  text.gsub!(/[^a-z]/, '')\n  text == text.reverse\n\
    end", "  text == text.reverse\nend", "  text.reverse == text\nend", "  text ==\
    \ text.reverse\nend", "  text == text.reverse\nend", "  text == text.reverse\n\
    end", "  text.downcase!\n  text.gsub!(/[^a-z]/, '')\n  text == text.reverse\n\
    end", "  text == text.reverse\nend", "  text == text.reverse\nend", "  text ==\
    \ text.reverse\nend", "  text == text.reverse\nend", "  text == text.reverse\n\
    end", "  text == text.reverse\nend", "  text == text.reverse\nend", "  text.reverse\
    \ == text\nend", "  text == text.reverse\nend", "  text.downcase!\n  text.gsub!(/[^a-z]/,\
    \ '')\n  text == text.reverse\nend", "  text == text.reverse\nend", "  text ==\
    \ text.reverse\nend", "  text == text.reverse\nend", "  text.reverse == text\n\
    end", "  text == text.reverse\nend", "  text.reverse == text\nend", "  text.downcase!\n\
    \  text.gsub!(/[^a-z]/, '')\n  text == text.reverse\nend", "  text.reverse ==\
    \ text\nend", "  text == text.reverse\nend", "  text.downcase!\n  text.gsub!(/[^a-z]/,\
    \ '')\n  text == text.reverse\nend", "  text.reverse == text\nend", "  text.reverse\
    \ == text\nend", "  text == text.reverse\nend", "  text == text.reverse\nend",
  "  text == text.reverse\nend", "  if text.length <= 1\n    return true\n  end\n\
    \  if text[0] == text[-1]\n    is_palindrome(text[1..-2])\n  else\n    return\
    \ false\n  end\nend", "  text == text.reverse\nend", "  text.reverse == text\n\
    end", "  text.reverse == text\nend", "  text == text.reverse\nend", "  text ==\
    \ text.reverse\nend", "  return true if text.length <= 1\n  return false if text[0]\
    \ != text[-1]\n  is_palindrome(text[1..-2])\nend", "  text == text.reverse\nend",
  "  text.reverse == text\nend", "  text.reverse == text\nend", "  text == text.reverse\n\
    end", "  return true if text.length <= 1\n  return false if text[0] != text[-1]\n\
    \  is_palindrome(text[1..-2])\nend", "  text == text.reverse\nend", "  text.reverse\
    \ == text\nend", "  if text.length == 0\n    return true\n  end\n  if text[0]\
    \ == text[-1]\n    return is_palindrome(text[1..-2])\n  else\n    return false\n\
    \  end\nend", "  text.reverse == text\nend", "  text.reverse == text\nend", " \
    \ text == text.reverse\nend", "  text == text.reverse\nend", "  text == text.reverse\n\
    end", "  text.downcase!\n  text.gsub!(/[^a-z]/, '')\n  text == text.reverse\n\
    end", "  text == text.reverse\nend", "  text == text.reverse\nend", "  text ==\
    \ text.reverse\nend", "  text.downcase!\n  text.gsub!(/[^a-z]/, '')\n  text ==\
    \ text.reverse\nend", "  text == text.reverse\nend", "  text.downcase!\n  text.gsub!(/[^a-z]/,\
    \ '')\n  text == text.reverse\nend", "  text == text.reverse\nend", "  text ==\
    \ text.reverse\nend", "  text.reverse == text\nend", "  text == text.reverse\n\
    end", "  text.downcase == text.downcase.reverse\nend", "  text == text.reverse\n\
    end", "  text == text.reverse\nend", "  text == text.reverse\nend", "  text ==\
    \ text.reverse\nend", "  text == text.reverse\nend", "  text == text.reverse\n\
    end", "  text.reverse == text\nend", "  return true if text.length <= 1\n  return\
    \ false if text[0] != text[-1]\n  is_palindrome(text[1..-2])\nend", "  text ==\
    \ text.reverse\nend", "  text == text.reverse\nend", "  text.reverse == text\n\
    end", "  text == text.reverse\nend", "  text == text.reverse\nend", "  text ==\
    \ text.reverse\nend", "  text == text.reverse\nend", "  text == text.reverse\n\
    end", "  text == text.reverse\nend", "  text == text.reverse\nend", "  text ==\
    \ text.reverse\nend", "  text == text.reverse\nend", "  text == text.reverse\n\
    end", "  text == text.reverse\nend", "  text.downcase!\n  text.gsub!(/[^a-z]/,\
    \ '')\n  text == text.reverse\nend", "  text == text.reverse\nend", "  text ==\
    \ text.reverse\nend", "  text.downcase == text.downcase.reverse\nend", "  text.reverse\
    \ == text\nend", "  text == text.reverse\nend", "  text == text.reverse\nend",
  "  text.downcase!\n  text.gsub!(/[^a-z]/, '')\n  text == text.reverse\nend", " \
    \ text == text.reverse\nend", "  text == text.reverse\nend", "  text == text.reverse\n\
    end", "  text == text.reverse\nend", "  text == text.reverse\nend", "  text ==\
    \ text.reverse\nend", "  text == text.reverse\nend", "  text == text.reverse\n\
    end", "  text == text.reverse\nend", "  text.downcase!\n  text.gsub!(/[^a-z]/,\
    \ '')\n  text == text.reverse\nend", "  text.reverse == text\nend", "  text ==\
    \ text.reverse\nend", "  text == text.reverse\nend", "  text == text.reverse\n\
    end", "  text == text.reverse\nend", "  text == text.reverse\nend", "  text.downcase!\n\
    \  text.gsub!(/[^a-z]/, '')\n  text == text.reverse\nend", "  text == text.reverse\n\
    end", "  text.downcase!\n  text.gsub!(/[^a-z]/, '')\n  text == text.reverse\n\
    end", "  text == text.reverse\nend", "  text == text.reverse\nend", "  text.downcase!\n\
    \  text.gsub!(/[^a-z]/, '')\n  text == text.reverse\nend", "  text == text.reverse\n\
    end", "  text == text.reverse\nend", "  # TODO: return True if text is a palindrome,\
    \ False otherwise.\n  # 'racecar'\n  # 'abba'\n  # 'a'\n  # 'aa'\n  # 'ab'\n \
    \ # 'abc'\n  # 'abcd'\n  # 'abcde'\n  # 'abcdef'\n  # 'abcdefg'\n  # 'abcdefgh'\n\
    \  # 'abcdefghi'\n  # 'abcdefghij'\n  # 'abcdefghijk'\n  # 'abcdefghijkl'\n  #\
    \ 'abcdefghijklm'\n  # 'abcdefghijklmn'\n  # 'abcdefghijklmno'\n  # 'abcdefghijklmnop'\n\
    \  # 'abcdefghijklmnopq'\n  # 'abcdefghijklmnopqr'\n  # 'abcdefghijklmnopqrs'\n\
    \  # 'abcdefghijklmnopqrst'\n  # 'abcdefghijklmnopqrstu'\n  # 'abcdefghijklmnopqrstuv'\n\
    \  # 'abcdefghijklmnopqrstuvw'\n  # 'abcdefghijklmnopqrstuvwx'\n  # 'abcdefghijklmnopqrstuvwxy'\n\
    \  # 'abcdefghijklmnopqrstuvwxyz'\n  # 'abcdefghijklmnopqrstuvwxyza'\n  # 'abcdefghijklmnopqrstuvwxyzab'\n\
    \  # 'abcdefghijklmnopqrstuvwxyzabc'\n  # 'abcdefghijklmnopqrstuvwxyzabcd'\n \
    \ # 'abcdefghijklmnopqrstuvwxyzabcde'\n  # 'abcdefghijklmnopqrstuvwxyzabcdef'\n\
    \  # 'abcdefghijklmnopqrstuvwxyzabcdefg'\n  # 'abcdefghijklmnopqrstuvwxyzabcdefgh'\n\
    \  # 'abcdefghijklmnop"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
