name: HumanEval_91_is_bored
language: ruby
results:
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq4lmvmga\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpq4lmvmga.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004543534 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.09 tests/s, 440.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8vgrfeg1\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp8vgrfeg1.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004713602 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.15 tests/s, 424.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/\\.|\\?|\\!/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp01qqwkut\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp01qqwkut.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004911615 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.60 tests/s, 407.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).select { |sentence| sentence.strip.start_with?(\"\
    I\") }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpor5zd69a\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpor5zd69a.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005348066 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.98 tests/s, 373.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsa66tlyt\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpsa66tlyt.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004840361 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.60 tests/s, 413.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoy3cbygg\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpoy3cbygg.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004476467 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.39 tests/s, 446.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp61cckloa\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp61cckloa.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004961318 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.56 tests/s, 403.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprz5m32om\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmprz5m32om.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004468623 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.78 tests/s, 447.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpy_ug4fmp\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpy_ug4fmp.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005160763 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.77 tests/s, 387.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.scan(/I/).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_bored\n    candidate = method(:is_bored)\n\
    \    assert_equal(0, candidate.call(\"Hello world\"))\n    assert_equal(0, candidate.call(\"\
    Is the sky blue?\"))\n    assert_equal(1, candidate.call(\"I love It !\"))\n \
    \   assert_equal(0, candidate.call(\"bIt\"))\n    assert_equal(2, candidate.call(\"\
    I feel good today. I will be productive. will kill It\"))\n    assert_equal(0,\
    \ candidate.call(\"You and I are going for a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkgr8357q\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpkgr8357q.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004560083 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.29 tests/s, 438.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxyucn1zd\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpxyucn1zd.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.006390717 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.48 tests/s, 312.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprqq527su\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmprqq527su.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005043182 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.29 tests/s, 396.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/\\.|\\?|\\!/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_wn1g8l1\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp_wn1g8l1.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005846253 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    171.05 tests/s, 342.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplzg35h5r\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmplzg35h5r.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005753679 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.80 tests/s, 347.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpinvo1b2c\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpinvo1b2c.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004695609 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.96 tests/s, 425.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsyauyo9x\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpsyauyo9x.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005682386 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.98 tests/s, 351.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).select { |sentence| sentence.start_with?(\"\
    I\") }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7i0jo5g6\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp7i0jo5g6.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.007541009 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.61 tests/s, 265.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?('I')\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxv8_hy13\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpxv8_hy13.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004485253 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.95 tests/s, 445.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1d6ei8xo\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp1d6ei8xo.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.006232759 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.44 tests/s, 320.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgyrcdatf\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpgyrcdatf.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005686793 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.85 tests/s, 351.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_m0iop_f\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp_m0iop_f.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004840562 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.59 tests/s, 413.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpy5_53usr\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpy5_53usr.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004761463 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.02 tests/s, 420.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?('I')\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2afh5w47\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp2afh5w47.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004882089 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.83 tests/s, 409.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  boredoms = 0\n  sentences = s.split(/[.?!]/)\n  sentences.each\
    \ do |sentence|\n    if sentence.split(\" \")[0] == \"I\"\n      boredoms += 1\n\
    \    end\n  end\n  boredoms\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu865nfoc\nStarted\n.\nFinished in 0.000356992 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2801.18 tests/s, 16807.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph2odxmkv\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmph2odxmkv.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004640575 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.49 tests/s, 430.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwta2h67b\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpwta2h67b.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004477379 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.34 tests/s, 446.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph2xx_igj\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmph2xx_igj.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004596904 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.54 tests/s, 435.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcy_vzgbb\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpcy_vzgbb.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.0052012 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.26 tests/s, 384.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnwb95ovr\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpnwb95ovr.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004228049 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    236.52 tests/s, 473.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp7ir5p8q\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpp7ir5p8q.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004799494 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.36 tests/s, 416.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpubg7ewjf\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpubg7ewjf.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005311918 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.26 tests/s, 376.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv2wg4lwr\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpv2wg4lwr.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005279656 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.41 tests/s, 378.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_bored\n    candidate = method(:is_bored)\n\
    \    assert_equal(0, candidate.call(\"Hello world\"))\n    assert_equal(0, candidate.call(\"\
    Is the sky blue?\"))\n    assert_equal(1, candidate.call(\"I love It !\"))\n \
    \   assert_equal(0, candidate.call(\"bIt\"))\n    assert_equal(2, candidate.call(\"\
    I feel good today. I will be productive. will kill It\"))\n    assert_equal(0,\
    \ candidate.call(\"You and I are going for a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpar9z8wyf\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpar9z8wyf.rb:16:in `test_is_bored'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_is_bored\n\
    \     15:     candidate = method(:is_bored)\n  => 16:     assert_equal(0, candidate.call(\"\
    Hello world\"))\n     17:     assert_equal(0, candidate.call(\"Is the sky blue?\"\
    ))\n     18:     assert_equal(1, candidate.call(\"I love It !\"))\n     19:  \
    \   assert_equal(0, candidate.call(\"bIt\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004598306 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.47 tests/s, 217.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp35btqbtv\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp35btqbtv.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004520199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.23 tests/s, 442.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_bored\n    candidate = method(:is_bored)\n\
    \    assert_equal(0, candidate.call(\"Hello world\"))\n    assert_equal(0, candidate.call(\"\
    Is the sky blue?\"))\n    assert_equal(1, candidate.call(\"I love It !\"))\n \
    \   assert_equal(0, candidate.call(\"bIt\"))\n    assert_equal(2, candidate.call(\"\
    I feel good today. I will be productive. will kill It\"))\n    assert_equal(0,\
    \ candidate.call(\"You and I are going for a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4ymob_5f\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp4ymob_5f.rb:16:in `test_is_bored'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_is_bored\n\
    \     15:     candidate = method(:is_bored)\n  => 16:     assert_equal(0, candidate.call(\"\
    Hello world\"))\n     17:     assert_equal(0, candidate.call(\"Is the sky blue?\"\
    ))\n     18:     assert_equal(1, candidate.call(\"I love It !\"))\n     19:  \
    \   assert_equal(0, candidate.call(\"bIt\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004761434 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.02 tests/s, 210.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprjyxdu4l\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmprjyxdu4l.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004858676 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.82 tests/s, 411.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8ewi3zix\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp8ewi3zix.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004788034 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.85 tests/s, 417.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9yhgtulr\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp9yhgtulr.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005217019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.68 tests/s, 383.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6lbt40ku\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp6lbt40ku.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005125328 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.11 tests/s, 390.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1u_rqm_l\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp1u_rqm_l.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005460055 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.15 tests/s, 366.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfc6cgnjc\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpfc6cgnjc.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004949195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.05 tests/s, 404.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpexeg7a0f\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpexeg7a0f.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005002215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.91 tests/s, 399.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).select { |sentence| sentence.strip.start_with?(\"\
    I\") }.size\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3d38os7o\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp3d38os7o.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004574872 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.59 tests/s, 437.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzk9ww96o\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpzk9ww96o.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004654712 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.84 tests/s, 429.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx0pmou2o\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpx0pmou2o.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.006105059 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.80 tests/s, 327.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7ki_1sw_\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp7ki_1sw_.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004709135 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.35 tests/s, 424.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppof8k31h\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmppof8k31h.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005152718 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.07 tests/s, 388.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqwuul6bu\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpqwuul6bu.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005213823 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.80 tests/s, 383.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6lvoklnf\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp6lvoklnf.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004561256 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.24 tests/s, 438.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdgf_5ti_\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpdgf_5ti_.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005034767 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.62 tests/s, 397.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgn4nmb8e\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpgn4nmb8e.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005131428 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.88 tests/s, 389.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).select { |sentence| sentence.strip.start_with?(\"\
    I\") }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoyrkmhpt\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpoyrkmhpt.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004522683 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.11 tests/s, 442.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplxd_76xx\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmplxd_76xx.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004428186 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.83 tests/s, 451.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzk9m7y5d\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpzk9m7y5d.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004448413 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.80 tests/s, 449.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfrgoh7j3\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpfrgoh7j3.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004552731 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.65 tests/s, 439.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.scan(/I\\s/).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_bored\n    candidate = method(:is_bored)\n\
    \    assert_equal(0, candidate.call(\"Hello world\"))\n    assert_equal(0, candidate.call(\"\
    Is the sky blue?\"))\n    assert_equal(1, candidate.call(\"I love It !\"))\n \
    \   assert_equal(0, candidate.call(\"bIt\"))\n    assert_equal(2, candidate.call(\"\
    I feel good today. I will be productive. will kill It\"))\n    assert_equal(0,\
    \ candidate.call(\"You and I are going for a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_rt4bpjl\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp_rt4bpjl.rb:21:in `test_is_bored'\n\
    \     18:     assert_equal(1, candidate.call(\"I love It !\"))\n     19:     assert_equal(0,\
    \ candidate.call(\"bIt\"))\n     20:     assert_equal(2, candidate.call(\"I feel\
    \ good today. I will be productive. will kill It\"))\n  => 21:     assert_equal(0,\
    \ candidate.call(\"You and I are going for a walk\"))\n     22:   end\n     23:\
    \ end\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005193184 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.56 tests/s, 1155.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe21xm101\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpe21xm101.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004663598 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.43 tests/s, 428.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgendmuwl\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpgendmuwl.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004620418 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.43 tests/s, 432.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp17io4chj\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp17io4chj.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005578739 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.25 tests/s, 358.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp96oa4q0u\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp96oa4q0u.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004373553 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.65 tests/s, 457.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx9q4yf09\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpx9q4yf09.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004795447 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.53 tests/s, 417.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfmzfxc2r\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpfmzfxc2r.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004775229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.41 tests/s, 418.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2m52hyr4\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp2m52hyr4.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.00541395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.71 tests/s, 369.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.!?]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqcg_75jc\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpqcg_75jc.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004625107 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.21 tests/s, 432.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/\\.|\\?|\\!/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx4mosk26\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpx4mosk26.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004637569 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.63 tests/s, 431.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfvw981_o\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpfvw981_o.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004653139 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.91 tests/s, 429.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_bored\n    candidate = method(:is_bored)\n\
    \    assert_equal(0, candidate.call(\"Hello world\"))\n    assert_equal(0, candidate.call(\"\
    Is the sky blue?\"))\n    assert_equal(1, candidate.call(\"I love It !\"))\n \
    \   assert_equal(0, candidate.call(\"bIt\"))\n    assert_equal(2, candidate.call(\"\
    I feel good today. I will be productive. will kill It\"))\n    assert_equal(0,\
    \ candidate.call(\"You and I are going for a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp35nr7amq\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp35nr7amq.rb:16:in `test_is_bored'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_is_bored\n\
    \     15:     candidate = method(:is_bored)\n  => 16:     assert_equal(0, candidate.call(\"\
    Hello world\"))\n     17:     assert_equal(0, candidate.call(\"Is the sky blue?\"\
    ))\n     18:     assert_equal(1, candidate.call(\"I love It !\"))\n     19:  \
    \   assert_equal(0, candidate.call(\"bIt\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004838848 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.66 tests/s, 206.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  boredoms = 0\n  sentences = s.split(/[.!?]/)\n  sentences.each\
    \ do |sentence|\n    if sentence.split[0] == \"I\"\n      boredoms += 1\n    end\n\
    \  end\n  boredoms\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7c1gw1gx\nStarted\n.\nFinished in 0.000351922 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2841.54 tests/s, 17049.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?('I')\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp82e6dyz4\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp82e6dyz4.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.00487701 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.04 tests/s, 410.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphofptmhn\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmphofptmhn.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005938506 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    168.39 tests/s, 336.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4g_n7lw2\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp4g_n7lw2.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004949256 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.05 tests/s, 404.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxve8za4v\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpxve8za4v.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005418779 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.54 tests/s, 369.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpntp913h3\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpntp913h3.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004920461 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.23 tests/s, 406.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdd3p35ot\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpdd3p35ot.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005201981 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.23 tests/s, 384.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?('I')\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuqu2_8f7\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpuqu2_8f7.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004850641 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.16 tests/s, 412.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwxrpuphp\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpwxrpuphp.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004287211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    233.25 tests/s, 466.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkbffkyp0\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpkbffkyp0.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004414681 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.52 tests/s, 453.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9jr4qzbo\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp9jr4qzbo.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004417367 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.38 tests/s, 452.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).select { |sentence| sentence.start_with?(\"\
    I\") }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmxrc9voj\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpmxrc9voj.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004525209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.98 tests/s, 441.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsbktpstb\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpsbktpstb.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005426713 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.27 tests/s, 368.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq1rcvmdi\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpq1rcvmdi.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004752936 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.40 tests/s, 420.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpeqq_wq0y\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpeqq_wq0y.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004611761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.84 tests/s, 433.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  count = 0\n  s.split(/[.?!]/).each do |sentence|\n\
    \    count += 1 if sentence.strip.start_with?(\"I\")\n  end\n  count\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_bored\n\
    \    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"Hello\
    \ world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n    assert_equal(1,\
    \ candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"bIt\"\
    ))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqad9jbd7\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpqad9jbd7.rb:21:in `test_is_bored'\n\
    \     18:   def test_is_bored\n     19:     candidate = method(:is_bored)\n  \
    \   20:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 21:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     22:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     23:     assert_equal(0, candidate.call(\"bIt\"))\n     24:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.00480722 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.02 tests/s, 416.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.!?]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp40fyprxh\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp40fyprxh.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004980084 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.80 tests/s, 401.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_uuzd0uc\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp_uuzd0uc.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.00471235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.21 tests/s, 424.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_gs235x9\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp_gs235x9.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005145034 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.36 tests/s, 388.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5sxtj1qn\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp5sxtj1qn.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005711118 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.10 tests/s, 350.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprcjgs4r1\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmprcjgs4r1.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005698846 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.47 tests/s, 350.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.split.first\
    \ == \"I\" }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1770axrn\nStarted\n.\nFinished in 0.000566414 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1765.49 tests/s, 10592.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7h_kzo95\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp7h_kzo95.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.00482417 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.29 tests/s, 414.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp___xznir\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp___xznir.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005490073 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.15 tests/s, 364.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkji2biuc\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpkji2biuc.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004773324 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.50 tests/s, 419.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?('I')\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4itt1jk1\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp4itt1jk1.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.006047722 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    165.35 tests/s, 330.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk8qwqwmq\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpk8qwqwmq.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005776192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.12 tests/s, 346.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpam5tnhoe\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpam5tnhoe.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004828769 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.09 tests/s, 414.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.split.first\
    \ == \"I\" }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq442fbv4\nStarted\n.\nFinished in 0.001167775 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    856.33 tests/s, 5137.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplfs9900c\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmplfs9900c.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.00495646 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.76 tests/s, 403.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_bored\n    candidate = method(:is_bored)\n\
    \    assert_equal(0, candidate.call(\"Hello world\"))\n    assert_equal(0, candidate.call(\"\
    Is the sky blue?\"))\n    assert_equal(1, candidate.call(\"I love It !\"))\n \
    \   assert_equal(0, candidate.call(\"bIt\"))\n    assert_equal(2, candidate.call(\"\
    I feel good today. I will be productive. will kill It\"))\n    assert_equal(0,\
    \ candidate.call(\"You and I are going for a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp33w3n_dc\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp33w3n_dc.rb:16:in `test_is_bored'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_is_bored\n\
    \     15:     candidate = method(:is_bored)\n  => 16:     assert_equal(0, candidate.call(\"\
    Hello world\"))\n     17:     assert_equal(0, candidate.call(\"Is the sky blue?\"\
    ))\n     18:     assert_equal(1, candidate.call(\"I love It !\"))\n     19:  \
    \   assert_equal(0, candidate.call(\"bIt\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004352543 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    229.75 tests/s, 229.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppkqpnsbo\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmppkqpnsbo.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005346242 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.05 tests/s, 374.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoq644twg\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpoq644twg.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005766943 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.40 tests/s, 346.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp84gipdtq\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp84gipdtq.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004276762 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    233.82 tests/s, 467.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuf9rxc0q\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpuf9rxc0q.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005434839 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.00 tests/s, 368.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpaochy2tf\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpaochy2tf.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004902699 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.97 tests/s, 407.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjayqkspi\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpjayqkspi.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004530478 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.73 tests/s, 441.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpy3o50r2n\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpy3o50r2n.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005042191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.33 tests/s, 396.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwhp27d_1\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpwhp27d_1.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004537131 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.40 tests/s, 440.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn84g7gik\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpn84g7gik.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005407999 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.91 tests/s, 369.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg_zax3k1\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpg_zax3k1.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004765501 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.84 tests/s, 419.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb7qqkh6s\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpb7qqkh6s.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005612172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.18 tests/s, 356.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?('I')\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt3o8ubzn\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpt3o8ubzn.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004624255 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.25 tests/s, 432.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj1n7e4zz\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpj1n7e4zz.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.00450456 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.00 tests/s, 443.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwjey23l1\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpwjey23l1.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005096433 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.22 tests/s, 392.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1d47edz9\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp1d47edz9.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004642329 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.41 tests/s, 430.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp401gp9wa\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp401gp9wa.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004371038 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.78 tests/s, 457.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbmah48kk\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpbmah48kk.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.00455795 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.40 tests/s, 438.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfnbeklur\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpfnbeklur.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005314362 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.17 tests/s, 376.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwm3ojp_w\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpwm3ojp_w.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004749751 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.54 tests/s, 421.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2w_gx96b\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp2w_gx96b.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004693955 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.04 tests/s, 426.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdkbvab1i\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpdkbvab1i.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005453543 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.37 tests/s, 366.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?('I')\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnxxfyq7j\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpnxxfyq7j.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004785407 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.97 tests/s, 417.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkyqqp83k\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpkyqqp83k.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004831224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.99 tests/s, 413.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?('I')\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo2nuea9e\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpo2nuea9e.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004893611 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.35 tests/s, 408.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf1tuz9cz\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpf1tuz9cz.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004681272 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.62 tests/s, 427.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).select { |sentence| sentence.strip.start_with?(\"\
    I\") }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgwntgsjj\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpgwntgsjj.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005386879 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.64 tests/s, 371.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/\\.|\\?|\\!/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpw8mwewrb\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpw8mwewrb.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004825674 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.22 tests/s, 414.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnzfruuk_\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpnzfruuk_.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.00448864 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.78 tests/s, 445.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).select { |sentence| sentence.strip.start_with?(\"\
    I\") }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpufvzpxr4\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpufvzpxr4.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.006168989 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.10 tests/s, 324.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp57n0g6oj\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp57n0g6oj.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004646838 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.20 tests/s, 430.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzab4w3y3\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpzab4w3y3.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005457792 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.22 tests/s, 366.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpczmyjj_l\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpczmyjj_l.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004785118 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.98 tests/s, 417.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_q1to0bf\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp_q1to0bf.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005434046 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.02 tests/s, 368.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph_gzutk7\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmph_gzutk7.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.00459029 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.85 tests/s, 435.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpggrwzs5c\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpggrwzs5c.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005609557 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.27 tests/s, 356.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpggqdm2o5\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpggqdm2o5.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004489542 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.74 tests/s, 445.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoz8uc3bb\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpoz8uc3bb.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004916183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.41 tests/s, 406.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?('I')\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphl1tqo3l\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmphl1tqo3l.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.00505841 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.69 tests/s, 395.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).select { |sentence| sentence.strip.start_with?(\"\
    I\") }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgtshwzyb\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpgtshwzyb.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004580543 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.31 tests/s, 436.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr7usugbk\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpr7usugbk.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004603046 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.25 tests/s, 434.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?('I')\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp26h70jiz\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp26h70jiz.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004565175 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.05 tests/s, 438.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_cpn22mc\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp_cpn22mc.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005244061 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.69 tests/s, 381.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_bored\n    candidate = method(:is_bored)\n\
    \    assert_equal(0, candidate.call(\"Hello world\"))\n    assert_equal(0, candidate.call(\"\
    Is the sky blue?\"))\n    assert_equal(1, candidate.call(\"I love It !\"))\n \
    \   assert_equal(0, candidate.call(\"bIt\"))\n    assert_equal(2, candidate.call(\"\
    I feel good today. I will be productive. will kill It\"))\n    assert_equal(0,\
    \ candidate.call(\"You and I are going for a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3r7c13_a\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp3r7c13_a.rb:16:in `test_is_bored'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_is_bored\n\
    \     15:     candidate = method(:is_bored)\n  => 16:     assert_equal(0, candidate.call(\"\
    Hello world\"))\n     17:     assert_equal(0, candidate.call(\"Is the sky blue?\"\
    ))\n     18:     assert_equal(1, candidate.call(\"I love It !\"))\n     19:  \
    \   assert_equal(0, candidate.call(\"bIt\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004526581 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.92 tests/s, 220.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplyupfako\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmplyupfako.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004644282 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.32 tests/s, 430.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_bored\n    candidate = method(:is_bored)\n\
    \    assert_equal(0, candidate.call(\"Hello world\"))\n    assert_equal(0, candidate.call(\"\
    Is the sky blue?\"))\n    assert_equal(1, candidate.call(\"I love It !\"))\n \
    \   assert_equal(0, candidate.call(\"bIt\"))\n    assert_equal(2, candidate.call(\"\
    I feel good today. I will be productive. will kill It\"))\n    assert_equal(0,\
    \ candidate.call(\"You and I are going for a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph_cibp_z\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmph_cibp_z.rb:16:in `test_is_bored'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_is_bored\n\
    \     15:     candidate = method(:is_bored)\n  => 16:     assert_equal(0, candidate.call(\"\
    Hello world\"))\n     17:     assert_equal(0, candidate.call(\"Is the sky blue?\"\
    ))\n     18:     assert_equal(1, candidate.call(\"I love It !\"))\n     19:  \
    \   assert_equal(0, candidate.call(\"bIt\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004703305 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.62 tests/s, 212.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3nsm6w8z\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp3nsm6w8z.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004692273 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.12 tests/s, 426.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqzmpnihh\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpqzmpnihh.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005352325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.83 tests/s, 373.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5_uzi39g\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp5_uzi39g.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005385847 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.67 tests/s, 371.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmproa41ij4\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmproa41ij4.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005670432 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.35 tests/s, 352.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplpbxfy87\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmplpbxfy87.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004663387 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.44 tests/s, 428.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwzvh97nq\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpwzvh97nq.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.00713204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.21 tests/s, 280.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).select { |sentence| sentence.strip.start_with?(\"\
    I\") }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl__5923n\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpl__5923n.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.006361191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    157.20 tests/s, 314.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx0my3qjb\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpx0my3qjb.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005663439 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.57 tests/s, 353.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpae224rlh\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpae224rlh.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004964184 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.44 tests/s, 402.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/\\.|\\?|\\!/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpczgfm_g0\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpczgfm_g0.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.00475469 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.32 tests/s, 420.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).select { |sentence| sentence.split.first\
    \ == \"I\" }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfml7z8rd\nStarted\n.\nFinished in 0.000390534 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2560.60 tests/s, 15363.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9kd037wz\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp9kd037wz.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004553893 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.59 tests/s, 439.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_bored\n    candidate = method(:is_bored)\n\
    \    assert_equal(0, candidate.call(\"Hello world\"))\n    assert_equal(0, candidate.call(\"\
    Is the sky blue?\"))\n    assert_equal(1, candidate.call(\"I love It !\"))\n \
    \   assert_equal(0, candidate.call(\"bIt\"))\n    assert_equal(2, candidate.call(\"\
    I feel good today. I will be productive. will kill It\"))\n    assert_equal(0,\
    \ candidate.call(\"You and I are going for a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpydxu5l3x\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpydxu5l3x.rb:16:in `test_is_bored'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_is_bored\n\
    \     15:     candidate = method(:is_bored)\n  => 16:     assert_equal(0, candidate.call(\"\
    Hello world\"))\n     17:     assert_equal(0, candidate.call(\"Is the sky blue?\"\
    ))\n     18:     assert_equal(1, candidate.call(\"I love It !\"))\n     19:  \
    \   assert_equal(0, candidate.call(\"bIt\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00470718 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.44 tests/s, 212.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcdgeytil\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpcdgeytil.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005451971 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.42 tests/s, 366.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqv_p66mz\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpqv_p66mz.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004712291 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.21 tests/s, 424.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprwrmfqms\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmprwrmfqms.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004725667 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.61 tests/s, 423.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmperbw3zpj\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmperbw3zpj.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004997285 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.11 tests/s, 400.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp94b3r4fc\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp94b3r4fc.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004442403 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.10 tests/s, 450.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzj6vae8g\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpzj6vae8g.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.00554713 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.27 tests/s, 360.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpauylbt02\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpauylbt02.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004607502 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.04 tests/s, 434.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpez2tefg3\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpez2tefg3.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004640135 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.51 tests/s, 431.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzcqgb22f\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpzcqgb22f.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004887479 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.60 tests/s, 409.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp13u2c6mv\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp13u2c6mv.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.00481272 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.78 tests/s, 415.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnl4rnll9\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpnl4rnll9.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004706469 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.47 tests/s, 424.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?('I')\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp52aqvxa3\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp52aqvxa3.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004738581 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.03 tests/s, 422.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpokhu63n4\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpokhu63n4.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005357484 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.65 tests/s, 373.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.split.first\
    \ == \"I\" }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptnid1bdk\nStarted\n.\nFinished in 0.000365778 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2733.90 tests/s, 16403.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0wogrhfn\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp0wogrhfn.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004548332 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.86 tests/s, 439.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdaibz6rz\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpdaibz6rz.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004816616 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.61 tests/s, 415.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe7oncwe6\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpe7oncwe6.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004822017 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.38 tests/s, 414.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps1d1epzv\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmps1d1epzv.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004705007 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.54 tests/s, 425.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcj_g4qvr\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpcj_g4qvr.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004696251 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.94 tests/s, 425.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplttcidoc\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmplttcidoc.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.007226487 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    138.38 tests/s, 276.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).select { |sentence| sentence.strip.start_with?(\"\
    I\") }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp107r8f7g\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp107r8f7g.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005824872 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    171.68 tests/s, 343.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9fmy9u7p\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp9fmy9u7p.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004705838 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.50 tests/s, 425.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps_0v5nnz\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmps_0v5nnz.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004948825 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.07 tests/s, 404.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg9yrpuhc\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpg9yrpuhc.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005155884 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.95 tests/s, 387.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz0w79d6i\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpz0w79d6i.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004607993 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.01 tests/s, 434.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6vzm9r43\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp6vzm9r43.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004945578 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.20 tests/s, 404.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.split.first\
    \ == \"I\" }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpejgchbie\nStarted\n.\nFinished in 0.00034024 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2939.10 tests/s, 17634.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfcrpmbh9\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpfcrpmbh9.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004482086 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.11 tests/s, 446.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7o1izzhx\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp7o1izzhx.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004714105 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.13 tests/s, 424.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsnq67uj3\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpsnq67uj3.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004752245 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.43 tests/s, 420.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe0w7tkq8\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpe0w7tkq8.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004242958 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    235.68 tests/s, 471.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpy7a_jwsi\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpy7a_jwsi.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005076786 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.98 tests/s, 393.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmkp251tx\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpmkp251tx.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004374846 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.58 tests/s, 457.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqlt1wn6f\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpqlt1wn6f.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004976307 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.95 tests/s, 401.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpi801trp2\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpi801trp2.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004696371 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.93 tests/s, 425.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphwpb_mgs\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmphwpb_mgs.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004291799 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    233.00 tests/s, 466.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpklohqw5f\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpklohqw5f.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004498628 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.29 tests/s, 444.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvcc95dt0\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpvcc95dt0.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004410503 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.73 tests/s, 453.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).select { |sentence| sentence.strip.start_with?(\"\
    I\") }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9qf89tez\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp9qf89tez.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.00517485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.24 tests/s, 386.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpay_6kllk\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpay_6kllk.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004232217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    236.28 tests/s, 472.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl6i4q6su\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpl6i4q6su.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004342565 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    230.28 tests/s, 460.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpup1f32gz\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpup1f32gz.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004434808 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.49 tests/s, 450.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).select { |sentence| sentence.strip.start_with?(\"\
    I\") }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4_dqr3pt\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmp4_dqr3pt.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004400605 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.24 tests/s, 454.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpng6aez8_\nStarted\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/tmp/tmpng6aez8_.rb:17:in `test_is_bored'\n\
    \     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n  \
    \   16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004335232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    230.67 tests/s, 461.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
