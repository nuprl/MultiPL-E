name: HumanEval_67_fruit_distribution
language: ruby
prompt: "# In this task, you will be given a string that represents a number of apples\
  \ and oranges \n# that are distributed in a basket of fruit this basket contains\
  \ \n# apples, oranges, and mango fruits. Given the string that represents the total\
  \ number of \n# the oranges and apples and an integer that represent the total number\
  \ of the fruits \n# in the basket return the number of the mango fruits in the basket.\n\
  # for examble:\n# fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 -\
  \ 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n#\
  \ fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n# fruit_distribution(\"\
  100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\ndef fruit_distribution(s,\
  \ n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
  \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
  5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples and\
  \ 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
  , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n    assert_equal(95,\
  \ candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0, candidate.call(\"\
  2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"1 apples and\
  \ 100 oranges\", 120))\n  end\nend\n"
completions: ["  # your code here\nend", "  # your code here\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  # Write your code here\nend", "  #\
    \ your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # write your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # write your code\
    \ here\n  s.split(\" \")\n  s.split(\" \").map(&:to_i).reduce(:+)\n  n - s.split(\"\
    \ \").map(&:to_i).reduce(:+)\nend", "  # your code here\nend", "  # your code\
    \ here\nend", "  # write your code here\nend", "  # your code here\nend", "\t\
    # write your code here\n\t# apples = s.split(\" \")[0].to_i\n\t# oranges = s.split(\"\
    \ \")[2].to_i\n\t# n - apples - oranges\n\ts.split(\" \").map(&:to_i).reduce(:+)\
    \ - n\nend", "  # write your code here\n  s.split(\" \").map(&:to_i).reduce(:+)\n\
    end", "  # your code here\nend", "  s.split(\" \").map(&:to_i).sum - n\nend",
  "    # Write your code here\n    s = s.split(\" \")\n    s[0] = s[0].to_i\n    s[2]\
    \ = s[2].to_i\n    n - s[0] - s[2]\nend", "  # your code here\nend", "  # write\
    \ your code here\nend", "  # your code here\nend", "  # write your code here\n\
    \  s = s.split(\" \")\n  n - s[0].to_i - s[3].to_i\nend", "  # your code here\n\
    end", "  # write your code here\nend", "  # write your code here\nend", "  # your\
    \ code here\nend", "  # your code here\nend", "  # write your code here\n  s.split(\"\
    \ \").map(&:to_i).reduce(:+)\n  n - s.split(\" \").map(&:to_i).reduce(:+)\nend",
  "  # your code here\nend", "  # write your code here\n  s = s.split(\" \")\n  s[0]\
    \ = s[0].to_i\n  s[2] = s[2].to_i\n  n - s[0] - s[2]\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # Write your code here\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  # your code here\nend", "  # your\
    \ code here\nend", "  # write your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # Your code here\nend", "  # write your code here\n\
    \  s = s.split(\" \")\n  n - s[0].to_i - s[3].to_i\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # write your code\
    \ here\n  s = s.split(\" \")\n  s[0].to_i + s[3].to_i\n  n - s[0].to_i - s[3].to_i\n\
    end", "  # write your code here\n  s.split(\" \").map(&:to_i).sum\nend", "  #\
    \ write your code here\nend", "  # your code here\nend", "  # write your code\
    \ here\nend", "  # write your code here\nend", "  # write your code here\nend",
  "  # your code here\nend", "  # write your code here\n  s = s.split(\" \")\n  n\
    \ - s[0].to_i - s[3].to_i\nend", "  # your code here\nend", "  # write your code\
    \ here\nend", "  # your code here\nend", "  # write your code here\n  s.split(\"\
    \ \").map(&:to_i).reduce(:+)\nend", "  # your code here\nend", "  s.split(\" \"\
    ).map(&:to_i).reduce(:+) - n\nend", "  # your code here\nend", "  # write your\
    \ code here\nend", "  # your code here\nend", "  # your code here\nend", "  #\
    \ your code here\nend", "  # your code here\nend", "  # write your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "\t# write your code\
    \ here\nend", "  # write your code here\nend", "  # your code here\nend", "  #\
    \ your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "\t# write your code here\nend", "  # your code here\nend", "  # write your code\
    \ here\nend", "  # write your code here\nend", "\t# write your code here\nend",
  "\t# write your code here\nend", "  # write your code here\n  s = s.split(\" \"\
    )\n  n - s[0].to_i - s[3].to_i\nend", "  # your code here\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  s.split(\" \").map(&:to_i).inject(:+)\n\
    end", "  # your code here\nend", "  # write your code here\n  s = s.split(\" \"\
    )\n  n - s[0].to_i - s[3].to_i\nend", "  # your code here\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  # write your code here\nend", "  #\
    \ your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "\t# write your code here\nend", "  # write your code here\nend", "  # write your\
    \ code here\nend", "  # your code here\nend", "  # write your code here\n  s =\
    \ s.split(\" \")\n  s[0] = s[0].to_i\n  s[2] = s[2].to_i\n  n - s[0] - s[2]\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # write your code\
    \ here\n  s = s.split(\" \")\n  n - s[0].to_i - s[4].to_i\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  # your code here\nend", "  # your\
    \ code here\nend", "  #your code here\nend", "  # your code here\nend", "  # Write\
    \ your code here\n  # apples = s.split(\" \")[0].to_i\n  # oranges = s.split(\"\
    \ \")[2].to_i\n  # n - apples - oranges\n  s.split(\" \").map(&:to_i).sum - n\n\
    end", "  # your code here\nend", "\t# your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # write your code here\nend", "  # your code here\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  # your code here\nend", "  #your code\
    \ here\n  s.split(\" \").map(&:to_i).reduce(:+)\n  n - s.split(\" \").map(&:to_i).reduce(:+)\n\
    end", "  # write your code here\nend", "  # your code here\nend", "  # write your\
    \ code here\nend", "  # your code here\nend", "  # write your code here\nend",
  "  # Write your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # write your code here\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  # your code here\nend", "  # write\
    \ your code here\n  s.split(\" \").map(&:to_i).reduce(:+)\nend", "  # write your\
    \ code here\nend", "  # write your code here\n  s = s.split(\" \")\n  n - s[0].to_i\
    \ - s[4].to_i\nend", "  # write your code here\nend", "  # write your code here\n\
    end", "  # write your code here\nend", "  # your code here\nend", "\t# your code\
    \ here\nend", "  # your code here\nend", "  # your code here\nend", "  # write\
    \ your code here\n  s = s.split(' ')\n  n - s[0].to_i - s[3].to_i\nend", "  #\
    \ write your code here\nend", "  #your code here\nend", "\t# write your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # write your code\
    \ here\nend", "  # write your code here\n  s = s.split(\" \")\n  n - s[0].to_i\
    \ - s[3].to_i\nend", "  # your code here\n  fruits = s.split(\" \")\n  apples\
    \ = fruits[0].to_i\n  oranges = fruits[3].to_i\n  mango = n - apples - oranges\n\
    \  return mango\nend", "  # your code here\nend", "  # write your code here\n\
    \  s = s.split(\" \")\n  s[0].to_i + s[2].to_i\n  n - s[0].to_i - s[2].to_i\n\
    end", "  # write your code here\n  s.split(\" \").map(&:to_i).reduce(:+)\n  n\
    \ - s.split(\" \").map(&:to_i).reduce(:+)\nend", "  # your code here\nend", " \
    \ # Write your code here\nend", "  # write your code here\n  a = s.split(\" \"\
    )\n  b = a[0].to_i\n  c = a[3].to_i\n  n - b - c\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # write your code here\n  s = s.split(\" \"\
    )\n  a = s[0].to_i\n  o = s[3].to_i\n  n - a - o\nend", "  # your code here\n\
    end", "  # write your code here\nend", "  # your code here\nend", "  # your code\
    \ here\nend", "  # write your code here\n  s = s.split(\" \")\n  n - s[0].to_i\
    \ - s[3].to_i\nend", "  # your code here\nend", "  # your code here\nend", " \
    \   # write your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # write your code\
    \ here\n  s = s.split(\" \")\n  n - s[0].to_i - s[3].to_i\nend", "  # Write your\
    \ code here\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\n  s.scan(/\\d+/).map(&:to_i).reduce(:+)\nend", "  # Write your\
    \ code here\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
