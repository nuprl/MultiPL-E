name: HumanEval_58_common
language: ruby
results:
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppz2hx91z\nStarted\n.\nFinished in 0.000592889 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1686.66 tests/s, 6746.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpqi3bpvtz\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpqi3bpvtz.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.014458675 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.16 tests/s, 69.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv7b2pq1q\nStarted\n.\nFinished in 0.000622928 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1605.32 tests/s, 6421.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpl575m7xt\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpl575m7xt.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.009095925 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.94 tests/s, 109.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpliz87lh_\nStarted\n.\nFinished in 0.000889197 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1124.61 tests/s, 4498.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp14k1vgzu\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmp14k1vgzu.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.008440004 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.48 tests/s, 118.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpapriwn39\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpapriwn39.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.01099895 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.92 tests/s, 90.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv8yj_xp1\nStarted\n.\nFinished in 0.000530911 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1883.55 tests/s, 7534.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmppgw_6gi6\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmppgw_6gi6.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.020730263 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    48.24 tests/s, 48.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.sort.uniq & l2.sort.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjxiio_6p\nStarted\n.\nFinished in 0.000842786 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1186.54 tests/s, 4746.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.select { |e| l2.include?(e)\
    \ }.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf8wzncaa\nStarted\n.\nFinished in 0.001025163 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    975.45 tests/s, 3901.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyq4ijuwb\nStarted\n.\nFinished in 0.001032987 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    968.07 tests/s, 3872.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc68yo5j1\nStarted\n.\nFinished in 0.00062083 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1610.75 tests/s, 6442.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpubp7bf9q\nStarted\n.\nFinished in 0.000819334 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1220.50 tests/s, 4882.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpav4qs2td\nStarted\n.\nFinished in 0.001344735 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    743.64 tests/s, 2974.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8m3ymtgw\nStarted\n.\nFinished in 0.000616811 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1621.24 tests/s, 6484.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz0dtaz19\nStarted\n.\nFinished in 0.001422898 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    702.79 tests/s, 2811.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpar9lycmu\nStarted\n.\nFinished in 0.00094763 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1055.26 tests/s, 4221.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf053cey9\nStarted\n.\nFinished in 0.000611188 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1636.16 tests/s, 6544.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpbvyhu6eo\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpbvyhu6eo.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.010024091 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.76 tests/s, 99.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwdbbh1i4\nStarted\n.\nFinished in 0.000495637 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2017.61 tests/s, 8070.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1f2ms88t\nStarted\n.\nFinished in 0.000594223 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1682.87 tests/s, 6731.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdxc7cb3_\nStarted\n.\nFinished in 0.000888322 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1125.72 tests/s, 4502.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.select { |e| l2.include?(e)\
    \ }.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpksbda_a3\nStarted\n.\nFinished in 0.000530237 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1885.95 tests/s, 7543.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkdwyt41n\nStarted\n.\nFinished in 0.0014082 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    710.13 tests/s, 2840.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphq2euqd6\nStarted\n.\nFinished in 0.001683736 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    593.92 tests/s, 2375.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpedxdo8kx\nStarted\n.\nFinished in 0.000841313 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1188.62 tests/s, 4754.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk_o3ks98\nStarted\n.\nFinished in 0.0013492 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    741.18 tests/s, 2964.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1rero50u\nStarted\n.\nFinished in 0.001407391 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    710.53 tests/s, 2842.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp7sjzm2ei\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmp7sjzm2ei.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.011498329 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.97 tests/s, 86.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp989967xr\nStarted\n.\nFinished in 0.000544238 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1837.43 tests/s, 7349.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpctncihce\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpctncihce.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.020620651 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    48.50 tests/s, 48.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprq7w4j06\nStarted\n.\nFinished in 0.000831915 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1202.05 tests/s, 4808.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxwf5mf5r\nStarted\n.\nFinished in 0.000961699 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1039.83 tests/s, 4159.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpyqt0aunc\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpyqt0aunc.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.011426815 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.51 tests/s, 87.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvbdhgy6k\nStarted\n.\nFinished in 0.001160084 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    862.01 tests/s, 3448.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpsbzorgu6\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpsbzorgu6.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.013241453 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.52 tests/s, 75.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfkwjvobq\nStarted\n.\nFinished in 0.00097499 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1025.65 tests/s, 4102.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj07hzncw\nStarted\n.\nFinished in 0.000978164 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1022.32 tests/s, 4089.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy6hzy9yx\nStarted\n.\nFinished in 0.0006376 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1568.38 tests/s, 6273.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph08dvdhq\nStarted\n.\nFinished in 0.00091292 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1095.39 tests/s, 4381.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpty2b1_t0\nStarted\n.\nFinished in 0.000553519 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1806.62 tests/s, 7226.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjeggm5bw\nStarted\n.\nFinished in 0.000912744 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1095.60 tests/s, 4382.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptqju39ss\nStarted\n.\nFinished in 0.000573704 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1743.06 tests/s, 6972.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpmx_9ubxc\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpmx_9ubxc.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.011933641 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    83.80 tests/s, 83.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpazo_y1sq\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpazo_y1sq.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.011445353 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.37 tests/s, 87.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps8v5ld86\nStarted\n.\nFinished in 0.000871472 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1147.48 tests/s, 4589.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqz4clsuy\nStarted\n.\nFinished in 0.001149211 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    870.16 tests/s, 3480.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp_ikwvb21\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmp_ikwvb21.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.02136125 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    46.81 tests/s, 46.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpanbhqabd\nStarted\n.\nFinished in 0.000578854 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1727.55 tests/s, 6910.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp7qkrwpfr\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmp7qkrwpfr.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.014147089 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.69 tests/s, 70.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpq3_jbbbb\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpq3_jbbbb.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.009285515 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.69 tests/s, 107.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiqsk_381\nStarted\n.\nFinished in 0.000611618 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1635.01 tests/s, 6540.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5212qmcr\nStarted\n.\nFinished in 0.000903679 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1106.59 tests/s, 4426.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6ug71ytp\nStarted\n.\nFinished in 0.000841282 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1188.66 tests/s, 4754.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppyda1ikh\nStarted\n.\nFinished in 0.000631211 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1584.26 tests/s, 6337.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcy9ronwl\nStarted\n.\nFinished in 0.001536542 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    650.81 tests/s, 2603.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8yhu6icf\nStarted\n.\nFinished in 0.00065537 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1525.86 tests/s, 6103.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgcrj8_6k\nStarted\n.\nFinished in 0.000531931 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1879.94 tests/s, 7519.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpbu0ur3ai\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpbu0ur3ai.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.017523659 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.07 tests/s, 57.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpl3rsv2es\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpl3rsv2es.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.013825028 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.33 tests/s, 72.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbvdcasjc\nStarted\n.\nFinished in 0.00085715 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1166.66 tests/s, 4666.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2ukf87kv\nStarted\n.\nFinished in 0.000828843 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1206.50 tests/s, 4826.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw06c3yc6\nStarted\n.\nFinished in 0.000641892 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1557.89 tests/s, 6231.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpapnxd_nb\nStarted\n.\nFinished in 0.000604056 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1655.48 tests/s, 6621.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpf2lluasb\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpf2lluasb.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.017955196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.69 tests/s, 55.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgz1yu42e\nStarted\n.\nFinished in 0.000635338 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1573.97 tests/s, 6295.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.sort.uniq & l2.sort.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3mmsweap\nStarted\n.\nFinished in 0.00076867 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1300.95 tests/s, 5203.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv0g6c3tc\nStarted\n.\nFinished in 0.001167159 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    856.78 tests/s, 3427.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp56ocxz2x\nStarted\n.\nFinished in 0.000638832 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1565.36 tests/s, 6261.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsbzvflpe\nStarted\n.\nFinished in 0.00111382 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    897.81 tests/s, 3591.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.sort.uniq & l2.sort.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcqf_hw9_\nStarted\n.\nFinished in 0.001564506 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    639.18 tests/s, 2556.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz_1rhbkz\nStarted\n.\nFinished in 0.000776707 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1287.49 tests/s, 5149.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp4uboshh\nStarted\n.\nFinished in 0.001015714 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    984.53 tests/s, 3938.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4efglkrh\nStarted\n.\nFinished in 0.001322626 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    756.07 tests/s, 3024.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7g7zncf7\nStarted\n.\nFinished in 0.000668138 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1496.70 tests/s, 5986.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8scuwq9x\nStarted\n.\nFinished in 0.000533264 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1875.24 tests/s, 7500.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe8bma1zn\nStarted\n.\nFinished in 0.000853044 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1172.27 tests/s, 4689.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa816j4p8\nStarted\n.\nFinished in 0.000529202 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1889.64 tests/s, 7558.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmprmuhl2\nStarted\n.\nFinished in 0.00056647 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1765.32 tests/s, 7061.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpi82dr1aa\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpi82dr1aa.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.012206971 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.92 tests/s, 81.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjbgaipv5\nStarted\n.\nFinished in 0.000850003 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1176.47 tests/s, 4705.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw6e9nlnh\nStarted\n.\nFinished in 0.001896836 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    527.19 tests/s, 2108.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpdd99eth7\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpdd99eth7.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.010044965 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.55 tests/s, 99.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbdpl5xla\nStarted\n.\nFinished in 0.001099932 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    909.15 tests/s, 3636.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8h8igqk1\nStarted\n.\nFinished in 0.001005192 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    994.83 tests/s, 3979.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpzpd56ofa\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpzpd56ofa.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.012163458 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.21 tests/s, 82.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkpfnp6ue\nStarted\n.\nFinished in 0.000639932 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1562.67 tests/s, 6250.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp6asj2v7o\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmp6asj2v7o.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.00970264 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.06 tests/s, 103.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp5icxzmyo\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmp5icxzmyo.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.011034229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.63 tests/s, 90.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpugqzw6yg\nStarted\n.\nFinished in 0.001013198 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    986.97 tests/s, 3947.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.sort.uniq & l2.sort.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpadgqxp2i\nStarted\n.\nFinished in 0.000642856 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1555.56 tests/s, 6222.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqbl0g11y\nStarted\n.\nFinished in 0.0005814 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1719.99 tests/s, 6879.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcemnlbup\nStarted\n.\nFinished in 0.000541731 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1845.93 tests/s, 7383.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8dm8inmb\nStarted\n.\nFinished in 0.000679237 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1472.24 tests/s, 5888.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv1q6i1wx\nStarted\n.\nFinished in 0.000652922 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1531.58 tests/s, 6126.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpoovcnt7o\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpoovcnt7o.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.008364204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.56 tests/s, 119.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp53iml4cb\nStarted\n.\nFinished in 0.00126846 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    788.36 tests/s, 3153.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcmmp78sb\nStarted\n.\nFinished in 0.00093014 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1075.11 tests/s, 4300.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp73x6e0bh\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmp73x6e0bh.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.01775502 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    56.32 tests/s, 56.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp69momr81\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmp69momr81.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.012364468 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.88 tests/s, 80.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2q0g6htb\nStarted\n.\nFinished in 0.000923816 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1082.47 tests/s, 4329.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppqg0jqk6\nStarted\n.\nFinished in 0.000575811 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1736.68 tests/s, 6946.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp043weswt\nStarted\n.\nFinished in 0.000819369 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1220.45 tests/s, 4881.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpacr42bva\nStarted\n.\nFinished in 0.001649953 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    606.08 tests/s, 2424.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9za4a9gx\nStarted\n.\nFinished in 0.000793281 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1260.59 tests/s, 5042.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj9ng6f_t\nStarted\n.\nFinished in 0.000943295 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1060.11 tests/s, 4240.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpkoqi8pt4\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpkoqi8pt4.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.01283872 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.89 tests/s, 77.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsk1iqzzt\nStarted\n.\nFinished in 0.000556678 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1796.37 tests/s, 7185.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcev9xmb8\nStarted\n.\nFinished in 0.001686084 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    593.09 tests/s, 2372.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa32wbi_6\nStarted\n.\nFinished in 0.00089004 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1123.55 tests/s, 4494.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptyl_dqju\nStarted\n.\nFinished in 0.000579655 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1725.16 tests/s, 6900.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf4fl3but\nStarted\n.\nFinished in 0.000514771 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1942.61 tests/s, 7770.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyamf59fz\nStarted\n.\nFinished in 0.000569294 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1756.56 tests/s, 7026.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3ybwx6pt\nStarted\n.\nFinished in 0.000550538 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1816.41 tests/s, 7265.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphjgj0ey8\nStarted\n.\nFinished in 0.001001929 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    998.07 tests/s, 3992.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0c7r16mx\nStarted\n.\nFinished in 0.001576085 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    634.48 tests/s, 2537.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4y559vto\nStarted\n.\nFinished in 0.000540942 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1848.63 tests/s, 7394.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2d5d_33n\nStarted\n.\nFinished in 0.000541379 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1847.13 tests/s, 7388.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7t95sakl\nStarted\n.\nFinished in 0.001159544 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    862.41 tests/s, 3449.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy6sa3fnd\nStarted\n.\nFinished in 0.000509536 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1962.57 tests/s, 7850.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpiyngxc2_\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpiyngxc2_.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.018732936 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    53.38 tests/s, 53.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6uox7nto\nStarted\n.\nFinished in 0.000550853 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1815.37 tests/s, 7261.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpmpq76rs6\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpmpq76rs6.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.018029232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.47 tests/s, 55.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpma_vuw3m\nStarted\n.\nFinished in 0.001276385 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    783.46 tests/s, 3133.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpt0e1muoh\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpt0e1muoh.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.01542507 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    64.83 tests/s, 64.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0s80v_cz\nStarted\n.\nFinished in 0.001426743 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    700.90 tests/s, 2803.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3u3hzpli\nStarted\n.\nFinished in 0.000809171 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1235.83 tests/s, 4943.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqq8oq6w9\nStarted\n.\nFinished in 0.001246194 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    802.44 tests/s, 3209.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl68rpv1p\nStarted\n.\nFinished in 0.001071577 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    933.20 tests/s, 3732.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_30nh0nr\nStarted\n.\nFinished in 0.000966547 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1034.61 tests/s, 4138.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzp_qdn2k\nStarted\n.\nFinished in 0.00088155 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1134.37 tests/s, 4537.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd9el3ae5\nStarted\n.\nFinished in 0.00083672 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1195.14 tests/s, 4780.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplt791qlr\nStarted\n.\nFinished in 0.0011831 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    845.24 tests/s, 3380.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbbaj445e\nStarted\n.\nFinished in 0.001988284 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    502.95 tests/s, 2011.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxv8x98pm\nStarted\n.\nFinished in 0.000758931 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1317.64 tests/s, 5270.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyf65tssm\nStarted\n.\nFinished in 0.001029156 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    971.67 tests/s, 3886.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxutc7bo3\nStarted\n.\nFinished in 0.001199946 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    833.37 tests/s, 3333.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwaggygqd\nStarted\n.\nFinished in 0.001112559 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    898.83 tests/s, 3595.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2g93hx5e\nStarted\n.\nFinished in 0.000680763 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1468.94 tests/s, 5875.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmputnhzung\nStarted\n.\nFinished in 0.000842496 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1186.95 tests/s, 4747.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4ty3drw3\nStarted\n.\nFinished in 0.00060046 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1665.39 tests/s, 6661.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpasm21tqd\nStarted\n.\nFinished in 0.000568848 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1757.94 tests/s, 7031.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphb2qluy2\nStarted\n.\nFinished in 0.001172466 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    852.90 tests/s, 3411.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvb802tzz\nStarted\n.\nFinished in 0.00083631 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1195.73 tests/s, 4782.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvahxzz3d\nStarted\n.\nFinished in 0.000588245 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1699.97 tests/s, 6799.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp4lih7fje\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmp4lih7fje.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.014273567 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.06 tests/s, 70.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn8fmx_0x\nStarted\n.\nFinished in 0.00065995 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1515.27 tests/s, 6061.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.select { |e| l2.include?(e)\
    \ }.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmp1j7ae0\nStarted\n.\nFinished in 0.000588944 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1697.95 tests/s, 6791.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr5oajubr\nStarted\n.\nFinished in 0.00114956 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    869.90 tests/s, 3479.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplulq4yzf\nStarted\n.\nFinished in 0.001079132 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    926.67 tests/s, 3706.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7di4c6zx\nStarted\n.\nFinished in 0.001174018 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    851.78 tests/s, 3407.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppmu6z4wq\nStarted\n.\nFinished in 0.000560155 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1785.22 tests/s, 7140.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoh8fx4lj\nStarted\n.\nFinished in 0.000797179 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1254.42 tests/s, 5017.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpujbuxjnu\nStarted\n.\nFinished in 0.000595212 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1680.07 tests/s, 6720.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpip4_m67j\nStarted\n.\nFinished in 0.000600048 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1666.53 tests/s, 6666.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpf7uobdjr\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpf7uobdjr.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.021975958 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    45.50 tests/s, 45.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9zgong11\nStarted\n.\nFinished in 0.00053622 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1864.91 tests/s, 7459.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy35ntg2b\nStarted\n.\nFinished in 0.00083545 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1196.96 tests/s, 4787.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp7oew6vcw\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmp7oew6vcw.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.011873022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.22 tests/s, 84.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmporb6x95n\nStarted\n.\nFinished in 0.000727719 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1374.16 tests/s, 5496.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphuqfsvgv\nStarted\n.\nFinished in 0.000543317 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1840.55 tests/s, 7362.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpyv_ldzki\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpyv_ldzki.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.009297353 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.56 tests/s, 107.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb3vjkire\nStarted\n.\nFinished in 0.000549381 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1820.23 tests/s, 7280.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmlmz7y1f\nStarted\n.\nFinished in 0.000499686 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2001.26 tests/s, 8005.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp781yrgfp\nStarted\n.\nFinished in 0.000761352 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1313.45 tests/s, 5253.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnuix4g71\nStarted\n.\nFinished in 0.000929137 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1076.27 tests/s, 4305.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2886dgol\nStarted\n.\nFinished in 0.001106969 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    903.37 tests/s, 3613.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpr1rlw1ne\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpr1rlw1ne.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.008556891 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    116.86 tests/s, 116.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwvoceyj5\nStarted\n.\nFinished in 0.000861465 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1160.81 tests/s, 4643.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpwvjaq047\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpwvjaq047.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.012214319 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.87 tests/s, 81.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg72n5hzy\nStarted\n.\nFinished in 0.000593201 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1685.77 tests/s, 6743.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp2lqfql8y\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmp2lqfql8y.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.015852847 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    63.08 tests/s, 63.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwwpj8qxh\nStarted\n.\nFinished in 0.000553316 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1807.29 tests/s, 7229.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8wh8nqi2\nStarted\n.\nFinished in 0.000757892 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1319.45 tests/s, 5277.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9i9ed7zl\nStarted\n.\nFinished in 0.000742669 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1346.49 tests/s, 5385.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpvhr27rin\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpvhr27rin.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.013692185 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.03 tests/s, 73.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphewf3zm1\nStarted\n.\nFinished in 0.001016983 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    983.30 tests/s, 3933.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4wk_t77f\nStarted\n.\nFinished in 0.000563759 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1773.81 tests/s, 7095.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_j0_iy__\nStarted\n.\nFinished in 0.000833686 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1199.49 tests/s, 4797.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy38rxtf_\nStarted\n.\nFinished in 0.000650499 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1537.28 tests/s, 6149.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.select { |e| l2.include?(e)\
    \ }.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppju9yyq7\nStarted\n.\nFinished in 0.001095169 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    913.10 tests/s, 3652.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpsra0b689\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpsra0b689.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.011068526 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.35 tests/s, 90.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8lcerumk\nStarted\n.\nFinished in 0.000940114 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1063.70 tests/s, 4254.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4yykd390\nStarted\n.\nFinished in 0.000525376 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1903.40 tests/s, 7613.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp0j4twnr\nStarted\n.\nFinished in 0.000668539 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1495.80 tests/s, 5983.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppqsa9qoe\nStarted\n.\nFinished in 0.000938113 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1065.97 tests/s, 4263.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt5a24h14\nStarted\n.\nFinished in 0.001099227 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    909.73 tests/s, 3638.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnk1g919h\nStarted\n.\nFinished in 0.000551425 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1813.48 tests/s, 7253.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpdrhslsbf\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpdrhslsbf.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.008456504 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.25 tests/s, 118.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzrlu40u2\nStarted\n.\nFinished in 0.000567282 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1762.79 tests/s, 7051.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmahhnjxm\nStarted\n.\nFinished in 0.000887303 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1127.01 tests/s, 4508.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvzsxube8\nStarted\n.\nFinished in 0.000758526 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1318.35 tests/s, 5273.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvvw1mghu\nStarted\n.\nFinished in 0.00057586 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1736.53 tests/s, 6946.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  # TODO: Return sorted unique\
    \ common elements for two lists.\n  (l1 & l2).sort\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5iqj1wz5\nStarted\n.\nFinished in 0.000865774 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1155.04 tests/s, 4620.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1ammy23c\nStarted\n.\nFinished in 0.00077204 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1295.27 tests/s, 5181.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0hesxztv\nStarted\n.\nFinished in 0.000588495 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1699.25 tests/s, 6797.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpe1pava0p\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpe1pava0p.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.007270021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.55 tests/s, 137.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy2eifrhb\nStarted\n.\nFinished in 0.000520921 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1919.68 tests/s, 7678.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpwa8phvqs\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpwa8phvqs.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.008562407 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    116.79 tests/s, 116.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
