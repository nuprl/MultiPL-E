name: HumanEval_61_correct_bracketing
language: ruby
results:
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpck_q_nqs\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpck_q_nqs.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011003374 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.88 tests/s, 90.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpw27n1quf\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpw27n1quf.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008019028 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.70 tests/s, 124.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9up_m260\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp9up_m260.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007269454 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.56 tests/s, 137.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplv169jpc\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmplv169jpc.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014350642 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.68 tests/s, 69.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1q7hrfgx\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp1q7hrfgx.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.012363913 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.88 tests/s, 80.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \    count = 0\n    brackets.each_char do |char|\n        if char == \"(\"\n \
    \           count += 1\n        elsif char == \")\"\n            count -= 1\n\
    \        end\n        if count < 0\n            return false\n        end\n  \
    \  end\n    return count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0qc0ljoc\nStarted\n.\nFinished in 0.00060718 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1646.96 tests/s, 19763.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpepn3dbqm\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpepn3dbqm.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.01070336 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    93.43 tests/s, 93.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz2ko1w_c\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpz2ko1w_c.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008210601 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.79 tests/s, 121.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmperubcanb\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmperubcanb.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008934483 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    111.93 tests/s, 111.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0nldk9qe\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp0nldk9qe.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014671971 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.16 tests/s, 68.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmjh4_0al\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpmjh4_0al.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010700734 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    93.45 tests/s, 93.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgzz1fi8b\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpgzz1fi8b.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00944301 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.90 tests/s, 105.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuqop_3v1\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpuqop_3v1.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00948027 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.48 tests/s, 105.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn39jdlxi\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpn39jdlxi.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00844257 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.45 tests/s, 118.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphtsm8q7m\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmphtsm8q7m.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011367837 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.97 tests/s, 87.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0gkec82z\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp0gkec82z.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010542803 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    94.85 tests/s, 94.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0g_v5wpl\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp0g_v5wpl.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010325767 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.85 tests/s, 96.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdy3zepj_\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpdy3zepj_.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010997976 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.93 tests/s, 90.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8tnrj3e5\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp8tnrj3e5.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.017428083 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.38 tests/s, 57.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8kkxwueq\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp8kkxwueq.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008594517 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    116.35 tests/s, 116.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwo_9w6y4\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpwo_9w6y4.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007647137 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.77 tests/s, 130.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdjqvbyeq\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpdjqvbyeq.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.016255765 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    61.52 tests/s, 61.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr5laphky\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpr5laphky.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009755745 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    102.50 tests/s, 102.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7kg7cfn4\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp7kg7cfn4.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008992901 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    111.20 tests/s, 111.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2o5uqmjo\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp2o5uqmjo.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010696712 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    93.49 tests/s, 93.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzem57lin\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpzem57lin.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007081651 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.21 tests/s, 141.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdljz80cd\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpdljz80cd.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007210138 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    138.69 tests/s, 138.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"(\"\n      stack.push(char)\n\
    \    elsif char == \")\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkuwswdi5\nStarted\n.\nFinished in 0.001619804 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    617.36 tests/s, 7408.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptujl1_ey\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmptujl1_ey.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007933453 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.05 tests/s, 126.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo3f6lbg5\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpo3f6lbg5.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008375095 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.40 tests/s, 119.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplds19wtl\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmplds19wtl.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007963687 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.57 tests/s, 125.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps1k_dv67\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmps1k_dv67.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011541983 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.64 tests/s, 86.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoyig_jtx\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpoyig_jtx.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010902016 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.73 tests/s, 91.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\n  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"(\"\n      stack.push(char)\n    elsif char == \")\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpclf5v0ul\nStarted\n.\nFinished in 0.000931438 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1073.61 tests/s, 12883.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptrrab7_j\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmptrrab7_j.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011048013 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.51 tests/s, 90.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpirp6_ibo\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpirp6_ibo.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.013690059 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.05 tests/s, 73.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp73xf24yt\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp73xf24yt.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010350264 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.62 tests/s, 96.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"(\"\n      stack.push(char)\n\
    \    elsif char == \")\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp87xf82gw\nStarted\n.\nFinished in 0.000741803 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1348.07 tests/s, 16176.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4t4o5zra\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp4t4o5zra.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009053401 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.46 tests/s, 110.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: Implement this function\n  # Hint: Use a stack\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp88fsxokj\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp88fsxokj.rb:19:in `test_correct_bracketing'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_correct_bracketing\n\
    \     18:     candidate = method(:correct_bracketing)\n  => 19:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     20:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     21:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     22:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.018872093 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    52.99 tests/s, 52.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |c|\n    if c == '('\n      stack.push(c)\n\
    \    elsif c == ')'\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp47saneb5\nStarted\n.\nFinished in 0.000638506 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1566.16 tests/s, 18793.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpplnvtfhf\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpplnvtfhf.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007585586 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.83 tests/s, 131.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxvf1n0ua\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpxvf1n0ua.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007624966 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.15 tests/s, 131.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl82bmbxn\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpl82bmbxn.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.012836975 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.90 tests/s, 77.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpeysysm84\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpeysysm84.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010481193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.41 tests/s, 95.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpucnk1qmz\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpucnk1qmz.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.017843912 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    56.04 tests/s, 56.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  count = 0\n  brackets.each_char do |char|\n    count += 1 if char == \"(\"\n\
    \    count -= 1 if char == \")\"\n    return false if count < 0\n  end\n  count\
    \ == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpulpcq68i\nStarted\n.\nFinished in 0.00064855 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1541.90 tests/s, 18502.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpugkuqyzv\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpugkuqyzv.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007140016 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.06 tests/s, 140.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"(\"\n      stack.push(char)\n\
    \    elsif char == \")\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8sdv7rv1\nStarted\n.\nFinished in 0.000970424 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1030.48 tests/s, 12365.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  open_brackets = 0\n  brackets.each_char do |char|\n    if char == \"(\"\n \
    \     open_brackets += 1\n    elsif char == \")\"\n      open_brackets -= 1\n\
    \    end\n    if open_brackets < 0\n      return false\n    end\n  end\n  return\
    \ open_brackets == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpofgve24c\nStarted\n.\nFinished in 0.001050717 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    951.73 tests/s, 11420.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6bv10dfe\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp6bv10dfe.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010397031 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.18 tests/s, 96.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"(\"\n      stack.push(char)\n\
    \    elsif char == \")\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp84ysr3rq\nStarted\n.\nFinished in 0.000617035 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1620.65 tests/s, 19447.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  count = 0\n  brackets.each_char do |char|\n    if char == \"(\"\n      count\
    \ += 1\n    elsif char == \")\"\n      count -= 1\n    end\n    return false if\
    \ count < 0\n  end\n  count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxve3pfai\nStarted\n.\nFinished in 0.001168622 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    855.71 tests/s, 10268.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsd43whs4\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpsd43whs4.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.01863908 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    53.65 tests/s, 53.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8_e5009p\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp8_e5009p.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014509665 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.92 tests/s, 68.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1kr9wd4t\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp1kr9wd4t.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.012776335 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    78.27 tests/s, 78.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3i72fb3v\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp3i72fb3v.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00945754 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.74 tests/s, 105.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8o1jzl96\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp8o1jzl96.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010418023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.99 tests/s, 95.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp636qp979\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp636qp979.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008767686 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.06 tests/s, 114.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkrq_ryh0\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpkrq_ryh0.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.012149652 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.31 tests/s, 82.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # set a counter to 0\n  # iterate through the string\n  # if the character\
    \ is an opening bracket, add 1 to the counter\n  # if the character is a closing\
    \ bracket, subtract 1 from the counter\n  # if the counter is ever negative, return\
    \ False\n  # return True if the counter is 0 at the end\n  counter = 0\n  brackets.each_char\
    \ do |char|\n    if char == \"(\"\n      counter += 1\n    elsif char == \")\"\
    \n      counter -= 1\n    end\n    return false if counter < 0\n  end\n  counter\
    \ == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplclxsmpo\nStarted\n.\nFinished in 0.000892633 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1120.28 tests/s, 13443.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm948_c2_\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpm948_c2_.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009949795 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.50 tests/s, 100.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph4m_oexr\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmph4m_oexr.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00855262 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    116.92 tests/s, 116.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  open_brackets = 0\n  brackets.each_char do |char|\n    if char == \"(\"\n \
    \     open_brackets += 1\n    elsif char == \")\"\n      open_brackets -= 1\n\
    \    end\n    return false if open_brackets < 0\n  end\n  return open_brackets\
    \ == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw64tplj1\nStarted\n.\nFinished in 0.00072872 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1372.27 tests/s, 16467.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5ljndu7w\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp5ljndu7w.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.015321249 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    65.27 tests/s, 65.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2xx3qtn9\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp2xx3qtn9.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.019362512 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    51.65 tests/s, 51.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9dcolos1\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp9dcolos1.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.015868673 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    63.02 tests/s, 63.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0k_yxvsz\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp0k_yxvsz.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.013804901 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.44 tests/s, 72.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo19bvb_x\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpo19bvb_x.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014331457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.78 tests/s, 69.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn97t5jiw\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpn97t5jiw.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010070165 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.30 tests/s, 99.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptmpmlx27\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmptmpmlx27.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008070973 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.90 tests/s, 123.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg4kw4r80\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpg4kw4r80.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010117506 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.84 tests/s, 98.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \    # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp76f_ojkz\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp76f_ojkz.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008613727 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    116.09 tests/s, 116.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqlxzjdmw\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpqlxzjdmw.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011140425 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    89.76 tests/s, 89.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmgid9mqq\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpmgid9mqq.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010263169 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    97.44 tests/s, 97.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo48mpnoq\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpo48mpnoq.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007270171 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.55 tests/s, 137.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpznl6a8zw\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpznl6a8zw.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008432466 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.59 tests/s, 118.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8tt2f8sk\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp8tt2f8sk.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011506278 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.91 tests/s, 86.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjff640p2\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpjff640p2.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007489504 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.52 tests/s, 133.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzlwvtej7\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpzlwvtej7.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006677478 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    149.76 tests/s, 149.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp581mtyry\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp581mtyry.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010402147 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.13 tests/s, 96.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp88y0gft0\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp88y0gft0.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010916605 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.60 tests/s, 91.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxltwfuy1\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpxltwfuy1.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00766614 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.44 tests/s, 130.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwzbla4zu\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpwzbla4zu.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014508066 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.93 tests/s, 68.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \    # YOUR CODE HERE\n    count = 0\n    brackets.each_char do |char|\n     \
    \   if char == \"(\"\n            count += 1\n        elsif char == \")\"\n  \
    \          count -= 1\n        end\n        if count < 0\n            return false\n\
    \        end\n    end\n    if count == 0\n        return true\n    else\n    \
    \    return false\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprf2bcyue\nStarted\n.\nFinished in 0.001124803 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    889.04 tests/s, 10668.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp4t16hl9\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpp4t16hl9.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.013714926 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.91 tests/s, 72.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp88sohdkc\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp88sohdkc.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009915809 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.85 tests/s, 100.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjgyy7pz7\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpjgyy7pz7.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009190107 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.81 tests/s, 108.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp499e4fpi\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp499e4fpi.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007124662 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.36 tests/s, 140.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyf8_czhs\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpyf8_czhs.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.013517139 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.98 tests/s, 73.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzvlcjw78\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpzvlcjw78.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008106735 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.35 tests/s, 123.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo3rjnvwv\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpo3rjnvwv.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.01370082 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.99 tests/s, 72.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuf_p9jnb\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpuf_p9jnb.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011805866 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.70 tests/s, 84.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4708evt1\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp4708evt1.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007655514 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.62 tests/s, 130.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \    count = 0\n    brackets.each_char do |char|\n        if char == \"(\"\n \
    \           count += 1\n        elsif char == \")\"\n            count -= 1\n\
    \        end\n        if count < 0\n            return false\n        end\n  \
    \  end\n    return count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkcw84qw0\nStarted\n.\nFinished in 0.001068384 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    935.99 tests/s, 11231.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \    # if brackets.length == 0\n    #     return True\n    # elsif brackets.length\
    \ == 1\n    #     return False\n    # end\n    # if brackets[0] == \"(\"\n   \
    \ #     if brackets[-1] == \")\"\n    #         return correct_bracketing(brackets[1..-2])\n\
    \    #     else\n    #         return False\n    #     end\n    # else\n    #\
    \     return False\n    # end\n    # if brackets.length == 0\n    #     return\
    \ True\n    # elsif brackets.length == 1\n    #     return False\n    # end\n\
    \    # if brackets[0] == \"(\"\n    #     if brackets[-1] == \")\"\n    #    \
    \     return correct_bracketing(brackets[1..-2])\n    #     else\n    #      \
    \   return False\n    #     end\n    # else\n    #     return False\n    # end\n\
    \    # if brackets.length == 0\n    #     return True\n    # elsif brackets.length\
    \ == 1\n    #     return False\n    # end\n    # if brackets[0] == \"(\"\n   \
    \ #     if brackets[-1] == \")\"\n    #         return correct_bracketing(brackets[1..-2])\n\
    \    #     else\n    #         return False\n    #     end\n    # else\n    #\
    \     return False\n    # end\n    # if brackets.length == 0\n    #     return\
    \ True\n    # elsif brackets.length == 1\n    #     return False\n    # end\n\
    \    # if brackets[0] == \"(\"\n    #     if brackets[-1] == \")\"\n    #    \
    \     return correct_bracketing(brackets[1..-2])\n    #     else\n    #      \
    \   return False\n    #     end\n    # else\n    #     return False\n    # end\n\
    \    # if brackets.length == 0\n    #     return True\n    # elsif brackets.length\
    \ == 1\n    #     return False\n    # end\n    # if brackets[0] == \"(\"\n   \
    \ #     if brackets[-1] == \")\"\n    #         return correct_bracketing(brackets[1..\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "/tmp/tmpokdhd2wn.rb:77: class definition in method body\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpokdhd2wn.rb:93: syntax\
    \ error, unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \    # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgmmk5n3u\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpgmmk5n3u.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.012892284 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.57 tests/s, 77.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"(\"\n      stack.push(char)\n\
    \    elsif char == \")\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxqqbxbaw\nStarted\n.\nFinished in 0.000610973 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1636.73 tests/s, 19640.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8_9irpfa\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp8_9irpfa.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007912308 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.39 tests/s, 126.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpudmjzddj\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpudmjzddj.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.01636799 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    61.09 tests/s, 61.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"(\"\n      stack.push(char)\n\
    \    elsif char == \")\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1stk5hb_\nStarted\n.\nFinished in 0.00221961 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    450.53 tests/s, 5406.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8sxr58mf\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp8sxr58mf.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007865832 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.13 tests/s, 127.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmwq8hj29\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpmwq8hj29.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010631142 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    94.06 tests/s, 94.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6g33xj0x\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp6g33xj0x.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009676669 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.34 tests/s, 103.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4g5hzs5d\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp4g5hzs5d.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014864461 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.27 tests/s, 67.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq1r5v7wr\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpq1r5v7wr.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.012685239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    78.83 tests/s, 78.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcxugcojd\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpcxugcojd.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.015111622 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.17 tests/s, 66.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfie13oeq\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpfie13oeq.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011986301 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    83.43 tests/s, 83.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpneehbkso\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpneehbkso.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.016667976 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    60.00 tests/s, 60.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdhfpzjfj\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpdhfpzjfj.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007414716 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.87 tests/s, 134.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp659xoud4\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp659xoud4.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008059666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.07 tests/s, 124.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \    # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp83kfcffg\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp83kfcffg.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010072701 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.28 tests/s, 99.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr3us4smd\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpr3us4smd.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008912754 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.20 tests/s, 112.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz9a_d6ff\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpz9a_d6ff.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007624492 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.16 tests/s, 131.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7cjfgy6k\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp7cjfgy6k.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009169008 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.06 tests/s, 109.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp39gexzdn\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp39gexzdn.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.020255185 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    49.37 tests/s, 49.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \    # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmputa8llnc\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmputa8llnc.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.016776129 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    59.61 tests/s, 59.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5q9depl8\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp5q9depl8.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010055069 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.45 tests/s, 99.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0vipba72\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp0vipba72.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011693598 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.52 tests/s, 85.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplx89wpw5\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmplx89wpw5.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.012391641 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.70 tests/s, 80.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"(\"\n      stack.push(char)\n\
    \    elsif char == \")\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4ve14u3h\nStarted\n.\nFinished in 0.001594242 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    627.26 tests/s, 7527.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzfxuhln7\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpzfxuhln7.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011118324 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    89.94 tests/s, 89.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf9e4zsm4\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpf9e4zsm4.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.016615399 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    60.19 tests/s, 60.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpctxalz6z\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpctxalz6z.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014972979 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.79 tests/s, 66.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpri5zxl3_\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpri5zxl3_.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.013978383 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.54 tests/s, 71.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpi9jx1ijh\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpi9jx1ijh.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009032208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.71 tests/s, 110.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppjyrost_\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmppjyrost_.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.013943351 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.72 tests/s, 71.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpit04e6v6\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpit04e6v6.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.013260342 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.41 tests/s, 75.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmi2s3a46\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpmi2s3a46.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014495119 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.99 tests/s, 68.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnqxadkqm\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpnqxadkqm.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008360517 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.61 tests/s, 119.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \    # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdp_4licn\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpdp_4licn.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007393698 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.25 tests/s, 135.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp79ew5wvm\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp79ew5wvm.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011461508 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.25 tests/s, 87.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzkznks_c\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpzkznks_c.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007800814 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.19 tests/s, 128.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  return false if brackets[0] == \")\"\n  return false if brackets[-1] == \"\
    (\"\n  return false if brackets.count(\"(\") != brackets.count(\")\")\n  return\
    \ true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppbdv950b\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmppbdv950b.rb:31:in `test_correct_bracketing'\n\
    \     28:     assert_equal(false, candidate.call(\"((((\"))\n     29:     assert_equal(false,\
    \ candidate.call(\")\"))\n     30:     assert_equal(false, candidate.call(\"(()\"\
    ))\n  => 31:     assert_equal(false, candidate.call(\"()()(()())())(()\"))\n \
    \    32:     assert_equal(false, candidate.call(\"()()(()())()))()\"))\n     33:\
    \   end\n     34: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.013299809 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.19 tests/s, 827.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7jbvwanw\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp7jbvwanw.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009298433 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.55 tests/s, 107.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxgz_cdbc\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpxgz_cdbc.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011221774 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    89.11 tests/s, 89.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpov6cw131\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpov6cw131.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.015437489 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    64.78 tests/s, 64.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  count = 0\n  brackets.each_char do |char|\n    count += 1 if char == \"(\"\n\
    \    count -= 1 if char == \")\"\n    return false if count < 0\n  end\n  count\
    \ == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9onwsgvf\nStarted\n.\nFinished in 0.001773708 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    563.79 tests/s, 6765.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2vjbgw_b\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp2vjbgw_b.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011157077 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    89.63 tests/s, 89.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnnz2l8rj\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpnnz2l8rj.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008600782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    116.27 tests/s, 116.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg6ipku5l\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpg6ipku5l.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010498745 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.25 tests/s, 95.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkfvfyd7w\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpkfvfyd7w.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.012850022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.82 tests/s, 77.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6y_jgnfa\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp6y_jgnfa.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008467963 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.09 tests/s, 118.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz2sa96ny\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpz2sa96ny.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011040562 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.58 tests/s, 90.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgmeh6jc7\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpgmeh6jc7.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.012781414 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    78.24 tests/s, 78.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  open = 0\n  brackets.each_char do |char|\n    if char == \"(\"\n      open\
    \ += 1\n    elsif char == \")\"\n      open -= 1\n    end\n    return false if\
    \ open < 0\n  end\n  open == 0\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2pv3zf1b\nStarted\n.\nFinished in 0.000863439 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1158.16 tests/s, 13897.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzl7t894z\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpzl7t894z.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.015003816 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.65 tests/s, 66.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"(\"\n      stack.push(char)\n\
    \    elsif char == \")\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgq8ca1al\nStarted\n.\nFinished in 0.001906624 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    524.49 tests/s, 6293.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5betu1lz\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp5betu1lz.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007583212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.87 tests/s, 131.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyjwf7o28\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpyjwf7o28.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.01214151 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.36 tests/s, 82.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  return false if brackets[0] == \")\"\n  return false if brackets[-1] == \"\
    (\"\n  return false if brackets.count(\"(\") != brackets.count(\")\")\n  return\
    \ true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpi2utopkj\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpi2utopkj.rb:31:in `test_correct_bracketing'\n\
    \     28:     assert_equal(false, candidate.call(\"((((\"))\n     29:     assert_equal(false,\
    \ candidate.call(\")\"))\n     30:     assert_equal(false, candidate.call(\"(()\"\
    ))\n  => 31:     assert_equal(false, candidate.call(\"()()(()())())(()\"))\n \
    \    32:     assert_equal(false, candidate.call(\"()()(()())()))()\"))\n     33:\
    \   end\n     34: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.011236574 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    89.00 tests/s, 978.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2ov_hqk_\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp2ov_hqk_.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009976536 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.24 tests/s, 100.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn0p8soo3\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpn0p8soo3.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007711835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.67 tests/s, 129.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_y3rp51x\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp_y3rp51x.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010235427 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    97.70 tests/s, 97.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement me!\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxgo189co\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpxgo189co.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014047903 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.19 tests/s, 71.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpci8wostc\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpci8wostc.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008751359 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.27 tests/s, 114.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpw33dg8_9\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpw33dg8_9.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007385509 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.40 tests/s, 135.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj7xcjtbp\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpj7xcjtbp.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.0142915 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.97 tests/s, 69.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcepx20wq\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpcepx20wq.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.012086327 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.74 tests/s, 82.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgofss7i3\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpgofss7i3.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.017588215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    56.86 tests/s, 56.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_piycu0s\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp_piycu0s.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.013785646 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.54 tests/s, 72.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5m1del3v\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp5m1del3v.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011660216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.76 tests/s, 85.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0cnylo_e\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp0cnylo_e.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.012069142 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.86 tests/s, 82.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpga51ovfe\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpga51ovfe.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.013525196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.94 tests/s, 73.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxsenraf5\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpxsenraf5.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.015942168 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    62.73 tests/s, 62.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpntb4ln6m\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpntb4ln6m.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014394822 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.47 tests/s, 69.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_ay_qss2\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp_ay_qss2.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009179102 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.94 tests/s, 108.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq23z3lcr\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpq23z3lcr.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014526834 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.84 tests/s, 68.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfsmywilz\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpfsmywilz.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.012006167 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    83.29 tests/s, 83.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplwv8ze8t\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmplwv8ze8t.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007596624 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.64 tests/s, 131.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc1gw7qbb\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpc1gw7qbb.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.013124392 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.19 tests/s, 76.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppmpj6jj0\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmppmpj6jj0.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014995812 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.69 tests/s, 66.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl9vi4d7n\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpl9vi4d7n.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00900767 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    111.02 tests/s, 111.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc4oftyv2\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpc4oftyv2.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.016932582 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    59.06 tests/s, 59.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp92ahiu1z\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp92ahiu1z.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.012251562 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.62 tests/s, 81.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5ev5kyna\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp5ev5kyna.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.013285676 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.27 tests/s, 75.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  return false if brackets.length == 1\n  return false if brackets[0] == \")\"\
    \n  return false if brackets[-1] == \"(\"\n  return false if brackets.count(\"\
    (\") != brackets.count(\")\")\n  return true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate\
    \ = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"()\"\
    ))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcabeowhe\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpcabeowhe.rb:32:in `test_correct_bracketing'\n\
    \     29:     assert_equal(false, candidate.call(\"((((\"))\n     30:     assert_equal(false,\
    \ candidate.call(\")\"))\n     31:     assert_equal(false, candidate.call(\"(()\"\
    ))\n  => 32:     assert_equal(false, candidate.call(\"()()(()())())(()\"))\n \
    \    33:     assert_equal(false, candidate.call(\"()()(()())()))()\"))\n     34:\
    \   end\n     35: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.013844924 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.23 tests/s, 794.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6juznw7a\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp6juznw7a.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010310922 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.98 tests/s, 96.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0hm0b9v0\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp0hm0b9v0.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.012456963 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.28 tests/s, 80.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwjhpocmz\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpwjhpocmz.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014360812 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.63 tests/s, 69.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \    # YOUR CODE HERE\n    count = 0\n    brackets.each_char do |char|\n     \
    \   if char == \"(\"\n            count += 1\n        elsif char == \")\"\n  \
    \          count -= 1\n        end\n        if count < 0\n            return false\n\
    \        end\n    end\n    if count == 0\n        return true\n    else\n    \
    \    return false\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm0he43j7\nStarted\n.\nFinished in 0.00069872 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1431.19 tests/s, 17174.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_1lv6hqo\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp_1lv6hqo.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011680633 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.61 tests/s, 85.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp53al0gcp\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp53al0gcp.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010824727 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.38 tests/s, 92.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsw_0_ihf\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpsw_0_ihf.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.012786863 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    78.21 tests/s, 78.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \    # YOUR CODE HERE\n    stack = []\n    brackets.each_char do |char|\n    \
    \    if char == \"(\"\n            stack.push(char)\n        elsif char == \"\
    )\"\n            if stack.length == 0\n                return false\n        \
    \    else\n                stack.pop\n            end\n        end\n    end\n\
    \    return stack.length == 0\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqgxz3uxq\nStarted\n.\nFinished in 0.000660014 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1515.12 tests/s, 18181.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpueppe4lh\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpueppe4lh.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.01268396 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    78.84 tests/s, 78.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnp0r2sbv\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpnp0r2sbv.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008192011 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.07 tests/s, 122.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe0yaej64\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpe0yaej64.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009481824 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.46 tests/s, 105.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz9x0nu7b\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpz9x0nu7b.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011896075 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.06 tests/s, 84.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpulxlrlhk\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpulxlrlhk.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007396482 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.20 tests/s, 135.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8spxss3v\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp8spxss3v.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011514453 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.85 tests/s, 86.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"(\"\n      stack.push(char)\n\
    \    elsif char == \")\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyexva9wd\nStarted\n.\nFinished in 0.000582211 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1717.59 tests/s, 20611.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpy5ve69pd\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpy5ve69pd.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006983022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.20 tests/s, 143.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2ycwyt7v\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp2ycwyt7v.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009241004 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.21 tests/s, 108.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpod9yrtae\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpod9yrtae.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006641557 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.57 tests/s, 150.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  return false if brackets.length == 1\n  stack = []\n  brackets.each_char do\
    \ |char|\n    if char == \"(\"\n      stack.push(char)\n    else\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3w6ts6lj\nStarted\n.\nFinished in 0.001028161 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    972.61 tests/s, 11671.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm5130kxc\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpm5130kxc.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.012164786 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.20 tests/s, 82.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbnzg0f0o\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpbnzg0f0o.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006891939 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.10 tests/s, 145.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqwdn5_6u\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpqwdn5_6u.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00632788 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.03 tests/s, 158.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\"\
    )\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
    (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8f47uae6\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp8f47uae6.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.017207491 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    58.11 tests/s, 58.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
