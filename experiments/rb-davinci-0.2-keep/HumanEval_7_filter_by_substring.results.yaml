name: HumanEval_7_filter_by_substring
language: ruby
results:
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpii916u39\nStarted\n.\nFinished in 0.000336973 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2967.60 tests/s, 11870.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbfxwiln7\nStarted\n.\nFinished in 0.000310634 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3219.22 tests/s, 12876.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9miwrsqr\nStarted\n.\nFinished in 0.000376929 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2653.02 tests/s, 10612.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptl_21wjo\nStarted\n.\nFinished in 0.000337755 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2960.73 tests/s, 11842.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt5h7vlxk\nStarted\n.\nFinished in 0.000344598 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2901.93 tests/s, 11607.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu09tlr7x\nStarted\n.\nFinished in 0.000310946 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3215.99 tests/s, 12863.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp40s7mgbv\nStarted\n.\nFinished in 0.000326976 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3058.33 tests/s, 12233.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9np9jtpy\nStarted\n.\nFinished in 0.000358142 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2792.19 tests/s, 11168.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpba52f_h1\nStarted\n.\nFinished in 0.000351181 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2847.53 tests/s, 11390.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplutkrqxv\nStarted\n.\nFinished in 0.000337595 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2962.13 tests/s, 11848.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp91lq5z3\nStarted\n.\nFinished in 0.00030303 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3300.00 tests/s, 13200.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzuv_gf92\nStarted\n.\nFinished in 0.000426061 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2347.08 tests/s, 9388.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgkx70h0s\nStarted\n.\nFinished in 0.000520809 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1920.09 tests/s, 7680.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo5ehnnk3\nStarted\n.\nFinished in 0.000342354 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2920.95 tests/s, 11683.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_4x3o9ft\nStarted\n.\nFinished in 0.000517242 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1933.33 tests/s, 7733.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj6xq3fyk\nStarted\n.\nFinished in 0.000354616 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2819.95 tests/s, 11279.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpey2g5n1u\nStarted\n.\nFinished in 0.000361589 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2765.57 tests/s, 11062.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp56bnjz6l\nStarted\n.\nFinished in 0.000331634 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3015.37 tests/s, 12061.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyatap2ek\nStarted\n.\nFinished in 0.000543853 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1838.73 tests/s, 7354.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpysilfd7p\nStarted\n.\nFinished in 0.000481015 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2078.94 tests/s, 8315.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxs5_h21v\nStarted\n.\nFinished in 0.000345179 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2897.05 tests/s, 11588.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph3p7fa18\nStarted\n.\nFinished in 0.000777552 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1286.09 tests/s, 5144.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpppo0svyz\nStarted\n.\nFinished in 0.00040386 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2476.11 tests/s, 9904.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuve1hrod\nStarted\n.\nFinished in 0.000439646 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2274.56 tests/s, 9098.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp96wjojpw\nStarted\n.\nFinished in 0.000349777 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2858.96 tests/s, 11435.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdkn0x4fu\nStarted\n.\nFinished in 0.000312898 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3195.93 tests/s, 12783.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpntxz74x1\nStarted\n.\nFinished in 0.000358203 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2791.71 tests/s, 11166.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp141sq1tr\nStarted\n.\nFinished in 0.000355849 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2810.18 tests/s, 11240.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7ku_jmsj\nStarted\n.\nFinished in 0.000323488 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3091.30 tests/s, 12365.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptvjcukng\nStarted\n.\nFinished in 0.000348906 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2866.10 tests/s, 11464.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0key1uya\nStarted\n.\nFinished in 0.000405653 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2465.16 tests/s, 9860.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnahr3mmf\nStarted\n.\nFinished in 0.000296338 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3374.53 tests/s, 13498.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4_yeyznc\nStarted\n.\nFinished in 0.000308891 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3237.39 tests/s, 12949.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj0uomzny\nStarted\n.\nFinished in 0.000348676 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2867.99 tests/s, 11471.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_u4zg7gw\nStarted\n.\nFinished in 0.000348625 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2868.41 tests/s, 11473.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt_883ok7\nStarted\n.\nFinished in 0.000341432 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2928.84 tests/s, 11715.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpugl9zqmw\nStarted\n.\nFinished in 0.00033043 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3026.36 tests/s, 12105.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjdq2zval\nStarted\n.\nFinished in 0.000333728 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2996.45 tests/s, 11985.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfowrre2i\nStarted\n.\nFinished in 0.000329058 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3038.98 tests/s, 12155.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiew_atkr\nStarted\n.\nFinished in 0.000363012 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2754.73 tests/s, 11018.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphxm96p76\nStarted\n.\nFinished in 0.000379664 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2633.91 tests/s, 10535.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfpeg_fso\nStarted\n.\nFinished in 0.000907406 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1102.04 tests/s, 4408.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5wpsxiz1\nStarted\n.\nFinished in 0.000363994 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2747.30 tests/s, 10989.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqktyev66\nStarted\n.\nFinished in 0.000450096 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2221.75 tests/s, 8886.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzt5v3a93\nStarted\n.\nFinished in 0.000401955 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2487.84 tests/s, 9951.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgaj9hh9l\nStarted\n.\nFinished in 0.000727288 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1374.97 tests/s, 5499.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqswm6o1f\nStarted\n.\nFinished in 0.000415551 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2406.44 tests/s, 9625.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9w2b16p5\nStarted\n.\nFinished in 0.000319481 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3130.08 tests/s, 12520.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzo43zeas\nStarted\n.\nFinished in 0.000318178 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3142.89 tests/s, 12571.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0i9quzza\nStarted\n.\nFinished in 0.000295585 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3383.12 tests/s, 13532.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |str| str.include?(substring) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0fvv_7rc\nStarted\n.\nFinished in 0.000452681 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2209.06 tests/s, 8836.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_3lq31dq\nStarted\n.\nFinished in 0.000310874 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3216.74 tests/s, 12866.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvez078fm\nStarted\n.\nFinished in 0.000354066 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2824.33 tests/s, 11297.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpncr9jkvi\nStarted\n.\nFinished in 0.00034025 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2939.02 tests/s, 11756.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp10kwo74_\nStarted\n.\nFinished in 0.0003621 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2761.67 tests/s, 11046.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph9p94s33\nStarted\n.\nFinished in 0.000364564 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2743.00 tests/s, 10972.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5668yn23\nStarted\n.\nFinished in 0.000367351 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2722.19 tests/s, 10888.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyaa9g9xh\nStarted\n.\nFinished in 0.000396425 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2522.55 tests/s, 10090.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9bkqdmwq\nStarted\n.\nFinished in 0.000320713 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3118.05 tests/s, 12472.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwp95tylb\nStarted\n.\nFinished in 0.000332525 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3007.29 tests/s, 12029.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplb33zpyx\nStarted\n.\nFinished in 0.000397207 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2517.58 tests/s, 10070.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1lin6ij1\nStarted\n.\nFinished in 0.000342945 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2915.92 tests/s, 11663.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu8n4qriw\nStarted\n.\nFinished in 0.001123682 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    889.93 tests/s, 3559.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjooygs7d\nStarted\n.\nFinished in 0.000457681 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2184.93 tests/s, 8739.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp65icm2i3\nStarted\n.\nFinished in 0.000323939 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3087.00 tests/s, 12348.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu1338xrx\nStarted\n.\nFinished in 0.000405 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2469.14 tests/s, 9876.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa9cf8s_n\nStarted\n.\nFinished in 0.000456509 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2190.54 tests/s, 8762.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf67wu3ex\nStarted\n.\nFinished in 0.000348505 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2869.40 tests/s, 11477.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb83k7v0l\nStarted\n.\nFinished in 0.000393689 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2540.08 tests/s, 10160.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxrzu1gzh\nStarted\n.\nFinished in 0.000486254 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2056.54 tests/s, 8226.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiw8fbp08\nStarted\n.\nFinished in 0.000585561 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1707.76 tests/s, 6831.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy445yycx\nStarted\n.\nFinished in 0.000457 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2188.18 tests/s, 8752.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0elu8fzr\nStarted\n.\nFinished in 0.000415471 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2406.91 tests/s, 9627.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp38g6rul0\nStarted\n.\nFinished in 0.000365157 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2738.55 tests/s, 10954.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpso_jduzt\nStarted\n.\nFinished in 0.000416534 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2400.76 tests/s, 9603.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnknffna0\nStarted\n.\nFinished in 0.000383792 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2605.58 tests/s, 10422.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqhlhlspw\nStarted\n.\nFinished in 0.000368222 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2715.75 tests/s, 10863.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptw1sefbg\nStarted\n.\nFinished in 0.000349768 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2859.04 tests/s, 11436.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy9mymev5\nStarted\n.\nFinished in 0.000331382 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3017.67 tests/s, 12070.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplotwy_d4\nStarted\n.\nFinished in 0.000359125 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2784.55 tests/s, 11138.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph18cex5d\nStarted\n.\nFinished in 0.000400362 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2497.74 tests/s, 9990.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi4cjl9dk\nStarted\n.\nFinished in 0.000294363 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3397.17 tests/s, 13588.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa7jlm39q\nStarted\n.\nFinished in 0.000344088 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2906.23 tests/s, 11624.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5gawlqmj\nStarted\n.\nFinished in 0.000343266 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2913.19 tests/s, 11652.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzmmg87d6\nStarted\n.\nFinished in 0.000331974 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3012.28 tests/s, 12049.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm42wj649\nStarted\n.\nFinished in 0.000348005 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2873.52 tests/s, 11494.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7e72s30v\nStarted\n.\nFinished in 0.000425871 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2348.13 tests/s, 9392.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa7dux4tn\nStarted\n.\nFinished in 0.000341833 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2925.41 tests/s, 11701.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph4fzxvbt\nStarted\n.\nFinished in 0.000628162 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1591.95 tests/s, 6367.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_op7fqr5\nStarted\n.\nFinished in 0.000348385 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2870.39 tests/s, 11481.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxvsbidb6\nStarted\n.\nFinished in 0.000422935 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2364.43 tests/s, 9457.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpznmgxi03\nStarted\n.\nFinished in 0.000375146 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2665.63 tests/s, 10662.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpii4471n3\nStarted\n.\nFinished in 0.000341191 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2930.91 tests/s, 11723.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp44geuw_l\nStarted\n.\nFinished in 0.000333007 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3002.94 tests/s, 12011.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp18x7sgk\nStarted\n.\nFinished in 0.00031952 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3129.69 tests/s, 12518.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvs0nk6v8\nStarted\n.\nFinished in 0.00035163 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2843.90 tests/s, 11375.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp92pt6qhj\nStarted\n.\nFinished in 0.000475394 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2103.52 tests/s, 8414.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpopo38jec\nStarted\n.\nFinished in 0.000440268 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2271.34 tests/s, 9085.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0_qbv2er\nStarted\n.\nFinished in 0.000343786 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2908.79 tests/s, 11635.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp8kvahpr\nStarted\n.\nFinished in 0.000357522 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2797.03 tests/s, 11188.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn25ebclm\nStarted\n.\nFinished in 0.000382809 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2612.27 tests/s, 10449.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvwoauysy\nStarted\n.\nFinished in 0.000325522 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3071.99 tests/s, 12287.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq0_plrfh\nStarted\n.\nFinished in 0.000312518 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3199.82 tests/s, 12799.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpswojr8mh\nStarted\n.\nFinished in 0.000357893 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2794.13 tests/s, 11176.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpib57emmz\nStarted\n.\nFinished in 0.000327125 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3056.94 tests/s, 12227.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp58dfxx0n\nStarted\n.\nFinished in 0.000320011 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3124.89 tests/s, 12499.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4yx2i5u9\nStarted\n.\nFinished in 0.000338496 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2954.24 tests/s, 11816.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2org43ac\nStarted\n.\nFinished in 0.000346782 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2883.66 tests/s, 11534.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps676x7w6\nStarted\n.\nFinished in 0.00031906 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3134.21 tests/s, 12536.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptgh39h08\nStarted\n.\nFinished in 0.000368092 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2716.71 tests/s, 10866.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz88x37dw\nStarted\n.\nFinished in 0.000330772 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3023.23 tests/s, 12092.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz83mrcs_\nStarted\n.\nFinished in 0.000420932 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2375.68 tests/s, 9502.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2aogmaqd\nStarted\n.\nFinished in 0.000320653 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3118.64 tests/s, 12474.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgjcqig1k\nStarted\n.\nFinished in 0.000390865 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2558.43 tests/s, 10233.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfei2ma1c\nStarted\n.\nFinished in 0.000514847 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1942.32 tests/s, 7769.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuozheo22\nStarted\n.\nFinished in 0.000376889 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2653.30 tests/s, 10613.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuh_qh4hp\nStarted\n.\nFinished in 0.000331845 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3013.46 tests/s, 12053.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa66pgamh\nStarted\n.\nFinished in 0.000347344 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2878.99 tests/s, 11515.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp319ne8ww\nStarted\n.\nFinished in 0.00035622 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2807.25 tests/s, 11229.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn_bm_qmy\nStarted\n.\nFinished in 0.000329019 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3039.34 tests/s, 12157.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgss0bkti\nStarted\n.\nFinished in 0.00035119 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2847.46 tests/s, 11389.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp29dbrifd\nStarted\n.\nFinished in 0.000327807 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3050.58 tests/s, 12202.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjtelbhos\nStarted\n.\nFinished in 0.000340851 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2933.83 tests/s, 11735.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz2rgriqg\nStarted\n.\nFinished in 0.000465686 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2147.37 tests/s, 8589.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdxsitzhl\nStarted\n.\nFinished in 0.000354758 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2818.82 tests/s, 11275.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzf_tg_kw\nStarted\n.\nFinished in 0.000317847 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3146.17 tests/s, 12584.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu05uz6t1\nStarted\n.\nFinished in 0.000334259 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2991.69 tests/s, 11966.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp72rhdr5b\nStarted\n.\nFinished in 0.000319811 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3126.85 tests/s, 12507.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsff8czn4\nStarted\n.\nFinished in 0.000328088 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3047.96 tests/s, 12191.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuemd2kjy\nStarted\n.\nFinished in 0.000332956 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3003.40 tests/s, 12013.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmzmsn9ya\nStarted\n.\nFinished in 0.000344858 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2899.74 tests/s, 11598.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpczcrt2i3\nStarted\n.\nFinished in 0.000339148 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2948.57 tests/s, 11794.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn0j23itn\nStarted\n.\nFinished in 0.000347163 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2880.49 tests/s, 11521.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj_0rixbz\nStarted\n.\nFinished in 0.000356831 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2802.45 tests/s, 11209.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps7t4tqtr\nStarted\n.\nFinished in 0.00038277 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2612.53 tests/s, 10450.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp05rp3c9x\nStarted\n.\nFinished in 0.000359336 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2782.91 tests/s, 11131.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppc98joz2\nStarted\n.\nFinished in 0.000375887 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2660.37 tests/s, 10641.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjd7z5r2o\nStarted\n.\nFinished in 0.000396145 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2524.33 tests/s, 10097.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpztsqox34\nStarted\n.\nFinished in 0.00032966 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3033.43 tests/s, 12133.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg_nr1ax0\nStarted\n.\nFinished in 0.000432853 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2310.25 tests/s, 9241.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_0zlpshv\nStarted\n.\nFinished in 0.000390704 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2559.48 tests/s, 10237.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqbz8qvlc\nStarted\n.\nFinished in 0.000375266 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2664.78 tests/s, 10659.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplct6c2me\nStarted\n.\nFinished in 0.00038289 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2611.72 tests/s, 10446.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp803yic7r\nStarted\n.\nFinished in 0.000443945 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2252.53 tests/s, 9010.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjkqwmbv6\nStarted\n.\nFinished in 0.000347864 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2874.69 tests/s, 11498.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz2gurp8z\nStarted\n.\nFinished in 0.000368604 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2712.94 tests/s, 10851.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |str| str.include?(substring) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjtmzouxo\nStarted\n.\nFinished in 0.000390725 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2559.34 tests/s, 10237.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcl3bj4ex\nStarted\n.\nFinished in 0.000366479 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2728.67 tests/s, 10914.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpklx6lrp2\nStarted\n.\nFinished in 0.000320241 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3122.65 tests/s, 12490.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3zr9g6bg\nStarted\n.\nFinished in 0.000321234 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3113.00 tests/s, 12451.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwuea_rsy\nStarted\n.\nFinished in 0.000331483 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3016.75 tests/s, 12066.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvwaqnpua\nStarted\n.\nFinished in 0.000334849 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2986.42 tests/s, 11945.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpou2xvlj4\nStarted\n.\nFinished in 0.000390424 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2561.32 tests/s, 10245.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp05g2hsfg\nStarted\n.\nFinished in 0.000336604 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2970.85 tests/s, 11883.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd7twxoqb\nStarted\n.\nFinished in 0.000349858 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2858.30 tests/s, 11433.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzmva0hdx\nStarted\n.\nFinished in 0.000297028 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3366.69 tests/s, 13466.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgfynyz9y\nStarted\n.\nFinished in 0.000347764 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2875.51 tests/s, 11502.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvxt7zkgn\nStarted\n.\nFinished in 0.000363353 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2752.14 tests/s, 11008.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqt1m6vb3\nStarted\n.\nFinished in 0.000570833 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1751.83 tests/s, 7007.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |str| str.include?(substring) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxpi_qs2n\nStarted\n.\nFinished in 0.000406404 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2460.61 tests/s, 9842.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu7uzmknj\nStarted\n.\nFinished in 0.000356821 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2802.53 tests/s, 11210.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpextmvqim\nStarted\n.\nFinished in 0.000331573 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3015.93 tests/s, 12063.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppjjb92zv\nStarted\n.\nFinished in 0.000349557 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2860.76 tests/s, 11443.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfv0l_qt3\nStarted\n.\nFinished in 0.000390865 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2558.43 tests/s, 10233.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpprjd1dgo\nStarted\n.\nFinished in 0.000387278 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2582.12 tests/s, 10328.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk4ftdl0o\nStarted\n.\nFinished in 0.000424328 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2356.67 tests/s, 9426.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1fxpa4oo\nStarted\n.\nFinished in 0.000383271 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2609.12 tests/s, 10436.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc1b7zdxj\nStarted\n.\nFinished in 0.000643229 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1554.66 tests/s, 6218.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpltixnbfl\nStarted\n.\nFinished in 0.000449284 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2225.76 tests/s, 8903.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1_zsvaj0\nStarted\n.\nFinished in 0.000738759 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1353.62 tests/s, 5414.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkf4j8qm4\nStarted\n.\nFinished in 0.000375637 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2662.14 tests/s, 10648.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyqpuozi4\nStarted\n.\nFinished in 0.000299613 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3337.64 tests/s, 13350.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpecuu_tbm\nStarted\n.\nFinished in 0.000322556 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3100.24 tests/s, 12400.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwizz3u4k\nStarted\n.\nFinished in 0.000344418 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2903.45 tests/s, 11613.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_657c9fy\nStarted\n.\nFinished in 0.000395825 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2526.37 tests/s, 10105.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk0ne_93x\nStarted\n.\nFinished in 0.000338005 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2958.54 tests/s, 11834.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1_jrr36u\nStarted\n.\nFinished in 0.000353065 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2832.34 tests/s, 11329.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1v04v1jh\nStarted\n.\nFinished in 0.000399391 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2503.81 tests/s, 10015.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwf5oq2eq\nStarted\n.\nFinished in 0.000352994 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2832.91 tests/s, 11331.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzi0iifre\nStarted\n.\nFinished in 0.000355449 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2813.34 tests/s, 11253.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmg905xw1\nStarted\n.\nFinished in 0.000346642 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2884.82 tests/s, 11539.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2th8ym45\nStarted\n.\nFinished in 0.000351821 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2842.35 tests/s, 11369.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |str| str.include?(substring) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe1df3eck\nStarted\n.\nFinished in 0.000386636 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2586.41 tests/s, 10345.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl4w8d17z\nStarted\n.\nFinished in 0.000354617 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2819.94 tests/s, 11279.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8t5nfsmd\nStarted\n.\nFinished in 0.000334039 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2993.66 tests/s, 11974.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphfxvjy6r\nStarted\n.\nFinished in 0.000381546 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2620.92 tests/s, 10483.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsmb9qrzx\nStarted\n.\nFinished in 0.000341021 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2932.37 tests/s, 11729.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqgoojg60\nStarted\n.\nFinished in 0.000354717 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2819.15 tests/s, 11276.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp98tlsobz\nStarted\n.\nFinished in 0.00031895 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3135.29 tests/s, 12541.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1g4n7i5p\nStarted\n.\nFinished in 0.000363113 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2753.96 tests/s, 11015.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzj02xey7\nStarted\n.\nFinished in 0.000418177 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2391.33 tests/s, 9565.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj_xdc_c4\nStarted\n.\nFinished in 0.000365807 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2733.68 tests/s, 10934.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphm6s8uee\nStarted\n.\nFinished in 0.000409029 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2444.81 tests/s, 9779.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptfwd15jn\nStarted\n.\nFinished in 0.000370657 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2697.91 tests/s, 10791.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq1_col_u\nStarted\n.\nFinished in 0.000289254 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3457.17 tests/s, 13828.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr0y8yd6f\nStarted\n.\nFinished in 0.000284085 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3520.07 tests/s, 14080.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n \
    \   candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfr9ce35l\nStarted\n.\nFinished in 0.000347013 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2881.74 tests/s, 11526.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwl2dax92\nStarted\n.\nFinished in 0.000363534 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2750.77 tests/s, 11003.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkjixszpc\nStarted\n.\nFinished in 0.000308771 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3238.65 tests/s, 12954.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that contain given substring\n\
    # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
    \ substring)\n  strings.select { |string| string.include?(substring) }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
    \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\"\
    , \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqxkc8z_4\nStarted\n.\nFinished in 0.000305295 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3275.52 tests/s, 13102.08 assertions/s\n"
  exit_code: 0
  status: OK
