name: HumanEval_98_count_upper
language: ruby
results:
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu966h6tb\nStarted\n.\nFinished in 0.000351411 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2845.67 tests/s, 19919.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe8yp4b6h\nStarted\n.\nFinished in 0.000594208 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1682.91 tests/s, 11780.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbkqcitqo\nStarted\n.\nFinished in 0.000356681 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2803.63 tests/s, 19625.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplqwq01dr\nStarted\n.\nFinished in 0.000357542 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2796.87 tests/s, 19578.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, idx|\n    count += 1 if char =~ /[AEIOU]/ && idx.even?\n  end\n  count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9kr7zv6q\nStarted\n.\nFinished in 0.000345641 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2893.18 tests/s, 20252.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |letter, index|\n    if index.even? && letter =~ /[AEIOU]/\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1chzjcqa\nStarted\n.\nFinished in 0.000352744 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2834.92 tests/s, 19844.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char.match(/[AEIOU]/)\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqqux_zr9\nStarted\n.\nFinished in 0.000347534 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2877.42 tests/s, 20141.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpekwxwd6b\nStarted\n.\nFinished in 0.000359065 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2785.01 tests/s, 19495.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3as8sfzx\nStarted\n.\nFinished in 0.000587024 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1703.51 tests/s, 11924.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxlf3u4u6\nStarted\n.\nFinished in 0.000343787 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2908.78 tests/s, 20361.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnvh85mr_\nStarted\n.\nFinished in 0.000353905 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2825.62 tests/s, 19779.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa8cs3gzd\nStarted\n.\nFinished in 0.000424508 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2355.67 tests/s, 16489.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5gdge225\nStarted\n.\nFinished in 0.000406565 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2459.63 tests/s, 17217.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu6wswcl3\nStarted\n.\nFinished in 0.000422404 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2367.40 tests/s, 16571.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |letter, index|\n    if index.even? && letter =~ /[AEIOU]/\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphqf41iwc\nStarted\n.\nFinished in 0.000335832 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2977.68 tests/s, 20843.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.map\
    \ { |char, i| char if char =~ /[AEIOU]/ && i.even? }.compact.length\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptoaxzk27\nStarted\n.\nFinished in 0.000343084 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2914.74 tests/s, 20403.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpla85zk8c\nStarted\n.\nFinished in 0.000358124 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2792.33 tests/s, 19546.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv9sbrkpj\nStarted\n.\nFinished in 0.000383942 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2604.56 tests/s, 18231.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptqvyduxj\nStarted\n.\nFinished in 0.000347883 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2874.53 tests/s, 20121.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    if i.even? && c =~ /[AEIOU]/\n      count += 1\n    end\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj597i_9u\nStarted\n.\nFinished in 0.000360839 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2771.32 tests/s, 19399.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2kcvyxtk\nStarted\n.\nFinished in 0.000384543 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2600.49 tests/s, 18203.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuadla2q9\nStarted\n.\nFinished in 0.000370928 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2695.94 tests/s, 18871.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0_cfg_6w\nStarted\n.\nFinished in 0.000556036 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1798.44 tests/s, 12589.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj7jdzcn_\nStarted\n.\nFinished in 0.000356701 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2803.47 tests/s, 19624.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3mkm8g3w\nStarted\n.\nFinished in 0.000354227 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2823.05 tests/s, 19761.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1nh4s7ws\nStarted\n.\nFinished in 0.000364205 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2745.71 tests/s, 19219.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsd5nfsiw\nStarted\n.\nFinished in 0.00034548 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2894.52 tests/s, 20261.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char.match(/[AEIOU]/)\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwj6ree7d\nStarted\n.\nFinished in 0.000406845 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2457.94 tests/s, 17205.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt997no61\nStarted\n.\nFinished in 0.000374895 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2667.41 tests/s, 18671.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcy0txuoy\nStarted\n.\nFinished in 0.000369895 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2703.47 tests/s, 18924.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |letter, index|\n    if index.even? && letter =~ /[AEIOU]/\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf3eu3y9d\nStarted\n.\nFinished in 0.000337054 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2966.88 tests/s, 20768.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp731see4q\nStarted\n.\nFinished in 0.000355197 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2815.34 tests/s, 19707.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk3ehc9ak\nStarted\n.\nFinished in 0.000388631 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2573.13 tests/s, 18011.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdaf0x8iy\nStarted\n.\nFinished in 0.000388651 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2573.00 tests/s, 18011.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if index.even? && char =~ /[AEIOU]/\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqc4m8sso\nStarted\n.\nFinished in 0.000354155 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2823.62 tests/s, 19765.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqcybf782\nStarted\nF\n===============================================================================\n\
    Failure: test_count_upper(TestHumanEval)\n/tmp/tmpqcybf782.rb:13:in `test_count_upper'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_count_upper\n\
    \     12:     candidate = method(:count_upper)\n  => 13:     assert_equal(1, candidate.call(\"\
    aBCdEf\"))\n     14:     assert_equal(0, candidate.call(\"abcdefg\"))\n     15:\
    \     assert_equal(0, candidate.call(\"dBBE\"))\n     16:     assert_equal(0,\
    \ candidate.call(\"B\"))\n<1> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004464855 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.97 tests/s, 223.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.scan(/[AEIOU]/).count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8hb8kj4n\nStarted\nF\n===============================================================================\n\
    Failure: test_count_upper(TestHumanEval)\n/tmp/tmp8hb8kj4n.rb:15:in `test_count_upper'\n\
    \     12:     candidate = method(:count_upper)\n     13:     assert_equal(1, candidate.call(\"\
    aBCdEf\"))\n     14:     assert_equal(0, candidate.call(\"abcdefg\"))\n  => 15:\
    \     assert_equal(0, candidate.call(\"dBBE\"))\n     16:     assert_equal(0,\
    \ candidate.call(\"B\"))\n     17:     assert_equal(1, candidate.call(\"U\"))\n\
    \     18:     assert_equal(0, candidate.call(\"\"))\n<0> expected but was\n<1>\n\
    ===============================================================================\n\
    \nFinished in 0.005519388 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.18 tests/s, 543.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphip37h7w\nStarted\n.\nFinished in 0.00046227 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2163.24 tests/s, 15142.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxgpqzsyy\nStarted\n.\nFinished in 0.000358284 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2791.08 tests/s, 19537.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7crx596k\nStarted\n.\nFinished in 0.000629163 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1589.41 tests/s, 11125.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi8pitffc\nStarted\n.\nFinished in 0.000410402 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2436.64 tests/s, 17056.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  # Your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_wfzim91\nStarted\nF\n===============================================================================\n\
    Failure: test_count_upper(TestHumanEval)\n/tmp/tmp_wfzim91.rb:13:in `test_count_upper'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_count_upper\n\
    \     12:     candidate = method(:count_upper)\n  => 13:     assert_equal(1, candidate.call(\"\
    aBCdEf\"))\n     14:     assert_equal(0, candidate.call(\"abcdefg\"))\n     15:\
    \     assert_equal(0, candidate.call(\"dBBE\"))\n     16:     assert_equal(0,\
    \ candidate.call(\"B\"))\n<1> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004985283 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.59 tests/s, 200.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char.match(/[AEIOU]/)\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7fa_txkv\nStarted\n.\nFinished in 0.000430991 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2320.23 tests/s, 16241.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3xtbrxrf\nStarted\n.\nFinished in 0.00037262 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2683.70 tests/s, 18785.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy9igbubp\nStarted\n.\nFinished in 0.000392127 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2550.19 tests/s, 17851.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.count\
    \ { |char, index| char =~ /[AEIOU]/ && index.even? }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpagvz7fto\nStarted\n.\nFinished in 0.000433044 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2309.23 tests/s, 16164.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3nuh1__5\nStarted\n.\nFinished in 0.0003777 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2647.60 tests/s, 18533.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_o5lbodd\nStarted\n.\nFinished in 0.000385294 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2595.42 tests/s, 18167.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9lrbor5l\nStarted\n.\nFinished in 0.000344568 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2902.18 tests/s, 20315.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.count\
    \ { |char, i| char == char.upcase && i.even? }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7ztbhxrc\nStarted\nF\n===============================================================================\n\
    Failure: test_count_upper(TestHumanEval)\n/tmp/tmp7ztbhxrc.rb:13:in `test_count_upper'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_count_upper\n\
    \     12:     candidate = method(:count_upper)\n  => 13:     assert_equal(1, candidate.call(\"\
    aBCdEf\"))\n     14:     assert_equal(0, candidate.call(\"abcdefg\"))\n     15:\
    \     assert_equal(0, candidate.call(\"dBBE\"))\n     16:     assert_equal(0,\
    \ candidate.call(\"B\"))\n<1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004733722 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.25 tests/s, 211.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.count\
    \ { |char, index| char.match(/[AEIOU]/) && index.even? }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpisedb_av\nStarted\n.\nFinished in 0.000373381 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2678.23 tests/s, 18747.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.chars.each_with_index.count\
    \ { |char, index| char =~ /[AEIOU]/ && index.even? }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpafjrw8tl\nStarted\n.\nFinished in 0.000416453 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2401.23 tests/s, 16808.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    if i.even? && c =~ /[AEIOU]/\n      count += 1\n    end\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzcmvucyw\nStarted\n.\nFinished in 0.000354005 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2824.82 tests/s, 19773.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  # Your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpygbto4ot\nStarted\nF\n===============================================================================\n\
    Failure: test_count_upper(TestHumanEval)\n/tmp/tmpygbto4ot.rb:13:in `test_count_upper'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_count_upper\n\
    \     12:     candidate = method(:count_upper)\n  => 13:     assert_equal(1, candidate.call(\"\
    aBCdEf\"))\n     14:     assert_equal(0, candidate.call(\"abcdefg\"))\n     15:\
    \     assert_equal(0, candidate.call(\"dBBE\"))\n     16:     assert_equal(0,\
    \ candidate.call(\"B\"))\n<1> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004575172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.57 tests/s, 218.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptjz7oyz6\nStarted\n.\nFinished in 0.000415751 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2405.29 tests/s, 16837.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp259awqzu\nStarted\n.\nFinished in 0.000342193 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2922.33 tests/s, 20456.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwygi7qw1\nStarted\n.\nFinished in 0.000353825 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2826.26 tests/s, 19783.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwktkq6b3\nStarted\n.\nFinished in 0.000336563 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2971.21 tests/s, 20798.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps93d7425\nStarted\n.\nFinished in 0.000354597 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2820.10 tests/s, 19740.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp63ubwr3x\nStarted\n.\nFinished in 0.000432213 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2313.67 tests/s, 16195.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpme1nx279\nStarted\n.\nFinished in 0.00035644 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2805.52 tests/s, 19638.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.chars.each_with_index.count\
    \ { |char, index| char =~ /[AEIOU]/ && index.even? }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuc6n4ga3\nStarted\n.\nFinished in 0.000368743 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2711.92 tests/s, 18983.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl8tdkzks\nStarted\n.\nFinished in 0.000342624 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2918.65 tests/s, 20430.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5siyv7q1\nStarted\n.\nFinished in 0.000368794 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2711.54 tests/s, 18980.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmx06nouu\nStarted\n.\nFinished in 0.000380105 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2630.85 tests/s, 18415.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, i|\n    if i.even? && char.upcase == char && char =~ /[AEIOU]/\n \
    \     count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgs_0eifq\nStarted\n.\nFinished in 0.000348947 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2865.76 tests/s, 20060.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i % 2 == 0 && char =~ /[AEIOU]/\n      count += 1\n   \
    \ end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp18mcby5d\nStarted\n.\nFinished in 0.000377069 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2652.03 tests/s, 18564.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl8gp7h8n\nStarted\n.\nFinished in 0.000355919 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2809.63 tests/s, 19667.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe0ccs2kw\nStarted\n.\nFinished in 0.000418757 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2388.02 tests/s, 16716.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even?\n      if char == 'A' || char == 'E' ||\
    \ char == 'I' || char == 'O' || char == 'U'\n        count += 1\n      end\n \
    \   end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp65l0e25l\nStarted\n.\nFinished in 0.000372691 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2683.19 tests/s, 18782.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp51ogrrd0\nStarted\n.\nFinished in 0.000338356 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2955.47 tests/s, 20688.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx4umotc5\nStarted\n.\nFinished in 0.000353475 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2829.05 tests/s, 19803.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyj6hglkt\nStarted\n.\nFinished in 0.000367451 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2721.45 tests/s, 19050.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptcrqiddx\nStarted\n.\nFinished in 0.000434188 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2303.15 tests/s, 16122.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu0hp6eub\nStarted\n.\nFinished in 0.000345089 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2897.80 tests/s, 20284.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |x, i|\n    if i.even? && x =~ /[AEIOU]/\n      count += 1\n    end\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp2jupqny\nStarted\n.\nFinished in 0.000375998 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2659.59 tests/s, 18617.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplh8xydnt\nStarted\n.\nFinished in 0.000390885 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2558.30 tests/s, 17908.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8x6us7bh\nStarted\n.\nFinished in 0.000378632 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2641.09 tests/s, 18487.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxgxt2p4u\nStarted\n.\nFinished in 0.000455628 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2194.77 tests/s, 15363.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc61a3ex8\nStarted\n.\nFinished in 0.000327857 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3050.11 tests/s, 21350.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp97alb47y\nStarted\n.\nFinished in 0.000336082 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2975.46 tests/s, 20828.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpffd4bgs1\nStarted\n.\nFinished in 0.000347234 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2879.90 tests/s, 20159.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzqq0n86f\nStarted\n.\nFinished in 0.00034607 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2889.59 tests/s, 20227.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |letter, index|\n    if index.even? && letter =~ /[AEIOU]/\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvz39fsa0\nStarted\n.\nFinished in 0.000405793 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2464.31 tests/s, 17250.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    count += 1 if c =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5yiawryi\nStarted\n.\nFinished in 0.000347884 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2874.52 tests/s, 20121.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz0bph9c7\nStarted\n.\nFinished in 0.000361219 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2768.40 tests/s, 19378.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').map.with_index\
    \ { |char, i| char if i.even? && char =~ /[AEIOU]/ }.compact.count\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2uaegczn\nStarted\n.\nFinished in 0.000388971 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2570.89 tests/s, 17996.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyiqgcqvi\nStarted\n.\nFinished in 0.000354317 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2822.33 tests/s, 19756.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl01sstvw\nStarted\n.\nFinished in 0.000364435 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2743.97 tests/s, 19207.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    count += 1 if c =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1kso_phl\nStarted\n.\nFinished in 0.000372611 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2683.76 tests/s, 18786.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpldy58r8r\nStarted\n.\nFinished in 0.000348586 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2868.73 tests/s, 20081.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqhvpmf0i\nStarted\n.\nFinished in 0.000477218 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2095.48 tests/s, 14668.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf6amp0tp\nStarted\n.\nFinished in 0.000360989 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2770.17 tests/s, 19391.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsvxpnjkd\nStarted\n.\nFinished in 0.000376658 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2654.93 tests/s, 18584.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4z94ci30\nStarted\n.\nFinished in 0.000359005 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2785.48 tests/s, 19498.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  # Your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyyyff2dj\nStarted\nF\n===============================================================================\n\
    Failure: test_count_upper(TestHumanEval)\n/tmp/tmpyyyff2dj.rb:13:in `test_count_upper'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_count_upper\n\
    \     12:     candidate = method(:count_upper)\n  => 13:     assert_equal(1, candidate.call(\"\
    aBCdEf\"))\n     14:     assert_equal(0, candidate.call(\"abcdefg\"))\n     15:\
    \     assert_equal(0, candidate.call(\"dBBE\"))\n     16:     assert_equal(0,\
    \ candidate.call(\"B\"))\n<1> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004818499 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.53 tests/s, 207.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdhy1ymvm\nStarted\n.\nFinished in 0.000353435 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2829.37 tests/s, 19805.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.count\
    \ { |char, index| char =~ /[AEIOU]/ && index.even? }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk1zq57z7\nStarted\n.\nFinished in 0.000393319 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2542.47 tests/s, 17797.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.count\
    \ { |c, i| c =~ /[AEIOU]/ && i.even? }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp82tpx4gp\nStarted\n.\nFinished in 0.000412756 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2422.74 tests/s, 16959.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkrbwz6w0\nStarted\n.\nFinished in 0.00035593 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2809.54 tests/s, 19666.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyg0yfx_p\nStarted\n.\nFinished in 0.000360017 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2777.65 tests/s, 19443.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpssb576_z\nStarted\n.\nFinished in 0.000429687 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2327.28 tests/s, 16290.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |letter, index|\n    if index.even? && letter =~ /[AEIOU]/\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo7v7tmtx\nStarted\n.\nFinished in 0.000357292 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2798.83 tests/s, 19591.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1oh_o00p\nStarted\n.\nFinished in 0.000357823 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2794.68 tests/s, 19562.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8qzxkn6j\nStarted\n.\nFinished in 0.000381878 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2618.64 tests/s, 18330.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9ifttdm6\nStarted\n.\nFinished in 0.000364887 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2740.57 tests/s, 19184.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  vowels = \"AEIOU\"\
    \n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? &&\
    \ vowels.include?(char)\n      count += 1\n    end\n  end\n  count\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwryob226\nStarted\n.\nFinished in 0.000359685 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2780.21 tests/s, 19461.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwov_yjvz\nStarted\n.\nFinished in 0.00035086 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2850.14 tests/s, 19950.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.count\
    \ { |c, i| c =~ /[AEIOU]/ && i.even? }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8etkxp32\nStarted\n.\nFinished in 0.000380094 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2630.93 tests/s, 18416.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqf3gxujg\nStarted\n.\nFinished in 0.000371518 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2691.66 tests/s, 18841.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvvcdoudi\nStarted\n.\nFinished in 0.000385475 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2594.20 tests/s, 18159.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvxyel3w4\nStarted\n.\nFinished in 0.000418798 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2387.79 tests/s, 16714.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkkhoqjz3\nStarted\n.\nFinished in 0.000361289 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2767.87 tests/s, 19375.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp45tp2jag\nStarted\n.\nFinished in 0.000411394 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2430.76 tests/s, 17015.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvcvb0z_9\nStarted\n.\nFinished in 0.000400793 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2495.05 tests/s, 17465.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphakrnhmq\nStarted\n.\nFinished in 0.000365427 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2736.52 tests/s, 19155.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').select.with_index\
    \ { |x, i| x =~ /[AEIOU]/ && i.even? }.count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkp3mlls8\nStarted\n.\nFinished in 0.000343145 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2914.22 tests/s, 20399.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2o7y_fdk\nStarted\n.\nFinished in 0.000485262 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2060.74 tests/s, 14425.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptjti0471\nStarted\n.\nFinished in 0.000406233 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2461.64 tests/s, 17231.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    if i % 2 == 0 && c =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbtk23kq7\nStarted\n.\nFinished in 0.000369955 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2703.03 tests/s, 18921.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    if i.even? && c =~ /[AEIOU]/\n      count += 1\n    end\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw418wtxn\nStarted\n.\nFinished in 0.00039345 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2541.62 tests/s, 17791.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv3ujxq4w\nStarted\n.\nFinished in 0.000364726 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2741.78 tests/s, 19192.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.chars.each_with_index.count\
    \ { |char, index| char =~ /[AEIOU]/ && index.even? }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm9gxshzd\nStarted\n.\nFinished in 0.000420001 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2380.95 tests/s, 16666.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    if i.even? && c =~ /[AEIOU]/\n      count += 1\n    end\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6wx52n9p\nStarted\n.\nFinished in 0.000389322 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2568.57 tests/s, 17979.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpugly7w74\nStarted\n.\nFinished in 0.000422794 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2365.22 tests/s, 16556.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc9ldn8re\nStarted\n.\nFinished in 0.000432924 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2309.87 tests/s, 16169.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  vowels = \"AEIOU\"\
    \n  count = 0\n  s.each_char.with_index do |char, index|\n    if vowels.include?(char)\
    \ && index.even?\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpolc90jei\nStarted\n.\nFinished in 0.000344708 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2901.01 tests/s, 20307.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.count\
    \ { |char, index| char =~ /[AEIOU]/ && index.even? }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq0v_akqr\nStarted\n.\nFinished in 0.000357122 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2800.16 tests/s, 19601.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa8m7_zq9\nStarted\n.\nFinished in 0.000370907 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2696.09 tests/s, 18872.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1rb3zl6k\nStarted\n.\nFinished in 0.000365026 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2739.53 tests/s, 19176.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp31c392mv\nStarted\n.\nFinished in 0.000340651 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2935.56 tests/s, 20548.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoxqmgx57\nStarted\n.\nFinished in 0.000357913 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2793.98 tests/s, 19557.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_6czpg_i\nStarted\n.\nFinished in 0.000368663 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2712.50 tests/s, 18987.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    if i.even? && c =~ /[AEIOU]/\n      count += 1\n    end\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnnvghuar\nStarted\n.\nFinished in 0.000379704 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2633.63 tests/s, 18435.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt4gwm1o_\nStarted\n.\nFinished in 0.000379232 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2636.91 tests/s, 18458.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxqfbfaem\nStarted\n.\nFinished in 0.000606229 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1649.54 tests/s, 11546.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmalx7osk\nStarted\n.\nFinished in 0.000340239 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2939.11 tests/s, 20573.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |letter, index|\n    if index.even? && letter =~ /[AEIOU]/\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqxn_n7lo\nStarted\n.\nFinished in 0.000416574 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2400.53 tests/s, 16803.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc8rrb9d4\nStarted\n.\nFinished in 0.000391847 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2552.02 tests/s, 17864.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  vowels = ['A', 'E',\
    \ 'I', 'O', 'U']\n  count = 0\n  s.each_char.with_index do |char, index|\n   \
    \ if index.even? && vowels.include?(char)\n      count += 1\n    end\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0tcces3x\nStarted\n.\nFinished in 0.000358574 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2788.82 tests/s, 19521.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsi3rs1if\nStarted\n.\nFinished in 0.000388239 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2575.73 tests/s, 18030.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6_lu1fgs\nStarted\n.\nFinished in 0.000340861 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2933.75 tests/s, 20536.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6ym51dh4\nStarted\n.\nFinished in 0.000407797 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2452.20 tests/s, 17165.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkny7vdhs\nStarted\n.\nFinished in 0.000370096 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2702.00 tests/s, 18914.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgjcb0pgs\nStarted\n.\nFinished in 0.000379132 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2637.60 tests/s, 18463.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    count += 1 if c =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8fenmx3h\nStarted\n.\nFinished in 0.000679056 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1472.63 tests/s, 10308.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |letter, index|\n    if index.even? && letter =~ /[AEIOU]/\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpee9l3gdl\nStarted\n.\nFinished in 0.000347594 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2876.92 tests/s, 20138.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    if i.even? && c =~ /[AEIOU]/\n      count += 1\n    end\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdmbbd87x\nStarted\n.\nFinished in 0.000356901 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2801.90 tests/s, 19613.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn7dy67ht\nStarted\n.\nFinished in 0.000509138 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1964.10 tests/s, 13748.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3tq5ng29\nStarted\n.\nFinished in 0.000386156 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2589.63 tests/s, 18127.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8d4gl1kt\nStarted\n.\nFinished in 0.000466959 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2141.52 tests/s, 14990.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if char.match(/[AEIOU]/) && index.even?\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpholcqp_v\nStarted\n.\nFinished in 0.000361109 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2769.25 tests/s, 19384.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdngp43ya\nStarted\n.\nFinished in 0.000351781 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2842.68 tests/s, 19898.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuscdf1k5\nStarted\n.\nFinished in 0.000366628 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2727.56 tests/s, 19092.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy7xzdruk\nStarted\n.\nFinished in 0.000360919 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2770.70 tests/s, 19394.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp334ih6_n\nStarted\nF\n===============================================================================\n\
    Failure: test_count_upper(TestHumanEval)\n/tmp/tmp334ih6_n.rb:13:in `test_count_upper'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_count_upper\n\
    \     12:     candidate = method(:count_upper)\n  => 13:     assert_equal(1, candidate.call(\"\
    aBCdEf\"))\n     14:     assert_equal(0, candidate.call(\"abcdefg\"))\n     15:\
    \     assert_equal(0, candidate.call(\"dBBE\"))\n     16:     assert_equal(0,\
    \ candidate.call(\"B\"))\n<1> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005126359 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.07 tests/s, 195.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu6ifi7wv\nStarted\n.\nFinished in 0.000346452 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2886.40 tests/s, 20204.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.inject(0)\
    \ do |sum, (char, index)|\n    sum += 1 if char.match(/[AEIOU]/) && index.even?\n\
    \    sum\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsv78l7xn\nStarted\n.\nFinished in 0.000381107 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2623.94 tests/s, 18367.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.count\
    \ { |char, i| char =~ /[AEIOU]/ && i.even? }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6y_4kpzo\nStarted\n.\nFinished in 0.000386998 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2583.99 tests/s, 18087.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkaaw3ap4\nStarted\n.\nFinished in 0.000371469 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2692.01 tests/s, 18844.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpir7nni6o\nStarted\n.\nFinished in 0.00037266 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2683.41 tests/s, 18783.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_j26sbxp\nStarted\n.\nFinished in 0.000380364 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2629.06 tests/s, 18403.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv7qbgrzo\nStarted\n.\nFinished in 0.000367541 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2720.78 tests/s, 19045.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9h8bmupw\nStarted\n.\nFinished in 0.000365577 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2735.40 tests/s, 19147.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_rie8p7s\nStarted\n.\nFinished in 0.000344848 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2899.83 tests/s, 20298.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfhsgp425\nStarted\n.\nFinished in 0.000347724 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2875.84 tests/s, 20130.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3cnxapxk\nStarted\n.\nFinished in 0.00040403 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2475.06 tests/s, 17325.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsv7bb6he\nStarted\n.\nFinished in 0.000386818 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2585.20 tests/s, 18096.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc7g1l25o\nStarted\n.\nFinished in 0.000385626 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2593.19 tests/s, 18152.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi2rk1lwv\nStarted\n.\nFinished in 0.000396054 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2524.91 tests/s, 17674.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzj8bzszf\nStarted\n.\nFinished in 0.000399401 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2503.75 tests/s, 17526.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.each_char.with_index.count\
    \ { |char, index| char =~ /[AEIOU]/ && index.even? }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpor8xfjwv\nStarted\n.\nFinished in 0.000366529 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2728.30 tests/s, 19098.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').select.with_index\
    \ { |char, i| char =~ /[AEIOU]/ && i.even? }.count\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbeqlnaut\nStarted\n.\nFinished in 0.000700256 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1428.05 tests/s, 9996.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_a5y7o4_\nStarted\n.\nFinished in 0.000572225 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1747.56 tests/s, 12232.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdk51jl49\nStarted\n.\nFinished in 0.00039356 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2540.91 tests/s, 17786.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn4cc6sg8\nStarted\n.\nFinished in 0.000466577 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2143.27 tests/s, 15002.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp91ew8dj7\nStarted\n.\nFinished in 0.00037224 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2686.44 tests/s, 18805.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkksf_ms5\nStarted\n.\nFinished in 0.000449364 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2225.37 tests/s, 15577.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg2kk52mr\nStarted\n.\nFinished in 0.000393269 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2542.79 tests/s, 17799.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  # Your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdv0e7guy\nStarted\nF\n===============================================================================\n\
    Failure: test_count_upper(TestHumanEval)\n/tmp/tmpdv0e7guy.rb:13:in `test_count_upper'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_count_upper\n\
    \     12:     candidate = method(:count_upper)\n  => 13:     assert_equal(1, candidate.call(\"\
    aBCdEf\"))\n     14:     assert_equal(0, candidate.call(\"abcdefg\"))\n     15:\
    \     assert_equal(0, candidate.call(\"dBBE\"))\n     16:     assert_equal(0,\
    \ candidate.call(\"B\"))\n<1> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004568219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.90 tests/s, 218.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphi5x5x44\nStarted\n.\nFinished in 0.000359766 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2779.58 tests/s, 19457.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_83mh2yx\nStarted\n.\nFinished in 0.000381007 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2624.62 tests/s, 18372.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_cpxnv8e\nStarted\n.\nFinished in 0.000347564 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2877.17 tests/s, 20140.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.count\
    \ { |char, index| char.upcase == char && index.even? }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp50wwe4yb\nStarted\nF\n===============================================================================\n\
    Failure: test_count_upper(TestHumanEval)\n/tmp/tmp50wwe4yb.rb:13:in `test_count_upper'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_count_upper\n\
    \     12:     candidate = method(:count_upper)\n  => 13:     assert_equal(1, candidate.call(\"\
    aBCdEf\"))\n     14:     assert_equal(0, candidate.call(\"abcdefg\"))\n     15:\
    \     assert_equal(0, candidate.call(\"dBBE\"))\n     16:     assert_equal(0,\
    \ candidate.call(\"B\"))\n<1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004683596 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.51 tests/s, 213.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpplw22lgf\nStarted\n.\nFinished in 0.000391025 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2557.38 tests/s, 17901.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw0sd11rc\nStarted\n.\nFinished in 0.000365878 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2733.15 tests/s, 19132.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |letter, index|\n    if index.even? && letter =~ /[AEIOU]/\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6b7tl_ud\nStarted\n.\nFinished in 0.000373933 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2674.28 tests/s, 18719.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    if i.even? && c =~ /[AEIOU]/\n      count += 1\n    end\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc_v02amw\nStarted\n.\nFinished in 0.000327596 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3052.54 tests/s, 21367.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  vowels = \"AEIOU\"\
    \n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? &&\
    \ vowels.include?(char)\n      count += 1\n    end\n  end\n  count\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0b0c7e5f\nStarted\n.\nFinished in 0.000392178 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2549.86 tests/s, 17849.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  vowels = \"AEIOU\"\
    \n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? &&\
    \ vowels.include?(char)\n      count += 1\n    end\n  end\n  count\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq9lhv4ft\nStarted\n.\nFinished in 0.000363434 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2751.53 tests/s, 19260.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8416f2yh\nStarted\n.\nFinished in 0.000346341 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2887.33 tests/s, 20211.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3j3nqsar\nStarted\n.\nFinished in 0.00038781 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2578.58 tests/s, 18050.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.chars.each_with_index.count\
    \ { |char, i| char =~ /[AEIOU]/ && i.even? }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgh40m3jd\nStarted\n.\nFinished in 0.000432523 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2312.02 tests/s, 16184.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp06y2b61y\nStarted\n.\nFinished in 0.000301537 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3316.34 tests/s, 23214.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8tckdacf\nStarted\n.\nFinished in 0.000383211 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2609.53 tests/s, 18266.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptafrhctn\nStarted\n.\nFinished in 0.000545657 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1832.65 tests/s, 12828.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char.match(/[AEIOU]/)\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgsdebj4z\nStarted\n.\nFinished in 0.000418758 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2388.01 tests/s, 16716.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplqn97zzo\nStarted\n.\nFinished in 0.00030798 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3246.96 tests/s, 22728.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplihjt88n\nStarted\n.\nFinished in 0.000342875 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2916.51 tests/s, 20415.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char.match(/[AEIOU]/)\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmfioofa9\nStarted\n.\nFinished in 0.000378752 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2640.25 tests/s, 18481.75 assertions/s\n"
  exit_code: 0
  status: OK
