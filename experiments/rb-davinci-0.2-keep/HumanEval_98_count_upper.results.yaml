name: HumanEval_98_count_upper
language: ruby
results:
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_gxjvy7r\nStarted\n.\nFinished in 0.000571131 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1750.91 tests/s, 12256.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9ahd4546\nStarted\n.\nFinished in 0.00057532 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1738.16 tests/s, 12167.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpix603kgl\nStarted\n.\nFinished in 0.000532586 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1877.63 tests/s, 13143.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1vdxf9ag\nStarted\n.\nFinished in 0.000712835 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1402.85 tests/s, 9819.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, idx|\n    count += 1 if char =~ /[AEIOU]/ && idx.even?\n  end\n  count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb2grgxc4\nStarted\n.\nFinished in 0.000592512 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1687.73 tests/s, 11814.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |letter, index|\n    if index.even? && letter =~ /[AEIOU]/\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwnsb3x2t\nStarted\n.\nFinished in 0.000586896 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1703.88 tests/s, 11927.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char.match(/[AEIOU]/)\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6vft4yb1\nStarted\n.\nFinished in 0.000575843 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1736.58 tests/s, 12156.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz041yrfm\nStarted\n.\nFinished in 0.00092083 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1085.98 tests/s, 7601.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppxh9e1l0\nStarted\n.\nFinished in 0.00059743 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1673.84 tests/s, 11716.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwvlwsw8w\nStarted\n.\nFinished in 0.000728344 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1372.98 tests/s, 9610.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi9mhcnfl\nStarted\n.\nFinished in 0.001444933 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    692.07 tests/s, 4844.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp65l4cgq9\nStarted\n.\nFinished in 0.001529459 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    653.83 tests/s, 4576.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnd7qm6zl\nStarted\n.\nFinished in 0.001618206 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    617.97 tests/s, 4325.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4pl98u4w\nStarted\n.\nFinished in 0.001445001 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    692.04 tests/s, 4844.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |letter, index|\n    if index.even? && letter =~ /[AEIOU]/\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjk721bnd\nStarted\n.\nFinished in 0.000769435 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1299.65 tests/s, 9097.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.map\
    \ { |char, i| char if char =~ /[AEIOU]/ && i.even? }.compact.length\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmoch0djn\nStarted\n.\nFinished in 0.001103198 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    906.46 tests/s, 6345.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5but4c8b\nStarted\n.\nFinished in 0.001732094 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    577.34 tests/s, 4041.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_y15pfjm\nStarted\n.\nFinished in 0.000994838 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1005.19 tests/s, 7036.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4uwklo9x\nStarted\n.\nFinished in 0.001566503 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    638.36 tests/s, 4468.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    if i.even? && c =~ /[AEIOU]/\n      count += 1\n    end\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp_rs2f9q\nStarted\n.\nFinished in 0.001101348 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    907.98 tests/s, 6355.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmug8070y\nStarted\n.\nFinished in 0.000707493 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1413.44 tests/s, 9894.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp79yb3lfb\nStarted\n.\nFinished in 0.00076908 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1300.25 tests/s, 9101.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx6auipsf\nStarted\n.\nFinished in 0.001223697 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    817.20 tests/s, 5720.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe4iq348v\nStarted\n.\nFinished in 0.000980275 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1020.12 tests/s, 7140.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzs2riap8\nStarted\n.\nFinished in 0.00111949 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    893.26 tests/s, 6252.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkru44ryu\nStarted\n.\nFinished in 0.001493162 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    669.72 tests/s, 4688.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnkr1r3eh\nStarted\n.\nFinished in 0.000889046 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1124.80 tests/s, 7873.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char.match(/[AEIOU]/)\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpceb7neyy\nStarted\n.\nFinished in 0.001468359 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    681.03 tests/s, 4767.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp29hlhud3\nStarted\n.\nFinished in 0.000828605 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1206.85 tests/s, 8447.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa93ofon1\nStarted\n.\nFinished in 0.001260125 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    793.57 tests/s, 5555.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |letter, index|\n    if index.even? && letter =~ /[AEIOU]/\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6fpsy_97\nStarted\n.\nFinished in 0.000711403 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1405.67 tests/s, 9839.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdie895aq\nStarted\n.\nFinished in 0.000636132 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1572.00 tests/s, 11004.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9cataxyn\nStarted\n.\nFinished in 0.000575017 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1739.08 tests/s, 12173.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl4nqpc5z\nStarted\n.\nFinished in 0.000788091 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1268.89 tests/s, 8882.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if index.even? && char =~ /[AEIOU]/\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwinf73f7\nStarted\n.\nFinished in 0.000591447 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1690.77 tests/s, 11835.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqldwdjdo\nStarted\nF\n===============================================================================\n\
    Failure: test_count_upper(TestHumanEval)\n/tmp/tmpqldwdjdo.rb:13:in `test_count_upper'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_count_upper\n\
    \     12:     candidate = method(:count_upper)\n  => 13:     assert_equal(1, candidate.call(\"\
    aBCdEf\"))\n     14:     assert_equal(0, candidate.call(\"abcdefg\"))\n     15:\
    \     assert_equal(0, candidate.call(\"dBBE\"))\n     16:     assert_equal(0,\
    \ candidate.call(\"B\"))\n<1> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.017482499 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.20 tests/s, 57.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.scan(/[AEIOU]/).count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0cnn2g9x\nStarted\nF\n===============================================================================\n\
    Failure: test_count_upper(TestHumanEval)\n/tmp/tmp0cnn2g9x.rb:15:in `test_count_upper'\n\
    \     12:     candidate = method(:count_upper)\n     13:     assert_equal(1, candidate.call(\"\
    aBCdEf\"))\n     14:     assert_equal(0, candidate.call(\"abcdefg\"))\n  => 15:\
    \     assert_equal(0, candidate.call(\"dBBE\"))\n     16:     assert_equal(0,\
    \ candidate.call(\"B\"))\n     17:     assert_equal(1, candidate.call(\"U\"))\n\
    \     18:     assert_equal(0, candidate.call(\"\"))\n<0> expected but was\n<1>\n\
    ===============================================================================\n\
    \nFinished in 0.008637824 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.77 tests/s, 347.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7vwdbn66\nStarted\n.\nFinished in 0.001751602 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    570.91 tests/s, 3996.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmx3phvj6\nStarted\n.\nFinished in 0.000975913 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1024.68 tests/s, 7172.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp83d2_awh\nStarted\n.\nFinished in 0.000634553 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1575.91 tests/s, 11031.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1swsx37j\nStarted\n.\nFinished in 0.000749599 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1334.05 tests/s, 9338.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  # Your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuhfdf8py\nStarted\nF\n===============================================================================\n\
    Failure: test_count_upper(TestHumanEval)\n/tmp/tmpuhfdf8py.rb:13:in `test_count_upper'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_count_upper\n\
    \     12:     candidate = method(:count_upper)\n  => 13:     assert_equal(1, candidate.call(\"\
    aBCdEf\"))\n     14:     assert_equal(0, candidate.call(\"abcdefg\"))\n     15:\
    \     assert_equal(0, candidate.call(\"dBBE\"))\n     16:     assert_equal(0,\
    \ candidate.call(\"B\"))\n<1> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011205269 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    89.24 tests/s, 89.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char.match(/[AEIOU]/)\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8ck97qtw\nStarted\n.\nFinished in 0.00064627 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1547.34 tests/s, 10831.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdg9osi7d\nStarted\n.\nFinished in 0.00096143 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1040.12 tests/s, 7280.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8beolhfo\nStarted\n.\nFinished in 0.001065803 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    938.26 tests/s, 6567.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.count\
    \ { |char, index| char =~ /[AEIOU]/ && index.even? }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd5edfnjk\nStarted\n.\nFinished in 0.000864965 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1156.12 tests/s, 8092.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9vohl8g0\nStarted\n.\nFinished in 0.000628651 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1590.71 tests/s, 11134.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqgftbqy_\nStarted\n.\nFinished in 0.000900472 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1110.53 tests/s, 7773.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbauhp777\nStarted\n.\nFinished in 0.000628445 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1591.23 tests/s, 11138.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.count\
    \ { |char, i| char == char.upcase && i.even? }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps4cbokh2\nStarted\nF\n===============================================================================\n\
    Failure: test_count_upper(TestHumanEval)\n/tmp/tmps4cbokh2.rb:13:in `test_count_upper'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_count_upper\n\
    \     12:     candidate = method(:count_upper)\n  => 13:     assert_equal(1, candidate.call(\"\
    aBCdEf\"))\n     14:     assert_equal(0, candidate.call(\"abcdefg\"))\n     15:\
    \     assert_equal(0, candidate.call(\"dBBE\"))\n     16:     assert_equal(0,\
    \ candidate.call(\"B\"))\n<1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.014235935 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.24 tests/s, 70.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.count\
    \ { |char, index| char.match(/[AEIOU]/) && index.even? }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdkynf495\nStarted\n.\nFinished in 0.000848214 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1178.95 tests/s, 8252.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.chars.each_with_index.count\
    \ { |char, index| char =~ /[AEIOU]/ && index.even? }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp1_sqype\nStarted\n.\nFinished in 0.000992382 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1007.68 tests/s, 7053.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    if i.even? && c =~ /[AEIOU]/\n      count += 1\n    end\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprp2ic982\nStarted\n.\nFinished in 0.000555387 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1800.55 tests/s, 12603.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  # Your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvadq4tfa\nStarted\nF\n===============================================================================\n\
    Failure: test_count_upper(TestHumanEval)\n/tmp/tmpvadq4tfa.rb:13:in `test_count_upper'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_count_upper\n\
    \     12:     candidate = method(:count_upper)\n  => 13:     assert_equal(1, candidate.call(\"\
    aBCdEf\"))\n     14:     assert_equal(0, candidate.call(\"abcdefg\"))\n     15:\
    \     assert_equal(0, candidate.call(\"dBBE\"))\n     16:     assert_equal(0,\
    \ candidate.call(\"B\"))\n<1> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011324772 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.30 tests/s, 88.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpraxv3yqy\nStarted\n.\nFinished in 0.000604559 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1654.10 tests/s, 11578.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp65llwzxv\nStarted\n.\nFinished in 0.001196066 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    836.07 tests/s, 5852.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy2vpsjh7\nStarted\n.\nFinished in 0.000638941 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1565.09 tests/s, 10955.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp64jy5cxa\nStarted\n.\nFinished in 0.000706391 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1415.65 tests/s, 9909.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1kad823_\nStarted\n.\nFinished in 0.001081148 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    924.94 tests/s, 6474.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo9v7t3pk\nStarted\n.\nFinished in 0.001072384 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    932.50 tests/s, 6527.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkchgz6ka\nStarted\n.\nFinished in 0.000637804 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1567.88 tests/s, 10975.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.chars.each_with_index.count\
    \ { |char, index| char =~ /[AEIOU]/ && index.even? }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3fznwnjq\nStarted\n.\nFinished in 0.000863521 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1158.05 tests/s, 8106.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy97jdl6g\nStarted\n.\nFinished in 0.001255263 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    796.65 tests/s, 5576.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo1yvd7i0\nStarted\n.\nFinished in 0.001089821 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    917.58 tests/s, 6423.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpadd0roow\nStarted\n.\nFinished in 0.000583959 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1712.45 tests/s, 11987.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, i|\n    if i.even? && char.upcase == char && char =~ /[AEIOU]/\n \
    \     count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbfrdx6w7\nStarted\n.\nFinished in 0.000714227 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1400.12 tests/s, 9800.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i % 2 == 0 && char =~ /[AEIOU]/\n      count += 1\n   \
    \ end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpeu94ohuq\nStarted\n.\nFinished in 0.000646634 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1546.47 tests/s, 10825.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw_xr15vj\nStarted\n.\nFinished in 0.000675347 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1480.72 tests/s, 10365.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9riq_j_r\nStarted\n.\nFinished in 0.001238694 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    807.30 tests/s, 5651.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even?\n      if char == 'A' || char == 'E' ||\
    \ char == 'I' || char == 'O' || char == 'U'\n        count += 1\n      end\n \
    \   end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3syy00aw\nStarted\n.\nFinished in 0.001154039 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    866.52 tests/s, 6065.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw1l8p9yx\nStarted\n.\nFinished in 0.000578276 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1729.28 tests/s, 12104.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpheakf2dm\nStarted\n.\nFinished in 0.001345953 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    742.97 tests/s, 5200.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5u1ie46h\nStarted\n.\nFinished in 0.000920805 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1086.01 tests/s, 7602.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuabsyr8e\nStarted\n.\nFinished in 0.000670725 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1490.92 tests/s, 10436.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6sbjr7h1\nStarted\n.\nFinished in 0.000672681 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1486.59 tests/s, 10406.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |x, i|\n    if i.even? && x =~ /[AEIOU]/\n      count += 1\n    end\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr0t64o25\nStarted\n.\nFinished in 0.000723273 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1382.60 tests/s, 9678.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprgp17zqm\nStarted\n.\nFinished in 0.000862488 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1159.44 tests/s, 8116.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv4nw08s2\nStarted\n.\nFinished in 0.000580655 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1722.19 tests/s, 12055.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1m0wfefr\nStarted\n.\nFinished in 0.001553406 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    643.75 tests/s, 4506.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp41qgwkkr\nStarted\n.\nFinished in 0.000827795 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1208.03 tests/s, 8456.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvqoepjli\nStarted\n.\nFinished in 0.000602805 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1658.91 tests/s, 11612.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp655dfvrv\nStarted\n.\nFinished in 0.001252392 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    798.47 tests/s, 5589.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyhkczwcr\nStarted\n.\nFinished in 0.001247031 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    801.90 tests/s, 5613.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |letter, index|\n    if index.even? && letter =~ /[AEIOU]/\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4m0yxsuo\nStarted\n.\nFinished in 0.000878206 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1138.69 tests/s, 7970.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    count += 1 if c =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpup2oo0xu\nStarted\n.\nFinished in 0.001120116 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    892.76 tests/s, 6249.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpefo6siuw\nStarted\n.\nFinished in 0.001687843 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    592.47 tests/s, 4147.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').map.with_index\
    \ { |char, i| char if i.even? && char =~ /[AEIOU]/ }.compact.count\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph6ty3oks\nStarted\n.\nFinished in 0.000955692 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1046.36 tests/s, 7324.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd037epx6\nStarted\n.\nFinished in 0.000934068 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1070.59 tests/s, 7494.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4pcwwuko\nStarted\n.\nFinished in 0.000677685 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1475.61 tests/s, 10329.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    count += 1 if c =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmvlxyfz7\nStarted\n.\nFinished in 0.001412411 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    708.01 tests/s, 4956.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgwdhrwet\nStarted\n.\nFinished in 0.000611652 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1634.92 tests/s, 11444.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz1xwx2l_\nStarted\n.\nFinished in 0.00097098 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1029.89 tests/s, 7209.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc07x2c2o\nStarted\n.\nFinished in 0.00102062 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    979.80 tests/s, 6858.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1tp86dr3\nStarted\n.\nFinished in 0.000610628 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1637.66 tests/s, 11463.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3_3fizmg\nStarted\n.\nFinished in 0.000666851 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1499.59 tests/s, 10497.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  # Your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp05kag1gv\nStarted\nF\n===============================================================================\n\
    Failure: test_count_upper(TestHumanEval)\n/tmp/tmp05kag1gv.rb:13:in `test_count_upper'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_count_upper\n\
    \     12:     candidate = method(:count_upper)\n  => 13:     assert_equal(1, candidate.call(\"\
    aBCdEf\"))\n     14:     assert_equal(0, candidate.call(\"abcdefg\"))\n     15:\
    \     assert_equal(0, candidate.call(\"dBBE\"))\n     16:     assert_equal(0,\
    \ candidate.call(\"B\"))\n<1> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.012406645 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.60 tests/s, 80.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfb1w2bbu\nStarted\n.\nFinished in 0.00110833 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    902.26 tests/s, 6315.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.count\
    \ { |char, index| char =~ /[AEIOU]/ && index.even? }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx5zrs5lf\nStarted\n.\nFinished in 0.001158594 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    863.12 tests/s, 6041.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.count\
    \ { |c, i| c =~ /[AEIOU]/ && i.even? }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu7ai32jw\nStarted\n.\nFinished in 0.001519043 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    658.31 tests/s, 4608.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpedg66jm6\nStarted\n.\nFinished in 0.001370152 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    729.85 tests/s, 5108.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1758aosc\nStarted\n.\nFinished in 0.001511688 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    661.51 tests/s, 4630.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp08nhsfbd\nStarted\n.\nFinished in 0.001370895 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    729.45 tests/s, 5106.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |letter, index|\n    if index.even? && letter =~ /[AEIOU]/\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp21w2fgsw\nStarted\n.\nFinished in 0.000630853 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1585.16 tests/s, 11096.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4of7omwt\nStarted\n.\nFinished in 0.002033212 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    491.83 tests/s, 3442.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx2tnhrpx\nStarted\n.\nFinished in 0.000676445 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1478.32 tests/s, 10348.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvs7954ld\nStarted\n.\nFinished in 0.000996672 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1003.34 tests/s, 7023.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  vowels = \"AEIOU\"\
    \n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? &&\
    \ vowels.include?(char)\n      count += 1\n    end\n  end\n  count\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp21exowsp\nStarted\n.\nFinished in 0.001078827 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    926.93 tests/s, 6488.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgt2v0zsf\nStarted\n.\nFinished in 0.000894805 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1117.56 tests/s, 7822.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.count\
    \ { |c, i| c =~ /[AEIOU]/ && i.even? }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp51qa4u6m\nStarted\n.\nFinished in 0.000813686 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1228.98 tests/s, 8602.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphily8bj8\nStarted\n.\nFinished in 0.001025937 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    974.72 tests/s, 6823.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1hu0wrcn\nStarted\n.\nFinished in 0.001004526 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    995.49 tests/s, 6968.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0pqa_041\nStarted\n.\nFinished in 0.000675374 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1480.66 tests/s, 10364.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnerp2em_\nStarted\n.\nFinished in 0.00064425 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1552.19 tests/s, 10865.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa3ga6f5a\nStarted\n.\nFinished in 0.000674319 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1482.98 tests/s, 10380.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8cp2v9fg\nStarted\n.\nFinished in 0.000979331 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1021.11 tests/s, 7147.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpevd7q_9u\nStarted\n.\nFinished in 0.000748057 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1336.80 tests/s, 9357.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').select.with_index\
    \ { |x, i| x =~ /[AEIOU]/ && i.even? }.count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwg5k7r36\nStarted\n.\nFinished in 0.000946346 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1056.70 tests/s, 7396.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps4o79urg\nStarted\n.\nFinished in 0.001574057 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    635.30 tests/s, 4447.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpncuqky58\nStarted\n.\nFinished in 0.001034484 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    966.67 tests/s, 6766.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    if i % 2 == 0 && c =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsv7wo3gz\nStarted\n.\nFinished in 0.000979883 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1020.53 tests/s, 7143.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    if i.even? && c =~ /[AEIOU]/\n      count += 1\n    end\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxaircf3w\nStarted\n.\nFinished in 0.001709408 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    585.00 tests/s, 4094.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn_cqihbk\nStarted\n.\nFinished in 0.000913786 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1094.35 tests/s, 7660.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.chars.each_with_index.count\
    \ { |char, index| char =~ /[AEIOU]/ && index.even? }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpomz9xr8y\nStarted\n.\nFinished in 0.001155939 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    865.10 tests/s, 6055.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    if i.even? && c =~ /[AEIOU]/\n      count += 1\n    end\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwlt9ja4p\nStarted\n.\nFinished in 0.000612558 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1632.50 tests/s, 11427.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppp63u6ou\nStarted\n.\nFinished in 0.001064646 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    939.28 tests/s, 6574.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdhol2tw2\nStarted\n.\nFinished in 0.00060298 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1658.43 tests/s, 11609.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  vowels = \"AEIOU\"\
    \n  count = 0\n  s.each_char.with_index do |char, index|\n    if vowels.include?(char)\
    \ && index.even?\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqkfgm9_k\nStarted\n.\nFinished in 0.000922302 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1084.24 tests/s, 7589.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.count\
    \ { |char, index| char =~ /[AEIOU]/ && index.even? }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkzvs7175\nStarted\n.\nFinished in 0.000734969 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1360.60 tests/s, 9524.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpid_d4o9z\nStarted\n.\nFinished in 0.000908401 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1100.84 tests/s, 7705.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy83m68ty\nStarted\n.\nFinished in 0.000821776 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1216.88 tests/s, 8518.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvomyi_ek\nStarted\n.\nFinished in 0.000956043 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1045.98 tests/s, 7321.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq00uofc7\nStarted\n.\nFinished in 0.001065325 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    938.68 tests/s, 6570.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp85vjhaxv\nStarted\n.\nFinished in 0.000621588 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1608.78 tests/s, 11261.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    if i.even? && c =~ /[AEIOU]/\n      count += 1\n    end\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8iozibk9\nStarted\n.\nFinished in 0.001837122 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    544.33 tests/s, 3810.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5fecn2wo\nStarted\n.\nFinished in 0.000613387 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1630.29 tests/s, 11412.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdswqrpse\nStarted\n.\nFinished in 0.001790311 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    558.56 tests/s, 3909.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj4oxog0e\nStarted\n.\nFinished in 0.002208223 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    452.85 tests/s, 3169.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |letter, index|\n    if index.even? && letter =~ /[AEIOU]/\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplooprykb\nStarted\n.\nFinished in 0.001435156 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    696.79 tests/s, 4877.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp62v426et\nStarted\n.\nFinished in 0.000813927 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1228.61 tests/s, 8600.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  vowels = ['A', 'E',\
    \ 'I', 'O', 'U']\n  count = 0\n  s.each_char.with_index do |char, index|\n   \
    \ if index.even? && vowels.include?(char)\n      count += 1\n    end\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcrmks8__\nStarted\n.\nFinished in 0.000825755 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1211.01 tests/s, 8477.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpymypl3ty\nStarted\n.\nFinished in 0.00088837 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1125.66 tests/s, 7879.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzlc4tsyb\nStarted\n.\nFinished in 0.000758736 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1317.98 tests/s, 9225.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmeam7n32\nStarted\n.\nFinished in 0.000648017 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1543.17 tests/s, 10802.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsmt5m5k2\nStarted\n.\nFinished in 0.000856792 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1167.14 tests/s, 8170.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp100bk9t7\nStarted\n.\nFinished in 0.001327522 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    753.28 tests/s, 5272.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    count += 1 if c =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzmthd_0s\nStarted\n.\nFinished in 0.000988217 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1011.92 tests/s, 7083.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |letter, index|\n    if index.even? && letter =~ /[AEIOU]/\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb2v6d7di\nStarted\n.\nFinished in 0.000927141 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1078.58 tests/s, 7550.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    if i.even? && c =~ /[AEIOU]/\n      count += 1\n    end\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplnip0moj\nStarted\n.\nFinished in 0.001179438 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    847.86 tests/s, 5935.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4qw6v1jf\nStarted\n.\nFinished in 0.001118611 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    893.97 tests/s, 6257.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpugvuti_r\nStarted\n.\nFinished in 0.000597974 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1672.31 tests/s, 11706.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpeayssoe2\nStarted\n.\nFinished in 0.000711659 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1405.17 tests/s, 9836.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if char.match(/[AEIOU]/) && index.even?\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplq8ukcjp\nStarted\n.\nFinished in 0.000613904 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1628.92 tests/s, 11402.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7769441g\nStarted\n.\nFinished in 0.001149521 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    869.93 tests/s, 6089.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzfmejisk\nStarted\n.\nFinished in 0.000853777 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1171.27 tests/s, 8198.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpksye52tx\nStarted\n.\nFinished in 0.000915704 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1092.06 tests/s, 7644.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpicsj47_t\nStarted\nF\n===============================================================================\n\
    Failure: test_count_upper(TestHumanEval)\n/tmp/tmpicsj47_t.rb:13:in `test_count_upper'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_count_upper\n\
    \     12:     candidate = method(:count_upper)\n  => 13:     assert_equal(1, candidate.call(\"\
    aBCdEf\"))\n     14:     assert_equal(0, candidate.call(\"abcdefg\"))\n     15:\
    \     assert_equal(0, candidate.call(\"dBBE\"))\n     16:     assert_equal(0,\
    \ candidate.call(\"B\"))\n<1> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009692524 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.17 tests/s, 103.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7mhc_0rg\nStarted\n.\nFinished in 0.001136791 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    879.67 tests/s, 6157.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.inject(0)\
    \ do |sum, (char, index)|\n    sum += 1 if char.match(/[AEIOU]/) && index.even?\n\
    \    sum\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgrxstjbz\nStarted\n.\nFinished in 0.000970414 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1030.49 tests/s, 7213.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.count\
    \ { |char, i| char =~ /[AEIOU]/ && i.even? }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiyv8l4um\nStarted\n.\nFinished in 0.002131528 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    469.15 tests/s, 3284.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwia14_hl\nStarted\n.\nFinished in 0.001028686 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    972.11 tests/s, 6804.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppaptkuhp\nStarted\n.\nFinished in 0.001469699 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    680.41 tests/s, 4762.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzl1kylom\nStarted\n.\nFinished in 0.001157483 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    863.94 tests/s, 6047.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprihegh_4\nStarted\n.\nFinished in 0.001163093 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    859.78 tests/s, 6018.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5m3a79os\nStarted\n.\nFinished in 0.001003174 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    996.84 tests/s, 6977.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3r_7ckb6\nStarted\n.\nFinished in 0.001221532 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    818.64 tests/s, 5730.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm08b844o\nStarted\n.\nFinished in 0.000615277 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1625.28 tests/s, 11376.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpflyec5u2\nStarted\n.\nFinished in 0.001418421 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    705.01 tests/s, 4935.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps43cvqxx\nStarted\n.\nFinished in 0.001318169 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    758.63 tests/s, 5310.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcfbflyj_\nStarted\n.\nFinished in 0.002234355 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    447.56 tests/s, 3132.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1jgofhpm\nStarted\n.\nFinished in 0.000687254 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1455.07 tests/s, 10185.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4e6rw2gf\nStarted\n.\nFinished in 0.000548259 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1823.96 tests/s, 12767.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.each_char.with_index.count\
    \ { |char, index| char =~ /[AEIOU]/ && index.even? }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgz0hqkhz\nStarted\n.\nFinished in 0.001065058 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    938.92 tests/s, 6572.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').select.with_index\
    \ { |char, i| char =~ /[AEIOU]/ && i.even? }.count\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3luc3udc\nStarted\n.\nFinished in 0.001359805 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    735.40 tests/s, 5147.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv5qz8tl0\nStarted\n.\nFinished in 0.000869238 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1150.43 tests/s, 8053.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpepz3vhx8\nStarted\n.\nFinished in 0.001305268 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    766.13 tests/s, 5362.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8wc06pxz\nStarted\n.\nFinished in 0.000949019 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1053.72 tests/s, 7376.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplo0f6pb9\nStarted\n.\nFinished in 0.00070366 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1421.14 tests/s, 9947.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpztflvz6k\nStarted\n.\nFinished in 0.000615068 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1625.84 tests/s, 11380.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbqe4c5se\nStarted\n.\nFinished in 0.000879157 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1137.45 tests/s, 7962.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  # Your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpno_nvrb8\nStarted\nF\n===============================================================================\n\
    Failure: test_count_upper(TestHumanEval)\n/tmp/tmpno_nvrb8.rb:13:in `test_count_upper'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_count_upper\n\
    \     12:     candidate = method(:count_upper)\n  => 13:     assert_equal(1, candidate.call(\"\
    aBCdEf\"))\n     14:     assert_equal(0, candidate.call(\"abcdefg\"))\n     15:\
    \     assert_equal(0, candidate.call(\"dBBE\"))\n     16:     assert_equal(0,\
    \ candidate.call(\"B\"))\n<1> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007930481 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.10 tests/s, 126.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp35m29b7y\nStarted\n.\nFinished in 0.001475315 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    677.82 tests/s, 4744.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfft4mvur\nStarted\n.\nFinished in 0.000974296 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1026.38 tests/s, 7184.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_m3je1uv\nStarted\n.\nFinished in 0.000860826 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1161.67 tests/s, 8131.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.count\
    \ { |char, index| char.upcase == char && index.even? }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5m6gp7m2\nStarted\nF\n===============================================================================\n\
    Failure: test_count_upper(TestHumanEval)\n/tmp/tmp5m6gp7m2.rb:13:in `test_count_upper'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_count_upper\n\
    \     12:     candidate = method(:count_upper)\n  => 13:     assert_equal(1, candidate.call(\"\
    aBCdEf\"))\n     14:     assert_equal(0, candidate.call(\"abcdefg\"))\n     15:\
    \     assert_equal(0, candidate.call(\"dBBE\"))\n     16:     assert_equal(0,\
    \ candidate.call(\"B\"))\n<1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006732551 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.53 tests/s, 148.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0xe0k2z2\nStarted\n.\nFinished in 0.000827268 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1208.80 tests/s, 8461.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbxallnyk\nStarted\n.\nFinished in 0.000572281 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1747.39 tests/s, 12231.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |letter, index|\n    if index.even? && letter =~ /[AEIOU]/\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxeu7s8_q\nStarted\n.\nFinished in 0.000732697 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1364.82 tests/s, 9553.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    if i.even? && c =~ /[AEIOU]/\n      count += 1\n    end\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsmu73d_r\nStarted\n.\nFinished in 0.001363961 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    733.16 tests/s, 5132.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  vowels = \"AEIOU\"\
    \n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? &&\
    \ vowels.include?(char)\n      count += 1\n    end\n  end\n  count\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp12zpyq7b\nStarted\n.\nFinished in 0.001214391 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    823.46 tests/s, 5764.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  vowels = \"AEIOU\"\
    \n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? &&\
    \ vowels.include?(char)\n      count += 1\n    end\n  end\n  count\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphruib_cc\nStarted\n.\nFinished in 0.000540093 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1851.53 tests/s, 12960.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw5fykl_j\nStarted\n.\nFinished in 0.00106339 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    940.39 tests/s, 6582.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9ndv6t4c\nStarted\n.\nFinished in 0.000488214 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2048.28 tests/s, 14337.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.chars.each_with_index.count\
    \ { |char, i| char =~ /[AEIOU]/ && i.even? }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwe96md0a\nStarted\n.\nFinished in 0.000527124 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1897.09 tests/s, 13279.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0wgu0uhi\nStarted\n.\nFinished in 0.000593291 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1685.51 tests/s, 11798.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy0ujydyg\nStarted\n.\nFinished in 0.000503729 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1985.19 tests/s, 13896.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9zpl30wu\nStarted\n.\nFinished in 0.00053003 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1886.69 tests/s, 13206.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char.match(/[AEIOU]/)\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9vcp01zq\nStarted\n.\nFinished in 0.000479183 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2086.89 tests/s, 14608.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpejoalgxw\nStarted\n.\nFinished in 0.000500982 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1996.08 tests/s, 13972.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp92q7jvyt\nStarted\n.\nFinished in 0.000513068 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1949.06 tests/s, 13643.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char.match(/[AEIOU]/)\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5jm7s8tr\nStarted\n.\nFinished in 0.000486377 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2056.02 tests/s, 14392.13 assertions/s\n"
  exit_code: 0
  status: OK
