name: HumanEval_106_f
language: ruby
prompt: "# Implement the function f that takes n as a parameter,\n# and returns a\
  \ list of size n, such that the value of the element at index i is the factorial\
  \ of i if i is even\n# or the sum of numbers from 1 to i otherwise.\n# i starts\
  \ from 1.\n# the factorial of i is the multiplication of the numbers from 1 to i\
  \ (1 * 2 * ... * i).\n# Example:\n# f(5) == [1, 2, 6, 24, 15]\ndef f(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n\
  \    candidate = method(:f)\n    assert_equal([1, 2, 6, 24, 15], candidate.call(5))\n\
  \    assert_equal([1, 2, 6, 24, 15, 720, 28], candidate.call(7))\n    assert_equal([1],\
  \ candidate.call(1))\n    assert_equal([1, 2, 6], candidate.call(3))\n  end\nend\n"
completions: ["  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+)\
    \ }\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+)\
    \ }\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+)\
    \ }\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+)\
    \ }\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+)\
    \ }\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+)\
    \ }\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+)\
    \ }\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+)\
    \ }\nend", "  array = []\n  (1..n).each do |i|\n    if i.even?\n      array <<\
    \ (1..i).inject(:*)\n    else\n      array << (1..i).inject(:+)\n    end\n  end\n\
    \  array\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+)\
    \ }\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+)\
    \ }\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+)\
    \ }\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+)\
    \ }\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+)\
    \ }\nend", "  # your code here\n  result = []\n  (1..n).each do |i|\n    if i.even?\n\
    \      result << (1..i).inject(:*)\n    else\n      result << (1..i).inject(:+)\n\
    \    end\n  end\n  result\nend", "  (1..n).map do |i|\n    i.even? ? (1..i).inject(:*)\
    \ : (1..i).inject(:+)\n  end\nend", "  # your code here\nend", "  (1..n).map do\
    \ |i|\n    if i.even?\n      (1..i).inject(:*)\n    else\n      (1..i).inject(:+)\n\
    \    end\n  end\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+)\
    \ }\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+)\
    \ }\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+)\
    \ }\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+)\
    \ }\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+)\
    \ }\nend", "  result = []\n  (1..n).each do |i|\n    if i.even?\n      result\
    \ << (1..i).inject(:*)\n    else\n      result << (1..i).inject(:+)\n    end\n\
    \  end\n  result\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+)\
    \ }\nend", "  # TODO: implement the function\n  result = []\n  (1..n).each do\
    \ |i|\n    if i.even?\n      result << (1..i).inject(:*)\n    else\n      result\
    \ << (1..i).inject(:+)\n    end\n  end\n  result\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  result = []\n  (1..n).each\
    \ do |i|\n    if i.even?\n      result << (1..i).inject(:*)\n    else\n      result\
    \ << (1..i).inject(:+)\n    end\n  end\n  result\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  # your code here\n  arr\
    \ = []\n  (1..n).each do |i|\n    if i.even?\n      arr << (1..i).inject(:*)\n\
    \    else\n      arr << (1..i).inject(:+)\n    end\n  end\n  arr\nend", "  (1..n).map\
    \ { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map\
    \ { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map\
    \ { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map\
    \ { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map\
    \ { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map\
    \ { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map\
    \ { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map\
    \ { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map\
    \ { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map\
    \ { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map\
    \ { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map\
    \ do |i|\n    i.even? ? (1..i).inject(:*) : (1..i).inject(:+)\n  end\nend", " \
    \ (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ (1..n).map do |i|\n    i.even? ? (1..i).inject(:*) : (1..i).inject(:+)\n  end\n\
    end", "  result = []\n  (1..n).each do |i|\n    if i.even?\n      result << (1..i).inject(:*)\n\
    \    else\n      result << (1..i).inject(:+)\n    end\n  end\n  result\nend",
  "  # your code here\n  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+)\
    \ }\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+)\
    \ }\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+)\
    \ }\nend", "  result = []\n  (1..n).each do |i|\n    if i.even?\n      result\
    \ << (1..i).inject(:*)\n    else\n      result << (1..i).inject(:+)\n    end\n\
    \  end\n  result\nend", "  # your code here\n  result = []\n  (1..n).each do |i|\n\
    \    if i.even?\n      result << (1..i).inject(:*)\n    else\n      result <<\
    \ (1..i).inject(:+)\n    end\n  end\n  result\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  result = []\n  (1..n).each\
    \ do |i|\n    if i.even?\n      result << (1..i).inject(:*)\n    else\n      result\
    \ << (1..i).inject(:+)\n    end\n  end\n  result\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map do |i|\n    i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+)\n  end\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  arr = []\n  (1..n).each\
    \ do |i|\n    if i.even?\n      arr << (1..i).inject(:*)\n    else\n      arr\
    \ << (1..i).inject(:+)\n    end\n  end\n  arr\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  result = []\n  (1..n).each\
    \ do |i|\n    if i.even?\n      result << (1..i).inject(:*)\n    else\n      result\
    \ << (1..i).inject(:+)\n    end\n  end\n  result\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map do |i|\n    i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+)\n  end\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  # your code here\n  result\
    \ = []\n  (1..n).each do |i|\n    if i.even?\n      result << (1..i).inject(:*)\n\
    \    else\n      result << (1..i).inject(:+)\n    end\n  end\n  result\nend",
  "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ array = []\n  (1..n).each do |i|\n    if i.even?\n      array << (1..i).inject(:*)\n\
    \    else\n      array << (1..i).inject(:+)\n    end\n  end\n  array\nend", " \
    \ (1..n).map do |i|\n    i.even? ? (1..i).inject(:*) : (1..i).inject(:+)\n  end\n\
    end", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\n\
    end", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\n\
    end", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\n\
    end", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\n\
    end", "  # your code here\n  result = []\n  for i in 1..n\n    if i % 2 == 0\n\
    \      result << (1..i).inject(:*)\n    else\n      result << (1..i).inject(:+)\n\
    \    end\n  end\n  result\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*)\
    \ : (1..i).inject(:+) }\nend", "  # your code here\n  result = []\n  (1..n).each\
    \ do |i|\n    if i.even?\n      result << (1..i).inject(:*)\n    else\n      result\
    \ << (1..i).inject(:+)\n    end\n  end\n  result\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map do |i|\n    i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+)\n  end\nend", "  # your code here\n\
    \  result = []\n  (1..n).each do |i|\n    if i.even?\n      result << (1..i).inject(:*)\n\
    \    else\n      result << (1..i).inject(:+)\n    end\n  end\n  result\nend",
  "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ (1..n).map do |i|\n    i.even? ? (1..i).inject(:*) : (1..i).inject(:+)\n  end\n\
    end", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\n\
    end", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\n\
    end", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\n\
    end", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\n\
    end", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\n\
    end", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\n\
    end", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\n\
    end", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\n\
    end", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\n\
    end", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\n\
    end", "  result = []\n  (1..n).each do |i|\n    if i.even?\n      result << (1..i).inject(:*)\n\
    \    else\n      result << (1..i).inject(:+)\n    end\n  end\n  result\nend",
  "  result = []\n  (1..n).each do |i|\n    if i.even?\n      result << (1..i).inject(:*)\n\
    \    else\n      result << (1..i).inject(:+)\n    end\n  end\n  result\nend",
  "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ array = []\n  (1..n).each do |i|\n    if i.even?\n      array << (1..i).inject(:*)\n\
    \    else\n      array << (1..i).inject(:+)\n    end\n  end\n  array\nend", " \
    \ (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ # your code here\n  result = []\n  (1..n).each do |i|\n    if i.even?\n    \
    \  result << (1..i).inject(:*)\n    else\n      result << (1..i).inject(:+)\n\
    \    end\n  end\n  result\nend", "  (1..n).map do |i|\n    i.even? ? (1..i).inject(:*)\
    \ : (1..i).inject(:+)\n  end\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*)\
    \ : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*)\
    \ : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*)\
    \ : (1..i).inject(:+) }\nend", "  result = []\n  (1..n).each do |i|\n    if i.even?\n\
    \      result << (1..i).inject(:*)\n    else\n      result << (1..i).inject(:+)\n\
    \    end\n  end\n  result\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*)\
    \ : (1..i).inject(:+) }\nend", "  result = []\n  (1..n).each do |i|\n    if i.even?\n\
    \      result << factorial(i)\n    else\n      result << sum_of_numbers(i)\n \
    \   end\n  end\n  result\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*)\
    \ : (1..i).inject(:+) }\nend", "  # your code here\n  result = []\n  (1..n).each\
    \ do |i|\n    if i.even?\n      result << (1..i).inject(:*)\n    else\n      result\
    \ << (1..i).inject(:+)\n    end\n  end\n  result\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  # your code here\n  array\
    \ = []\n  (1..n).each do |i|\n    if i.even?\n      array << (1..i).inject(:*)\n\
    \    else\n      array << (1..i).inject(:+)\n    end\n  end\n  array\nend", " \
    \ (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", " \
    \ # your code here\n  arr = []\n  (1..n).each do |i|\n    if i.even?\n      arr\
    \ << (1..i).inject(:*)\n    else\n      arr << (1..i).inject(:+)\n    end\n  end\n\
    \  arr\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+)\
    \ }\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+)\
    \ }\nend", "  (1..n).map do |i|\n    if i.even?\n      (1..i).inject(:*)\n   \
    \ else\n      (1..i).inject(:+)\n    end\n  end\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  result = []\n  (1..n).each\
    \ do |i|\n    if i.even?\n      result << (1..i).inject(:*)\n    else\n      result\
    \ << (1..i).inject(:+)\n    end\n  end\n  result\nend", "  (1..n).map do |i|\n\
    \    if i.even?\n      (1..i).inject(:*)\n    else\n      (1..i).inject(:+)\n\
    \    end\n  end\nend", "  # your code here\n  array = []\n  (1..n).each do |i|\n\
    \    if i.even?\n      array << (1..i).inject(:*)\n    else\n      array << (1..i).inject(:+)\n\
    \    end\n  end\n  array\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*)\
    \ : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*)\
    \ : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*)\
    \ : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*)\
    \ : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*)\
    \ : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*)\
    \ : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even? ? (1..i).inject(:*)\
    \ : (1..i).inject(:+) }\nend", "  (1..n).map do |i|\n    if i.even?\n      (1..i).inject(:*)\n\
    \    else\n      (1..i).inject(:+)\n    end\n  end\nend", "  result = []\n  (1..n).each\
    \ do |i|\n    if i.even?\n      result << (1..i).inject(:*)\n    else\n      result\
    \ << (1..i).inject(:+)\n    end\n  end\n  result\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  (1..n).map { |i| i.even?\
    \ ? (1..i).inject(:*) : (1..i).inject(:+) }\nend", "  # your code here\n  result\
    \ = []\n  (1..n).each do |i|\n    if i.even?\n      result << (1..i).inject(:*)\n\
    \    else\n      result << (1..i).inject(:+)\n    end\n  end\n  result\nend",
  "  (1..n).map do |i|\n    i.even? ? (1..i).inject(:*) : (1..i).inject(:+)\n  end\n\
    end", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\n\
    end", "  (1..n).map { |i| i.even? ? (1..i).inject(:*) : (1..i).inject(:+) }\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
