name: HumanEval_157_right_angle_triangle
language: ruby
results:
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsy8kp55g\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpsy8kp55g.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005881519 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    170.02 tests/s, 170.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkgqgf0ln\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpkgqgf0ln.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004826405 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.19 tests/s, 207.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8iwx7es_\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp8iwx7es_.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005013746 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.45 tests/s, 199.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgs48vv1p\nStarted\n.\nFinished in 0.000355719 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2811.21 tests/s, 30923.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqfs7uhxq\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpqfs7uhxq.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005007697 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.69 tests/s, 199.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif b**2 + c**2 == a**2\n    return true\n  elsif c**2 +\
    \ a**2 == b**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpve6v8an7\nStarted\n.\nFinished in 0.000378141 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2644.52 tests/s, 29089.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmped0iuxtx\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmped0iuxtx.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004827737 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.14 tests/s, 207.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe2ihj8ro\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpe2ihj8ro.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005496634 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.93 tests/s, 181.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # TODO: implement this\
    \ method\n  if a**2 + b**2 == c**2\n    return true\n  elsif a**2 + c**2 == b**2\n\
    \    return true\n  elsif b**2 + c**2 == a**2\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi3mmhu3v\nStarted\n.\nFinished in 0.000344989 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2898.64 tests/s, 31885.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5tiwkxbf\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp5tiwkxbf.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005539696 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.52 tests/s, 180.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoidtkrcv\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpoidtkrcv.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004654141 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.86 tests/s, 214.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a > b && a > c\n   \
    \ if a**2 == b**2 + c**2\n      return true\n    else\n      return false\n  \
    \  end\n  elsif b > a && b > c\n    if b**2 == a**2 + c**2\n      return true\n\
    \    else\n      return false\n    end\n  elsif c > a && c > b\n    if c**2 ==\
    \ a**2 + b**2\n      return true\n    else\n      return false\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpevr_snpo\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpevr_snpo.rb:36:in `test_right_angle_triangle'\n\
    \     33:     assert_equal(true, candidate.call(3, 4, 5))\n     34:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     35:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n  => 36:     assert_equal(false, candidate.call(2, 2, 2))\n     37:\
    \     assert_equal(true, candidate.call(7, 24, 25))\n     38:     assert_equal(false,\
    \ candidate.call(10, 5, 7))\n     39:     assert_equal(true, candidate.call(5,\
    \ 12, 13))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.005209866 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.94 tests/s, 767.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4exlf9ct\nStarted\n.\nFinished in 0.000438345 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2281.31 tests/s, 25094.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\
    \ || a**2 + c**2 == b**2 || b**2 + c**2 == a**2\n    return true\n  else\n   \
    \ return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0fn5va_n\nStarted\n.\nFinished in 0.00078706 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1270.55 tests/s, 13976.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a > b && a > c\n   \
    \ if a**2 == b**2 + c**2\n      return true\n    else\n      return false\n  \
    \  end\n  elsif b > a && b > c\n    if b**2 == a**2 + c**2\n      return true\n\
    \    else\n      return false\n    end\n  elsif c > a && c > b\n    if c**2 ==\
    \ a**2 + b**2\n      return true\n    else\n      return false\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv6so2ncp\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpv6so2ncp.rb:36:in `test_right_angle_triangle'\n\
    \     33:     assert_equal(true, candidate.call(3, 4, 5))\n     34:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     35:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n  => 36:     assert_equal(false, candidate.call(2, 2, 2))\n     37:\
    \     assert_equal(true, candidate.call(7, 24, 25))\n     38:     assert_equal(false,\
    \ candidate.call(10, 5, 7))\n     39:     assert_equal(true, candidate.call(5,\
    \ 12, 13))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.006641779 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.56 tests/s, 602.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if (a**2 + b**2 == c**2)\
    \ || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\n    return true\n  else\n\
    \    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpchx5ew6w\nStarted\n.\nFinished in 0.000440588 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2269.69 tests/s, 24966.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkgfzmvr0\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpkgfzmvr0.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004833519 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.89 tests/s, 206.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsmhagf6b\nStarted\n.\nFinished in 0.000457129 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2187.57 tests/s, 24063.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzz4si3xy\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpzz4si3xy.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004488271 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.80 tests/s, 222.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2vix2zpm\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp2vix2zpm.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.006606202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.37 tests/s, 151.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpul3gpjcr\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpul3gpjcr.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005265761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.91 tests/s, 189.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9g1ke5e5\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp9g1ke5e5.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004686282 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.39 tests/s, 213.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a > b && a > c\n   \
    \ return a**2 == b**2 + c**2\n  elsif b > a && b > c\n    return b**2 == a**2\
    \ + c**2\n  elsif c > a && c > b\n    return c**2 == a**2 + b**2\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpksk8uj0v\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpksk8uj0v.rb:24:in `test_right_angle_triangle'\n\
    \     21:     assert_equal(true, candidate.call(3, 4, 5))\n     22:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     23:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n  => 24:     assert_equal(false, candidate.call(2, 2, 2))\n     25:\
    \     assert_equal(true, candidate.call(7, 24, 25))\n     26:     assert_equal(false,\
    \ candidate.call(10, 5, 7))\n     27:     assert_equal(true, candidate.call(5,\
    \ 12, 13))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.005067158 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.35 tests/s, 789.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu5ymqzn5\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpu5ymqzn5.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005752376 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.84 tests/s, 173.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfvvt04z8\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpfvvt04z8.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004918018 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.33 tests/s, 203.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpeotf0ure\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpeotf0ure.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004713162 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.17 tests/s, 212.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdcsw3858\nStarted\n.\nFinished in 0.00036226 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2760.45 tests/s, 30364.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1ybap_lh\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp1ybap_lh.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004970497 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.19 tests/s, 201.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf_bq4_20\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpf_bq4_20.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005622812 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.85 tests/s, 177.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfjnnde5z\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpfjnnde5z.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004716829 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.01 tests/s, 212.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkjk4up46\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpkjk4up46.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004591413 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.80 tests/s, 217.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmry6qze1\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpmry6qze1.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004532513 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.63 tests/s, 220.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a > b && a > c\n   \
    \ if a**2 == b**2 + c**2\n      return true\n    else\n      return false\n  \
    \  end\n  elsif b > a && b > c\n    if b**2 == a**2 + c**2\n      return true\n\
    \    else\n      return false\n    end\n  elsif c > a && c > b\n    if c**2 ==\
    \ a**2 + b**2\n      return true\n    else\n      return false\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkqgxyh0_\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpkqgxyh0_.rb:36:in `test_right_angle_triangle'\n\
    \     33:     assert_equal(true, candidate.call(3, 4, 5))\n     34:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     35:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n  => 36:     assert_equal(false, candidate.call(2, 2, 2))\n     37:\
    \     assert_equal(true, candidate.call(7, 24, 25))\n     38:     assert_equal(false,\
    \ candidate.call(10, 5, 7))\n     39:     assert_equal(true, candidate.call(5,\
    \ 12, 13))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.004833028 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.91 tests/s, 827.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpev00cgy5\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpev00cgy5.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004879266 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.95 tests/s, 204.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcudgm_qq\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpcudgm_qq.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005268957 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.79 tests/s, 189.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpznmqi61b\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpznmqi61b.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004584729 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.12 tests/s, 218.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqy10spsg\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpqy10spsg.rb:21:in `test_right_angle_triangle'\n\
    \     18:     candidate = method(:right_angle_triangle)\n     19:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     20:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n  => 21:     assert_equal(true, candidate.call(10, 6, 8))\n     22:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n     23:     assert_equal(true,\
    \ candidate.call(7, 24, 25))\n     24:     assert_equal(false, candidate.call(10,\
    \ 5, 7))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n===============================================================================\n\
    \nFinished in 0.004631088 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.93 tests/s, 647.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyf8cb6d8\nStarted\n.\nFinished in 0.00034042 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2937.55 tests/s, 32313.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfx13a591\nStarted\n.\nFinished in 0.000348356 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2870.63 tests/s, 31576.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwpkx7swj\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpwpkx7swj.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.006502898 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.78 tests/s, 153.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpw_2cxyrl\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpw_2cxyrl.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004602244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.29 tests/s, 217.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp81iq1tbg\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp81iq1tbg.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.00530278 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.58 tests/s, 188.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppnborgmk\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmppnborgmk.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005530709 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.81 tests/s, 180.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy48f_27a\nStarted\n.\nFinished in 0.000511162 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1956.33 tests/s, 21519.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # TODO: implement\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfg8rw8a3\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpfg8rw8a3.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004965175 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.40 tests/s, 201.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptpnlxgi_\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmptpnlxgi_.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004499841 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.23 tests/s, 222.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbjlvcooi\nStarted\n.\nFinished in 0.00036672 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2726.88 tests/s, 29995.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpih5xg2pw\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpih5xg2pw.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005802871 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.33 tests/s, 172.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq06oey2c\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpq06oey2c.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004614247 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.72 tests/s, 216.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph5l96oe7\nStarted\n.\nFinished in 0.000407326 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2455.04 tests/s, 27005.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsu7sgabg\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpsu7sgabg.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004638091 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.61 tests/s, 215.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt65yrna3\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpt65yrna3.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004610118 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.91 tests/s, 216.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp3dy3rsq\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpp3dy3rsq.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004558511 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.37 tests/s, 219.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprhjpm61c\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmprhjpm61c.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004517063 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.38 tests/s, 221.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppb8ghfqh\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmppb8ghfqh.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004561085 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.25 tests/s, 219.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_ne78bo1\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp_ne78bo1.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004544324 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.05 tests/s, 220.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp59bma0um\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp59bma0um.rb:21:in `test_right_angle_triangle'\n\
    \     18:     candidate = method(:right_angle_triangle)\n     19:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     20:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n  => 21:     assert_equal(true, candidate.call(10, 6, 8))\n     22:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n     23:     assert_equal(true,\
    \ candidate.call(7, 24, 25))\n     24:     assert_equal(false, candidate.call(10,\
    \ 5, 7))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n===============================================================================\n\
    \nFinished in 0.005672415 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.29 tests/s, 528.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdow7g5f1\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpdow7g5f1.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004803372 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.19 tests/s, 208.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsyut76r_\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpsyut76r_.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005103395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.95 tests/s, 195.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgo762g1u\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpgo762g1u.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004790587 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.74 tests/s, 208.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxdskvlev\nStarted\n.\nFinished in 0.000369094 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2709.34 tests/s, 29802.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  return false if a <= 0\
    \ || b <= 0 || c <= 0\n  return true if a**2 + b**2 == c**2\n  return true if\
    \ a**2 + c**2 == b**2\n  return true if b**2 + c**2 == a**2\n  false\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfbgmynws\nStarted\n.\nFinished in 0.000362973 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2755.03 tests/s, 30305.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf81frkkb\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpf81frkkb.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005225705 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.36 tests/s, 191.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpd2xq691e\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpd2xq691e.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004830212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.03 tests/s, 207.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpw2mpfvld\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpw2mpfvld.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004851833 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.11 tests/s, 206.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1g5q7h3e\nStarted\n.\nFinished in 0.000369013 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2709.93 tests/s, 29809.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxumev7r_\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpxumev7r_.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.006142419 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.80 tests/s, 162.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt13c8h7d\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpt13c8h7d.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.00541933 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.52 tests/s, 184.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8tm24gcs\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp8tm24gcs.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004740784 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.94 tests/s, 210.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a > b && a > c\n   \
    \ a**2 == b**2 + c**2\n  elsif b > a && b > c\n    b**2 == a**2 + c**2\n  else\n\
    \    c**2 == a**2 + b**2\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk9dg9afm\nStarted\n.\nFinished in 0.000917164 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1090.32 tests/s, 11993.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8o1wsx55\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp8o1wsx55.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004816156 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.63 tests/s, 207.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm_42jzf8\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpm_42jzf8.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004671474 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.07 tests/s, 214.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpa78n14dp\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpa78n14dp.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005657858 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.75 tests/s, 176.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpki5pdado\nStarted\n.\nFinished in 0.000375626 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2662.22 tests/s, 29284.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoywu8dot\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpoywu8dot.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004926523 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.98 tests/s, 202.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfoczogjs\nStarted\n.\nFinished in 0.000357101 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2800.33 tests/s, 30803.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi20qsugv\nStarted\n.\nFinished in 0.000411876 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2427.92 tests/s, 26707.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr4lq76gq\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpr4lq76gq.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004401245 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.21 tests/s, 227.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwk9u0tp2\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpwk9u0tp2.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005289416 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.06 tests/s, 189.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8xdd9hb2\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp8xdd9hb2.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004777232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.33 tests/s, 209.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp74dl5hkx\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp74dl5hkx.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004680761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.64 tests/s, 213.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzxmc5mlw\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpzxmc5mlw.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004203925 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    237.87 tests/s, 237.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphu8hhf4q\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmphu8hhf4q.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004997736 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.09 tests/s, 200.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpetprbirh\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpetprbirh.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004964295 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.44 tests/s, 201.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if (a**2 + b**2 == c**2)\
    \ || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\n    return true\n  else\n\
    \    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmsrymb5u\nStarted\n.\nFinished in 0.000382018 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2617.68 tests/s, 28794.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpeu6fwj6u\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpeu6fwj6u.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005013827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.45 tests/s, 199.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwk1dw0b8\nStarted\n.\nFinished in 0.000369525 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2706.18 tests/s, 29767.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnrtfawci\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpnrtfawci.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005533253 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.73 tests/s, 180.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp358fcyr2\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp358fcyr2.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005232669 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.11 tests/s, 191.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdezcmxou\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpdezcmxou.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004871089 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.29 tests/s, 205.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprbksnch1\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmprbksnch1.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005144422 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.39 tests/s, 194.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5bc5glfv\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp5bc5glfv.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005009149 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.63 tests/s, 199.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpor9pcmew\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpor9pcmew.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005419269 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.53 tests/s, 184.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpazzwdtgt\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpazzwdtgt.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004519157 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.28 tests/s, 221.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbl3npfnc\nStarted\n.\nFinished in 0.000368102 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2716.64 tests/s, 29883.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnz0aw2l3\nStarted\n.\nFinished in 0.000363483 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2751.16 tests/s, 30262.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplcbrimkc\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmplcbrimkc.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005245263 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.65 tests/s, 190.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmlqjz3ox\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpmlqjz3ox.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005085792 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.63 tests/s, 196.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyl576725\nStarted\n.\nFinished in 0.000525468 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1903.07 tests/s, 20933.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpol35b3oe\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpol35b3oe.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005434657 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.00 tests/s, 184.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkl552q90\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpkl552q90.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004377622 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.43 tests/s, 228.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2k9ahsax\nStarted\n.\nFinished in 0.000353995 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2824.90 tests/s, 31073.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9e6qnzx1\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp9e6qnzx1.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004867021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.46 tests/s, 205.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8lca6v1y\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp8lca6v1y.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004272714 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    234.04 tests/s, 234.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp95y9k7gt\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp95y9k7gt.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005066155 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.39 tests/s, 197.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_4w7p1fe\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp_4w7p1fe.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004811867 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.82 tests/s, 207.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6sdhpaop\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp6sdhpaop.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004564212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.10 tests/s, 219.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn0jgod5y\nStarted\n.\nFinished in 0.000371548 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2691.44 tests/s, 29605.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2f5m5a7x\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp2f5m5a7x.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004687914 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.31 tests/s, 213.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  return true if a**2 + b**2\
    \ == c**2\n  return true if a**2 + c**2 == b**2\n  return true if b**2 + c**2\
    \ == a**2\n  false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf2ohdjxb\nStarted\n.\nFinished in 0.000356569 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2804.51 tests/s, 30849.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl1eze41e\nStarted\n.\nFinished in 0.000400523 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2496.74 tests/s, 27464.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\
    \ || a**2 + c**2 == b**2 || b**2 + c**2 == a**2\n    return true\n  else\n   \
    \ return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd6eza_2g\nStarted\n.\nFinished in 0.00035061 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2852.17 tests/s, 31373.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a == Math.sqrt(b**2\
    \ + c**2) || b == Math.sqrt(a**2 + c**2) || c == Math.sqrt(a**2 + b**2)\n    return\
    \ true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpejqa_n7h\nStarted\n.\nFinished in 0.00041519 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2408.54 tests/s, 26493.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplrm9q56s\nStarted\n.\nFinished in 0.00042017 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2379.99 tests/s, 26179.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpd8ek34rv\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpd8ek34rv.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004653781 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.88 tests/s, 214.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyfg_rt6u\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpyfg_rt6u.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004677114 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.81 tests/s, 213.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb0cf36_z\nStarted\n.\nFinished in 0.000733239 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1363.81 tests/s, 15001.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6uut_wn9\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp6uut_wn9.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005961279 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.75 tests/s, 167.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # TODO: implement me\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwoe4m4ok\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpwoe4m4ok.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004638401 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.59 tests/s, 215.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjhz457mr\nStarted\n.\nFinished in 0.000423216 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2362.86 tests/s, 25991.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a > b && a > c\n   \
    \ if a**2 == b**2 + c**2\n      return true\n    else\n      return false\n  \
    \  end\n  elsif b > a && b > c\n    if b**2 == a**2 + c**2\n      return true\n\
    \    else\n      return false\n    end\n  elsif c > a && c > b\n    if c**2 ==\
    \ a**2 + b**2\n      return true\n    else\n      return false\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpeppxc59_\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpeppxc59_.rb:36:in `test_right_angle_triangle'\n\
    \     33:     assert_equal(true, candidate.call(3, 4, 5))\n     34:     assert_equal(false,\
    \ candidate.call(1, 2, 3))\n     35:     assert_equal(true, candidate.call(10,\
    \ 6, 8))\n  => 36:     assert_equal(false, candidate.call(2, 2, 2))\n     37:\
    \     assert_equal(true, candidate.call(7, 24, 25))\n     38:     assert_equal(false,\
    \ candidate.call(10, 5, 7))\n     39:     assert_equal(true, candidate.call(5,\
    \ 12, 13))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.004912377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.57 tests/s, 814.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\
    \ || b**2 + c**2 == a**2 || a**2 + c**2 == b**2\n    return true\n  else\n   \
    \ return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9rupv3ky\nStarted\n.\nFinished in 0.000366279 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2730.16 tests/s, 30031.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxaio9uyx\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpxaio9uyx.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005415163 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.67 tests/s, 184.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg5uuwrlz\nStarted\n.\nFinished in 0.000372621 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2683.69 tests/s, 29520.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxexxr0je\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpxexxr0je.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.006189658 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.56 tests/s, 161.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphl2wuxnv\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmphl2wuxnv.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.00464817 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.14 tests/s, 215.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  a, b, c = [a, b, c].sort\n\
    \  a**2 + b**2 == c**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp550t0um4\nStarted\n.\nFinished in 0.000344588 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2902.02 tests/s, 31922.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp76u5883l\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp76u5883l.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.0043075 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    232.15 tests/s, 232.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpls6xl7_n\nStarted\n.\nFinished in 0.000369295 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2707.86 tests/s, 29786.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn_avqis8\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpn_avqis8.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005076786 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.98 tests/s, 196.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbcypymk8\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpbcypymk8.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.00464255 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.40 tests/s, 215.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt174lbs1\nStarted\n.\nFinished in 0.000370486 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2699.16 tests/s, 29690.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx81kkwk0\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpx81kkwk0.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004593708 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.69 tests/s, 217.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo348kna6\nStarted\n.\nFinished in 0.000348456 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2869.80 tests/s, 31567.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqni2r2k_\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpqni2r2k_.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005172326 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.34 tests/s, 193.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  return false if a <= 0\
    \ || b <= 0 || c <= 0\n  return true if a**2 + b**2 == c**2\n  return true if\
    \ a**2 + c**2 == b**2\n  return true if b**2 + c**2 == a**2\n  false\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_xqb1848\nStarted\n.\nFinished in 0.000417104 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2397.48 tests/s, 26372.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6oh4rebb\nStarted\n.\nFinished in 0.000361229 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2768.33 tests/s, 30451.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9alcqse6\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp9alcqse6.rb:21:in `test_right_angle_triangle'\n\
    \     18:     candidate = method(:right_angle_triangle)\n     19:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     20:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n  => 21:     assert_equal(true, candidate.call(10, 6, 8))\n     22:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n     23:     assert_equal(true,\
    \ candidate.call(7, 24, 25))\n     24:     assert_equal(false, candidate.call(10,\
    \ 5, 7))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n===============================================================================\n\
    \nFinished in 0.005542591 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.42 tests/s, 541.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpowc_4jns\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpowc_4jns.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005161374 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.75 tests/s, 193.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl7ub_yvw\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpl7ub_yvw.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005385065 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.70 tests/s, 185.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyp859eb3\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpyp859eb3.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004860911 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.72 tests/s, 205.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvh8z9x4u\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpvh8z9x4u.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005328078 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.68 tests/s, 187.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0o19711y\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp0o19711y.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004553142 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.63 tests/s, 219.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvrj0llo7\nStarted\n.\nFinished in 0.000386487 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2587.41 tests/s, 28461.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpaz0fto10\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpaz0fto10.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004473992 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.51 tests/s, 223.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe43pre84\nStarted\n.\nFinished in 0.000487938 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2049.44 tests/s, 22543.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # TODO: return True if\
    \ the three sides form a right-angled triangle, False otherwise\n  if a**2 + b**2\
    \ == c**2\n    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif\
    \ b**2 + c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj7laoem_\nStarted\n.\nFinished in 0.000377279 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2650.56 tests/s, 29156.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  a, b, c = [a, b, c].sort\n\
    \  c**2 == a**2 + b**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkn44r8en\nStarted\n.\nFinished in 0.000406494 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2460.06 tests/s, 27060.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgnhzvs9b\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpgnhzvs9b.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.007345622 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.14 tests/s, 136.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdpwsbf69\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpdpwsbf69.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.00554672 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.29 tests/s, 180.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp36rv7aha\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp36rv7aha.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004664601 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.38 tests/s, 214.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfmycnsn7\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpfmycnsn7.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004373302 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.66 tests/s, 228.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi85x8w79\nStarted\n.\nFinished in 0.000419499 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2383.80 tests/s, 26221.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if (a**2 + b**2 == c**2)\
    \ || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\n    return true\n  else\n\
    \    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcp11ek_0\nStarted\n.\nFinished in 0.000414209 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2414.24 tests/s, 26556.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp95_i2ivx\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp95_i2ivx.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004890926 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.46 tests/s, 204.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpae8_3tiq\nStarted\n.\nFinished in 0.000355008 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2816.84 tests/s, 30985.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_4dygx4u\nStarted\n.\nFinished in 0.000482228 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2073.71 tests/s, 22810.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjh5qjlv9\nStarted\n.\nFinished in 0.000362882 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2755.72 tests/s, 30312.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8orw831z\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp8orw831z.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004618724 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.51 tests/s, 216.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9vb58fzq\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp9vb58fzq.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004868464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.40 tests/s, 205.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3h4cq_fj\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp3h4cq_fj.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005294826 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.86 tests/s, 188.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmlog_j02\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpmlog_j02.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004741566 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.90 tests/s, 210.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpa7gswjus\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpa7gswjus.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004851393 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.13 tests/s, 206.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt3sgt86k\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpt3sgt86k.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.0051591 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.83 tests/s, 193.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo5q4jxay\nStarted\n.\nFinished in 0.000345399 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2895.20 tests/s, 31847.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2h0abfr0\nStarted\n.\nFinished in 0.000353223 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2831.07 tests/s, 31141.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp94umw1rk\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp94umw1rk.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.00470704 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.45 tests/s, 212.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\
    \ || a**2 + c**2 == b**2 || b**2 + c**2 == a**2\n    return true\n  else\n   \
    \ return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkjccitwl\nStarted\n.\nFinished in 0.000342875 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2916.51 tests/s, 32081.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4t2u49y1\nStarted\n.\nFinished in 0.000533673 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1873.81 tests/s, 20611.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxpzmjzh_\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpxpzmjzh_.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.006018836 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    166.15 tests/s, 166.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4w1_93q5\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp4w1_93q5.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.00473863 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.03 tests/s, 211.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu3nq3np1\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpu3nq3np1.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005442583 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.74 tests/s, 183.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiqn48xmz\nStarted\n.\nFinished in 0.000359126 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2784.54 tests/s, 30629.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2yiisla1\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp2yiisla1.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004977309 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.91 tests/s, 200.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpywxus6je\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpywxus6je.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005430702 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.14 tests/s, 184.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzpjgri2q\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpzpjgri2q.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004652447 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.94 tests/s, 214.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppsa6_rxw\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmppsa6_rxw.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004776101 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.38 tests/s, 209.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe1kjvgw0\nStarted\n.\nFinished in 0.000441019 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2267.48 tests/s, 24942.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqrcdenr2\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpqrcdenr2.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004808622 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.96 tests/s, 207.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpisortzx3\nStarted\n.\nFinished in 0.00038844 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2574.40 tests/s, 28318.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp98a1zhdl\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp98a1zhdl.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004342355 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    230.29 tests/s, 230.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo6nni8en\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpo6nni8en.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004745983 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.70 tests/s, 210.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvy3kc91z\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpvy3kc91z.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004559954 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.30 tests/s, 219.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3zjcjdoa\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp3zjcjdoa.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004857253 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.88 tests/s, 205.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0jvkqclw\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp0jvkqclw.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004662126 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.49 tests/s, 214.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpykdn36e0\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpykdn36e0.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004497536 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.34 tests/s, 222.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4n6ax2zs\nStarted\n.\nFinished in 0.000349156 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2864.05 tests/s, 31504.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps_k4a8hr\nStarted\n.\nFinished in 0.000470415 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2125.78 tests/s, 23383.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5zzdaf4v\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp5zzdaf4v.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004788695 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.83 tests/s, 208.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  a**2 + b**2 == c**2\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpot8gzw9a\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpot8gzw9a.rb:17:in `test_right_angle_triangle'\n\
    \     14:     candidate = method(:right_angle_triangle)\n     15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n  => 17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n     19:     assert_equal(true,\
    \ candidate.call(7, 24, 25))\n     20:     assert_equal(false, candidate.call(10,\
    \ 5, 7))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n===============================================================================\n\
    \nFinished in 0.004725895 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.60 tests/s, 634.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  a, b, c = [a, b, c].sort\n\
    \  a**2 + b**2 == c**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr5hoqfpe\nStarted\n.\nFinished in 0.000369104 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2709.26 tests/s, 29801.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  return false if a <= 0\
    \ || b <= 0 || c <= 0\n  return true if a**2 + b**2 == c**2\n  return true if\
    \ a**2 + c**2 == b**2\n  return true if b**2 + c**2 == a**2\n  false\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb3jntdw0\nStarted\n.\nFinished in 0.000355308 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2814.46 tests/s, 30959.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptgb95kgl\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmptgb95kgl.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004214305 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    237.29 tests/s, 237.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg064m3kl\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpg064m3kl.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004885717 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.68 tests/s, 204.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqwi3lv3s\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpqwi3lv3s.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004373913 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.63 tests/s, 228.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9cmefzxp\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp9cmefzxp.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004299754 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    232.57 tests/s, 232.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwx2bs823\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpwx2bs823.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004527943 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.85 tests/s, 220.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n\
    \    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 +\
    \ c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcykmlk5y\nStarted\n.\nFinished in 0.000349677 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2859.78 tests/s, 31457.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprkt308fj\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmprkt308fj.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004398951 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.33 tests/s, 227.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
    \ 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoazv698x\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpoazv698x.rb:15:in `test_right_angle_triangle'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n\
    \     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004110128 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    243.30 tests/s, 243.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
