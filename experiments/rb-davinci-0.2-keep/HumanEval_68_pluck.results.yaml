name: HumanEval_68_pluck
language: ruby
results:
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  min_idx =\
    \ arr.index(min)\n  [min, min_idx]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpohvzz0u1\nStarted\n.\nFinished in 0.00066925 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1494.21 tests/s, 11953.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  min = evens.min\n  idx = arr.index(min)\n\
    \  [min, idx]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgv0_hnpc\nStarted\n.\nFinished in 0.000870311 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1149.01 tests/s, 9192.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_lf5zyw6\nStarted\n.\nFinished in 0.000648789 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1541.33 tests/s, 12330.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwcflw56y\nStarted\n.\nFinished in 0.001143174 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    874.76 tests/s, 6998.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5aitp4a3\nStarted\n.\nFinished in 0.00061328 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1630.58 tests/s, 13044.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp71en6v_i\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp71en6v_i.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.009657706 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.54 tests/s, 103.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1l6_kmbi\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp1l6_kmbi.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.008764032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.10 tests/s, 114.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiw451py3\nStarted\n.\nFinished in 0.000618648 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1616.43 tests/s, 12931.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8g_jfunq\nStarted\n.\nFinished in 0.001202453 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    831.63 tests/s, 6653.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_h4rugov\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp_h4rugov.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.007385133 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.41 tests/s, 135.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3kic9rx1\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp3kic9rx1.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.011064153 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.38 tests/s, 90.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpubszjhi4\nStarted\n.\nFinished in 0.00063006 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1587.15 tests/s, 12697.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyybcm2cp\nStarted\n.\nFinished in 0.001027074 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    973.64 tests/s, 7789.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmj3ow9c8\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpmj3ow9c8.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.011533049 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.71 tests/s, 86.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps4q7cq49\nStarted\n.\nFinished in 0.001196782 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    835.57 tests/s, 6684.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp26aiuyoh\nStarted\n.\nFinished in 0.000662198 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1510.12 tests/s, 12080.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoje1m6az\nStarted\n.\nFinished in 0.000601118 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1663.57 tests/s, 13308.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |e| e.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptti5v2j0\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmptti5v2j0.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.01438385 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.52 tests/s, 69.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkxcvf8sc\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpkxcvf8sc.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.009727199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    102.80 tests/s, 102.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpia5erbfn\nStarted\n.\nFinished in 0.001329634 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    752.09 tests/s, 6016.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  index = arr.index(min)\n\
    \  [min, index]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnmh0945h\nStarted\n.\nFinished in 0.000721219 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1386.54 tests/s, 11092.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  idx = arr.index(min)\n\
    \  [min, idx]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsqbvrsx5\nStarted\n.\nFinished in 0.000927834 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1077.78 tests/s, 8622.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpad9pci2h\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpad9pci2h.rb:35:in `test_pluck'\n \
    \    32: class TestHumanEval < Test::Unit::TestCase\n     33:   def test_pluck\n\
    \     34:     candidate = method(:pluck)\n  => 35:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     36:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 37:     assert_equal([], candidate.call([]))\n     38:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.013506903 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.04 tests/s, 74.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppvpkczco\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmppvpkczco.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.008852172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.97 tests/s, 112.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpspxjiw0d\nStarted\n.\nFinished in 0.000592582 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1687.53 tests/s, 13500.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqdxgs8js\nStarted\n.\nFinished in 0.001094717 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    913.48 tests/s, 7307.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnqrhuqkg\nStarted\n.\nFinished in 0.001025245 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    975.38 tests/s, 7803.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.sort!\n  [evens[0], arr.index(evens[0])]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdxwn64pw\nStarted\n.\nFinished in 0.000914606 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1093.37 tests/s, 8746.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5h8jaljz\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp5h8jaljz.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.012489978 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.06 tests/s, 80.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  min_idx =\
    \ arr.index(min)\n  [min, min_idx]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpax2ig4_8\nStarted\n.\nFinished in 0.000586813 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1704.12 tests/s, 13632.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min_even = evens.min\n  min_even_index\
    \ = arr.index(min_even)\n  [min_even, min_even_index]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpke719r09\nStarted\n.\nFinished in 0.000676826 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1477.48 tests/s, 11819.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  # your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoo6hc_ut\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpoo6hc_ut.rb:33:in `test_pluck'\n \
    \    30: class TestHumanEval < Test::Unit::TestCase\n     31:   def test_pluck\n\
    \     32:     candidate = method(:pluck)\n  => 33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.015888511 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    62.94 tests/s, 62.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpep3s5lrw\nStarted\n.\nFinished in 0.001068767 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    935.66 tests/s, 7485.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_ps7x1wd\nStarted\n.\nFinished in 0.001115389 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    896.55 tests/s, 7172.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl4e4mtvz\nStarted\n.\nFinished in 0.001047097 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    955.02 tests/s, 7640.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcnm694jj\nStarted\n.\nFinished in 0.000632847 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1580.16 tests/s, 12641.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr35vv55g\nStarted\n.\nFinished in 0.001548047 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    645.98 tests/s, 5167.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  idx = arr.index(min)\n\
    \  [min, idx]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpakjmiir5\nStarted\n.\nFinished in 0.000874854 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1143.05 tests/s, 9144.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwv4qg_ne\nStarted\n.\nFinished in 0.00079433 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1258.92 tests/s, 10071.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7ru6kte4\nStarted\n.\nFinished in 0.001124835 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    889.02 tests/s, 7112.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdhdtyt4r\nStarted\n.\nFinished in 0.000893459 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1119.25 tests/s, 8953.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc92pre3k\nStarted\n.\nFinished in 0.001127467 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    886.94 tests/s, 7095.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2jhbow0h\nStarted\n.\nFinished in 0.002117843 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    472.18 tests/s, 3777.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphcbw08fv\nStarted\n.\nFinished in 0.000647362 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1544.73 tests/s, 12357.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp15fhs5mx\nStarted\n.\nFinished in 0.000683351 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1463.38 tests/s, 11707.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_qbdh60r\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp_qbdh60r.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.013152552 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.03 tests/s, 76.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqu8fy6ko\nStarted\n.\nFinished in 0.000664331 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1505.27 tests/s, 12042.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.sort!\n  [evens[0], arr.index(evens[0])]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb_nik2f8\nStarted\n.\nFinished in 0.000703525 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1421.41 tests/s, 11371.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj_6qt2c4\nStarted\n.\nFinished in 0.000756195 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1322.41 tests/s, 10579.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnewdwz8_\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpnewdwz8_.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.010907084 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.68 tests/s, 91.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.sort!\n  [evens[0], arr.index(evens[0])]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwz4j_17l\nStarted\n.\nFinished in 0.001507449 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    663.37 tests/s, 5306.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpop929c7w\nStarted\n.\nFinished in 0.001099294 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    909.67 tests/s, 7277.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min_even = evens.min\n  min_even_idx\
    \ = arr.index(min_even)\n  [min_even, min_even_idx]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptvjx0f0b\nStarted\n.\nFinished in 0.000606005 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1650.15 tests/s, 13201.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min_even = evens.min\n  min_even_index\
    \ = arr.index(min_even)\n  [min_even, min_even_index]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprhf3oy4i\nStarted\n.\nFinished in 0.000952583 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1049.78 tests/s, 8398.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc2glmh25\nStarted\n.\nFinished in 0.00181048 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    552.34 tests/s, 4418.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjss7hff9\nStarted\n.\nFinished in 0.000563675 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1774.07 tests/s, 14192.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8_ocm9b1\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp8_ocm9b1.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.007944566 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.87 tests/s, 125.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.sort!\n  [evens[0], arr.index(evens[0])]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm_pu8zvf\nStarted\n.\nFinished in 0.000707818 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1412.79 tests/s, 11302.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg_0c7vcu\nStarted\n.\nFinished in 0.00090054 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1110.44 tests/s, 8883.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpabclhont\nStarted\n.\nFinished in 0.001690994 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    591.37 tests/s, 4730.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpswqhq0xj\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpswqhq0xj.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.010576806 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    94.55 tests/s, 94.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  even_arr = arr.select\
    \ { |x| x.even? }\n  return [] if even_arr.empty?\n  even_arr.min\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6zlmll25\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp6zlmll25.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.007303011 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.93 tests/s, 136.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwde5grrf\nStarted\n.\nFinished in 0.001084943 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    921.71 tests/s, 7373.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprmxnbj_o\nStarted\n.\nFinished in 0.001863214 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    536.71 tests/s, 4293.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  idx = arr.index(min)\n\
    \  [min, idx]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpion0lnl0\nStarted\n.\nFinished in 0.000607551 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1645.95 tests/s, 13167.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7yz7uohc\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp7yz7uohc.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.009783501 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    102.21 tests/s, 102.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  arr.each_with_index\
    \ { |x, i| return [min, i] if x == min }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqoaztah2\nStarted\n.\nFinished in 0.001093567 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    914.44 tests/s, 7315.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp52_yjrdd\nStarted\n.\nFinished in 0.000835411 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1197.02 tests/s, 9576.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa5k2utyd\nStarted\n.\nFinished in 0.000673919 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1483.86 tests/s, 11870.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  # your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc0ckic1z\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpc0ckic1z.rb:33:in `test_pluck'\n \
    \    30: class TestHumanEval < Test::Unit::TestCase\n     31:   def test_pluck\n\
    \     32:     candidate = method(:pluck)\n  => 33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.010015475 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.85 tests/s, 99.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp39exy7ds\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp39exy7ds.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014075941 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.04 tests/s, 71.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6v_dgam0\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp6v_dgam0.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.011722284 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.31 tests/s, 85.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp01o9rial\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp01o9rial.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.008152646 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.66 tests/s, 122.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy7mqwy_1\nStarted\n.\nFinished in 0.000761842 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1312.61 tests/s, 10500.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpark2qaem\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpark2qaem.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.012984573 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.01 tests/s, 77.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwiboicdz\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpwiboicdz.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.021141422 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    47.30 tests/s, 47.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmx348vo4\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpmx348vo4.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014231902 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.26 tests/s, 70.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphhxflzv_\nStarted\n.\nFinished in 0.000868462 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1151.46 tests/s, 9211.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg6428sf_\nStarted\n.\nFinished in 0.000552379 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1810.35 tests/s, 14482.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfnlo83dm\nStarted\n.\nFinished in 0.001716541 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    582.57 tests/s, 4660.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1tu6t59x\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp1tu6t59x.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.008812203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.48 tests/s, 113.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz_kmssjh\nStarted\n.\nFinished in 0.0016048 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    623.13 tests/s, 4985.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbbnt1l58\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpbbnt1l58.rb:35:in `test_pluck'\n \
    \    32: class TestHumanEval < Test::Unit::TestCase\n     33:   def test_pluck\n\
    \     34:     candidate = method(:pluck)\n  => 35:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     36:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 37:     assert_equal([], candidate.call([]))\n     38:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.01109159 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.16 tests/s, 90.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbbq4bq1x\nStarted\n.\nFinished in 0.000679888 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1470.83 tests/s, 11766.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min_even = evens.min\n  min_even_index\
    \ = arr.index(min_even)\n  [min_even, min_even_index]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdq6gm2er\nStarted\n.\nFinished in 0.000927729 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1077.90 tests/s, 8623.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp03a0rdu5\nStarted\n.\nFinished in 0.001143014 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    874.88 tests/s, 6999.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |x, i|\n    return\
    \ [x, i] if x.even?\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpeqvp617m\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpeqvp617m.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n===============================================================================\n\
    \nFinished in 0.008374873 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.40 tests/s, 119.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |num| num.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp27zuhl8e\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp27zuhl8e.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.011834541 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.50 tests/s, 84.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjk63lzdk\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpjk63lzdk.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.013408588 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.58 tests/s, 74.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.sort!\n  [evens[0], arr.index(evens[0])]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpekx868qm\nStarted\n.\nFinished in 0.000545094 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1834.55 tests/s, 14676.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwbdfq9z4\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpwbdfq9z4.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.011773254 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.94 tests/s, 84.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm9y6lssr\nStarted\n.\nFinished in 0.000854863 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1169.78 tests/s, 9358.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpakji5lh0\nStarted\n.\nFinished in 0.00112533 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    888.63 tests/s, 7109.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  idx = arr.index(min)\n\
    \  [min, idx]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpalpkxh59\nStarted\n.\nFinished in 0.000713953 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1400.65 tests/s, 11205.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsbrdgfwl\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpsbrdgfwl.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.01155544 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.54 tests/s, 86.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpour7b9x0\nStarted\n.\nFinished in 0.000764137 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1308.67 tests/s, 10469.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8d1sue1u\nStarted\n.\nFinished in 0.001836514 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    544.51 tests/s, 4356.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps_3vatpn\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmps_3vatpn.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.011357851 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.04 tests/s, 88.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.sort!\n  [evens[0], arr.index(evens[0])]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4dx55gde\nStarted\n.\nFinished in 0.000686858 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1455.91 tests/s, 11647.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |e| e.even? }\n  return\
    \ [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyds_j2ao\nStarted\n.\nFinished in 0.001807651 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    553.20 tests/s, 4425.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq2n90dcn\nStarted\n.\nFinished in 0.001053515 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    949.20 tests/s, 7593.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2ikhi3pf\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp2ikhi3pf.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.00816715 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.44 tests/s, 122.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpizvci5tr\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpizvci5tr.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.012241896 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.69 tests/s, 81.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx2ynh5j0\nStarted\n.\nFinished in 0.00105576 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    947.18 tests/s, 7577.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min_even = evens.min\n  min_even_index\
    \ = arr.index(min_even)\n  [min_even, min_even_index]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb4ychnp8\nStarted\n.\nFinished in 0.000605756 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1650.83 tests/s, 13206.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe7nhb7g5\nStarted\n.\nFinished in 0.000915454 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1092.35 tests/s, 8738.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxl4qmxae\nStarted\n.\nFinished in 0.00081139 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1232.45 tests/s, 9859.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.sort!\n  [evens[0], arr.index(evens[0])]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwsu3nscr\nStarted\n.\nFinished in 0.000910511 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1098.28 tests/s, 8786.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk8kw79md\nStarted\n.\nFinished in 0.000558505 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1790.49 tests/s, 14323.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx83661c4\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpx83661c4.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.010672132 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    93.70 tests/s, 93.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnd679zmm\nStarted\n.\nFinished in 0.0009689 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1032.10 tests/s, 8256.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |n, i|\n    return\
    \ [n, i] if n.even?\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsrftetlx\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpsrftetlx.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n===============================================================================\n\
    \nFinished in 0.012420712 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.51 tests/s, 80.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min_even = evens.min\n  min_even_idx\
    \ = arr.index(min_even)\n  [min_even, min_even_idx]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoe0f0x4k\nStarted\n.\nFinished in 0.000836479 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1195.49 tests/s, 9563.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  # your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdozxsd0t\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpdozxsd0t.rb:33:in `test_pluck'\n \
    \    30: class TestHumanEval < Test::Unit::TestCase\n     31:   def test_pluck\n\
    \     32:     candidate = method(:pluck)\n  => 33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.007931244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.08 tests/s, 126.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  evens.min <=> arr.index(evens.min)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_fnediwb\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp_fnediwb.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<1>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.008629345 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.88 tests/s, 115.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp78ouaabs\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp78ouaabs.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.007368595 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.71 tests/s, 135.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph9oda2nt\nStarted\n.\nFinished in 0.000572585 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1746.47 tests/s, 13971.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpntyd9lbc\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpntyd9lbc.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.018963723 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    52.73 tests/s, 52.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  # your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpakby91kp\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpakby91kp.rb:33:in `test_pluck'\n \
    \    30: class TestHumanEval < Test::Unit::TestCase\n     31:   def test_pluck\n\
    \     32:     candidate = method(:pluck)\n  => 33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.016707095 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    59.85 tests/s, 59.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmpdn47yi\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpmpdn47yi.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.009447137 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.85 tests/s, 105.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  return [] if evens.empty?\n  evens.sort!\n  [evens.first, arr.index(evens.first)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsz_ka_wn\nStarted\n.\nFinished in 0.000586375 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1705.39 tests/s, 13643.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |x, i|\n    return\
    \ [x, i] if x.even?\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpw7k4hdhj\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpw7k4hdhj.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n===============================================================================\n\
    \nFinished in 0.007877681 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.94 tests/s, 126.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbyeyt7qx\nStarted\n.\nFinished in 0.001158991 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    862.82 tests/s, 6902.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_6i1_m6k\nStarted\n.\nFinished in 0.00079413 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1259.24 tests/s, 10073.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |e| e.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkr6unpi6\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpkr6unpi6.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.008104958 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.38 tests/s, 123.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8m7uiftq\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp8m7uiftq.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.009982552 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.17 tests/s, 100.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7nfui1z9\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp7nfui1z9.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.013969279 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.59 tests/s, 71.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0ypm4nvb\nStarted\n.\nFinished in 0.000806332 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1240.18 tests/s, 9921.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfqxtzyii\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpfqxtzyii.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014869545 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.25 tests/s, 67.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv7ntf3x5\nStarted\n.\nFinished in 0.000836226 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1195.85 tests/s, 9566.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  even_nums = arr.select\
    \ { |num| num.even? }\n  return [] if even_nums.empty?\n  even_nums.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps0hkxo68\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmps0hkxo68.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.01600173 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    62.49 tests/s, 62.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzishptry\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpzishptry.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014662979 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.20 tests/s, 68.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpldgwn6_0\nStarted\n.\nFinished in 0.001344705 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    743.66 tests/s, 5949.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphp6kgt6f\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmphp6kgt6f.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.00871735 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.71 tests/s, 114.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpaekd5o8v\nStarted\n.\nFinished in 0.001318948 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    758.18 tests/s, 6065.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppr9h5346\nStarted\n.\nFinished in 0.001067058 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    937.16 tests/s, 7497.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9i4vkvue\nStarted\n.\nFinished in 0.000820829 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1218.28 tests/s, 9746.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  idx = arr.index(min)\n\
    \  [min, idx]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzze1wak9\nStarted\n.\nFinished in 0.000679223 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1472.27 tests/s, 11778.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |num| num.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpemvxnmq7\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpemvxnmq7.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.008439705 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.49 tests/s, 118.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9j77tgsy\nStarted\n.\nFinished in 0.000875994 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1141.56 tests/s, 9132.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |x, i|\n    return\
    \ [x, i] if x.even?\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphsra3put\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmphsra3put.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n===============================================================================\n\
    \nFinished in 0.015820655 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    63.21 tests/s, 63.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8y4cfb33\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp8y4cfb33.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.007966675 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.52 tests/s, 125.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzj4e752o\nStarted\n.\nFinished in 0.001549755 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    645.26 tests/s, 5162.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps_ujnxud\nStarted\n.\nFinished in 0.000792045 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1262.55 tests/s, 10100.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuld1vy7m\nStarted\n.\nFinished in 0.001063129 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    940.62 tests/s, 7524.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv5s8u0dm\nStarted\n.\nFinished in 0.000772147 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1295.09 tests/s, 10360.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdsk316lv\nStarted\n.\nFinished in 0.001003478 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    996.53 tests/s, 7972.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqsk9bgs4\nStarted\n.\nFinished in 0.001034694 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    966.47 tests/s, 7731.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp08xsxb14\nStarted\n.\nFinished in 0.000558637 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1790.07 tests/s, 14320.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  min_index\
    \ = arr.index(min)\n  [min, min_index]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp___h9_q7\nStarted\n.\nFinished in 0.000574748 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1739.89 tests/s, 13919.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzkodyhbd\nStarted\n.\nFinished in 0.001141749 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    875.85 tests/s, 7006.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6citwnsu\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp6citwnsu.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.007468968 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.89 tests/s, 133.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7s2mq_9j\nStarted\n.\nFinished in 0.000578729 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1727.92 tests/s, 13823.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  # your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp37db4cqo\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp37db4cqo.rb:33:in `test_pluck'\n \
    \    30: class TestHumanEval < Test::Unit::TestCase\n     31:   def test_pluck\n\
    \     32:     candidate = method(:pluck)\n  => 33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.008435003 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.55 tests/s, 118.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |e| e.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpriwqbe53\nStarted\n.\nFinished in 0.00110845 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    902.16 tests/s, 7217.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6ql_nk7o\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp6ql_nk7o.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.012992644 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.97 tests/s, 76.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp931xn_js\nStarted\n.\nFinished in 0.000772454 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1294.58 tests/s, 10356.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuw80z1k7\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpuw80z1k7.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.01790085 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.86 tests/s, 55.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo222llfi\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpo222llfi.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.010910327 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.66 tests/s, 91.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4g3xoybd\nStarted\n.\nFinished in 0.001629278 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    613.77 tests/s, 4910.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx0o13zdf\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpx0o13zdf.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.008855617 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.92 tests/s, 112.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm2a_mp6p\nStarted\n.\nFinished in 0.000895289 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1116.96 tests/s, 8935.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn5ktpy79\nStarted\n.\nFinished in 0.00134888 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    741.36 tests/s, 5930.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |e| e.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7ftjtbsj\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp7ftjtbsj.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.011120489 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    89.92 tests/s, 89.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp395i597b\nStarted\n.\nFinished in 0.000900951 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1109.94 tests/s, 8879.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp50uc140t\nStarted\n.\nFinished in 0.001275158 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    784.22 tests/s, 6273.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb0jfz8xs\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpb0jfz8xs.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.013369527 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.80 tests/s, 74.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpah67fe4q\nStarted\n.\nFinished in 0.000620312 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1612.09 tests/s, 12896.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  return [] if evens.empty?\n  evens.min == evens.max ? [evens.min, arr.index(evens.min)]\
    \ : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpndrikavg\nStarted\n.\nFinished in 0.001321884 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    756.50 tests/s, 6051.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm2c8xzha\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpm2c8xzha.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.012074525 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.82 tests/s, 82.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphndvm_i8\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmphndvm_i8.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.009871543 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    101.30 tests/s, 101.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgd73pj0j\nStarted\n.\nFinished in 0.001087115 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    919.87 tests/s, 7358.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp398py04f\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp398py04f.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.009492547 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.35 tests/s, 105.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsqk2gn0g\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpsqk2gn0g.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.010435247 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.83 tests/s, 95.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvn7sxyme\nStarted\n.\nFinished in 0.00066052 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1513.96 tests/s, 12111.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.sort!\n  [evens[0], arr.index(evens[0])]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp24se6olz\nStarted\n.\nFinished in 0.001301042 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    768.61 tests/s, 6148.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm032zv2h\nStarted\n.\nFinished in 0.001292807 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    773.51 tests/s, 6188.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb4674go6\nStarted\n.\nFinished in 0.00056538 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1768.72 tests/s, 14149.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpet_nxo_6\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpet_nxo_6.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.008107079 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.35 tests/s, 123.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2gvsnylq\nStarted\n.\nFinished in 0.001198346 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    834.48 tests/s, 6675.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf988a7qz\nStarted\n.\nFinished in 0.000840462 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1189.82 tests/s, 9518.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjzqiqiqv\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpjzqiqiqv.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.008086378 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.66 tests/s, 123.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyt1xgptc\nStarted\n.\nFinished in 0.000556609 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1796.59 tests/s, 14372.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxwuppp7n\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpxwuppp7n.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.008911462 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.22 tests/s, 112.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  idx = arr.index(min)\n\
    \  [min, idx]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5v2d8cqp\nStarted\n.\nFinished in 0.000562384 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1778.14 tests/s, 14225.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb671qtzi\nStarted\n.\nFinished in 0.000531974 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1879.79 tests/s, 15038.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  # your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx3au50cc\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpx3au50cc.rb:33:in `test_pluck'\n \
    \    30: class TestHumanEval < Test::Unit::TestCase\n     31:   def test_pluck\n\
    \     32:     candidate = method(:pluck)\n  => 33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.008251207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.19 tests/s, 121.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1036e1x7\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp1036e1x7.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.008594006 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    116.36 tests/s, 116.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqbj7o3ty\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpqbj7o3ty.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.006893448 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.07 tests/s, 145.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7yz6q2uh\nStarted\n.\nFinished in 0.000548894 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1821.85 tests/s, 14574.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdy_2lxea\nStarted\n.\nFinished in 0.000565653 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1767.87 tests/s, 14142.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg9b5hsxd\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpg9b5hsxd.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.015457194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    64.69 tests/s, 64.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  return [] if evens.empty?\n  evens.sort!\n  [evens.first, arr.index(evens.first)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi_otno5h\nStarted\n.\nFinished in 0.000538827 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1855.88 tests/s, 14847.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqcvbxq8t\nStarted\n.\nFinished in 0.000493378 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2026.84 tests/s, 16214.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfpahjpoq\nStarted\n.\nFinished in 0.000535699 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1866.72 tests/s, 14933.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt3m87y86\nStarted\n.\nFinished in 0.001010246 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    989.86 tests/s, 7918.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmoegmglk\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpmoegmglk.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.007860623 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.22 tests/s, 127.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfqn51fma\nStarted\n.\nFinished in 0.000517585 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1932.05 tests/s, 15456.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl3r08jdi\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpl3r08jdi.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.006583274 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.90 tests/s, 151.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input:\
    \ [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzpcudb1z\nStarted\n.\nFinished in 0.000486953 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2053.59 tests/s, 16428.69 assertions/s\n"
  exit_code: 0
  status: OK
