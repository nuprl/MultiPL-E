name: HumanEval_60_sum_to_n
language: ruby
results:
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0wb1d2_z\nStarted\n.\nFinished in 0.000351219 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2847.23 tests/s, 14236.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7ppivvic\nStarted\n.\nFinished in 0.000358123 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2792.34 tests/s, 13961.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr9uln14c\nStarted\n.\nFinished in 0.000375075 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2666.13 tests/s, 13330.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  (1..n).inject(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbo4u6zvc\nStarted\n.\nFinished in 0.000439146 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2277.15 tests/s, 11385.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8kojhabc\nStarted\n.\nFinished in 0.000348135 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2872.45 tests/s, 14362.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxjl_gcpy\nStarted\n.\nFinished in 0.00036656 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2728.07 tests/s, 13640.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2fsxs4q7\nStarted\n.\nFinished in 0.000385254 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2595.69 tests/s, 12978.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  (1..n).each do |i|\n\
    \    sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz204m3xz\nStarted\n.\nFinished in 0.000362181 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2761.05 tests/s, 13805.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  (1..n).each do |i|\n\
    \    sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp86rpihce\nStarted\n.\nFinished in 0.000342634 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2918.57 tests/s, 14592.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpibc574jx\nStarted\n.\nFinished in 0.000435709 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2295.11 tests/s, 11475.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0hq42pun\nStarted\n.\nFinished in 0.000364867 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2740.72 tests/s, 13703.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpihsp0cdx\nStarted\n.\nFinished in 0.000365477 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2736.15 tests/s, 13680.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq63s4hqb\nStarted\n.\nFinished in 0.000338686 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2952.59 tests/s, 14762.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  (1..n).each do |i|\n\
    \    sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcgla1pm0\nStarted\n.\nFinished in 0.000400243 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2498.48 tests/s, 12492.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp08kyoyu8\nStarted\n.\nFinished in 0.000378973 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2638.71 tests/s, 13193.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6i1wlwih\nStarted\n.\nFinished in 0.000293383 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3408.51 tests/s, 17042.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0fiyamdv\nStarted\n.\nFinished in 0.000341713 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2926.43 tests/s, 14632.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4c35ef8r\nStarted\n.\nFinished in 0.000339558 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2945.00 tests/s, 14725.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  n * (n + 1) / 2\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp869mmwz5\nStarted\n.\nFinished in 0.000389593 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2566.78 tests/s, 12833.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgmlgkrcn\nStarted\n.\nFinished in 0.000369544 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2706.04 tests/s, 13530.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz0oc110r\nStarted\n.\nFinished in 0.000677424 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1476.18 tests/s, 7380.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsfw1smoi\nStarted\n.\nFinished in 0.00046264 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2161.51 tests/s, 10807.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplg9uxh6m\nStarted\n.\nFinished in 0.0004415 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2265.01 tests/s, 11325.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu4c2pjk5\nStarted\n.\nFinished in 0.000323869 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3087.67 tests/s, 15438.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvm_wdfl_\nStarted\n.\nFinished in 0.000341873 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2925.06 tests/s, 14625.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplqwjwbg6\nStarted\n.\nFinished in 0.000342053 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2923.52 tests/s, 14617.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc0pwfe4v\nStarted\n.\nFinished in 0.000355738 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2811.06 tests/s, 14055.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvwvdm3f2\nStarted\n.\nFinished in 0.000344157 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2905.65 tests/s, 14528.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprz34hdh9\nStarted\n.\nFinished in 0.000352191 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2839.37 tests/s, 14196.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  (1..n).each do |i|\n\
    \    sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdr28364f\nStarted\n.\nFinished in 0.0003617 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2764.72 tests/s, 13823.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  (1..n).each do |num|\n\
    \    sum += num\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyehgw76q\nStarted\n.\nFinished in 0.000332064 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3011.47 tests/s, 15057.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdn8zmwo2\nStarted\n.\nFinished in 0.000346071 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2889.58 tests/s, 14447.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoohcjr60\nStarted\n.\nFinished in 0.00032496 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3077.30 tests/s, 15386.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n + sum_to_n(n-1)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiiudgtmy\nStarted\n.\nFinished in 0.000355609 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2812.08 tests/s, 14060.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo42ttten\nStarted\n.\nFinished in 0.000364236 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2745.47 tests/s, 13727.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_q2x54s9\nStarted\n.\nFinished in 0.000329368 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3036.12 tests/s, 15180.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq7n0wl7z\nStarted\n.\nFinished in 0.000382769 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2612.54 tests/s, 13062.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxqcc9ooi\nStarted\n.\nFinished in 0.000325613 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3071.13 tests/s, 15355.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptx8du6q3\nStarted\n.\nFinished in 0.00038271 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2612.94 tests/s, 13064.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmkw2lqdw\nStarted\n.\nFinished in 0.000362301 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2760.14 tests/s, 13800.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk1et1msb\nStarted\n.\nFinished in 0.000366529 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2728.30 tests/s, 13641.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7ywc2zdb\nStarted\n.\nFinished in 0.000486546 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2055.30 tests/s, 10276.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz6ovjmc9\nStarted\n.\nFinished in 0.000354907 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2817.64 tests/s, 14088.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnbkrg34j\nStarted\n.\nFinished in 0.000434838 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2299.71 tests/s, 11498.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuwz8ue_0\nStarted\n.\nFinished in 0.000460576 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2171.19 tests/s, 10855.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv1lnb7ni\nStarted\n.\nFinished in 0.000319842 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3126.54 tests/s, 15632.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsidd6scp\nStarted\n.\nFinished in 0.000487105 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2052.95 tests/s, 10264.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdw5xscmj\nStarted\n.\nFinished in 0.000472117 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2118.12 tests/s, 10590.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n + sum_to_n(n-1)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuy3892ze\nStarted\n.\nFinished in 0.000360136 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2776.73 tests/s, 13883.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsgx2cti0\nStarted\n.\nFinished in 0.000369765 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2704.42 tests/s, 13522.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7w12s7ff\nStarted\n.\nFinished in 0.000404029 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2475.07 tests/s, 12375.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbibgm771\nStarted\n.\nFinished in 0.000318379 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3140.91 tests/s, 15704.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  (1..n).each do |i|\n\
    \    sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_5w96d2x\nStarted\n.\nFinished in 0.000403418 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2478.82 tests/s, 12394.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzberrwjn\nStarted\n.\nFinished in 0.000352954 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2833.23 tests/s, 14166.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgql0o1ap\nStarted\n.\nFinished in 0.000344638 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2901.60 tests/s, 14507.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7x2t9zub\nStarted\n.\nFinished in 0.000338466 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2954.51 tests/s, 14772.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfg725kn3\nStarted\n.\nFinished in 0.000367851 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2718.49 tests/s, 13592.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpusyzxq6y\nStarted\n.\nFinished in 0.000381317 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2622.49 tests/s, 13112.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6bta47fs\nStarted\n.\nFinished in 0.000342153 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2922.67 tests/s, 14613.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n + sum_to_n(n-1)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp02dirn2x\nStarted\n.\nFinished in 0.000486785 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2054.30 tests/s, 10271.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbgh9dk58\nStarted\n.\nFinished in 0.000302549 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3305.25 tests/s, 16526.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjin4oxx_\nStarted\n.\nFinished in 0.000307138 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3255.87 tests/s, 16279.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  (1..n).inject(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps6nn971j\nStarted\n.\nFinished in 0.000485985 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2057.68 tests/s, 10288.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzlh06dap\nStarted\n.\nFinished in 0.000717499 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1393.73 tests/s, 6968.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdz49bz_h\nStarted\n.\nFinished in 0.000340219 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2939.28 tests/s, 14696.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnbx02fa_\nStarted\n.\nFinished in 0.000398589 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2508.85 tests/s, 12544.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  (1..n).each do |i|\n\
    \    sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpti010wof\nStarted\n.\nFinished in 0.000364826 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2741.03 tests/s, 13705.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprrnct41k\nStarted\n.\nFinished in 0.000384333 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2601.91 tests/s, 13009.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi5iusaqk\nStarted\n.\nFinished in 0.000393019 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2544.41 tests/s, 12722.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxldpq6vc\nStarted\n.\nFinished in 0.000429598 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2327.76 tests/s, 11638.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  # your code here\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp33w_75z_\nStarted\nF\n===============================================================================\n\
    Failure: test_sum_to_n(TestHumanEval)\n/tmp/tmp33w_75z_.rb:19:in `test_sum_to_n'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_sum_to_n\n\
    \     18:     candidate = method(:sum_to_n)\n  => 19:     assert_equal(1, candidate.call(1))\n\
    \     20:     assert_equal(21, candidate.call(6))\n     21:     assert_equal(66,\
    \ candidate.call(11))\n     22:     assert_equal(465, candidate.call(30))\n<1>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005096643 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.21 tests/s, 196.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiehxvz_6\nStarted\n.\nFinished in 0.000391757 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2552.60 tests/s, 12763.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkg7cr157\nStarted\n.\nFinished in 0.000315623 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3168.34 tests/s, 15841.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  (1..n).inject(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqgkmsn5t\nStarted\n.\nFinished in 0.00033025 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3028.01 tests/s, 15140.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnd8je30l\nStarted\n.\nFinished in 0.000339047 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2949.44 tests/s, 14747.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps1l9toux\nStarted\n.\nFinished in 0.000347933 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2874.12 tests/s, 14370.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr9qwhtcn\nStarted\n.\nFinished in 0.000331414 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3017.37 tests/s, 15086.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc6qs8dgb\nStarted\n.\nFinished in 0.000432053 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2314.53 tests/s, 11572.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl7dctqyd\nStarted\n.\nFinished in 0.000333246 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3000.79 tests/s, 15003.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqgo34gpf\nStarted\n.\nFinished in 0.000344668 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2901.34 tests/s, 14506.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpckcaj8na\nStarted\n.\nFinished in 0.000326664 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3061.25 tests/s, 15306.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8a5fadam\nStarted\n.\nFinished in 0.000346902 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2882.66 tests/s, 14413.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_wijmzr1\nStarted\n.\nFinished in 0.000449436 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2225.01 tests/s, 11125.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf6sswubg\nStarted\n.\nFinished in 0.000340981 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2932.71 tests/s, 14663.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqisyqh3e\nStarted\n.\nFinished in 0.000358875 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2786.49 tests/s, 13932.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxbgm7b7d\nStarted\n.\nFinished in 0.000329068 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3038.89 tests/s, 15194.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpeiv3tk78\nStarted\n.\nFinished in 0.000388039 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2577.06 tests/s, 12885.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphkupfwe1\nStarted\n.\nFinished in 0.000327887 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3049.83 tests/s, 15249.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp985z6ebw\nStarted\n.\nFinished in 0.000386987 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2584.07 tests/s, 12920.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp24cwc4i_\nStarted\n.\nFinished in 0.000376217 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2658.04 tests/s, 13290.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxfc0csd1\nStarted\n.\nFinished in 0.000428084 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2335.99 tests/s, 11679.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n + sum_to_n(n-1)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpujgjcd7e\nStarted\n.\nFinished in 0.000438385 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2281.10 tests/s, 11405.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprccw2bm0\nStarted\n.\nFinished in 0.000368463 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2713.98 tests/s, 13569.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpheevjhc1\nStarted\n.\nFinished in 0.000312477 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3200.24 tests/s, 16001.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpllzb1fxs\nStarted\n.\nFinished in 0.000403629 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2477.52 tests/s, 12387.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n + sum_to_n(n-1)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd784afgw\nStarted\n.\nFinished in 0.000371809 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2689.55 tests/s, 13447.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp86imkv8i\nStarted\n.\nFinished in 0.000334408 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2990.36 tests/s, 14951.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjnzrj05f\nStarted\n.\nFinished in 0.000327005 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3058.06 tests/s, 15290.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp891clojv\nStarted\n.\nFinished in 0.000352673 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2835.49 tests/s, 14177.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgnnfuqqx\nStarted\n.\nFinished in 0.000344909 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2899.32 tests/s, 14496.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  (1..n).each do |i|\n\
    \    sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1y4u_85d\nStarted\n.\nFinished in 0.000389332 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2568.50 tests/s, 12842.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  (1..n).each do |i|\n\
    \    sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxmfeat_s\nStarted\n.\nFinished in 0.000428726 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2332.49 tests/s, 11662.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  # Your code here\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuvpy018y\nStarted\nF\n===============================================================================\n\
    Failure: test_sum_to_n(TestHumanEval)\n/tmp/tmpuvpy018y.rb:19:in `test_sum_to_n'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_sum_to_n\n\
    \     18:     candidate = method(:sum_to_n)\n  => 19:     assert_equal(1, candidate.call(1))\n\
    \     20:     assert_equal(21, candidate.call(6))\n     21:     assert_equal(66,\
    \ candidate.call(11))\n     22:     assert_equal(465, candidate.call(30))\n<1>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005285037 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.21 tests/s, 189.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0474fu4q\nStarted\n.\nFinished in 0.000332215 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3010.10 tests/s, 15050.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvc20purz\nStarted\n.\nFinished in 0.00032995 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3030.76 tests/s, 15153.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpah61tybu\nStarted\n.\nFinished in 0.000377269 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2650.63 tests/s, 13253.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n + sum_to_n(n-1)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsvo6o2zf\nStarted\n.\nFinished in 0.000346502 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2885.99 tests/s, 14429.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpensuovia\nStarted\n.\nFinished in 0.000365607 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2735.18 tests/s, 13675.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  return (n*(n+1))/2\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb3zr7ckv\nStarted\n.\nFinished in 0.000400132 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2499.18 tests/s, 12495.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprh_t1au6\nStarted\n.\nFinished in 0.00032931 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3036.65 tests/s, 15183.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpofhkjti6\nStarted\n.\nFinished in 0.000347253 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2879.74 tests/s, 14398.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgsbbrje7\nStarted\n.\nFinished in 0.000364696 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2742.01 tests/s, 13710.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0b4f_i2a\nStarted\n.\nFinished in 0.000341081 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2931.85 tests/s, 14659.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsosuk2ct\nStarted\n.\nFinished in 0.000381367 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2622.15 tests/s, 13110.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n + sum_to_n(n-1)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf_cs29wb\nStarted\n.\nFinished in 0.000353505 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2828.81 tests/s, 14144.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9pemp4g3\nStarted\n.\nFinished in 0.000316815 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3156.42 tests/s, 15782.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp385g4xfd\nStarted\n.\nFinished in 0.000327456 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3053.85 tests/s, 15269.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4t90gis6\nStarted\n.\nFinished in 0.000386227 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2589.15 tests/s, 12945.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyiy60ngl\nStarted\n.\nFinished in 0.000420451 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2378.40 tests/s, 11891.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa1249flx\nStarted\n.\nFinished in 0.000456117 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2192.42 tests/s, 10962.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  (1..n).each do |i|\n\
    \    sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd_r6cyiz\nStarted\n.\nFinished in 0.000353364 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2829.94 tests/s, 14149.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy6u_3x44\nStarted\n.\nFinished in 0.000473501 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2111.93 tests/s, 10559.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6lf9ynk6\nStarted\n.\nFinished in 0.000321504 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3110.38 tests/s, 15551.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwvh1gl8h\nStarted\n.\nFinished in 0.000379203 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2637.11 tests/s, 13185.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  n*(n+1)/2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate\
    \ = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(6))\n    assert_equal(66, candidate.call(11))\n    assert_equal(465,\
    \ candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7ro01eum\nStarted\n.\nFinished in 0.000437503 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2285.70 tests/s, 11428.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnzu8dncr\nStarted\n.\nFinished in 0.000346682 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2884.49 tests/s, 14422.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpptf_yl22\nStarted\n.\nFinished in 0.000369295 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2707.86 tests/s, 13539.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1yoe54cx\nStarted\n.\nFinished in 0.000347493 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2877.76 tests/s, 14388.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n + sum_to_n(n-1)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu_f9cmvg\nStarted\n.\nFinished in 0.000356541 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2804.73 tests/s, 14023.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyip9heom\nStarted\n.\nFinished in 0.000361339 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2767.48 tests/s, 13837.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5ol9hdfe\nStarted\n.\nFinished in 0.000467849 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2137.44 tests/s, 10687.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  (1..n).each do |i|\n\
    \    sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe75hkmw5\nStarted\n.\nFinished in 0.000394933 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2532.08 tests/s, 12660.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn2vt2y37\nStarted\n.\nFinished in 0.000352794 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2834.52 tests/s, 14172.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqgmzi5ue\nStarted\n.\nFinished in 0.000366549 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2728.15 tests/s, 13640.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1bydugde\nStarted\n.\nFinished in 0.000371118 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2694.56 tests/s, 13472.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph5rvl2my\nStarted\n.\nFinished in 0.000442381 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2260.49 tests/s, 11302.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp20lul9vp\nStarted\n.\nFinished in 0.000354297 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2822.49 tests/s, 14112.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  (1..n).each do |i|\n\
    \    sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph82lc35j\nStarted\n.\nFinished in 0.000362692 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2757.16 tests/s, 13785.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq37mtei1\nStarted\n.\nFinished in 0.000434156 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2303.32 tests/s, 11516.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n + sum_to_n(n-1)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1q78nmm1\nStarted\n.\nFinished in 0.000381047 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2624.35 tests/s, 13121.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptqycgsf_\nStarted\n.\nFinished in 0.000546338 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1830.37 tests/s, 9151.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3m2mt_wm\nStarted\n.\nFinished in 0.00038794 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2577.72 tests/s, 12888.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyh942e8c\nStarted\n.\nFinished in 0.000369906 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2703.39 tests/s, 13516.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxrs07oal\nStarted\n.\nFinished in 0.0003613 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2767.78 tests/s, 13838.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxpwsf4w5\nStarted\n.\nFinished in 0.000394923 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2532.14 tests/s, 12660.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8jh7hx82\nStarted\n.\nFinished in 0.000337215 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2965.47 tests/s, 14827.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppf0s9dyy\nStarted\n.\nFinished in 0.000476507 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2098.61 tests/s, 10493.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprk3lo7rj\nStarted\n.\nFinished in 0.000441269 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2266.19 tests/s, 11330.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr0a1327q\nStarted\n.\nFinished in 0.000358363 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2790.47 tests/s, 13952.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa686oce8\nStarted\n.\nFinished in 0.000338325 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2955.74 tests/s, 14778.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  (1..n).each do |i|\n\
    \    sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg56u97v0\nStarted\n.\nFinished in 0.000344578 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2902.10 tests/s, 14510.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  (1..n).inject(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgnz4x5w6\nStarted\n.\nFinished in 0.000370607 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2698.28 tests/s, 13491.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc32v2puz\nStarted\n.\nFinished in 0.000354758 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2818.82 tests/s, 14094.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8n657uvr\nStarted\n.\nFinished in 0.00034048 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2937.03 tests/s, 14685.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  (1..n).each do |i|\n\
    \    sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp39uxb7p\nStarted\n.\nFinished in 0.000342544 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2919.33 tests/s, 14596.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  (1..n).inject(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnd7mcl5j\nStarted\n.\nFinished in 0.000338236 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2956.52 tests/s, 14782.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  (1..n).each do |i|\n\
    \    sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpom6uqsxj\nStarted\n.\nFinished in 0.000350789 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2850.72 tests/s, 14253.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo4ge5qxz\nStarted\n.\nFinished in 0.000385584 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2593.47 tests/s, 12967.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp3_ebfqf\nStarted\n.\nFinished in 0.000444998 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2247.20 tests/s, 11236.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv9nva0js\nStarted\n.\nFinished in 0.000367271 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2722.79 tests/s, 13613.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  (1..n).each do |i|\n\
    \    sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwqroxwm4\nStarted\n.\nFinished in 0.000391496 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2554.30 tests/s, 12771.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n + sum_to_n(n-1)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxr8a8nhm\nStarted\n.\nFinished in 0.000332725 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3005.49 tests/s, 15027.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp98ka7ayx\nStarted\n.\nFinished in 0.000392678 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2546.62 tests/s, 12733.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu_vrheiw\nStarted\n.\nFinished in 0.000331372 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3017.76 tests/s, 15088.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7_vfc04h\nStarted\n.\nFinished in 0.000326945 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3058.62 tests/s, 15293.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb4qm_x3n\nStarted\n.\nFinished in 0.000343175 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2913.97 tests/s, 14569.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfe3or77_\nStarted\n.\nFinished in 0.000358403 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2790.16 tests/s, 13950.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4dfij2j8\nStarted\n.\nFinished in 0.000347975 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2873.77 tests/s, 14368.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplzv1_wss\nStarted\n.\nFinished in 0.000362592 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2757.92 tests/s, 13789.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp15z5asia\nStarted\n.\nFinished in 0.000368362 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2714.72 tests/s, 13573.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmyz4ngqo\nStarted\n.\nFinished in 0.00031325 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3192.34 tests/s, 15961.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  n * (n + 1) / 2\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9ej7xejk\nStarted\n.\nFinished in 0.000389613 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2566.65 tests/s, 12833.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz6aiogvz\nStarted\n.\nFinished in 0.000353004 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2832.83 tests/s, 14164.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  (1..n).each do |i|\n\
    \    sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp87f79t62\nStarted\n.\nFinished in 0.000345278 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2896.22 tests/s, 14481.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7m9ilntc\nStarted\n.\nFinished in 0.000366228 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2730.54 tests/s, 13652.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  (1..n).each do |i|\n\
    \    sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpge66qhii\nStarted\n.\nFinished in 0.000340491 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2936.94 tests/s, 14684.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  (1..n).each do |i|\n\
    \    sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwchiux2e\nStarted\n.\nFinished in 0.000331393 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3017.57 tests/s, 15087.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptd9j33dc\nStarted\n.\nFinished in 0.000497535 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2009.91 tests/s, 10049.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbu9yqy3i\nStarted\n.\nFinished in 0.000332285 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3009.46 tests/s, 15047.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfb3y02rf\nStarted\n.\nFinished in 0.000334329 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2991.07 tests/s, 14955.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  (1..n).inject(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprm76x147\nStarted\n.\nFinished in 0.000360097 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2777.03 tests/s, 13885.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpix4tlt_4\nStarted\n.\nFinished in 0.000418127 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2391.62 tests/s, 11958.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxar6ftuo\nStarted\n.\nFinished in 0.000337355 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2964.24 tests/s, 14821.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph6101liv\nStarted\n.\nFinished in 0.000330432 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3026.34 tests/s, 15131.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz1bkb5ql\nStarted\n.\nFinished in 0.000318087 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3143.79 tests/s, 15718.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt5opog54\nStarted\n.\nFinished in 0.000339719 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2943.61 tests/s, 14718.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n + sum_to_n(n-1)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuaqg8c6x\nStarted\n.\nFinished in 0.000342515 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2919.58 tests/s, 14597.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplgkq160u\nStarted\n.\nFinished in 0.000389302 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2568.70 tests/s, 12843.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprl4yndxe\nStarted\n.\nFinished in 0.00037211 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2687.38 tests/s, 13436.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpatcmj2ss\nStarted\n.\nFinished in 0.000332956 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3003.40 tests/s, 15017.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  (1..n).each do |i|\n\
    \    sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsxom5u86\nStarted\n.\nFinished in 0.000295215 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3387.36 tests/s, 16936.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  (1..n).each do |i|\n\
    \    sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk6kjbg5i\nStarted\n.\nFinished in 0.000337315 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2964.59 tests/s, 14822.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  (1..n).each do |i|\n\
    \    sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfba9d5z6\nStarted\n.\nFinished in 0.00033539 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2981.60 tests/s, 14908.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfu893sgp\nStarted\n.\nFinished in 0.00038807 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2576.85 tests/s, 12884.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp70n9pz6y\nStarted\n.\nFinished in 0.000355328 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2814.30 tests/s, 14071.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0wrafs51\nStarted\n.\nFinished in 0.000380355 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2629.12 tests/s, 13145.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkqwl_id4\nStarted\n.\nFinished in 0.000336994 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2967.41 tests/s, 14837.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  (1..n).inject(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps2uz45cc\nStarted\n.\nFinished in 0.000288632 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3464.62 tests/s, 17323.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  # Your code here\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp5e4qjuv\nStarted\nF\n===============================================================================\n\
    Failure: test_sum_to_n(TestHumanEval)\n/tmp/tmpp5e4qjuv.rb:19:in `test_sum_to_n'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_sum_to_n\n\
    \     18:     candidate = method(:sum_to_n)\n  => 19:     assert_equal(1, candidate.call(1))\n\
    \     20:     assert_equal(21, candidate.call(6))\n     21:     assert_equal(66,\
    \ candidate.call(11))\n     22:     assert_equal(465, candidate.call(30))\n<1>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004357704 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    229.48 tests/s, 229.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
    # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
    # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuw4e1d6i\nStarted\n.\nFinished in 0.000314391 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3180.75 tests/s, 15903.76 assertions/s\n"
  exit_code: 0
  status: OK
