name: HumanEval_61_correct_bracketing
language: ruby
prompt: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
  \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\")\n\
  # False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"(()())\"\
  )\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
  \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
  ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
  \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"\
  ))\n    assert_equal(false, candidate.call(\"((()())))\"))\n    assert_equal(false,\
  \ candidate.call(\")(()\"))\n    assert_equal(false, candidate.call(\"(\"))\n  \
  \  assert_equal(false, candidate.call(\"((((\"))\n    assert_equal(false, candidate.call(\"\
  )\"))\n    assert_equal(false, candidate.call(\"(()\"))\n    assert_equal(false,\
  \ candidate.call(\"()()(()())())(()\"))\n    assert_equal(false, candidate.call(\"\
  ()()(()())()))()\"))\n  end\nend\n"
completions: ["  # your code here\nend", "  # TODO: implement this function\nend",
  "  # TODO: implement this function\nend", "  # YOUR CODE HERE\nend", "  # TODO:\
    \ implement this function\nend", "    count = 0\n    brackets.each_char do |char|\n\
    \        if char == \"(\"\n            count += 1\n        elsif char == \")\"\
    \n            count -= 1\n        end\n        if count < 0\n            return\
    \ false\n        end\n    end\n    return count == 0\nend", "  # your code here\n\
    end", "  # TODO: implement this function\nend", "  # your code here\nend", " \
    \ # your code here\nend", "  # YOUR CODE HERE\nend", "  # your code here\nend",
  "  # your code here\nend", "  # YOUR CODE HERE\nend", "  # your code here\nend",
  "  # TODO: implement this function\nend", "  # your code here\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  # your code here\nend", "  # YOUR\
    \ CODE HERE\nend", "  # your code here\nend", "  # your code here\nend", "  #\
    \ your code here\nend", "  # your code here\nend", "  # YOUR CODE HERE\nend",
  "  # TODO: implement this function\nend", "  stack = []\n  brackets.each_char do\
    \ |char|\n    if char == \"(\"\n      stack.push(char)\n    elsif char == \")\"\
    \n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  # YOUR CODE HERE\nend", " \
    \ # TODO: implement this function\nend", "  # your code here\nend", "  # your\
    \ code here\nend", "  # your code here\nend", "  # your code here\n  stack = []\n\
    \  brackets.each_char do |char|\n    if char == \"(\"\n      stack.push(char)\n\
    \    elsif char == \")\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # TODO:\
    \ implement this function\nend", "  # YOUR CODE HERE\nend", "  # YOUR CODE HERE\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"(\"\n  \
    \    stack.push(char)\n    elsif char == \")\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\n\
    end", "  # your code here\nend", "  # TODO: Implement this function\n  # Hint:\
    \ Use a stack\nend", "  stack = []\n  brackets.each_char do |c|\n    if c == '('\n\
    \      stack.push(c)\n    elsif c == ')'\n      if stack.empty?\n        return\
    \ false\n      else\n        stack.pop\n      end\n    end\n  end\n  return stack.empty?\n\
    end", "  # YOUR CODE HERE\nend", "  # YOUR CODE HERE\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # TODO: implement this function\nend", " \
    \ count = 0\n  brackets.each_char do |char|\n    count += 1 if char == \"(\"\n\
    \    count -= 1 if char == \")\"\n    return false if count < 0\n  end\n  count\
    \ == 0\nend", "  # your code here\nend", "  stack = []\n  brackets.each_char do\
    \ |char|\n    if char == \"(\"\n      stack.push(char)\n    elsif char == \")\"\
    \n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  open_brackets = 0\n\
    \  brackets.each_char do |char|\n    if char == \"(\"\n      open_brackets +=\
    \ 1\n    elsif char == \")\"\n      open_brackets -= 1\n    end\n    if open_brackets\
    \ < 0\n      return false\n    end\n  end\n  return open_brackets == 0\nend",
  "  # your code here\nend", "  stack = []\n  brackets.each_char do |char|\n    if\
    \ char == \"(\"\n      stack.push(char)\n    elsif char == \")\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  count = 0\n  brackets.each_char do |char|\n    if char\
    \ == \"(\"\n      count += 1\n    elsif char == \")\"\n      count -= 1\n    end\n\
    \    return false if count < 0\n  end\n  count == 0\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # TODO: implement this function\nend", " \
    \ # YOUR CODE HERE\nend", "  # set a counter to 0\n  # iterate through the string\n\
    \  # if the character is an opening bracket, add 1 to the counter\n  # if the\
    \ character is a closing bracket, subtract 1 from the counter\n  # if the counter\
    \ is ever negative, return False\n  # return True if the counter is 0 at the end\n\
    \  counter = 0\n  brackets.each_char do |char|\n    if char == \"(\"\n      counter\
    \ += 1\n    elsif char == \")\"\n      counter -= 1\n    end\n    return false\
    \ if counter < 0\n  end\n  counter == 0\nend", "  # YOUR CODE HERE\nend", "  #\
    \ TODO: implement this function\nend", "  open_brackets = 0\n  brackets.each_char\
    \ do |char|\n    if char == \"(\"\n      open_brackets += 1\n    elsif char ==\
    \ \")\"\n      open_brackets -= 1\n    end\n    return false if open_brackets\
    \ < 0\n  end\n  return open_brackets == 0\nend", "  # your code here\nend", " \
    \ # TODO: implement this function\nend", "  # YOUR CODE HERE\nend", "  # TODO:\
    \ implement this function\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # YOUR CODE HERE\nend", "  # your code here\nend", "    # your code here\n\
    end", "  # TODO: implement this function\nend", "  # YOUR CODE HERE\nend", " \
    \ # your code here\nend", "  # YOUR CODE HERE\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # YOUR CODE HERE\nend", "  # TODO: implement this function\nend", "  # your code\
    \ here\nend", "    # YOUR CODE HERE\n    count = 0\n    brackets.each_char do\
    \ |char|\n        if char == \"(\"\n            count += 1\n        elsif char\
    \ == \")\"\n            count -= 1\n        end\n        if count < 0\n      \
    \      return false\n        end\n    end\n    if count == 0\n        return true\n\
    \    else\n        return false\n    end\nend", "  # your code here\nend", " \
    \ # TODO: implement this function\nend", "  # TODO: implement this function\n\
    end", "  # TODO: implement this function\nend", "  # your code here\nend", " \
    \ # TODO: implement me\nend", "  # your code here\nend", "  # TODO: implement\
    \ this function\nend", "  # TODO: implement this function\nend", "    count =\
    \ 0\n    brackets.each_char do |char|\n        if char == \"(\"\n            count\
    \ += 1\n        elsif char == \")\"\n            count -= 1\n        end\n   \
    \     if count < 0\n            return false\n        end\n    end\n    return\
    \ count == 0\nend", "    # if brackets.length == 0\n    #     return True\n  \
    \  # elsif brackets.length == 1\n    #     return False\n    # end\n    # if brackets[0]\
    \ == \"(\"\n    #     if brackets[-1] == \")\"\n    #         return correct_bracketing(brackets[1..-2])\n\
    \    #     else\n    #         return False\n    #     end\n    # else\n    #\
    \     return False\n    # end\n    # if brackets.length == 0\n    #     return\
    \ True\n    # elsif brackets.length == 1\n    #     return False\n    # end\n\
    \    # if brackets[0] == \"(\"\n    #     if brackets[-1] == \")\"\n    #    \
    \     return correct_bracketing(brackets[1..-2])\n    #     else\n    #      \
    \   return False\n    #     end\n    # else\n    #     return False\n    # end\n\
    \    # if brackets.length == 0\n    #     return True\n    # elsif brackets.length\
    \ == 1\n    #     return False\n    # end\n    # if brackets[0] == \"(\"\n   \
    \ #     if brackets[-1] == \")\"\n    #         return correct_bracketing(brackets[1..-2])\n\
    \    #     else\n    #         return False\n    #     end\n    # else\n    #\
    \     return False\n    # end\n    # if brackets.length == 0\n    #     return\
    \ True\n    # elsif brackets.length == 1\n    #     return False\n    # end\n\
    \    # if brackets[0] == \"(\"\n    #     if brackets[-1] == \")\"\n    #    \
    \     return correct_bracketing(brackets[1..-2])\n    #     else\n    #      \
    \   return False\n    #     end\n    # else\n    #     return False\n    # end\n\
    \    # if brackets.length == 0\n    #     return True\n    # elsif brackets.length\
    \ == 1\n    #     return False\n    # end\n    # if brackets[0] == \"(\"\n   \
    \ #     if brackets[-1] == \")\"\n    #         return correct_bracketing(brackets[1..",
  "    # YOUR CODE HERE\nend", "  stack = []\n  brackets.each_char do |char|\n   \
    \ if char == \"(\"\n      stack.push(char)\n    elsif char == \")\"\n      if\
    \ stack.empty?\n        return false\n      else\n        stack.pop\n      end\n\
    \    end\n  end\n  stack.empty?\nend", "  # YOUR CODE HERE\nend", "  # your code\
    \ here\nend", "  stack = []\n  brackets.each_char do |char|\n    if char == \"\
    (\"\n      stack.push(char)\n    elsif char == \")\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  # TODO: implement me\nend", "  # TODO: implement\
    \ this function\nend", "  # TODO: implement me\nend", "  # YOUR CODE HERE\nend",
  "  # TODO: implement this function\nend", "  # your code here\nend", "  # TODO:\
    \ implement this function\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # YOUR CODE HERE\nend", "    # YOUR CODE HERE\nend", "  # TODO: implement\
    \ this function\nend", "  # TODO: implement me\nend", "  # your code here\nend",
  "  # your code here\nend", "    # YOUR CODE HERE\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"(\"\n      stack.push(char)\n    elsif char == \"\
    )\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  # your code here\n\
    end", "  # TODO: implement this function\nend", "  # TODO: implement this function\n\
    end", "  # YOUR CODE HERE\nend", "  # YOUR CODE HERE\nend", "  # your code here\n\
    end", "  # YOUR CODE HERE\nend", "  # your code here\nend", "  # your code here\n\
    end", "    # YOUR CODE HERE\nend", "  # YOUR CODE HERE\nend", "  # TODO: implement\
    \ this function\nend", "  return false if brackets[0] == \")\"\n  return false\
    \ if brackets[-1] == \"(\"\n  return false if brackets.count(\"(\") != brackets.count(\"\
    )\")\n  return true\nend", "  # your code here\nend", "  # your code here\nend",
  "  # YOUR CODE HERE\nend", "  count = 0\n  brackets.each_char do |char|\n    count\
    \ += 1 if char == \"(\"\n    count -= 1 if char == \")\"\n    return false if\
    \ count < 0\n  end\n  count == 0\nend", "  # TODO: implement this\nend", "  #\
    \ YOUR CODE HERE\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # YOUR CODE HERE\nend",
  "  open = 0\n  brackets.each_char do |char|\n    if char == \"(\"\n      open +=\
    \ 1\n    elsif char == \")\"\n      open -= 1\n    end\n    return false if open\
    \ < 0\n  end\n  open == 0\nend", "  # your code here\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"(\"\n      stack.push(char)\n    elsif char == \"\
    )\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  # your code here\nend", " \
    \ # your code here\nend", "  return false if brackets[0] == \")\"\n  return false\
    \ if brackets[-1] == \"(\"\n  return false if brackets.count(\"(\") != brackets.count(\"\
    )\")\n  return true\nend", "  # YOUR CODE HERE\nend", "  # your code here\nend",
  "  # TODO: implement this function\nend", "  # TODO: implement me!\nend", "  # YOUR\
    \ CODE HERE\nend", "  # YOUR CODE HERE\nend", "  # your code here\nend", "  #\
    \ your code here\nend", "  # TODO: implement this function\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  # your code here\nend", "  # YOUR\
    \ CODE HERE\nend", "  # TODO: implement this function\nend", "  # your code here\n\
    end", "  # YOUR CODE HERE\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # YOUR CODE HERE\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # YOUR CODE HERE\nend", "  # your code here\nend", "  # TODO: implement\
    \ this function\nend", "  # your code here\nend", "  return false if brackets.length\
    \ == 1\n  return false if brackets[0] == \")\"\n  return false if brackets[-1]\
    \ == \"(\"\n  return false if brackets.count(\"(\") != brackets.count(\")\")\n\
    \  return true\nend", "  # your code here\nend", "  # your code here\nend", " \
    \ # TODO: implement this function\nend", "    # YOUR CODE HERE\n    count = 0\n\
    \    brackets.each_char do |char|\n        if char == \"(\"\n            count\
    \ += 1\n        elsif char == \")\"\n            count -= 1\n        end\n   \
    \     if count < 0\n            return false\n        end\n    end\n    if count\
    \ == 0\n        return true\n    else\n        return false\n    end\nend", " \
    \ # TODO: implement this function\nend", "  # TODO: implement me\nend", "  # YOUR\
    \ CODE HERE\nend", "    # YOUR CODE HERE\n    stack = []\n    brackets.each_char\
    \ do |char|\n        if char == \"(\"\n            stack.push(char)\n        elsif\
    \ char == \")\"\n            if stack.length == 0\n                return false\n\
    \            else\n                stack.pop\n            end\n        end\n \
    \   end\n    return stack.length == 0\nend", "  # YOUR CODE HERE\nend", "  # your\
    \ code here\nend", "  # your code here\nend", "  # your code here\nend", "  #\
    \ TODO\nend", "  # your code here\nend", "  stack = []\n  brackets.each_char do\
    \ |char|\n    if char == \"(\"\n      stack.push(char)\n    elsif char == \")\"\
    \n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # TODO\nend", "  return false if brackets.length\
    \ == 1\n  stack = []\n  brackets.each_char do |char|\n    if char == \"(\"\n \
    \     stack.push(char)\n    else\n      if stack.empty?\n        return false\n\
    \      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend",
  "  # your code here\nend", "  # YOUR CODE HERE\nend", "  # your code here\nend",
  "  # TODO: implement this function\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
