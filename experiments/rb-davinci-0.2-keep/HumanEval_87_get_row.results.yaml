name: HumanEval_87_get_row
language: ruby
results:
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |col, col_index|\n      result << [row_index, col_index] if col == x\n  \
    \  end\n  end\n  result.sort_by { |row, col| [row, -col] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyz2n9xj3\nStarted\n.\nFinished in 0.000897799 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1113.84 tests/s, 6683.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |el, j|\n\
    \      [i, j] if el == x\n    end\n  end.flatten(1).compact.sort_by { |i, j| [i,\
    \ -j] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6bxo_d2t\nStarted\n.\nFinished in 0.000995917 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1004.10 tests/s, 6024.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbqpvp_g6\nStarted\n.\nFinished in 0.001012394 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    987.76 tests/s, 5926.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |column, column_index|\n      [row_index, column_index] if column == x\n   \
    \ end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8qz_3qxl\nStarted\n.\nFinished in 0.001056056 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    946.92 tests/s, 5681.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpswq3pwrp\nStarted\n.\nFinished in 0.00118342 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    845.01 tests/s, 5070.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |x| [x[0], -x[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3xsyxwim\nStarted\n.\nFinished in 0.000902979 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1107.45 tests/s, 6644.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by do\
    \ |elem|\n    [elem[0], -elem[1]]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7oc6v71k\nStarted\n.\nFinished in 0.000755416 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1323.77 tests/s, 7942.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwwrz8dcr\nStarted\nF\n===============================================================================\n\
    Failure: test_get_row(TestHumanEval)\n/tmp/tmpwwrz8dcr.rb:24:in `test_get_row'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_get_row\n\
    \     23:     candidate = method(:get_row)\n  => 24:     assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     25:     assert_equal([[0, 1], [1,\
    \ 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6]], 2))\n     26:     assert_equal([[0, 0], [1, 0], [2, 1],\
    \ [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     27: \
    \    assert_equal([], candidate.call([], 1))\n<[[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007428245 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.62 tests/s, 134.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |col, j|\n\
    \      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by { |x, y|\
    \ [x, -y] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdf527uw3\nStarted\n.\nFinished in 0.000778853 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1283.94 tests/s, 7703.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |col, col_index|\n      result << [row_index, col_index] if col == x\n  \
    \  end\n  end\n  result.sort_by { |row, col| [row, -col] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph57ku9tc\nStarted\n.\nFinished in 0.001170516 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    854.32 tests/s, 5125.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |col, col_index|\n      [row_index, col_index] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzrrxvw4m\nStarted\n.\nFinished in 0.001117251 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    895.05 tests/s, 5370.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |a,\
    \ b| [a, -b] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa01apj9f\nStarted\n.\nFinished in 0.00083574 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1196.54 tests/s, 7179.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpimthwmek\nStarted\n.\nFinished in 0.0010646 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    939.32 tests/s, 5635.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm0bb62bf\nStarted\n.\nFinished in 0.000676073 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1479.13 tests/s, 8874.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgrh302ef\nStarted\n.\nFinished in 0.001178135 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    848.80 tests/s, 5092.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_yynodis\nStarted\n.\nFinished in 0.001175526 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    850.68 tests/s, 5104.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |a,\
    \ b| [a, -b] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvg8zkdag\nStarted\n.\nFinished in 0.002011856 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    497.05 tests/s, 2982.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |x| [x[0], -x[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyt122wd1\nStarted\n.\nFinished in 0.001005364 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    994.66 tests/s, 5967.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, row_index|\n    row.each_with_index.map { |column,\
    \ column_index|\n      [row_index, column_index] if column == x\n    }\n  }.flatten(1).compact.sort_by\
    \ { |row, column| [row, -column] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbcc11j9w\nStarted\n.\nFinished in 0.00106314 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    940.61 tests/s, 5643.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpblw_xrcg\nStarted\n.\nFinished in 0.000773798 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1292.33 tests/s, 7753.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpto3hj1w_\nStarted\n.\nFinished in 0.001056402 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    946.61 tests/s, 5679.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6jj2j6ye\nStarted\n.\nFinished in 0.000870272 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1149.07 tests/s, 6894.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i|\n    row.each_with_index.map { |e, j|\n\
    \      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0], [1,\
    \ 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3,\
    \ 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0],\
    \ [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3,\
    \ 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7ijh4lcu\nStarted\n.\nFinished in 0.001112167 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    899.15 tests/s, 5394.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |el, j|\n      result << [i, j] if el == x\n    end\n  end\n  result.sort_by\
    \ { |el| [el[0], -el[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptzrn94rl\nStarted\n.\nFinished in 0.000781691 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1279.28 tests/s, 7675.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmdok0lix\nStarted\n.\nFinished in 0.000840349 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1189.98 tests/s, 7139.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |col, j|\n\
    \      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by { |x, y|\
    \ [x, -y] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjmacjgr1\nStarted\n.\nFinished in 0.001108491 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    902.13 tests/s, 5412.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |item, item_index|\n      [row_index, item_index] if item == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, _| row }.map do |row, item|\n    [row, item].sort_by { |_, item| -item\
    \ }\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp730vgfgl\nStarted\nE\n===============================================================================\n\
    Error: test_get_row(TestHumanEval): NoMethodError: undefined method `-@' for nil:NilClass\n\
    /tmp/tmp730vgfgl.rb:23:in `block (2 levels) in get_row'\n/tmp/tmp730vgfgl.rb:23:in\
    \ `each'\n/tmp/tmp730vgfgl.rb:23:in `sort_by'\n/tmp/tmp730vgfgl.rb:23:in `block\
    \ in get_row'\n/tmp/tmp730vgfgl.rb:22:in `map'\n/tmp/tmp730vgfgl.rb:22:in `get_row'\n\
    /tmp/tmp730vgfgl.rb:30:in `call'\n/tmp/tmp730vgfgl.rb:30:in `test_get_row'\n \
    \    27: class TestHumanEval < Test::Unit::TestCase\n     28:   def test_get_row\n\
    \     29:     candidate = method(:get_row)\n  => 30:     assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     31:     assert_equal([[0, 1], [1,\
    \ 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6]], 2))\n     32:     assert_equal([[0, 0], [1, 0], [2, 1],\
    \ [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     33: \
    \    assert_equal([], candidate.call([], 1))\n===============================================================================\n\
    \nFinished in 0.002931188 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    341.16 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpaaz2g_kk\nStarted\n.\nFinished in 0.000642121 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1557.34 tests/s, 9344.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpahlmx_ai\nStarted\n.\nFinished in 0.00069098 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1447.22 tests/s, 8683.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |a, b| [a, -b] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw1p2mcde\nStarted\n.\nFinished in 0.000594071 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1683.30 tests/s, 10099.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |item, item_index|\n      [row_index, item_index] if item == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, _| row }.map do |row, item|\n    [row, item].sort.reverse\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn5rnykiu\nStarted\nF\n===============================================================================\n\
    Failure: test_get_row(TestHumanEval)\n/tmp/tmpn5rnykiu.rb:30:in `test_get_row'\n\
    \     27: class TestHumanEval < Test::Unit::TestCase\n     28:   def test_get_row\n\
    \     29:     candidate = method(:get_row)\n  => 30:     assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     31:     assert_equal([[0, 1], [1,\
    \ 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6]], 2))\n     32:     assert_equal([[0, 0], [1, 0], [2, 1],\
    \ [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     33: \
    \    assert_equal([], candidate.call([], 1))\n<[[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]> expected but was\n<[[0, 0], [1, 0], [4, 1], [2, 0], [5, 2]]>\n\ndiff:\n\
    ? [[0, 0], [1, 4], [1, 0],         [2, 5], [   2, 0]]\n?                     \
    \     [4, 1],     0    5,       \n===============================================================================\n\
    \nFinished in 0.018063512 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.36 tests/s, 55.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |a,\
    \ b| [a, -b] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqhj3yl62\nStarted\n.\nFinished in 0.000954908 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1047.22 tests/s, 6283.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5ulmj3dl\nStarted\n.\nFinished in 0.001833668 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    545.35 tests/s, 3272.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzr2i6nuu\nStarted\n.\nFinished in 0.001464883 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    682.65 tests/s, 4095.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8a588pn8\nStarted\n.\nFinished in 0.00060701 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1647.42 tests/s, 9884.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm_aa500q\nStarted\n.\nFinished in 0.000876335 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1141.12 tests/s, 6846.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm0ewtbvt\nStarted\n.\nFinished in 0.001013095 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    987.07 tests/s, 5922.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |i, j| [i, -j] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp00xs2__r\nStarted\n.\nFinished in 0.000779922 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1282.18 tests/s, 7693.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplqxdopwc\nStarted\n.\nFinished in 0.000709225 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1409.99 tests/s, 8459.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |i, j| [i, -j] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8u9wjc76\nStarted\n.\nFinished in 0.001140167 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    877.06 tests/s, 5262.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn7bgyhua\nStarted\n.\nFinished in 0.001201651 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    832.19 tests/s, 4993.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |element, column_index|\n      result << [row_index, column_index] if element\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd7p9ghsq\nStarted\n.\nFinished in 0.000654126 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1528.76 tests/s, 9172.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |column, column_index|\n      [row_index, column_index] if column == x\n   \
    \ end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_ximzxzy\nStarted\n.\nFinished in 0.000817499 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1223.24 tests/s, 7339.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptu3uzwsl\nStarted\n.\nFinished in 0.001010352 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    989.75 tests/s, 5938.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |el, j|\n      result << [i, j] if el == x\n    end\n  end\n  result.sort_by\
    \ { |x, y| [x, -y] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp93krh2gb\nStarted\n.\nFinished in 0.001070769 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    933.91 tests/s, 5603.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |item, col_index|\n      result << [row_index, col_index] if item == x\n\
    \    end\n  end\n  result.sort_by { |row, col| [row, -col] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6hm4jlbf\nStarted\n.\nFinished in 0.000590368 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1693.86 tests/s, 10163.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr2iim1oc\nStarted\n.\nFinished in 0.001307368 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    764.90 tests/s, 4589.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwtm9j0tg\nStarted\n.\nFinished in 0.001005855 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    994.18 tests/s, 5965.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq_pjpy0y\nStarted\n.\nFinished in 0.000945387 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1057.77 tests/s, 6346.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  res = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do |el,\
    \ j|\n      res << [i, j] if el == x\n    end\n  end\n  res.sort_by { |e| [e[0],\
    \ -e[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9d1it7dt\nStarted\n.\nFinished in 0.000839261 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1191.52 tests/s, 7149.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |element, column_index|\n      result << [row_index, column_index] if element\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpacl9k6zu\nStarted\n.\nFinished in 0.000998176 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1001.83 tests/s, 6010.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |item, j|\n      result << [i, j] if item == x\n    end\n  end\n  result.sort_by\
    \ { |x| [x[0], -x[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0zpq39gt\nStarted\n.\nFinished in 0.001635318 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    611.50 tests/s, 3669.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |i,\
    \ j| [i, -j] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm0bz1hnf\nStarted\n.\nFinished in 0.001149301 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    870.09 tests/s, 5220.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |i, j| [i, -j] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbp4hhf4v\nStarted\n.\nFinished in 0.001712171 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    584.05 tests/s, 3504.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphjpn5hkm\nStarted\n.\nFinished in 0.001737369 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    575.58 tests/s, 3453.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |col, j|\n\
    \      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by { |i, j|\
    \ [i, -j] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnlwoz52b\nStarted\n.\nFinished in 0.001395327 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    716.68 tests/s, 4300.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.map.with_index { |e, j| [i, j]\
    \ if e == x }\n  end.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp80rvkf54\nStarted\n.\nFinished in 0.000657714 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1520.42 tests/s, 9122.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |row, col| [row, -col] }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpme7hkzfh\nStarted\n.\nFinished in 0.001107677 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    902.79 tests/s, 5416.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppmp6o0x8\nStarted\n.\nFinished in 0.000822016 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1216.52 tests/s, 7299.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |row, col| [row, -col] }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsa077x4m\nStarted\n.\nFinished in 0.001379332 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    724.99 tests/s, 4349.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |element, column_index|\n      [row_index, column_index] if element == x\n \
    \   end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9ojuv_je\nStarted\n.\nFinished in 0.001000051 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    999.95 tests/s, 5999.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |col, j|\n\
    \      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by { |x, y|\
    \ [x, -y] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmr6pa2qa\nStarted\n.\nFinished in 0.00110437 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    905.49 tests/s, 5432.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqs81karn\nStarted\n.\nFinished in 0.001890415 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    528.98 tests/s, 3173.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbtm4fbuf\nStarted\n.\nFinished in 0.000788657 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1267.98 tests/s, 7607.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu4ivup9d\nStarted\n.\nFinished in 0.000663856 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1506.35 tests/s, 9038.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |row, col| [row, -col] }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc73zpcsv\nStarted\n.\nFinished in 0.000888515 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1125.47 tests/s, 6752.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |a,\
    \ b| [a, -b] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpen7m7ur9\nStarted\n.\nFinished in 0.000671828 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1488.48 tests/s, 8930.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |row,\
    \ col| [row, -col] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzpgt2ftd\nStarted\n.\nFinished in 0.000922865 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1083.58 tests/s, 6501.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz4xrwpxy\nStarted\n.\nFinished in 0.001329914 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    751.93 tests/s, 4511.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i|\n    row.each_with_index.map { |e, j|\n\
    \      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0], [1,\
    \ 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3,\
    \ 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0],\
    \ [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3,\
    \ 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxe7e98po\nStarted\n.\nFinished in 0.000824112 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1213.43 tests/s, 7280.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i|\n    row.each_with_index.map { |e, j|\n\
    \      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |i, j| [i, -j]\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0], [1,\
    \ 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3,\
    \ 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0],\
    \ [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3,\
    \ 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1067pzlh\nStarted\n.\nFinished in 0.000699892 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1428.79 tests/s, 8572.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |element, column_index|\n      [row_index, column_index] if element == x\n \
    \   end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg20iodmh\nStarted\n.\nFinished in 0.000931401 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1073.65 tests/s, 6441.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, index|\n    row.each_with_index\
    \ do |element, index2|\n      result << [index, index2] if element == x\n    end\n\
    \  end\n  result.sort_by { |a, b| [a, -b] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp2lr51tc\nStarted\n.\nFinished in 0.0007951 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1257.70 tests/s, 7546.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |item, j|\n      result << [i, j] if item == x\n    end\n  end\n  result.sort_by\
    \ { |x| [x[0], -x[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprb258rch\nStarted\n.\nFinished in 0.001509512 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    662.47 tests/s, 3974.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1mco4oz5\nStarted\n.\nFinished in 0.000950966 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1051.56 tests/s, 6309.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptsyu1wlr\nStarted\n.\nFinished in 0.001610378 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    620.97 tests/s, 3725.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpccpbh8y4\nStarted\n.\nFinished in 0.000642385 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1556.70 tests/s, 9340.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |col, col_index|\n      [row_index, col_index] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqehjn_gc\nStarted\n.\nFinished in 0.001371222 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    729.28 tests/s, 4375.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7nr7elqo\nStarted\n.\nFinished in 0.001042275 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    959.44 tests/s, 5756.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp956hz82e\nStarted\n.\nFinished in 0.000734803 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1360.91 tests/s, 8165.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |i,\
    \ j| [i, -j] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4_c3_3ls\nStarted\n.\nFinished in 0.001043158 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    958.63 tests/s, 5751.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |column, column_index|\n      [row_index, column_index] if column == x\n   \
    \ end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt21aunv7\nStarted\n.\nFinished in 0.001236866 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    808.50 tests/s, 4850.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i|\n    row.each_with_index.map { |e, j|\n\
    \      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0], [1,\
    \ 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3,\
    \ 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0],\
    \ [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3,\
    \ 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps1ivt_09\nStarted\n.\nFinished in 0.001040479 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    961.10 tests/s, 5766.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |x| [x[0], -x[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp50rgyrdc\nStarted\n.\nFinished in 0.000612773 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1631.93 tests/s, 9791.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |value, column_index|\n      [row_index, column_index] if value == x\n    end\n\
    \  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4oanhue8\nStarted\n.\nFinished in 0.000892339 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1120.65 tests/s, 6723.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |row,\
    \ col| [row, -col] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsg7izzxd\nStarted\n.\nFinished in 0.00104731 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    954.83 tests/s, 5728.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp92mu4q_c\nStarted\n.\nFinished in 0.000698244 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1432.16 tests/s, 8592.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqec6y8f4\nStarted\n.\nFinished in 0.001634892 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    611.66 tests/s, 3669.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |col, col_index|\n      [row_index, col_index] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzoyka8es\nStarted\n.\nFinished in 0.00083341 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1199.89 tests/s, 7199.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |col, col_index|\n      result << [row_index, col_index] if col == x\n  \
    \  end\n  end\n  result.sort_by { |row, col| [row, -col] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnc9h1dbq\nStarted\n.\nFinished in 0.000702225 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1424.04 tests/s, 8544.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |e|\
    \ [e[0], -e[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7fci41ko\nStarted\n.\nFinished in 0.000716064 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1396.52 tests/s, 8379.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfz7li4uv\nStarted\n.\nFinished in 0.001160347 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    861.81 tests/s, 5170.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index do |row, row_index|\n    row.map.with_index do |elem, column_index|\n\
    \      [row_index, column_index] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, column| [row, -column] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxp2koy7e\nStarted\n.\nFinished in 0.00082711 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1209.03 tests/s, 7254.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoakmwh5a\nStarted\n.\nFinished in 0.000802041 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1246.82 tests/s, 7480.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |value, column_index|\n      result << [row_index, column_index] if value\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplsjpaf2r\nStarted\n.\nFinished in 0.000754214 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1325.88 tests/s, 7955.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9ibu_1sf\nStarted\n.\nFinished in 0.000938647 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1065.36 tests/s, 6392.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7j9ofo3x\nStarted\n.\nFinished in 0.000879388 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1137.15 tests/s, 6822.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz7b27u75\nStarted\nF\n===============================================================================\n\
    Failure: test_get_row(TestHumanEval)\n/tmp/tmpz7b27u75.rb:24:in `test_get_row'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_get_row\n\
    \     23:     candidate = method(:get_row)\n  => 24:     assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     25:     assert_equal([[0, 1], [1,\
    \ 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6]], 2))\n     26:     assert_equal([[0, 0], [1, 0], [2, 1],\
    \ [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     27: \
    \    assert_equal([], candidate.call([], 1))\n<[[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008822016 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.35 tests/s, 113.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |cell, j|\n      result << [i, j] if cell == x\n    end\n  end\n  result.sort_by\
    \ { |x| [x[0], -x[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsx3yycy_\nStarted\n.\nFinished in 0.00079845 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1252.43 tests/s, 7514.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5ym8a9xq\nStarted\nF\n===============================================================================\n\
    Failure: test_get_row(TestHumanEval)\n/tmp/tmp5ym8a9xq.rb:24:in `test_get_row'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_get_row\n\
    \     23:     candidate = method(:get_row)\n  => 24:     assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     25:     assert_equal([[0, 1], [1,\
    \ 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6]], 2))\n     26:     assert_equal([[0, 0], [1, 0], [2, 1],\
    \ [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     27: \
    \    assert_equal([], candidate.call([], 1))\n<[[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.020348381 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    49.14 tests/s, 49.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6fnx93vg\nStarted\n.\nFinished in 0.00182004 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    549.44 tests/s, 3296.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppjktd3oi\nStarted\nF\n===============================================================================\n\
    Failure: test_get_row(TestHumanEval)\n/tmp/tmppjktd3oi.rb:24:in `test_get_row'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_get_row\n\
    \     23:     candidate = method(:get_row)\n  => 24:     assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     25:     assert_equal([[0, 1], [1,\
    \ 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6]], 2))\n     26:     assert_equal([[0, 0], [1, 0], [2, 1],\
    \ [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     27: \
    \    assert_equal([], candidate.call([], 1))\n<[[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008583312 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    116.51 tests/s, 116.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptcayaib3\nStarted\n.\nFinished in 0.000886718 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1127.75 tests/s, 6766.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |item, item_index|\n      result << [row_index, item_index] if item == x\n\
    \    end\n  end\n  result.sort_by { |row, col| [row, -col] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp63i08wua\nStarted\n.\nFinished in 0.001384649 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    722.20 tests/s, 4333.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpesz3_ct3\nStarted\n.\nFinished in 0.001331493 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    751.04 tests/s, 4506.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |item, item_index|\n      result << [row_index, item_index] if item == x\n\
    \    end\n  end\n  result.sort_by { |row, col| [row, -col] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsmz9q8jc\nStarted\n.\nFinished in 0.001258711 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    794.46 tests/s, 4766.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |a,\
    \ b| [a, -b] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpango3db0\nStarted\n.\nFinished in 0.000812694 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1230.48 tests/s, 7382.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |column, column_index|\n      [row_index, column_index] if column == x\n   \
    \ end\n  end.flatten(1).compact.sort_by { |x| [x[0], -x[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwchya43p\nStarted\n.\nFinished in 0.00180414 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    554.28 tests/s, 3325.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |x| [x[0], -x[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdiqyqkzo\nStarted\n.\nFinished in 0.001379268 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    725.02 tests/s, 4350.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |element, col_index|\n      result << [row_index, col_index] if element ==\
    \ x\n    end\n  end\n  result.sort_by { |row, col| [row, -col] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprcznzhnp\nStarted\n.\nFinished in 0.000933009 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1071.80 tests/s, 6430.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |column, column_index|\n      [row_index, column_index] if column == x\n   \
    \ end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_rqk0hpr\nStarted\n.\nFinished in 0.000657512 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1520.88 tests/s, 9125.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvthso36r\nStarted\n.\nFinished in 0.001346916 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    742.44 tests/s, 4454.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, row_index|\n    row.each_with_index.map { |element,\
    \ column_index|\n      [row_index, column_index] if element == x\n    }\n  }.flatten(1).compact.sort_by\
    \ { |row, column| [row, -column] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjyz03n7_\nStarted\n.\nFinished in 0.000765078 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1307.06 tests/s, 7842.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by do\
    \ |row, col|\n    [row, -col]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbsq5r1em\nStarted\n.\nFinished in 0.001254089 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    797.39 tests/s, 4784.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6f4xpza2\nStarted\nF\n===============================================================================\n\
    Failure: test_get_row(TestHumanEval)\n/tmp/tmp6f4xpza2.rb:24:in `test_get_row'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_get_row\n\
    \     23:     candidate = method(:get_row)\n  => 24:     assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     25:     assert_equal([[0, 1], [1,\
    \ 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6]], 2))\n     26:     assert_equal([[0, 0], [1, 0], [2, 1],\
    \ [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     27: \
    \    assert_equal([], candidate.call([], 1))\n<[[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009655927 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.56 tests/s, 103.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |i,\
    \ j| [i, -j] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptbwgs2id\nStarted\n.\nFinished in 0.00086675 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1153.74 tests/s, 6922.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbuduwgtm\nStarted\n.\nFinished in 0.001074331 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    930.81 tests/s, 5584.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index do |row, i|\n    row.map.with_index { |e, j| [i, j] if e\
    \ == x }\n  end.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp24gwq2tx\nStarted\n.\nFinished in 0.002290457 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    436.59 tests/s, 2619.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_mo6y4ap\nStarted\n.\nFinished in 0.000714889 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1398.82 tests/s, 8392.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9gwbe1j_\nStarted\n.\nFinished in 0.001072954 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    932.01 tests/s, 5592.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |a, b| [a, -b] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzwjsq8ur\nStarted\n.\nFinished in 0.000696528 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1435.69 tests/s, 8614.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |a, b| [a, -b] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp24k6h50k\nStarted\n.\nFinished in 0.000986831 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1013.34 tests/s, 6080.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpivs2edlj\nStarted\nF\n===============================================================================\n\
    Failure: test_get_row(TestHumanEval)\n/tmp/tmpivs2edlj.rb:24:in `test_get_row'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_get_row\n\
    \     23:     candidate = method(:get_row)\n  => 24:     assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     25:     assert_equal([[0, 1], [1,\
    \ 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6]], 2))\n     26:     assert_equal([[0, 0], [1, 0], [2, 1],\
    \ [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     27: \
    \    assert_equal([], candidate.call([], 1))\n<[[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009474364 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.55 tests/s, 105.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i|\n    row.each_with_index.map { |e, j|\n\
    \      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |i, j| [i, -j]\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0], [1,\
    \ 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3,\
    \ 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0],\
    \ [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3,\
    \ 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp527rbvky\nStarted\n.\nFinished in 0.000648462 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1542.11 tests/s, 9252.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |col, col_index|\n      result << [row_index, col_index] if col == x\n  \
    \  end\n  end\n  result.sort_by { |row, col| [row, -col] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt8mxmsel\nStarted\n.\nFinished in 0.000929946 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1075.33 tests/s, 6451.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |item, item_index|\n      result << [row_index, item_index] if item == x\n\
    \    end\n  end\n  result.sort_by { |row, col| [row, -col] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphzz_d1lw\nStarted\n.\nFinished in 0.001060757 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    942.72 tests/s, 5656.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |i, j| [i, -j] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwpxgt26_\nStarted\n.\nFinished in 0.000778926 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1283.82 tests/s, 7702.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzxgzrsrs\nStarted\nF\n===============================================================================\n\
    Failure: test_get_row(TestHumanEval)\n/tmp/tmpzxgzrsrs.rb:24:in `test_get_row'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_get_row\n\
    \     23:     candidate = method(:get_row)\n  => 24:     assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     25:     assert_equal([[0, 1], [1,\
    \ 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6]], 2))\n     26:     assert_equal([[0, 0], [1, 0], [2, 1],\
    \ [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     27: \
    \    assert_equal([], candidate.call([], 1))\n<[[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.013435878 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.43 tests/s, 74.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |x| [x[0], -x[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1fw1mnn3\nStarted\n.\nFinished in 0.001157819 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    863.69 tests/s, 5182.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl_ihrsuf\nStarted\nF\n===============================================================================\n\
    Failure: test_get_row(TestHumanEval)\n/tmp/tmpl_ihrsuf.rb:24:in `test_get_row'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_get_row\n\
    \     23:     candidate = method(:get_row)\n  => 24:     assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     25:     assert_equal([[0, 1], [1,\
    \ 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6]], 2))\n     26:     assert_equal([[0, 0], [1, 0], [2, 1],\
    \ [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     27: \
    \    assert_equal([], candidate.call([], 1))\n<[[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011641568 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.90 tests/s, 85.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_4kkh80_\nStarted\n.\nFinished in 0.000904332 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1105.79 tests/s, 6634.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, row_index|\n    row.each_with_index.map { |elem,\
    \ col_index|\n      [row_index, col_index] if elem == x\n    }\n  }.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmbtvyvx5\nStarted\n.\nFinished in 0.000700429 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1427.70 tests/s, 8566.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |el, j| [i, j] if el ==\
    \ x } }.flatten(1).compact.sort_by { |el| [el[0], -el[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsisapnop\nStarted\n.\nFinished in 0.001439021 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    694.92 tests/s, 4169.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, row_index|\n    row.each_with_index.map { |col,\
    \ col_index|\n      [row_index, col_index] if col == x\n    }\n  }.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk_tbh_qv\nStarted\n.\nFinished in 0.001151383 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    868.52 tests/s, 5211.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |element, column_index|\n      [row_index, column_index] if element == x\n \
    \   end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd1eezjqa\nStarted\n.\nFinished in 0.000648286 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1542.53 tests/s, 9255.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i|\n    row.each_with_index.map { |e, j|\n\
    \      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0], [1,\
    \ 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3,\
    \ 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0],\
    \ [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3,\
    \ 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1_m0czvq\nStarted\n.\nFinished in 0.001044911 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    957.02 tests/s, 5742.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |i, j| [i, -j] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3f1vjdpi\nStarted\n.\nFinished in 0.000683568 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1462.91 tests/s, 8777.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  res = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do |elem,\
    \ j|\n      res << [i, j] if elem == x\n    end\n  end\n  res.sort_by { |elem|\
    \ [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzfa4az7g\nStarted\n.\nFinished in 0.001415377 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    706.53 tests/s, 4239.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgquvvpg2\nStarted\n.\nFinished in 0.001778531 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    562.26 tests/s, 3373.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |a, b| [a, -b] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprwngmb39\nStarted\n.\nFinished in 0.000855671 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1168.67 tests/s, 7012.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2sotjbky\nStarted\nF\n===============================================================================\n\
    Failure: test_get_row(TestHumanEval)\n/tmp/tmp2sotjbky.rb:24:in `test_get_row'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_get_row\n\
    \     23:     candidate = method(:get_row)\n  => 24:     assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     25:     assert_equal([[0, 1], [1,\
    \ 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6]], 2))\n     26:     assert_equal([[0, 0], [1, 0], [2, 1],\
    \ [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     27: \
    \    assert_equal([], candidate.call([], 1))\n<[[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010509607 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.15 tests/s, 95.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |item, item_index|\n      [row_index, item_index] if item == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, _| row }.map do |row, item|\n    [row, item].sort_by { |_, item| -item\
    \ }.reverse\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcju391s3\nStarted\nE\n===============================================================================\n\
    Error: test_get_row(TestHumanEval): NoMethodError: undefined method `-@' for nil:NilClass\n\
    /tmp/tmpcju391s3.rb:23:in `block (2 levels) in get_row'\n/tmp/tmpcju391s3.rb:23:in\
    \ `each'\n/tmp/tmpcju391s3.rb:23:in `sort_by'\n/tmp/tmpcju391s3.rb:23:in `block\
    \ in get_row'\n/tmp/tmpcju391s3.rb:22:in `map'\n/tmp/tmpcju391s3.rb:22:in `get_row'\n\
    /tmp/tmpcju391s3.rb:30:in `call'\n/tmp/tmpcju391s3.rb:30:in `test_get_row'\n \
    \    27: class TestHumanEval < Test::Unit::TestCase\n     28:   def test_get_row\n\
    \     29:     candidate = method(:get_row)\n  => 30:     assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     31:     assert_equal([[0, 1], [1,\
    \ 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6]], 2))\n     32:     assert_equal([[0, 0], [1, 0], [2, 1],\
    \ [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     33: \
    \    assert_equal([], candidate.call([], 1))\n===============================================================================\n\
    \nFinished in 0.002877906 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    347.47 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |i, j| [i, -j] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd6yu0deb\nStarted\n.\nFinished in 0.000830818 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1203.63 tests/s, 7221.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |col, j|\n\
    \      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by { |x, y|\
    \ [x, -y] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph4ppcr0t\nStarted\n.\nFinished in 0.000850007 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1176.46 tests/s, 7058.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsabo36iq\nStarted\n.\nFinished in 0.000740537 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1350.37 tests/s, 8102.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5kfska2l\nStarted\n.\nFinished in 0.000955016 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1047.10 tests/s, 6282.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i|\n    row.each_with_index.map { |e, j|\n\
    \      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0], [1,\
    \ 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3,\
    \ 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0],\
    \ [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3,\
    \ 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplrryrg9v\nStarted\n.\nFinished in 0.001290172 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    775.09 tests/s, 4650.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |column, column_index|\n      [row_index, column_index] if column == x\n   \
    \ end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbze5axbx\nStarted\n.\nFinished in 0.001148172 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    870.95 tests/s, 5225.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index do |row, i|\n    row.map.with_index do |e, j|\n      [i,\
    \ j] if e == x\n    end\n  end.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0], [1,\
    \ 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3,\
    \ 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0],\
    \ [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3,\
    \ 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnrags8vr\nStarted\n.\nFinished in 0.000693292 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1442.39 tests/s, 8654.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0kuzy2qb\nStarted\n.\nFinished in 0.000989149 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1010.97 tests/s, 6065.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |i, j| [i, -j] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5_w_y2cr\nStarted\n.\nFinished in 0.001220198 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    819.54 tests/s, 4917.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |x,\
    \ y| [x, -y] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo8_6nb91\nStarted\n.\nFinished in 0.001072138 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    932.72 tests/s, 5596.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpaok_c2aa\nStarted\n.\nFinished in 0.001845285 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    541.92 tests/s, 3251.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkkbsecng\nStarted\n.\nFinished in 0.000837134 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1194.55 tests/s, 7167.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i|\n    row.each_with_index.map { |e, j|\n\
    \      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |i, j| [i, -j]\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0], [1,\
    \ 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3,\
    \ 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0],\
    \ [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3,\
    \ 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm0ertmg5\nStarted\n.\nFinished in 0.000859551 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1163.40 tests/s, 6980.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i|\n    row.each_with_index.map { |e, j|\n\
    \      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0], [1,\
    \ 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3,\
    \ 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0],\
    \ [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3,\
    \ 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6lkfjxoj\nStarted\n.\nFinished in 0.000708346 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1411.74 tests/s, 8470.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprekf6fmm\nStarted\n.\nFinished in 0.001414686 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    706.87 tests/s, 4241.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |i,\
    \ j| [i, -j] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpne8jhi2a\nStarted\n.\nFinished in 0.000731878 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1366.35 tests/s, 8198.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |i,\
    \ j| [i, -j] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2vdmq85r\nStarted\n.\nFinished in 0.000664435 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1505.04 tests/s, 9030.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkbtwndzk\nStarted\n.\nFinished in 0.001166818 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    857.03 tests/s, 5142.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |e|\
    \ [e[0], -e[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplmkrij5w\nStarted\n.\nFinished in 0.001575468 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    634.73 tests/s, 3808.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmzjz1nvw\nStarted\n.\nFinished in 0.000776768 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1287.39 tests/s, 7724.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |item,\
    \ j|\n      [i, j] if item == x\n    end\n  end.flatten(1).compact.sort_by { |i,\
    \ j| [i, -j] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppgdzsrgt\nStarted\n.\nFinished in 0.001736105 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    576.00 tests/s, 3456.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |col, col_index|\n      result << [row_index, col_index] if col == x\n  \
    \  end\n  end\n  result.sort_by { |row, col| [row, -col] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx6vq4ot_\nStarted\n.\nFinished in 0.001558306 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    641.72 tests/s, 3850.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoauwisde\nStarted\n.\nFinished in 0.000715742 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1397.15 tests/s, 8382.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3xh8adeb\nStarted\n.\nFinished in 0.000952057 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1050.36 tests/s, 6302.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpadpq8ox9\nStarted\n.\nFinished in 0.001189073 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    840.99 tests/s, 5045.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |x,\
    \ y| [x, -y] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph_5k781i\nStarted\n.\nFinished in 0.00107866 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    927.08 tests/s, 5562.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by do\
    \ |row, col|\n    [row, -col]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptubizcym\nStarted\n.\nFinished in 0.001051442 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    951.07 tests/s, 5706.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvinbfylr\nStarted\nF\n===============================================================================\n\
    Failure: test_get_row(TestHumanEval)\n/tmp/tmpvinbfylr.rb:24:in `test_get_row'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_get_row\n\
    \     23:     candidate = method(:get_row)\n  => 24:     assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     25:     assert_equal([[0, 1], [1,\
    \ 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6]], 2))\n     26:     assert_equal([[0, 0], [1, 0], [2, 1],\
    \ [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     27: \
    \    assert_equal([], candidate.call([], 1))\n<[[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014998995 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.67 tests/s, 66.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpahfzb8bc\nStarted\n.\nFinished in 0.000890879 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1122.49 tests/s, 6734.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |item, col_index|\n      [row_index, col_index] if item == x\n    end\n  end.flatten(1).compact.sort_by\
    \ do |row, col|\n    [row, -col]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgr1kvnxv\nStarted\n.\nFinished in 0.001690376 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    591.58 tests/s, 3549.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |element, column_index|\n      [row_index, column_index] if element == x\n \
    \   end\n  end.flatten(1).compact.sort_by do |row, column|\n    [row, -column]\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzjw57tko\nStarted\n.\nFinished in 0.000907339 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1102.12 tests/s, 6612.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |e|\
    \ [e[0], -e[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsbqlkz23\nStarted\n.\nFinished in 0.000659856 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1515.48 tests/s, 9092.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |elem|\
    \ [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkc30basq\nStarted\n.\nFinished in 0.000810443 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1233.89 tests/s, 7403.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |i,\
    \ j| [i, -j] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjj3ejsv1\nStarted\n.\nFinished in 0.002059952 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    485.45 tests/s, 2912.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7uyx77e9\nStarted\nF\n===============================================================================\n\
    Failure: test_get_row(TestHumanEval)\n/tmp/tmp7uyx77e9.rb:24:in `test_get_row'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_get_row\n\
    \     23:     candidate = method(:get_row)\n  => 24:     assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     25:     assert_equal([[0, 1], [1,\
    \ 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6]], 2))\n     26:     assert_equal([[0, 0], [1, 0], [2, 1],\
    \ [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     27: \
    \    assert_equal([], candidate.call([], 1))\n<[[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.01208013 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.78 tests/s, 82.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |col, col_index|\n      [row_index, col_index] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqlq13zey\nStarted\n.\nFinished in 0.000940128 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1063.68 tests/s, 6382.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |a, b| [a, -b] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7adbrydc\nStarted\n.\nFinished in 0.000929744 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1075.56 tests/s, 6453.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |item, j|\n      result << [i, j] if item == x\n    end\n  end\n  result.sort_by\
    \ { |x| [x[0], -x[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_su5ggtr\nStarted\n.\nFinished in 0.000614091 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1628.42 tests/s, 9770.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |col, col_index|\n      [row_index, col_index] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpelynin_c\nStarted\n.\nFinished in 0.001727032 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    579.03 tests/s, 3474.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |e|\
    \ [e[0], -e[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppq9t6d1p\nStarted\n.\nFinished in 0.000840248 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1190.12 tests/s, 7140.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |a,\
    \ b| [a, -b] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpufamy36k\nStarted\n.\nFinished in 0.000659175 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1517.05 tests/s, 9102.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |e|\
    \ [e[0], -e[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr7q_c6ms\nStarted\n.\nFinished in 0.001118984 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    893.67 tests/s, 5362.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |col, col_index|\n      [row_index, col_index] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpaovrf6hi\nStarted\n.\nFinished in 0.001571841 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    636.20 tests/s, 3817.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |e, i| e.each_with_index.map { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjc0qp8u2\nStarted\n.\nFinished in 0.000713056 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1402.41 tests/s, 8414.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |i,\
    \ j| [i, -j] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_c1ow16u\nStarted\n.\nFinished in 0.001506426 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    663.82 tests/s, 3982.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |element, element_index|\n      result << [row_index, element_index] if element\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp49z5auz6\nStarted\n.\nFinished in 0.000649503 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1539.64 tests/s, 9237.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppv9rws1x\nStarted\n.\nFinished in 0.000783559 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1276.23 tests/s, 7657.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i|\n    row.each_with_index.map { |item, j|\n\
    \      [i, j] if item == x\n    }\n  }.flatten(1).compact.sort_by { |i, j| [i,\
    \ -j] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_u41zd37\nStarted\n.\nFinished in 0.001277268 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    782.92 tests/s, 4697.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm90j6kuo\nStarted\n.\nFinished in 0.00059841 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1671.10 tests/s, 10026.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.map.with_index { |e, j| [i, j]\
    \ if e == x }\n  end.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw299y7cu\nStarted\n.\nFinished in 0.001131903 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    883.47 tests/s, 5300.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |item, item_index|\n      [row_index, item_index] if item == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |a, b| [a, -b] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdc08li8w\nStarted\n.\nFinished in 0.000871189 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1147.86 tests/s, 6887.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |item, column_index|\n      [row_index, column_index] if item == x\n    end\n\
    \  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp46zqcxuf\nStarted\n.\nFinished in 0.000633887 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1577.57 tests/s, 9465.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfd_fqdho\nStarted\n.\nFinished in 0.000630057 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1587.16 tests/s, 9522.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |element, column_index|\n      result << [row_index, column_index] if element\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgrtct7q_\nStarted\n.\nFinished in 0.000732191 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1365.76 tests/s, 8194.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, index|\n    row.each_with_index\
    \ do |item, index2|\n      result << [index, index2] if item == x\n    end\n \
    \ end\n  result.sort_by { |item| [item[0], -item[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd6iu46j2\nStarted\n.\nFinished in 0.001049607 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    952.74 tests/s, 5716.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |elem|\
    \ [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfinw41v4\nStarted\n.\nFinished in 0.000638561 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1566.02 tests/s, 9396.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |el, col_index|\n      [row_index, col_index] if el == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnpsz7pno\nStarted\n.\nFinished in 0.000719039 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1390.75 tests/s, 8344.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |element, element_index|\n      result << [row_index, element_index] if element\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw8frip0k\nStarted\n.\nFinished in 0.001061641 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    941.94 tests/s, 5651.63 assertions/s\n"
  exit_code: 0
  status: OK
