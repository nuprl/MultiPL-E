name: HumanEval_80_is_happy
language: ruby
results:
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2qws1_fm\nStarted\n.\nFinished in 0.000591369 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1690.99 tests/s, 13527.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq1jgxgdv\nStarted\n.\nFinished in 0.00109294 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    914.96 tests/s, 7319.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp58a1n1c8\nStarted\n.\nFinished in 0.000808901 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1236.25 tests/s, 9889.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw9r4guqx\nStarted\n.\nFinished in 0.000535015 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1869.11 tests/s, 14952.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppy289xx4\nStarted\n.\nFinished in 0.00054836 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1823.62 tests/s, 14588.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc5v7txn9\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpc5v7txn9.rb:18:in `test_is_happy'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_is_happy\n\
    \     17:     candidate = method(:is_happy)\n  => 18:     assert_equal(false,\
    \ candidate.call(\"a\"))\n     19:     assert_equal(false, candidate.call(\"aa\"\
    ))\n     20:     assert_equal(true, candidate.call(\"abcd\"))\n     21:     assert_equal(false,\
    \ candidate.call(\"aabb\"))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n\
    ? ni   \n===============================================================================\n\
    \nFinished in 0.010711221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    93.36 tests/s, 93.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpejn_8wp4\nStarted\n.\nFinished in 0.000675187 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1481.07 tests/s, 11848.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |x, y, z| x != y && y != z && x != z }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4arvie6q\nStarted\n.\nFinished in 0.000634171 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1576.86 tests/s, 12614.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9_34fzco\nStarted\n.\nFinished in 0.000718648 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1391.50 tests/s, 11132.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7drfmun6\nStarted\n.\nFinished in 0.000877505 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1139.59 tests/s, 9116.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp715c7ivo\nStarted\n.\nFinished in 0.000725334 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1378.68 tests/s, 11029.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps2ijfcxf\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmps2ijfcxf.rb:21:in `test_is_happy'\n\
    \     18:     assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 21:     assert_equal(false, candidate.call(\"aabb\"))\n     22:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     23:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     24:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.009011859 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.96 tests/s, 443.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3).all? { |a, b, c| a != b && b != c && a != c\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppzds8bp3\nStarted\n.\nFinished in 0.000604342 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1654.69 tests/s, 13237.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4n9o7qlh\nStarted\n.\nFinished in 0.001129514 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    885.34 tests/s, 7082.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp27961f13\nStarted\n.\nFinished in 0.001026685 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    974.01 tests/s, 7792.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpimhyk67b\nStarted\n.\nFinished in 0.000590942 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1692.21 tests/s, 13537.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt3f2potw\nStarted\n.\nFinished in 0.000694157 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1440.60 tests/s, 11524.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpima658cp\nStarted\n.\nFinished in 0.000767992 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1302.10 tests/s, 10416.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb35bsmxk\nStarted\n.\nFinished in 0.001345176 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    743.40 tests/s, 5947.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvzue40x1\nStarted\n.\nFinished in 0.001477506 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    676.82 tests/s, 5414.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9daio6ot\nStarted\n.\nFinished in 0.001317212 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    759.18 tests/s, 6073.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmabfi_85\nStarted\n.\nFinished in 0.000990425 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1009.67 tests/s, 8077.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcuhv_yyt\nStarted\n.\nFinished in 0.000790416 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1265.16 tests/s, 10121.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3).all? { |a, b, c| a != b && b != c && a != c\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6_i0wllt\nStarted\n.\nFinished in 0.000864877 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1156.23 tests/s, 9249.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3).all? { |a, b, c| a != b && b != c && a != c\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphrkqpa8c\nStarted\n.\nFinished in 0.001057344 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    945.77 tests/s, 7566.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1_gpcfja\nStarted\n.\nFinished in 0.00068815 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1453.17 tests/s, 11625.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5itv7fmm\nStarted\n.\nFinished in 0.000653271 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1530.76 tests/s, 12246.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.each_char.with_index do |c, i|\n    return false if s[i] == s[i+1]\
    \ && s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7s4k2i26\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmp7s4k2i26.rb:25:in `test_is_happy'\n\
    \     22:     assert_equal(false, candidate.call(\"a\"))\n     23:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     24:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 25:     assert_equal(false, candidate.call(\"aabb\"))\n     26:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     27:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     28:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.019704077 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    50.75 tests/s, 203.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8h0uuxu_\nStarted\n.\nFinished in 0.000617171 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1620.30 tests/s, 12962.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzvtba3g1\nStarted\n.\nFinished in 0.000580916 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1721.42 tests/s, 13771.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2y0tflhk\nStarted\n.\nFinished in 0.001842973 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    542.60 tests/s, 4340.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqp2k99xt\nStarted\n.\nFinished in 0.00102103 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    979.40 tests/s, 7835.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbnb2vnoj\nStarted\n.\nFinished in 0.000697323 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1434.06 tests/s, 11472.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp03bonpy_\nStarted\n.\nFinished in 0.001093747 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    914.29 tests/s, 7314.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp__4l235i\nStarted\n.\nFinished in 0.001239141 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    807.01 tests/s, 6456.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3xw8isis\nStarted\n.\nFinished in 0.001053544 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    949.18 tests/s, 7593.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppewhzz0t\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmppewhzz0t.rb:21:in `test_is_happy'\n\
    \     18:     assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 21:     assert_equal(false, candidate.call(\"aabb\"))\n     22:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     23:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     24:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.012327162 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.12 tests/s, 324.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  if s.length < 3\n    return\
    \ false\n  end\n  s.split(\"\").each_cons(3) do |a, b, c|\n    if a == b || b\
    \ == c || a == c\n      return false\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjay4m15e\nStarted\n.\nFinished in 0.000590037 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1694.81 tests/s, 13558.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).all?\
    \ { |s| s.chars.uniq.length == 3 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprtwsibn9\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmprtwsibn9.rb:25:in `test_is_happy'\n\
    \     22:     assert_equal(true, candidate.call(\"adb\"))\n     23:     assert_equal(false,\
    \ candidate.call(\"xyy\"))\n     24:     assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n  => 25:     assert_equal(false, candidate.call(\"iopaxioi\"))\n\
    \     26:   end\n     27: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n\
    ? tru  \n===============================================================================\n\
    \nFinished in 0.017308479 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.78 tests/s, 462.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3).all? { |x| x.uniq.length == 3 }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdhid2jkx\nStarted\n.\nFinished in 0.001378225 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    725.57 tests/s, 5804.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpprwno2ir\nStarted\n.\nFinished in 0.001041858 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    959.82 tests/s, 7678.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8wgmjy1d\nStarted\n.\nFinished in 0.000898334 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1113.17 tests/s, 8905.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.scan(/.../).each do |sub|\n    return false if sub[0] == sub[1] ||\
    \ sub[0] == sub[2] || sub[1] == sub[2]\n  end\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate\
    \ = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false,\
    \ candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n\
    \    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"\
    adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp49t1hy2y\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmp49t1hy2y.rb:29:in `test_is_happy'\n\
    \     26:     assert_equal(true, candidate.call(\"adb\"))\n     27:     assert_equal(false,\
    \ candidate.call(\"xyy\"))\n     28:     assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n  => 29:     assert_equal(false, candidate.call(\"iopaxioi\"))\n\
    \     30:   end\n     31: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n\
    ? tru  \n===============================================================================\n\
    \nFinished in 0.011252902 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.87 tests/s, 710.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk8mtw8ot\nStarted\n.\nFinished in 0.000746532 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1339.53 tests/s, 10716.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8cwk87bf\nStarted\n.\nFinished in 0.000802238 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1246.51 tests/s, 9972.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn66tokoa\nStarted\n.\nFinished in 0.001733528 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    576.86 tests/s, 4614.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5potg0f2\nStarted\n.\nFinished in 0.000681163 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1468.08 tests/s, 11744.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgusx0spf\nStarted\n.\nFinished in 0.000932982 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1071.83 tests/s, 8574.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.scan(/.../).each do |sub|\n    return false if sub[0] == sub[1] ||\
    \ sub[0] == sub[2] || sub[1] == sub[2]\n  end\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate\
    \ = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false,\
    \ candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n\
    \    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"\
    adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl5rpl8va\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpl5rpl8va.rb:29:in `test_is_happy'\n\
    \     26:     assert_equal(true, candidate.call(\"adb\"))\n     27:     assert_equal(false,\
    \ candidate.call(\"xyy\"))\n     28:     assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n  => 29:     assert_equal(false, candidate.call(\"iopaxioi\"))\n\
    \     30:   end\n     31: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n\
    ? tru  \n===============================================================================\n\
    \nFinished in 0.010511849 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.13 tests/s, 761.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz107x5r7\nStarted\n.\nFinished in 0.000691213 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1446.73 tests/s, 11573.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoivjxg7t\nStarted\n.\nFinished in 0.00059747 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1673.72 tests/s, 13389.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpthpzsesv\nStarted\n.\nFinished in 0.000900919 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1109.98 tests/s, 8879.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa4l0owr3\nStarted\n.\nFinished in 0.00087351 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1144.81 tests/s, 9158.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.scan(/.../).each do |sub|\n    return false if sub[0] == sub[1] ||\
    \ sub[0] == sub[2] || sub[1] == sub[2]\n  end\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate\
    \ = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false,\
    \ candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n\
    \    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"\
    adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9ci9_n0v\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmp9ci9_n0v.rb:29:in `test_is_happy'\n\
    \     26:     assert_equal(true, candidate.call(\"adb\"))\n     27:     assert_equal(false,\
    \ candidate.call(\"xyy\"))\n     28:     assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n  => 29:     assert_equal(false, candidate.call(\"iopaxioi\"))\n\
    \     30:   end\n     31: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n\
    ? tru  \n===============================================================================\n\
    \nFinished in 0.015944331 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    62.72 tests/s, 501.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |x, y, z| x != y && y != z && x != z }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqp6ov_li\nStarted\n.\nFinished in 0.000598764 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1670.11 tests/s, 13360.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpukk1uvw1\nStarted\n.\nFinished in 0.001744103 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    573.36 tests/s, 4586.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwgkgirv5\nStarted\n.\nFinished in 0.00059471 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1681.49 tests/s, 13451.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuf4cij5e\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpuf4cij5e.rb:21:in `test_is_happy'\n\
    \     18:     assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 21:     assert_equal(false, candidate.call(\"aabb\"))\n     22:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     23:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     24:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.0124262 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.48 tests/s, 321.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp15fnecfv\nStarted\n.\nFinished in 0.000595261 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1679.94 tests/s, 13439.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0ygo0h4a\nStarted\n.\nFinished in 0.00135553 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    737.72 tests/s, 5901.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnkumu3lr\nStarted\n.\nFinished in 0.000903825 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1106.41 tests/s, 8851.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx56ztw_r\nStarted\n.\nFinished in 0.000705531 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1417.37 tests/s, 11338.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (s.length - 2).times do |i|\n    return false if s[i] == s[i + 1] ||\
    \ s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n  end\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate\
    \ = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false,\
    \ candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n\
    \    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"\
    adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"\
    ))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplvoe_429\nStarted\n.\nFinished in 0.000951973 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1050.45 tests/s, 8403.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |x, y, z|\n    return false if x == y ||\
    \ y == z || x == z\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpywr7325c\nStarted\n.\nFinished in 0.001156697 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    864.53 tests/s, 6916.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1n0a7cyv\nStarted\n.\nFinished in 0.001172528 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    852.86 tests/s, 6822.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf77qt4ot\nStarted\n.\nFinished in 0.000917266 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1090.20 tests/s, 8721.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw6hohsk8\nStarted\n.\nFinished in 0.001138006 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    878.73 tests/s, 7029.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplxvtwfg9\nStarted\n.\nFinished in 0.000814097 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1228.35 tests/s, 9826.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq8bl6nro\nStarted\n.\nFinished in 0.000564499 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1771.48 tests/s, 14171.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb3vls2k2\nStarted\n.\nFinished in 0.000690509 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1448.21 tests/s, 11585.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplzz0qhs_\nStarted\n.\nFinished in 0.001039106 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    962.37 tests/s, 7698.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp66_9vo1w\nStarted\n.\nFinished in 0.001186646 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    842.71 tests/s, 6741.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb82c72xp\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpb82c72xp.rb:18:in `test_is_happy'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_is_happy\n\
    \     17:     candidate = method(:is_happy)\n  => 18:     assert_equal(false,\
    \ candidate.call(\"a\"))\n     19:     assert_equal(false, candidate.call(\"aa\"\
    ))\n     20:     assert_equal(true, candidate.call(\"abcd\"))\n     21:     assert_equal(false,\
    \ candidate.call(\"aabb\"))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n\
    ? ni   \n===============================================================================\n\
    \nFinished in 0.01026695 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    97.40 tests/s, 97.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9oofohqs\nStarted\n.\nFinished in 0.001231694 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    811.89 tests/s, 6495.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpymi676a8\nStarted\n.\nFinished in 0.001597666 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    625.91 tests/s, 5007.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5hvy6e8t\nStarted\n.\nFinished in 0.001242127 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    805.07 tests/s, 6440.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3).all? { |a, b, c| a != b && b != c && a != c\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpem5u_a8n\nStarted\n.\nFinished in 0.000895616 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1116.55 tests/s, 8932.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_53_ntgo\nStarted\n.\nFinished in 0.000685609 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1458.56 tests/s, 11668.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfzu5327_\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpfzu5327_.rb:18:in `test_is_happy'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_is_happy\n\
    \     17:     candidate = method(:is_happy)\n  => 18:     assert_equal(false,\
    \ candidate.call(\"a\"))\n     19:     assert_equal(false, candidate.call(\"aa\"\
    ))\n     20:     assert_equal(true, candidate.call(\"abcd\"))\n     21:     assert_equal(false,\
    \ candidate.call(\"aabb\"))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n\
    ? ni   \n===============================================================================\n\
    \nFinished in 0.011748179 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.12 tests/s, 85.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6e7g2ath\nStarted\n.\nFinished in 0.000664591 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1504.68 tests/s, 12037.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2du76tjz\nStarted\n.\nFinished in 0.00153019 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    653.51 tests/s, 5228.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpi4gdzjc2\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpi4gdzjc2.rb:21:in `test_is_happy'\n\
    \     18:     assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 21:     assert_equal(false, candidate.call(\"aabb\"))\n     22:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     23:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     24:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.010899553 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.75 tests/s, 366.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9vvvmhfc\nStarted\n.\nFinished in 0.001242187 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    805.03 tests/s, 6440.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjuve3czs\nStarted\n.\nFinished in 0.000872643 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1145.94 tests/s, 9167.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppgcvbb02\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmppgcvbb02.rb:21:in `test_is_happy'\n\
    \     18:     assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 21:     assert_equal(false, candidate.call(\"aabb\"))\n     22:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     23:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     24:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.011960657 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    83.61 tests/s, 334.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc0ufl2db\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpc0ufl2db.rb:18:in `test_is_happy'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_is_happy\n\
    \     17:     candidate = method(:is_happy)\n  => 18:     assert_equal(false,\
    \ candidate.call(\"a\"))\n     19:     assert_equal(false, candidate.call(\"aa\"\
    ))\n     20:     assert_equal(true, candidate.call(\"abcd\"))\n     21:     assert_equal(false,\
    \ candidate.call(\"aabb\"))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n\
    ? ni   \n===============================================================================\n\
    \nFinished in 0.011415546 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.60 tests/s, 87.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyjjgl4hd\nStarted\n.\nFinished in 0.000605847 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1650.58 tests/s, 13204.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpemouo81b\nStarted\n.\nFinished in 0.000633914 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1577.50 tests/s, 12620.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5m_s56bq\nStarted\n.\nFinished in 0.001462467 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    683.78 tests/s, 5470.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.scan(/.../).each do |s|\n    return false if s[0] == s[1] || s[0] ==\
    \ s[2] || s[1] == s[2]\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmporvl_ua7\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmporvl_ua7.rb:29:in `test_is_happy'\n\
    \     26:     assert_equal(true, candidate.call(\"adb\"))\n     27:     assert_equal(false,\
    \ candidate.call(\"xyy\"))\n     28:     assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n  => 29:     assert_equal(false, candidate.call(\"iopaxioi\"))\n\
    \     30:   end\n     31: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n\
    ? tru  \n===============================================================================\n\
    \nFinished in 0.00867054 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.33 tests/s, 922.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8mmjhwyw\nStarted\n.\nFinished in 0.001001524 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    998.48 tests/s, 7987.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkl3qib39\nStarted\n.\nFinished in 0.0008859 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1128.80 tests/s, 9030.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq32f3bw1\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpq32f3bw1.rb:18:in `test_is_happy'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_is_happy\n\
    \     17:     candidate = method(:is_happy)\n  => 18:     assert_equal(false,\
    \ candidate.call(\"a\"))\n     19:     assert_equal(false, candidate.call(\"aa\"\
    ))\n     20:     assert_equal(true, candidate.call(\"abcd\"))\n     21:     assert_equal(false,\
    \ candidate.call(\"aabb\"))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n\
    ? ni   \n===============================================================================\n\
    \nFinished in 0.007873232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.01 tests/s, 127.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjh1_404h\nStarted\n.\nFinished in 0.001092678 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    915.18 tests/s, 7321.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf4x4v424\nStarted\n.\nFinished in 0.000914157 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1093.90 tests/s, 8751.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.each_char.with_index do |char, index|\n    return false if s[index\
    \ + 1] == char && s[index + 2] == char\n  end\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate\
    \ = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false,\
    \ candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n\
    \    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"\
    adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg5gcmh91\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpg5gcmh91.rb:25:in `test_is_happy'\n\
    \     22:     assert_equal(false, candidate.call(\"a\"))\n     23:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     24:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 25:     assert_equal(false, candidate.call(\"aabb\"))\n     26:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     27:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     28:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.010204426 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.00 tests/s, 391.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa1z15s95\nStarted\n.\nFinished in 0.001426688 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    700.92 tests/s, 5607.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq2hu8086\nStarted\n.\nFinished in 0.00095419 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1048.01 tests/s, 8384.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwivd1n_0\nStarted\n.\nFinished in 0.001071813 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    933.00 tests/s, 7463.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx94a_0ah\nStarted\n.\nFinished in 0.000859328 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1163.70 tests/s, 9309.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp055b9ixo\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmp055b9ixo.rb:21:in `test_is_happy'\n\
    \     18:     assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 21:     assert_equal(false, candidate.call(\"aabb\"))\n     22:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     23:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     24:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.017156848 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    58.29 tests/s, 233.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg28_op9e\nStarted\n.\nFinished in 0.001288183 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    776.29 tests/s, 6210.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2r0ng251\nStarted\n.\nFinished in 0.001192698 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    838.44 tests/s, 6707.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptw3qpy7n\nStarted\n.\nFinished in 0.000558225 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1791.39 tests/s, 14331.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0ukn79mt\nStarted\n.\nFinished in 0.001228191 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    814.21 tests/s, 6513.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp50apk46t\nStarted\n.\nFinished in 0.000861265 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1161.08 tests/s, 9288.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.split('').each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnb81bjs2\nStarted\n.\nFinished in 0.001185697 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    843.39 tests/s, 6747.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpujgp97bi\nStarted\n.\nFinished in 0.000598309 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1671.38 tests/s, 13371.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplrzo4otm\nStarted\n.\nFinished in 0.001959425 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    510.35 tests/s, 4082.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgisgfwz1\nStarted\n.\nFinished in 0.001178993 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    848.18 tests/s, 6785.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl7ehigdb\nStarted\n.\nFinished in 0.000872066 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1146.70 tests/s, 9173.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp387ey6ll\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmp387ey6ll.rb:18:in `test_is_happy'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_is_happy\n\
    \     17:     candidate = method(:is_happy)\n  => 18:     assert_equal(false,\
    \ candidate.call(\"a\"))\n     19:     assert_equal(false, candidate.call(\"aa\"\
    ))\n     20:     assert_equal(true, candidate.call(\"abcd\"))\n     21:     assert_equal(false,\
    \ candidate.call(\"aabb\"))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n\
    ? ni   \n===============================================================================\n\
    \nFinished in 0.0073679 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.72 tests/s, 135.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8dzvdtka\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmp8dzvdtka.rb:18:in `test_is_happy'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_is_happy\n\
    \     17:     candidate = method(:is_happy)\n  => 18:     assert_equal(false,\
    \ candidate.call(\"a\"))\n     19:     assert_equal(false, candidate.call(\"aa\"\
    ))\n     20:     assert_equal(true, candidate.call(\"abcd\"))\n     21:     assert_equal(false,\
    \ candidate.call(\"aabb\"))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n\
    ? ni   \n===============================================================================\n\
    \nFinished in 0.010795107 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.63 tests/s, 92.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbwptw9lr\nStarted\n.\nFinished in 0.000740868 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1349.77 tests/s, 10798.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_dpwvkmz\nStarted\n.\nFinished in 0.000636535 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1571.01 tests/s, 12568.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpofkxfpxq\nStarted\n.\nFinished in 0.000669667 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1493.28 tests/s, 11946.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi0_uu_hq\nStarted\n.\nFinished in 0.001149872 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    869.66 tests/s, 6957.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm0acfwx5\nStarted\n.\nFinished in 0.000857709 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1165.90 tests/s, 9327.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  if s.length < 3\n    return\
    \ false\n  end\n  s.each_char.with_index do |char, index|\n    if index < s.length\
    \ - 2\n      if char == s[index + 1] || char == s[index + 2] || s[index + 1] ==\
    \ s[index + 2]\n        return false\n      end\n    end\n  end\n  return true\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyhwcwck_\nStarted\n.\nFinished in 0.000816065 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1225.39 tests/s, 9803.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiksgvedb\nStarted\n.\nFinished in 0.001457544 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    686.09 tests/s, 5488.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph274etl9\nStarted\n.\nFinished in 0.001483499 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    674.08 tests/s, 5392.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplov98q8n\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmplov98q8n.rb:18:in `test_is_happy'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_is_happy\n\
    \     17:     candidate = method(:is_happy)\n  => 18:     assert_equal(false,\
    \ candidate.call(\"a\"))\n     19:     assert_equal(false, candidate.call(\"aa\"\
    ))\n     20:     assert_equal(true, candidate.call(\"abcd\"))\n     21:     assert_equal(false,\
    \ candidate.call(\"aabb\"))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n\
    ? ni   \n===============================================================================\n\
    \nFinished in 0.010756064 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.97 tests/s, 92.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnf6kbhyl\nStarted\n.\nFinished in 0.001417797 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    705.32 tests/s, 5642.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnaw5h0s1\nStarted\n.\nFinished in 0.001102666 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    906.89 tests/s, 7255.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu08ecsx4\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpu08ecsx4.rb:21:in `test_is_happy'\n\
    \     18:     assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 21:     assert_equal(false, candidate.call(\"aabb\"))\n     22:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     23:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     24:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.010560297 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    94.69 tests/s, 378.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps_yvo1ku\nStarted\n.\nFinished in 0.000680748 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1468.97 tests/s, 11751.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuo440obl\nStarted\n.\nFinished in 0.00096299 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1038.43 tests/s, 8307.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4paxlt_7\nStarted\n.\nFinished in 0.00098564 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1014.57 tests/s, 8116.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp7qcdsrz\nStarted\n.\nFinished in 0.00133115 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    751.23 tests/s, 6009.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxsf7esxz\nStarted\n.\nFinished in 0.00085609 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1168.10 tests/s, 9344.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.scan(/.../).uniq.length == s.length / 3\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate\
    \ = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false,\
    \ candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n\
    \    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"\
    adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwo8vswkj\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpwo8vswkj.rb:22:in `test_is_happy'\n\
    \     19:     assert_equal(false, candidate.call(\"a\"))\n     20:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     21:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 22:     assert_equal(false, candidate.call(\"aabb\"))\n     23:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     24:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     25:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.013153802 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.02 tests/s, 304.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp20h7833c\nStarted\n.\nFinished in 0.000724718 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1379.85 tests/s, 11038.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6f8fhzo6\nStarted\n.\nFinished in 0.000843865 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1185.02 tests/s, 9480.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptt6sblb3\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmptt6sblb3.rb:21:in `test_is_happy'\n\
    \     18:     assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 21:     assert_equal(false, candidate.call(\"aabb\"))\n     22:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     23:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     24:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.010219056 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    97.86 tests/s, 391.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv1bzfr89\nStarted\n.\nFinished in 0.001122097 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    891.19 tests/s, 7129.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7fd_09ic\nStarted\n.\nFinished in 0.000640074 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1562.32 tests/s, 12498.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  if s.length < 3\n    return\
    \ false\n  end\n  s.length.times do |i|\n    if i + 3 <= s.length\n      if s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n        return false\n\
    \      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcl0ml9a7\nStarted\n.\nFinished in 0.000913227 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1095.02 tests/s, 8760.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  if s.length < 3\n    return\
    \ false\n  end\n  i = 0\n  while i < s.length - 2\n    if s[i] == s[i + 1] ||\
    \ s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n      return false\n    end\n    i\
    \ += 1\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnb2wp8xk\nStarted\n.\nFinished in 0.000728644 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1372.41 tests/s, 10979.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp57ppbptp\nStarted\n.\nFinished in 0.0009586 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1043.19 tests/s, 8345.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph9c54n94\nStarted\n.\nFinished in 0.00077385 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1292.24 tests/s, 10337.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa033ilki\nStarted\n.\nFinished in 0.000733578 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1363.18 tests/s, 10905.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1dr1jzl7\nStarted\n.\nFinished in 0.000615563 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1624.53 tests/s, 12996.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4pewy3ei\nStarted\n.\nFinished in 0.000569189 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1756.89 tests/s, 14055.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.each_char.with_index do |char, index|\n    return false if s[index]\
    \ == s[index + 1] && s[index + 1] == s[index + 2]\n  end\n  true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp25t316ai\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmp25t316ai.rb:25:in `test_is_happy'\n\
    \     22:     assert_equal(false, candidate.call(\"a\"))\n     23:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     24:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 25:     assert_equal(false, candidate.call(\"aabb\"))\n     26:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     27:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     28:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.016533204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    60.48 tests/s, 241.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvduz31mb\nStarted\n.\nFinished in 0.00143333 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    697.68 tests/s, 5581.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvz_md7zj\nStarted\n.\nFinished in 0.001409865 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    709.29 tests/s, 5674.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpijfrxu_i\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpijfrxu_i.rb:21:in `test_is_happy'\n\
    \     18:     assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 21:     assert_equal(false, candidate.call(\"aabb\"))\n     22:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     23:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     24:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.008046146 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.28 tests/s, 497.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnrbh5mww\nStarted\n.\nFinished in 0.000939476 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1064.42 tests/s, 8515.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |x, y, z| x != y && y != z && x != z }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph7m9hops\nStarted\n.\nFinished in 0.001099001 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    909.92 tests/s, 7279.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9ghetpb3\nStarted\n.\nFinished in 0.000727486 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1374.60 tests/s, 10996.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgqv2v84t\nStarted\n.\nFinished in 0.000811019 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1233.02 tests/s, 9864.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptg5b7_r5\nStarted\n.\nFinished in 0.000954143 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1048.06 tests/s, 8384.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptr2xhcvh\nStarted\n.\nFinished in 0.000791196 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1263.91 tests/s, 10111.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3).all? { |a, b, c| a != b && b != c && a != c\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfudbs4eo\nStarted\n.\nFinished in 0.001488473 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    671.83 tests/s, 5374.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprrabpgjn\nStarted\n.\nFinished in 0.001353042 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    739.08 tests/s, 5912.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx_5selc8\nStarted\n.\nFinished in 0.000758967 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1317.58 tests/s, 10540.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc5rl9pm9\nStarted\n.\nFinished in 0.001560486 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    640.83 tests/s, 5126.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkc1jm6qy\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpkc1jm6qy.rb:21:in `test_is_happy'\n\
    \     18:     assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 21:     assert_equal(false, candidate.call(\"aabb\"))\n     22:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     23:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     24:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.009065728 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.31 tests/s, 441.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp70jtbu05\nStarted\n.\nFinished in 0.000546558 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1829.63 tests/s, 14637.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgp33u9xv\nStarted\n.\nFinished in 0.001042675 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    959.07 tests/s, 7672.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw1dwi4g7\nStarted\n.\nFinished in 0.000900663 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1110.29 tests/s, 8882.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1spo1fzz\nStarted\n.\nFinished in 0.000859402 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1163.60 tests/s, 9308.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3).all? { |a, b, c| a != b && b != c && a != c\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplrzu4z6i\nStarted\n.\nFinished in 0.001458946 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    685.43 tests/s, 5483.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_buybgrb\nStarted\n.\nFinished in 0.000878802 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1137.91 tests/s, 9103.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpawzkubt1\nStarted\n.\nFinished in 0.00076184 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1312.61 tests/s, 10500.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp45awhkts\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmp45awhkts.rb:21:in `test_is_happy'\n\
    \     18:     assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 21:     assert_equal(false, candidate.call(\"aabb\"))\n     22:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     23:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     24:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.011794527 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.79 tests/s, 339.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcrjph9td\nStarted\n.\nFinished in 0.001202022 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    831.93 tests/s, 6655.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfqdlzmgk\nStarted\n.\nFinished in 0.001200815 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    832.77 tests/s, 6662.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplcty7l_q\nStarted\n.\nFinished in 0.000955648 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1046.41 tests/s, 8371.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5wzgnewc\nStarted\n.\nFinished in 0.001472542 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    679.10 tests/s, 5432.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.each_char.each_cons(3).all? { |a, b, c| a != b && b != c && a != c\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy_a3ifek\nStarted\n.\nFinished in 0.000716658 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1395.37 tests/s, 11162.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpil2i5u_v\nStarted\n.\nFinished in 0.000652282 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1533.08 tests/s, 12264.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvaf486q6\nStarted\n.\nFinished in 0.000620065 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1612.73 tests/s, 12901.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3).all? { |a, b, c| a != b && b != c && a != c\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppj_vb1hx\nStarted\n.\nFinished in 0.000955099 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1047.01 tests/s, 8376.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.scan(/.../).each do |sub|\n    return false if sub[0] == sub[1] ||\
    \ sub[0] == sub[2] || sub[1] == sub[2]\n  end\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate\
    \ = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false,\
    \ candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n\
    \    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"\
    adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcziukxdj\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpcziukxdj.rb:29:in `test_is_happy'\n\
    \     26:     assert_equal(true, candidate.call(\"adb\"))\n     27:     assert_equal(false,\
    \ candidate.call(\"xyy\"))\n     28:     assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n  => 29:     assert_equal(false, candidate.call(\"iopaxioi\"))\n\
    \     30:   end\n     31: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n\
    ? tru  \n===============================================================================\n\
    \nFinished in 0.008382421 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.30 tests/s, 954.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph5l0mdji\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmph5l0mdji.rb:18:in `test_is_happy'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_is_happy\n\
    \     17:     candidate = method(:is_happy)\n  => 18:     assert_equal(false,\
    \ candidate.call(\"a\"))\n     19:     assert_equal(false, candidate.call(\"aa\"\
    ))\n     20:     assert_equal(true, candidate.call(\"abcd\"))\n     21:     assert_equal(false,\
    \ candidate.call(\"aabb\"))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n\
    ? ni   \n===============================================================================\n\
    \nFinished in 0.01337106 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.79 tests/s, 74.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2kfdg2k_\nStarted\n.\nFinished in 0.000601275 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1663.13 tests/s, 13305.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsz0s36tc\nStarted\n.\nFinished in 0.000601102 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1663.61 tests/s, 13308.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5bbuseg4\nStarted\n.\nFinished in 0.001011595 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    988.54 tests/s, 7908.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj4a2s3wi\nStarted\n.\nFinished in 0.000897155 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1114.63 tests/s, 8917.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmbxmcueh\nStarted\n.\nFinished in 0.001486265 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    672.83 tests/s, 5382.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp22h3xmpt\nStarted\n.\nFinished in 0.001595372 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    626.81 tests/s, 5014.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiiv8frq3\nStarted\n.\nFinished in 0.000710018 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1408.41 tests/s, 11267.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3).all? { |a, b, c| a != b && b != c && a != c\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq2hqqbg9\nStarted\n.\nFinished in 0.001920544 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    520.69 tests/s, 4165.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1d0bwccz\nStarted\n.\nFinished in 0.000962026 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1039.47 tests/s, 8315.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwebnextw\nStarted\n.\nFinished in 0.000697734 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1433.21 tests/s, 11465.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc7ns0n3y\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpc7ns0n3y.rb:21:in `test_is_happy'\n\
    \     18:     assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 21:     assert_equal(false, candidate.call(\"aabb\"))\n     22:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     23:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     24:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.014866086 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.27 tests/s, 269.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpddrmqvw2\nStarted\n.\nFinished in 0.000997191 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1002.82 tests/s, 8022.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbljfx5dn\nStarted\n.\nFinished in 0.000782872 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1277.35 tests/s, 10218.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvqjgbx5x\nStarted\n.\nFinished in 0.000601673 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1662.03 tests/s, 13296.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbgpv7e1m\nStarted\n.\nFinished in 0.00050917 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1963.98 tests/s, 15711.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw8dk6uqb\nStarted\n.\nFinished in 0.000561429 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1781.17 tests/s, 14249.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7ty0d3z1\nStarted\n.\nFinished in 0.0005415 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1846.72 tests/s, 14773.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3dxo8qdz\nStarted\n.\nFinished in 0.000517071 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1933.97 tests/s, 15471.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppz5413hf\nStarted\n.\nFinished in 0.000538294 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1857.72 tests/s, 14861.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp41xijpah\nStarted\n.\nFinished in 0.000504735 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1981.24 tests/s, 15849.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6vp7r0z3\nStarted\n.\nFinished in 0.000560267 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1784.86 tests/s, 14278.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb_zrli7b\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpb_zrli7b.rb:21:in `test_is_happy'\n\
    \     18:     assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 21:     assert_equal(false, candidate.call(\"aabb\"))\n     22:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     23:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     24:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.006857473 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.83 tests/s, 583.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo3eyc1io\nStarted\n.\nFinished in 0.000521313 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1918.23 tests/s, 15345.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5oagiyur\nStarted\n.\nFinished in 0.000649194 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1540.37 tests/s, 12322.97 assertions/s\n"
  exit_code: 0
  status: OK
