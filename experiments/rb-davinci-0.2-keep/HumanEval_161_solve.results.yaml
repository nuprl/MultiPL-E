name: HumanEval_161_solve
language: ruby
results:
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpiuggporq\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpiuggporq.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.014818195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.48 tests/s, 134.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqme65h_1\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpqme65h_1.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.009806832 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    101.97 tests/s, 101.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo4zg7eb7\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpo4zg7eb7.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006885871 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.22 tests/s, 290.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp82dh6ff5\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp82dh6ff5.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.008573961 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    116.63 tests/s, 233.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt031t_s7\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpt031t_s7.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.007133142 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.19 tests/s, 140.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvdz7zkpk\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpvdz7zkpk.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.008520439 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.36 tests/s, 117.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk9j4zgj1\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpk9j4zgj1.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.012148483 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.31 tests/s, 82.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpblu631qz\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpblu631qz.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.017443344 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.33 tests/s, 114.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk_ksra32\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpk_ksra32.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.012200013 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.97 tests/s, 163.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm4poyhq4\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpm4poyhq4.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.015860045 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    63.05 tests/s, 126.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpaclkx0bo\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpaclkx0bo.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.00982362 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    101.80 tests/s, 101.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkrz73jvz\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpkrz73jvz.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.009489659 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.38 tests/s, 210.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp67sucrg1\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp67sucrg1.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.007538741 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.65 tests/s, 132.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmzo79dcy\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpmzo79dcy.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.014040561 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.22 tests/s, 142.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.tr(\"a-zA-Z\", \"A-Za-z\").reverse\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4bjn86wb\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp4bjn86wb.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.011387272 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.82 tests/s, 87.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpba_fww1s\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpba_fww1s.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.009882844 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    101.19 tests/s, 202.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp92r2g524\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp92r2g524.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.016605142 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    60.22 tests/s, 60.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5ie7t0xg\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp5ie7t0xg.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.009590109 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    104.27 tests/s, 208.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpa_p3u9o6\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpa_p3u9o6.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.014152512 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.66 tests/s, 141.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0cif77pn\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp0cif77pn.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.011952385 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    83.67 tests/s, 83.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphtd56uoa\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmphtd56uoa.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.006840727 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    146.18 tests/s, 146.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpacua3h_b\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpacua3h_b.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.006866817 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.63 tests/s, 145.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4wrute0s\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp4wrute0s.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.007260997 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.72 tests/s, 275.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0fqijdi8\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp0fqijdi8.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.016805444 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    59.50 tests/s, 119.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.tr('A-Za-z', 'a-zA-Z').reverse\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyy5rkycn\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpyy5rkycn.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.009382355 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    106.58 tests/s, 106.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpee7c_0v1\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpee7c_0v1.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.007438715 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.43 tests/s, 134.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc_opi9lr\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpc_opi9lr.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.010865307 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.04 tests/s, 184.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcu2t6y3w\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpcu2t6y3w.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.010656473 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    93.84 tests/s, 187.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnxa2s4zv\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpnxa2s4zv.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.010313034 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.96 tests/s, 193.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp99cz3et\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpp99cz3et.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.01532511 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    65.25 tests/s, 130.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp80j4vrj0\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp80j4vrj0.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.012977005 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.06 tests/s, 154.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4qnt88qk\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp4qnt88qk.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.012645643 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    79.08 tests/s, 79.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp06qn_3fq\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp06qn_3fq.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.007351598 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.02 tests/s, 136.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyvi9l499\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpyvi9l499.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.00974611 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    102.61 tests/s, 205.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm0xbu3ow\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpm0xbu3ow.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.009555032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    104.66 tests/s, 209.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp81uez2fw\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp81uez2fw.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.010158626 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.44 tests/s, 196.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptljvirjg\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmptljvirjg.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.011110792 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.00 tests/s, 180.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp94knhkh1\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp94knhkh1.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.009877309 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    101.24 tests/s, 202.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1y62oz5f\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp1y62oz5f.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.013285332 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.27 tests/s, 150.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  if s.match(/[a-zA-Z]/)\n    s.swapcase\n\
    \  else\n    s.reverse\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n   \
    \ assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkl5h44ju\nStarted\n.\nFinished in 0.000815484 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1226.27 tests/s, 9810.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprgm8j08s\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmprgm8j08s.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.011735869 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.21 tests/s, 170.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpujfufix8\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpujfufix8.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006779381 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.51 tests/s, 295.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1uarjdr3\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp1uarjdr3.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.010841955 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.23 tests/s, 184.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.tr('a-zA-Z', 'A-Za-z').reverse\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9omaafng\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp9omaafng.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.006803612 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    146.98 tests/s, 146.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    s.chars.map { |c| c =~ /[a-z]/\
    \ ? c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptjkxnu6w\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmptjkxnu6w.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.009795943 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    102.08 tests/s, 204.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptfsukp1z\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmptfsukp1z.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.011753836 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.08 tests/s, 85.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjb69_grl\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpjb69_grl.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.010633654 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    94.04 tests/s, 94.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.reverse.tr('a-zA-Z', 'A-Za-z')\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm62efmo4\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpm62efmo4.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.016566185 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    60.36 tests/s, 60.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c.match(/[a-z]/i)\
    \ ? c.swapcase : c }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3qn43qt6\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp3qn43qt6.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.011832862 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.51 tests/s, 169.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpozodolpr\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpozodolpr.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.01562638 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    63.99 tests/s, 63.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwzgkvtnk\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpwzgkvtnk.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.009015972 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.91 tests/s, 221.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6o9q32gl\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp6o9q32gl.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.009715345 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    102.93 tests/s, 205.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmwvc01zv\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpmwvc01zv.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.012176007 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.13 tests/s, 164.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm_vda86a\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpm_vda86a.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.007662035 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.51 tests/s, 130.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8wl_u3cq\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp8wl_u3cq.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.01008232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.18 tests/s, 99.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2qvyiw7e\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp2qvyiw7e.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.019340357 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    51.71 tests/s, 103.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk8rcrfh2\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpk8rcrfh2.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.014526533 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.84 tests/s, 137.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjne20y59\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpjne20y59.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.008100395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.45 tests/s, 246.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3x5qqwu_\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp3x5qqwu_.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.008024994 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.61 tests/s, 249.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp05w2voqi\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp05w2voqi.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.014048686 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.18 tests/s, 142.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpiy81bpyw\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpiy81bpyw.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.014786751 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.63 tests/s, 67.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpiryq82x0\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpiryq82x0.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.011301581 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.48 tests/s, 176.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |char| char =~ /[a-z]/\
    \ ? char.upcase : char.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp717cof0o\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp717cof0o.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.008229782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.51 tests/s, 243.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpok2te1l5\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpok2te1l5.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.011525439 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.76 tests/s, 173.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpidgz69rz\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpidgz69rz.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.00762352 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.17 tests/s, 131.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpa9ekurrj\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpa9ekurrj.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.010398738 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.17 tests/s, 96.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp68wkm1i8\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp68wkm1i8.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.013389898 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.68 tests/s, 149.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmbw5dbvs\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpmbw5dbvs.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.019205428 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    52.07 tests/s, 104.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpigy1prn8\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpigy1prn8.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.011291846 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.56 tests/s, 177.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvfz3vhuc\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpvfz3vhuc.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.010405907 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.10 tests/s, 192.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2vx1v6q_\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp2vx1v6q_.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.008170271 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.39 tests/s, 244.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |char| char =~ /[a-z]/\
    \ ? char.upcase : char.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjuzp7kck\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpjuzp7kck.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.00749447 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.43 tests/s, 266.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf6xs168i\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpf6xs168i.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.007560041 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.27 tests/s, 132.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpupkadjb_\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpupkadjb_.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.013780854 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.56 tests/s, 72.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprw274bl7\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmprw274bl7.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.008202938 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.91 tests/s, 243.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7ad6mzgu\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp7ad6mzgu.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.007609966 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.41 tests/s, 131.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6496axfn\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp6496axfn.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.010972408 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.14 tests/s, 182.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnis909jz\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpnis909jz.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.014042847 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.21 tests/s, 142.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfd7hu1uh\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpfd7hu1uh.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.010029202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.71 tests/s, 99.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8vucvktn\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp8vucvktn.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.010784675 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.72 tests/s, 185.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnnw9nuc9\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpnnw9nuc9.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.008829756 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.25 tests/s, 226.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.tr('a-zA-Z', 'A-Za-z').reverse\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsvsunw5m\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpsvsunw5m.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.011453172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.31 tests/s, 87.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxv115m6i\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpxv115m6i.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.017269699 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.90 tests/s, 115.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7qv7gr2y\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp7qv7gr2y.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.014850526 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.34 tests/s, 134.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyknzmc13\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpyknzmc13.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.012775356 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    78.28 tests/s, 156.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqukdluxi\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpqukdluxi.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.014338732 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.74 tests/s, 139.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkij0gia5\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpkij0gia5.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.007950642 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.78 tests/s, 251.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo9oc4a3o\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpo9oc4a3o.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.00870178 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.92 tests/s, 229.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpy3ardmbs\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpy3ardmbs.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.013763165 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.66 tests/s, 145.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0_h4n4bt\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp0_h4n4bt.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.008338772 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.92 tests/s, 239.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwv4vyud8\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpwv4vyud8.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.0064977 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.90 tests/s, 153.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppjg9pgnz\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmppjg9pgnz.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.01037663 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.37 tests/s, 192.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkhq4rhg0\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpkhq4rhg0.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.010443832 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.75 tests/s, 191.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptdqhc7v8\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmptdqhc7v8.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.008900909 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.35 tests/s, 112.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc7jqm347\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpc7jqm347.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.011077393 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.27 tests/s, 180.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuxdjguk5\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpuxdjguk5.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.012892645 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.56 tests/s, 155.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpprx9krdh\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpprx9krdh.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.00733037 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.42 tests/s, 272.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| ('a'..'z').include?(c)\
    \ ? c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfxb5i15c\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpfxb5i15c.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.008536525 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.14 tests/s, 234.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpugvpubr_\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpugvpubr_.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.008511494 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.49 tests/s, 117.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfi09x8nf\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpfi09x8nf.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.013151123 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.04 tests/s, 152.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu01628s7\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpu01628s7.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.008902666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.33 tests/s, 224.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprc5l3yf1\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmprc5l3yf1.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.018841325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    53.07 tests/s, 106.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfv2s3klq\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpfv2s3klq.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.01463261 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.34 tests/s, 68.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3vlct_gw\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp3vlct_gw.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.013617472 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.44 tests/s, 146.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_cs05kan\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp_cs05kan.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.01198492 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    83.44 tests/s, 166.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpd8_8p05s\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpd8_8p05s.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.011250175 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.89 tests/s, 177.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpto4v28h3\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpto4v28h3.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.010343506 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.68 tests/s, 96.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkqehl2gk\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpkqehl2gk.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.012123026 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.49 tests/s, 164.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpul9h_rkc\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpul9h_rkc.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.008501499 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.63 tests/s, 117.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphpr1obnu\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmphpr1obnu.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.010385511 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.29 tests/s, 96.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm5wam664\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpm5wam664.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.013842014 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.24 tests/s, 144.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr0xre_fq\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpr0xre_fq.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.012477334 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.15 tests/s, 160.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpok9suh3_\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpok9suh3_.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.014541854 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.77 tests/s, 137.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c.match(/[a-z]/i)\
    \ ? c.swapcase : c }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2wf9b4p3\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp2wf9b4p3.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.016234568 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    61.60 tests/s, 123.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzqex63c1\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpzqex63c1.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.010883725 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.88 tests/s, 91.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc9jubtw0\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpc9jubtw0.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.010266768 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    97.40 tests/s, 97.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwezrf1wc\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpwezrf1wc.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.010934577 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.45 tests/s, 182.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprvqxdn3m\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmprvqxdn3m.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.007116245 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.52 tests/s, 140.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyva1ddt_\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpyva1ddt_.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.008861796 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.84 tests/s, 225.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7vun8q_9\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp7vun8q_9.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.008332612 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    120.01 tests/s, 120.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0u8zgvav\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp0u8zgvav.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.008735276 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.48 tests/s, 228.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.tr('a-zA-Z', 'A-Za-z').reverse\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxfq865f7\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpxfq865f7.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.017715264 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    56.45 tests/s, 56.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp63vc9dew\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp63vc9dew.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.013228054 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.60 tests/s, 151.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.tr(\"a-zA-Z\", \"A-Za-z\").reverse\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpti5o7ltn\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpti5o7ltn.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.014721005 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.93 tests/s, 67.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmlj6hgjs\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpmlj6hgjs.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.014781422 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.65 tests/s, 135.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzqc6r5k9\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpzqc6r5k9.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.012762671 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    78.35 tests/s, 78.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpaskdssq4\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpaskdssq4.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.011110056 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.01 tests/s, 90.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxh2gkas0\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpxh2gkas0.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.007944352 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.88 tests/s, 251.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpi2l3cs96\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpi2l3cs96.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.009244229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.18 tests/s, 216.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjeafp2k1\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpjeafp2k1.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.016525241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    60.51 tests/s, 121.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.reverse.tr('a-zA-Z', 'A-Za-z')\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdlhmsf9c\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpdlhmsf9c.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.014467468 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.12 tests/s, 69.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3kd5gbc_\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp3kd5gbc_.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.012823975 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.98 tests/s, 155.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcycn2vd3\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpcycn2vd3.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.009074333 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.20 tests/s, 220.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2kodbdon\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp2kodbdon.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.010231902 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    97.73 tests/s, 195.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqsolqp9k\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpqsolqp9k.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.0119109 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    83.96 tests/s, 167.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxg66yh_d\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpxg66yh_d.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.011863085 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.30 tests/s, 168.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpi_91wdws\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpi_91wdws.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.009282555 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.73 tests/s, 107.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsqka2yzd\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpsqka2yzd.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.020401592 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    49.02 tests/s, 98.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplqsdfqd1\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmplqsdfqd1.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.009746854 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    102.60 tests/s, 205.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map{|x| x =~ /[a-z]/ ? x.upcase\
    \ : x.downcase}.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpea46w7ud\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpea46w7ud.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.018351703 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    54.49 tests/s, 108.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6o9tugis\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp6o9tugis.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.012885779 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.60 tests/s, 155.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmujjx5id\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpmujjx5id.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.010880296 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.91 tests/s, 183.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0oo34_ch\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp0oo34_ch.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.012387765 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.72 tests/s, 161.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpiymlycab\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpiymlycab.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.008924089 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.06 tests/s, 224.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp852ydy7q\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp852ydy7q.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.006259254 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.76 tests/s, 159.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1e59brq_\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp1e59brq_.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.0071502 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.86 tests/s, 139.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp97bo_ci2\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp97bo_ci2.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.011371667 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.94 tests/s, 175.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map{|c| c.match(/[a-z]/i)\
    \ ? c.swapcase : c}.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj703wfuo\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpj703wfuo.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.007658421 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.58 tests/s, 261.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4al4910x\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp4al4910x.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.008465886 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.12 tests/s, 118.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6wvghzw3\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp6wvghzw3.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.011400089 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.72 tests/s, 87.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkp5l1m2m\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpkp5l1m2m.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.012353552 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.95 tests/s, 161.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpltv3sn0t\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpltv3sn0t.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.012312648 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.22 tests/s, 162.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpear0m79j\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpear0m79j.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.010395747 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.19 tests/s, 192.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpy8qac9c4\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpy8qac9c4.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.010781199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.75 tests/s, 185.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp33gd0coe\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp33gd0coe.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.008796987 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.68 tests/s, 113.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpucpq_0eq\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpucpq_0eq.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.016351275 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    61.16 tests/s, 122.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2vim3vjj\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp2vim3vjj.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.008856964 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.91 tests/s, 112.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphwa4i83e\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmphwa4i83e.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.013759949 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.67 tests/s, 72.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpknp75tia\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpknp75tia.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.012216417 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.86 tests/s, 81.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpck5x3358\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpck5x3358.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.015927159 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    62.79 tests/s, 125.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppx4zyay0\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmppx4zyay0.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.012253556 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.61 tests/s, 81.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfv0kj34v\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpfv0kj34v.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.007722572 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.49 tests/s, 258.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7bzshu4d\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp7bzshu4d.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.007494988 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.42 tests/s, 133.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.tr('a-zA-Z', 'A-Za-z').reverse\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2nl4cci0\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp2nl4cci0.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.008288519 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    120.65 tests/s, 120.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.tr('a-zA-Z', 'A-Za-z').reverse\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcu4q7nxq\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpcu4q7nxq.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.013550752 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.80 tests/s, 73.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp82ab0pl5\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp82ab0pl5.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.008098015 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.49 tests/s, 123.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwrievobk\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpwrievobk.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.00975949 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    102.46 tests/s, 204.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpixz46jrj\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpixz46jrj.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.008747245 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.32 tests/s, 114.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq7wj2bc6\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpq7wj2bc6.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.013999931 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.43 tests/s, 142.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpddtbz6ie\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpddtbz6ie.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.01138578 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.83 tests/s, 87.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzyydyqd4\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpzyydyqd4.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.007376667 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.56 tests/s, 271.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnqzmbc_c\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpnqzmbc_c.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.013291745 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.23 tests/s, 150.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |char| char =~ /[a-z]/\
    \ ? char.upcase : char.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyji737e3\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpyji737e3.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.008598949 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    116.29 tests/s, 232.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5h2latp1\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp5h2latp1.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.007468284 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.90 tests/s, 133.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.tr('a-zA-Z', 'A-Za-z').reverse\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0cjl3oyg\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp0cjl3oyg.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.009575842 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    104.43 tests/s, 104.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpztyzlebv\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpztyzlebv.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.008679264 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.22 tests/s, 115.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr37ka_71\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpr37ka_71.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.013980277 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.53 tests/s, 143.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkhd723bc\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpkhd723bc.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.0148627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.28 tests/s, 67.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpucn0mpqs\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpucn0mpqs.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.011726353 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.28 tests/s, 170.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6c8p4ozs\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp6c8p4ozs.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.007823724 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.82 tests/s, 255.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvg4dlzyg\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpvg4dlzyg.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.007684677 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.13 tests/s, 260.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbxaxv06j\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpbxaxv06j.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.014846575 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.36 tests/s, 67.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp52lhblb8\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp52lhblb8.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.011041409 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.57 tests/s, 181.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpltn726k0\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpltn726k0.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.016980792 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    58.89 tests/s, 58.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzny_ylki\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpzny_ylki.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.009261893 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.97 tests/s, 107.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5jbxa0f3\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp5jbxa0f3.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.010322771 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.87 tests/s, 193.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdzu4uo9z\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpdzu4uo9z.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.011745903 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.14 tests/s, 85.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3s4_bkjh\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp3s4_bkjh.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.009034126 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.69 tests/s, 221.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm0w64lvp\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpm0w64lvp.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.014643927 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.29 tests/s, 136.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpojqrh6if\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpojqrh6if.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.007238578 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    138.15 tests/s, 276.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwrjcunzu\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpwrjcunzu.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.010555983 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    94.73 tests/s, 189.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4xqh81fj\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp4xqh81fj.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.007190573 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.07 tests/s, 278.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpld446ojn\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpld446ojn.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.007264626 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.65 tests/s, 137.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5809l6zj\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp5809l6zj.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.006792448 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.22 tests/s, 147.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9qtqdsut\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp9qtqdsut.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.009456234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.75 tests/s, 105.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbs1xaypv\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpbs1xaypv.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006965634 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.56 tests/s, 287.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyk18iuov\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpyk18iuov.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.013403513 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.61 tests/s, 149.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz3zpuh4k\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpz3zpuh4k.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.017085717 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    58.53 tests/s, 117.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1q8y9896\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp1q8y9896.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.007394509 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.24 tests/s, 270.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsr8ylg_x\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpsr8ylg_x.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006920086 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.51 tests/s, 289.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
