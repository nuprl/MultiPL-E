name: HumanEval_30_get_positive
language: ruby
results:
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphws3q0ii\nStarted\n.\nFinished in 0.000333536 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2998.18 tests/s, 11992.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpboarww2t\nStarted\n.\nFinished in 0.000361399 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2767.02 tests/s, 11068.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiur8xv9o\nStarted\n.\nFinished in 0.000353064 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2832.35 tests/s, 11329.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpidqgyxfy\nStarted\n.\nFinished in 0.00031907 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3134.11 tests/s, 12536.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmtx1qqnz\nStarted\n.\nFinished in 0.000306015 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3267.81 tests/s, 13071.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5292sbn9\nStarted\n.\nFinished in 0.000335071 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2984.44 tests/s, 11937.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv1mblfm0\nStarted\n.\nFinished in 0.000312828 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3196.64 tests/s, 12786.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl8wifp84\nStarted\n.\nFinished in 0.000326724 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3060.69 tests/s, 12242.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpciorss3f\nStarted\n.\nFinished in 0.000348696 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2867.83 tests/s, 11471.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3ma5prcq\nStarted\n.\nFinished in 0.000336382 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2972.81 tests/s, 11891.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8mq9s5re\nStarted\n.\nFinished in 0.000362361 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2759.68 tests/s, 11038.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp__rbi0xr\nStarted\n.\nFinished in 0.000341461 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2928.59 tests/s, 11714.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsfzqok8w\nStarted\n.\nFinished in 0.000312286 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3202.19 tests/s, 12808.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprh3exlo1\nStarted\n.\nFinished in 0.000327735 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3051.25 tests/s, 12204.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpus1h4vab\nStarted\n.\nFinished in 0.000392057 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2550.65 tests/s, 10202.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphovy5q7k\nStarted\n.\nFinished in 0.000317358 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3151.02 tests/s, 12604.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |i| i\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuc8tow80\nStarted\n.\nFinished in 0.000333989 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2994.11 tests/s, 11976.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpli8jkk1i\nStarted\n.\nFinished in 0.000302298 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3307.99 tests/s, 13231.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1n820ing\nStarted\n.\nFinished in 0.000369505 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2706.32 tests/s, 10825.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8ca5nc7b\nStarted\n.\nFinished in 0.000341632 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2927.13 tests/s, 11708.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp864m7u0y\nStarted\n.\nFinished in 0.000310905 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3216.42 tests/s, 12865.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi9lw5yg3\nStarted\n.\nFinished in 0.000538873 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1855.72 tests/s, 7422.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyb0nof96\nStarted\n.\nFinished in 0.000302809 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3302.41 tests/s, 13209.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5qdte0vm\nStarted\n.\nFinished in 0.000466196 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2145.02 tests/s, 8580.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxpn95ywp\nStarted\n.\nFinished in 0.000323469 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3091.49 tests/s, 12365.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7zprjduk\nStarted\n.\nFinished in 0.000351801 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2842.52 tests/s, 11370.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp049025hf\nStarted\n.\nFinished in 0.000322977 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3096.20 tests/s, 12384.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp913euc23\nStarted\n.\nFinished in 0.000309813 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3227.75 tests/s, 12911.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpicx6d9gb\nStarted\n.\nFinished in 0.000292631 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3417.27 tests/s, 13669.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplycf621y\nStarted\n.\nFinished in 0.000318168 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3142.99 tests/s, 12571.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph98nmr34\nStarted\n.\nFinished in 0.00046803 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2136.62 tests/s, 8546.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3y2d76nh\nStarted\n.\nFinished in 0.000321896 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3106.59 tests/s, 12426.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc1kg0y3g\nStarted\n.\nFinished in 0.00032477 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3079.10 tests/s, 12316.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf_8ec6zs\nStarted\n.\nFinished in 0.000339929 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2941.79 tests/s, 11767.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1yt_tvaq\nStarted\n.\nFinished in 0.000366349 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2729.64 tests/s, 10918.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n\tl.select {|x| x\
    \ > 0}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp36x4r3s8\nStarted\n.\nFinished in 0.000316695 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3157.61 tests/s, 12630.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa5inypg0\nStarted\n.\nFinished in 0.000311015 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3215.28 tests/s, 12861.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq19l2522\nStarted\n.\nFinished in 0.000325943 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3068.02 tests/s, 12272.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnt7_qln1\nStarted\n.\nFinished in 0.000324921 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3077.67 tests/s, 12310.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6cnth_d3\nStarted\n.\nFinished in 0.000444125 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2251.62 tests/s, 9006.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxopsd_jy\nStarted\n.\nFinished in 0.000320172 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3123.32 tests/s, 12493.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpikrmfg6y\nStarted\n.\nFinished in 0.00039901 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2506.20 tests/s, 10024.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9obrnwaj\nStarted\n.\nFinished in 0.000354257 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2822.81 tests/s, 11291.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppgy5j3rq\nStarted\n.\nFinished in 0.000346251 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2888.08 tests/s, 11552.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplkye6sh0\nStarted\n.\nFinished in 0.000330582 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3024.97 tests/s, 12099.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpus1h3jrd\nStarted\n.\nFinished in 0.000598435 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1671.03 tests/s, 6684.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfdha3b6y\nStarted\n.\nFinished in 0.000316847 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3156.10 tests/s, 12624.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5s95igud\nStarted\n.\nFinished in 0.000337805 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2960.29 tests/s, 11841.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzs98f2gl\nStarted\n.\nFinished in 0.000321284 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3112.51 tests/s, 12450.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select{|x| x >\
    \ 0}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n \
    \ def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7ri4yecb\nStarted\n.\nFinished in 0.000398359 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2510.30 tests/s, 10041.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw599q_c5\nStarted\n.\nFinished in 0.000503858 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1984.69 tests/s, 7938.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppr_i7n45\nStarted\n.\nFinished in 0.000338096 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2957.74 tests/s, 11830.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2be2w_7z\nStarted\n.\nFinished in 0.000417795 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2393.52 tests/s, 9574.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |i| i\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw2h_gs2k\nStarted\n.\nFinished in 0.000367562 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2720.63 tests/s, 10882.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwb1j6tlh\nStarted\n.\nFinished in 0.000351681 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2843.49 tests/s, 11373.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpodrbe3g7\nStarted\n.\nFinished in 0.000290005 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3448.22 tests/s, 13792.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwhws89iv\nStarted\n.\nFinished in 0.000304222 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3287.07 tests/s, 13148.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnieoqjor\nStarted\n.\nFinished in 0.000337163 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2965.92 tests/s, 11863.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdx54t6u3\nStarted\n.\nFinished in 0.000360909 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2770.78 tests/s, 11083.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppewq5e6u\nStarted\n.\nFinished in 0.000336784 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2969.26 tests/s, 11877.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplxsxhp_k\nStarted\n.\nFinished in 0.000327526 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3053.19 tests/s, 12212.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpddg3dri8\nStarted\n.\nFinished in 0.000341022 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2932.36 tests/s, 11729.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |i| i\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqz46rtzt\nStarted\n.\nFinished in 0.000329178 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3037.87 tests/s, 12151.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwn55d4eu\nStarted\n.\nFinished in 0.000334669 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2988.03 tests/s, 11952.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmvmgt03v\nStarted\n.\nFinished in 0.000370416 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2699.67 tests/s, 10798.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuxsrsht3\nStarted\n.\nFinished in 0.000383211 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2609.53 tests/s, 10438.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp99o7sflq\nStarted\n.\nFinished in 0.000458121 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2182.83 tests/s, 8731.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8trb6gca\nStarted\n.\nFinished in 0.000387128 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2583.12 tests/s, 10332.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3bt32zwf\nStarted\n.\nFinished in 0.000340941 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2933.06 tests/s, 11732.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n\tl.select {|x| x\
    \ > 0}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgqbo070l\nStarted\n.\nFinished in 0.000421262 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2373.82 tests/s, 9495.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuhr1mf2q\nStarted\n.\nFinished in 0.000730924 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1368.13 tests/s, 5472.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpphr_wcms\nStarted\n.\nFinished in 0.00033021 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3028.38 tests/s, 12113.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpevdgsg0r\nStarted\n.\nFinished in 0.000396205 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2523.95 tests/s, 10095.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd9h6d41v\nStarted\n.\nFinished in 0.000324851 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3078.33 tests/s, 12313.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwffo1_mq\nStarted\n.\nFinished in 0.000340601 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2935.99 tests/s, 11743.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8m55enq0\nStarted\n.\nFinished in 0.000316395 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3160.61 tests/s, 12642.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpek1p_zb9\nStarted\n.\nFinished in 0.000298893 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3345.68 tests/s, 13382.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpljurtdwy\nStarted\n.\nFinished in 0.000338225 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2956.61 tests/s, 11826.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf4o8fn5c\nStarted\n.\nFinished in 0.000339469 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2945.78 tests/s, 11783.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0yjiuv0l\nStarted\n.\nFinished in 0.000347583 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2877.01 tests/s, 11508.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0klmhhqj\nStarted\n.\nFinished in 0.000287552 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3477.63 tests/s, 13910.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbxquosfe\nStarted\n.\nFinished in 0.000338476 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2954.42 tests/s, 11817.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphd4qb9cd\nStarted\n.\nFinished in 0.000324791 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3078.90 tests/s, 12315.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9vea3ygp\nStarted\n.\nFinished in 0.000296107 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3377.16 tests/s, 13508.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpht0j6fps\nStarted\n.\nFinished in 0.000353505 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2828.81 tests/s, 11315.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_qffrnp_\nStarted\n.\nFinished in 0.000331684 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3014.92 tests/s, 12059.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppyko6itg\nStarted\n.\nFinished in 0.000320533 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3119.80 tests/s, 12479.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn6a6bg6x\nStarted\n.\nFinished in 0.000363343 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2752.22 tests/s, 11008.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyyaxy0hu\nStarted\n.\nFinished in 0.000332736 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3005.39 tests/s, 12021.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmply0d14uf\nStarted\n.\nFinished in 0.000339267 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2947.53 tests/s, 11790.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu0kv2mn5\nStarted\n.\nFinished in 0.000442692 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2258.91 tests/s, 9035.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptt2z9cz1\nStarted\n.\nFinished in 0.000384252 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2602.46 tests/s, 10409.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyfv2zhiy\nStarted\n.\nFinished in 0.000375215 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2665.14 tests/s, 10660.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv8zvjbpu\nStarted\n.\nFinished in 0.000383972 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2604.36 tests/s, 10417.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1wem_zc3\nStarted\n.\nFinished in 0.000303401 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3295.97 tests/s, 13183.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9ka5qwto\nStarted\n.\nFinished in 0.000381066 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2624.22 tests/s, 10496.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpedwnsfbf\nStarted\n.\nFinished in 0.000348906 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2866.10 tests/s, 11464.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz_4swmsp\nStarted\n.\nFinished in 0.000364916 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2740.36 tests/s, 10961.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2z96xfct\nStarted\n.\nFinished in 0.000386477 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2587.48 tests/s, 10349.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdapeu6pb\nStarted\n.\nFinished in 0.000306587 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3261.72 tests/s, 13046.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzj_4d7aa\nStarted\n.\nFinished in 0.000297789 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3358.08 tests/s, 13432.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj2f8q14b\nStarted\n.\nFinished in 0.000321465 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3110.76 tests/s, 12443.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc6m9j5wz\nStarted\n.\nFinished in 0.000347584 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2877.00 tests/s, 11508.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3kubvl30\nStarted\n.\nFinished in 0.000337435 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2963.53 tests/s, 11854.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyj03ylje\nStarted\n.\nFinished in 0.000400333 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2497.92 tests/s, 9991.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4p9oo5t9\nStarted\n.\nFinished in 0.000331153 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3019.75 tests/s, 12079.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppfhftrno\nStarted\n.\nFinished in 0.000378361 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2642.98 tests/s, 10571.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwrnpvsfk\nStarted\n.\nFinished in 0.000398689 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2508.22 tests/s, 10032.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyvf750ow\nStarted\n.\nFinished in 0.000317066 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3153.92 tests/s, 12615.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp1drh6ss\nStarted\n.\nFinished in 0.000313289 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3191.94 tests/s, 12767.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyd2e1kk9\nStarted\n.\nFinished in 0.000324901 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3077.86 tests/s, 12311.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcvz8j0g4\nStarted\n.\nFinished in 0.000344849 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2899.82 tests/s, 11599.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp60risndd\nStarted\n.\nFinished in 0.000362933 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2755.33 tests/s, 11021.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnn_qznjx\nStarted\n.\nFinished in 0.000334128 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2992.87 tests/s, 11971.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8yzy11wr\nStarted\n.\nFinished in 0.000357242 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2799.22 tests/s, 11196.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd73qnykm\nStarted\n.\nFinished in 0.000366799 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2726.29 tests/s, 10905.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprzztj0uy\nStarted\n.\nFinished in 0.000334189 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2992.32 tests/s, 11969.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1ofwhp7e\nStarted\n.\nFinished in 0.000421823 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2370.66 tests/s, 9482.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkxebwf26\nStarted\n.\nFinished in 0.000332135 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3010.82 tests/s, 12043.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm953199_\nStarted\n.\nFinished in 0.000343997 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2907.00 tests/s, 11628.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkqi9byd1\nStarted\n.\nFinished in 0.000332675 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3005.94 tests/s, 12023.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi_johgb9\nStarted\n.\nFinished in 0.000347544 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2877.33 tests/s, 11509.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbe38mnht\nStarted\n.\nFinished in 0.000332696 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3005.75 tests/s, 12022.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpud0pl6tp\nStarted\n.\nFinished in 0.000362372 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2759.60 tests/s, 11038.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppmn0pqw0\nStarted\n.\nFinished in 0.000359825 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2779.13 tests/s, 11116.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1jy9l962\nStarted\n.\nFinished in 0.000416413 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2401.46 tests/s, 9605.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnzde1wgq\nStarted\n.\nFinished in 0.000323858 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3087.77 tests/s, 12351.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1wezjaxp\nStarted\n.\nFinished in 0.000342004 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2923.94 tests/s, 11695.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp7jvp3x9\nStarted\n.\nFinished in 0.000322236 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3103.32 tests/s, 12413.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9t158iii\nStarted\n.\nFinished in 0.000351892 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2841.78 tests/s, 11367.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp713u7xyj\nStarted\n.\nFinished in 0.000337914 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2959.33 tests/s, 11837.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkmmd1__1\nStarted\n.\nFinished in 0.000316785 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3156.72 tests/s, 12626.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpaa2qc37a\nStarted\n.\nFinished in 0.000410392 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2436.69 tests/s, 9746.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo9u9py4_\nStarted\n.\nFinished in 0.000341632 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2927.13 tests/s, 11708.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8ta5pbcr\nStarted\n.\nFinished in 0.000485593 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2059.34 tests/s, 8237.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |i| i\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp75efi9w_\nStarted\n.\nFinished in 0.000317878 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3145.86 tests/s, 12583.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpycoi_u0a\nStarted\n.\nFinished in 0.000344057 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2906.50 tests/s, 11625.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |i| i\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4hoem2ty\nStarted\n.\nFinished in 0.000357963 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2793.58 tests/s, 11174.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp34wojmnm\nStarted\n.\nFinished in 0.000335821 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2977.78 tests/s, 11911.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu3q6aoz5\nStarted\n.\nFinished in 0.000347823 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2875.03 tests/s, 11500.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk8nvo9ik\nStarted\n.\nFinished in 0.000374966 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2666.91 tests/s, 10667.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiyt_d9ww\nStarted\n.\nFinished in 0.000305955 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3268.45 tests/s, 13073.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp49qgv7dh\nStarted\n.\nFinished in 0.000376798 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2653.94 tests/s, 10615.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3_tpmmns\nStarted\n.\nFinished in 0.000391586 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2553.72 tests/s, 10214.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptzc7orvx\nStarted\n.\nFinished in 0.000336623 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2970.68 tests/s, 11882.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkacacdsa\nStarted\n.\nFinished in 0.000335822 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2977.77 tests/s, 11911.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpse83yzaj\nStarted\n.\nFinished in 0.000346813 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2883.40 tests/s, 11533.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfp0loi6e\nStarted\n.\nFinished in 0.000326774 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3060.22 tests/s, 12240.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8c5mggn2\nStarted\n.\nFinished in 0.000370437 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2699.51 tests/s, 10798.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpooak17fa\nStarted\n.\nFinished in 0.000410001 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2439.02 tests/s, 9756.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfx5ykpta\nStarted\n.\nFinished in 0.000429738 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2327.00 tests/s, 9308.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqpc_arqb\nStarted\n.\nFinished in 0.000439837 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2273.57 tests/s, 9094.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8cs_k1fx\nStarted\n.\nFinished in 0.000306336 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3264.39 tests/s, 13057.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdn2jhzr5\nStarted\n.\nFinished in 0.00034019 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2939.53 tests/s, 11758.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbzyg6zo2\nStarted\n.\nFinished in 0.000313879 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3185.94 tests/s, 12743.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpicbrwp8j\nStarted\n.\nFinished in 0.000307778 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3249.10 tests/s, 12996.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpohi6ksm_\nStarted\n.\nFinished in 0.000316996 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3154.61 tests/s, 12618.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp15t3ak7x\nStarted\n.\nFinished in 0.000327034 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3057.79 tests/s, 12231.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7h7_chj2\nStarted\n.\nFinished in 0.000373032 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2680.74 tests/s, 10722.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |i| i\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4i4snies\nStarted\n.\nFinished in 0.000326383 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3063.89 tests/s, 12255.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjidj05se\nStarted\n.\nFinished in 0.000320662 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3118.55 tests/s, 12474.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfxe2c2zk\nStarted\n.\nFinished in 0.000348826 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2866.76 tests/s, 11467.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvrsidas3\nStarted\n.\nFinished in 0.000349887 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2858.07 tests/s, 11432.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfutxxtvc\nStarted\n.\nFinished in 0.000345871 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2891.25 tests/s, 11565.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl4ukx771\nStarted\n.\nFinished in 0.000328166 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3047.24 tests/s, 12188.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp28ihez47\nStarted\n.\nFinished in 0.000415621 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2406.04 tests/s, 9624.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmopsv49l\nStarted\n.\nFinished in 0.000320923 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3116.01 tests/s, 12464.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa7on3ypq\nStarted\n.\nFinished in 0.000426101 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2346.86 tests/s, 9387.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw8vhgt77\nStarted\n.\nFinished in 0.000363954 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2747.60 tests/s, 10990.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmz2t6nat\nStarted\n.\nFinished in 0.000422164 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2368.75 tests/s, 9474.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxqqj6ka4\nStarted\n.\nFinished in 0.00054732 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1827.08 tests/s, 7308.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiis5sh6w\nStarted\n.\nFinished in 0.000342614 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2918.74 tests/s, 11674.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjdh4t89x\nStarted\n.\nFinished in 0.00077634 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1288.10 tests/s, 5152.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdj9w5t1s\nStarted\n.\nFinished in 0.000344909 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2899.32 tests/s, 11597.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3jq936n7\nStarted\n.\nFinished in 0.000512814 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1950.02 tests/s, 7800.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprtkpvdgu\nStarted\n.\nFinished in 0.000358864 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2786.57 tests/s, 11146.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzu04y13o\nStarted\n.\nFinished in 0.000339378 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2946.57 tests/s, 11786.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg12k502m\nStarted\n.\nFinished in 0.000390434 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2561.25 tests/s, 10245.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkprcelwv\nStarted\n.\nFinished in 0.000384503 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2600.76 tests/s, 10403.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmfrqux3p\nStarted\n.\nFinished in 0.000355569 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2812.39 tests/s, 11249.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn78416ju\nStarted\n.\nFinished in 0.000372169 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2686.95 tests/s, 10747.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq3p1_ba7\nStarted\n.\nFinished in 0.000353976 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2825.05 tests/s, 11300.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp18qdd110\nStarted\n.\nFinished in 0.000386387 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2588.08 tests/s, 10352.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpql4x3ik7\nStarted\n.\nFinished in 0.00033495 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2985.52 tests/s, 11942.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpabzk_a0l\nStarted\n.\nFinished in 0.000314931 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3175.30 tests/s, 12701.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqxn95gfr\nStarted\n.\nFinished in 0.000348605 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2868.58 tests/s, 11474.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0ii7pjoh\nStarted\n.\nFinished in 0.000334038 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2993.67 tests/s, 11974.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcq6m8c05\nStarted\n.\nFinished in 0.000285617 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3501.19 tests/s, 14004.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo9vbcy_v\nStarted\n.\nFinished in 0.000308902 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3237.27 tests/s, 12949.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |i| i\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf7nbt0nm\nStarted\n.\nFinished in 0.000346722 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2884.16 tests/s, 11536.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3kvsooq7\nStarted\n.\nFinished in 0.00033545 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2981.07 tests/s, 11924.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu3z5p1bw\nStarted\n.\nFinished in 0.000307317 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3253.97 tests/s, 13015.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7wgnkfwm\nStarted\n.\nFinished in 0.000320553 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3119.61 tests/s, 12478.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1ouvby5n\nStarted\n.\nFinished in 0.000348906 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2866.10 tests/s, 11464.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps9cviegy\nStarted\n.\nFinished in 0.00030387 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3290.88 tests/s, 13163.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpftyb57p9\nStarted\n.\nFinished in 0.00034082 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2934.10 tests/s, 11736.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz6jgped0\nStarted\n.\nFinished in 0.000288953 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3460.77 tests/s, 13843.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyios6dve\nStarted\n.\nFinished in 0.000310885 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3216.62 tests/s, 12866.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9ajktdk3\nStarted\n.\nFinished in 0.00029757 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3360.55 tests/s, 13442.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpakeeebvn\nStarted\n.\nFinished in 0.000387439 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2581.05 tests/s, 10324.21 assertions/s\n"
  exit_code: 0
  status: OK
