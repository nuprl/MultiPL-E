name: HumanEval_158_find_max
language: ruby
results:
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn9zsc_ya\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpn9zsc_ya.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.010021327 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.79 tests/s, 199.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_rcqgx_n\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp_rcqgx_n.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.008023409 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.64 tests/s, 249.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.size }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpygc06et2\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpygc06et2.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.010825966 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.37 tests/s, 184.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0a_oemfx\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp0a_oemfx.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.021386508 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    46.76 tests/s, 93.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.size }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt0vkn1b4\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpt0vkn1b4.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.007516697 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.04 tests/s, 266.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8yzrx7ah\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp8yzrx7ah.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.008825601 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.31 tests/s, 226.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe7c_syaq\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpe7c_syaq.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.012173254 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.15 tests/s, 164.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo9y_x7ms\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpo9y_x7ms.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.00935137 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    106.94 tests/s, 213.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpklv51y3y\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpklv51y3y.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.010092047 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.09 tests/s, 198.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = words[0]\n  max_count = words[0].chars.uniq.count\n  words.each\
    \ do |word|\n    if word.chars.uniq.count > max_count\n      max_word = word\n\
    \      max_count = word.chars.uniq.count\n    end\n  end\n  max_word\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n\
    \    candidate = method(:find_max)\n    assert_equal(\"string\", candidate.call([\"\
    name\", \"of\", \"string\"]))\n    assert_equal(\"enam\", candidate.call([\"name\"\
    , \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"\
    ]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"we\"\
    , \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3cskxw8w\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp3cskxw8w.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.01134258 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.16 tests/s, 176.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_unique_chars = 0\n  words.each do |word|\n    unique_chars\
    \ = word.split(\"\").uniq.length\n    if unique_chars > max_unique_chars\n   \
    \   max_unique_chars = unique_chars\n      max_word = word\n    end\n  end\n \
    \ max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz2xh0sc_\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpz2xh0sc_.rb:25:in `test_find_max'\n\
    \     22:   def test_find_max\n     23:     candidate = method(:find_max)\n  \
    \   24:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 25:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     26:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     27:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     28:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.012277043 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.45 tests/s, 162.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4p9hm1u1\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp4p9hm1u1.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.012179834 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.10 tests/s, 164.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.size }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0y5iubkr\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp0y5iubkr.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.009164794 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.11 tests/s, 218.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = words[0]\n  max_count = words[0].chars.uniq.count\n  words.each\
    \ do |word|\n    if word.chars.uniq.count > max_count\n      max_word = word\n\
    \      max_count = word.chars.uniq.count\n    end\n  end\n  max_word\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n\
    \    candidate = method(:find_max)\n    assert_equal(\"string\", candidate.call([\"\
    name\", \"of\", \"string\"]))\n    assert_equal(\"enam\", candidate.call([\"name\"\
    , \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"\
    ]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"we\"\
    , \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfvf2y5cv\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpfvf2y5cv.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.009613942 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    104.02 tests/s, 208.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkqyp5shq\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpkqyp5shq.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.013619966 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.42 tests/s, 146.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    count = word.chars.uniq.count\n\
    \    if count > max_count\n      max_count = count\n      max_word = word\n  \
    \  end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn67u79dp\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpn67u79dp.rb:25:in `test_find_max'\n\
    \     22:   def test_find_max\n     23:     candidate = method(:find_max)\n  \
    \   24:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 25:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     26:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     27:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     28:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.010669906 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    93.72 tests/s, 187.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7l1gvenz\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp7l1gvenz.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.010003156 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.97 tests/s, 199.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = words[0]\n  max_count = words[0].chars.uniq.count\n  words.each\
    \ do |word|\n    if word.chars.uniq.count > max_count\n      max_word = word\n\
    \      max_count = word.chars.uniq.count\n    end\n  end\n  max_word\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n\
    \    candidate = method(:find_max)\n    assert_equal(\"string\", candidate.call([\"\
    name\", \"of\", \"string\"]))\n    assert_equal(\"enam\", candidate.call([\"name\"\
    , \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"\
    ]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"we\"\
    , \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr9wtob7y\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpr9wtob7y.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.008083028 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.72 tests/s, 247.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    count = word.chars.uniq.count\n\
    \    if count > max_count\n      max_count = count\n      max_word = word\n  \
    \  end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpis5ccf3i\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpis5ccf3i.rb:25:in `test_find_max'\n\
    \     22:   def test_find_max\n     23:     candidate = method(:find_max)\n  \
    \   24:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 25:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     26:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     27:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     28:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.010997973 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.93 tests/s, 181.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvt9029x1\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpvt9029x1.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.008536326 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.15 tests/s, 234.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpd0vw1z90\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpd0vw1z90.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.011598393 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.22 tests/s, 172.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.size }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpy8piemnm\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpy8piemnm.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.016443236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    60.82 tests/s, 121.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8x847pus\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp8x847pus.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.008772257 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.00 tests/s, 227.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_unique_chars = 0\n  words.each do |word|\n    unique_chars\
    \ = word.chars.uniq.count\n    if unique_chars > max_unique_chars\n      max_unique_chars\
    \ = unique_chars\n      max_word = word\n    end\n  end\n  max_word\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n\
    \    candidate = method(:find_max)\n    assert_equal(\"string\", candidate.call([\"\
    name\", \"of\", \"string\"]))\n    assert_equal(\"enam\", candidate.call([\"name\"\
    , \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"\
    ]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"we\"\
    , \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpw38vo5b_\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpw38vo5b_.rb:25:in `test_find_max'\n\
    \     22:   def test_find_max\n     23:     candidate = method(:find_max)\n  \
    \   24:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 25:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     26:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     27:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     28:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.010905257 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.70 tests/s, 183.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = words[0]\n  max_count = words[0].chars.uniq.count\n  words.each\
    \ do |word|\n    if word.chars.uniq.count > max_count\n      max_word = word\n\
    \      max_count = word.chars.uniq.count\n    end\n  end\n  max_word\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n\
    \    candidate = method(:find_max)\n    assert_equal(\"string\", candidate.call([\"\
    name\", \"of\", \"string\"]))\n    assert_equal(\"enam\", candidate.call([\"name\"\
    , \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"\
    ]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"we\"\
    , \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpswsth9nq\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpswsth9nq.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.00831442 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    120.27 tests/s, 240.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0q4rjhhx\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp0q4rjhhx.rb:15:in `test_find_max'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_max\n\
    \     14:     candidate = method(:find_max)\n  => 15:     assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n     16:     assert_equal(\"\
    enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n     17:     assert_equal(\"\
    aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n     18:     assert_equal(\"\
    abc\", candidate.call([\"abc\", \"cba\"]))\n<\"string\"> expected but was\n<nil>\n\
    \ndiff:\n? \"string\"\n? n    l  \n===============================================================================\n\
    \nFinished in 0.007166666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.53 tests/s, 139.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl49qoozb\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpl49qoozb.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.018787459 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    53.23 tests/s, 106.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpukwijqoj\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpukwijqoj.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.012610322 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    79.30 tests/s, 158.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptde60wn1\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmptde60wn1.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.012627861 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    79.19 tests/s, 158.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.count }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvociovn7\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpvociovn7.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.012587027 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    79.45 tests/s, 158.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.size }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpynsz8x1l\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpynsz8x1l.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.011980615 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    83.47 tests/s, 166.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdegqlx6f\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpdegqlx6f.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.01605304 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    62.29 tests/s, 124.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.count }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmphgew2kct\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmphgew2kct.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.01562909 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    63.98 tests/s, 127.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max = words.max_by { |word| word.chars.uniq.size }\n  max\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate\
    \ = method(:find_max)\n    assert_equal(\"string\", candidate.call([\"name\",\
    \ \"of\", \"string\"]))\n    assert_equal(\"enam\", candidate.call([\"name\",\
    \ \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"\
    ]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"we\"\
    , \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpap70v94e\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpap70v94e.rb:17:in `test_find_max'\n\
    \     14:   def test_find_max\n     15:     candidate = method(:find_max)\n  \
    \   16:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 17:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     18:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     19:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     20:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.016604788 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    60.22 tests/s, 120.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.length\
    \ > max_count\n      max_count = word.length\n      max_word = word\n    end\n\
    \  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpplxmpfzb\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpplxmpfzb.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.013835608 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.28 tests/s, 144.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7rrq0rcw\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp7rrq0rcw.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.011024753 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.70 tests/s, 181.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdkfnwykv\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpdkfnwykv.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.013675475 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.12 tests/s, 146.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.count }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgrs12ljo\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpgrs12ljo.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.013420206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.51 tests/s, 149.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.size }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq0ectc7q\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpq0ectc7q.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.009867632 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    101.34 tests/s, 202.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9ykvurud\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp9ykvurud.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.013018197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.82 tests/s, 153.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    count = word.split(\"\
    \").uniq.length\n    if count > max_count\n      max_count = count\n      max_word\
    \ = word\n    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9g4oqb7v\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp9g4oqb7v.rb:25:in `test_find_max'\n\
    \     22:   def test_find_max\n     23:     candidate = method(:find_max)\n  \
    \   24:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 25:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     26:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     27:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     28:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.011318325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.35 tests/s, 176.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo0f119g8\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpo0f119g8.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.013897977 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.95 tests/s, 143.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.length\
    \ > max_count\n      max_count = word.length\n      max_word = word\n    end\n\
    \  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqufjye5q\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpqufjye5q.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.011703165 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.45 tests/s, 170.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.size }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmphwgkw4l4\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmphwgkw4l4.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.009898348 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    101.03 tests/s, 202.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp227i6p_d\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp227i6p_d.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.012892082 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.57 tests/s, 155.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_chars = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_chars\n      max_chars = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppuvtmy_d\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmppuvtmy_d.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.014132806 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.76 tests/s, 141.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjsk665dj\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpjsk665dj.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.010719577 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    93.29 tests/s, 186.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz3dfn4s4\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpz3dfn4s4.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.009546559 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    104.75 tests/s, 209.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5u2xd23f\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp5u2xd23f.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.008382776 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.29 tests/s, 238.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbgx2_xgb\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpbgx2_xgb.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.01116555 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    89.56 tests/s, 179.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppet97w7g\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmppet97w7g.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.013279201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.31 tests/s, 150.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.size }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1ek09f6d\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp1ek09f6d.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.013547232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.82 tests/s, 147.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk3240_y0\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpk3240_y0.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.011692344 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.53 tests/s, 171.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0hqx1xx_\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp0hqx1xx_.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.009133796 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.48 tests/s, 218.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    count = word.chars.uniq.count\n\
    \    if count > max_count\n      max_count = count\n      max_word = word\n  \
    \  end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpctfa66l2\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpctfa66l2.rb:25:in `test_find_max'\n\
    \     22:   def test_find_max\n     23:     candidate = method(:find_max)\n  \
    \   24:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 25:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     26:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     27:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     28:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.007833936 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.65 tests/s, 255.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqay0346q\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpqay0346q.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.014837122 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.40 tests/s, 134.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    count = word.chars.uniq.count\n\
    \    if count > max_count\n      max_count = count\n      max_word = word\n  \
    \  end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9_vptu88\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp9_vptu88.rb:25:in `test_find_max'\n\
    \     22:   def test_find_max\n     23:     candidate = method(:find_max)\n  \
    \   24:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 25:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     26:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     27:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     28:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.010668166 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    93.74 tests/s, 187.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if max_count\
    \ < word.split(\"\").uniq.count\n      max_count = word.split(\"\").uniq.count\n\
    \      max_word = word\n    end\n  end\n  max_word\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate\
    \ = method(:find_max)\n    assert_equal(\"string\", candidate.call([\"name\",\
    \ \"of\", \"string\"]))\n    assert_equal(\"enam\", candidate.call([\"name\",\
    \ \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"\
    ]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"we\"\
    , \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo7_xcqot\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpo7_xcqot.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.011105126 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.05 tests/s, 180.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    count = word.chars.uniq.count\n\
    \    if count > max_count\n      max_count = count\n      max_word = word\n  \
    \  end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg0uqzukd\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpg0uqzukd.rb:25:in `test_find_max'\n\
    \     22:   def test_find_max\n     23:     candidate = method(:find_max)\n  \
    \   24:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 25:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     26:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     27:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     28:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.014405297 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.42 tests/s, 138.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjbwgy1qq\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpjbwgy1qq.rb:15:in `test_find_max'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_max\n\
    \     14:     candidate = method(:find_max)\n  => 15:     assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n     16:     assert_equal(\"\
    enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n     17:     assert_equal(\"\
    aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n     18:     assert_equal(\"\
    abc\", candidate.call([\"abc\", \"cba\"]))\n<\"string\"> expected but was\n<nil>\n\
    \ndiff:\n? \"string\"\n? n    l  \n===============================================================================\n\
    \nFinished in 0.00808856 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.63 tests/s, 123.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph3ft_4b1\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmph3ft_4b1.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.014721989 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.93 tests/s, 135.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = words[0]\n  max_count = words[0].chars.uniq.count\n  words.each\
    \ do |word|\n    if word.chars.uniq.count > max_count\n      max_word = word\n\
    \      max_count = word.chars.uniq.count\n    end\n  end\n  max_word\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n\
    \    candidate = method(:find_max)\n    assert_equal(\"string\", candidate.call([\"\
    name\", \"of\", \"string\"]))\n    assert_equal(\"enam\", candidate.call([\"name\"\
    , \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"\
    ]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"we\"\
    , \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj9uvf_go\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpj9uvf_go.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.007680695 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.20 tests/s, 260.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0afzrr0h\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp0afzrr0h.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.008833929 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.20 tests/s, 226.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2ks0eg1g\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp2ks0eg1g.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.0078714 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.04 tests/s, 254.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    count = word.chars.uniq.count\n\
    \    if count > max_count\n      max_count = count\n      max_word = word\n  \
    \  end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp02xjwxb\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpp02xjwxb.rb:25:in `test_find_max'\n\
    \     22:   def test_find_max\n     23:     candidate = method(:find_max)\n  \
    \   24:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 25:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     26:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     27:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     28:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.012290878 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.36 tests/s, 162.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_unique_chars = 0\n  words.each do |word|\n    unique_chars\
    \ = word.chars.uniq.count\n    if unique_chars > max_unique_chars\n      max_unique_chars\
    \ = unique_chars\n      max_word = word\n    end\n  end\n  max_word\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n\
    \    candidate = method(:find_max)\n    assert_equal(\"string\", candidate.call([\"\
    name\", \"of\", \"string\"]))\n    assert_equal(\"enam\", candidate.call([\"name\"\
    , \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"\
    ]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"we\"\
    , \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqvyc6fe9\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpqvyc6fe9.rb:25:in `test_find_max'\n\
    \     22:   def test_find_max\n     23:     candidate = method(:find_max)\n  \
    \   24:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 25:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     26:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     27:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     28:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.011505119 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.92 tests/s, 173.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7p3y7j4g\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp7p3y7j4g.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.016341818 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    61.19 tests/s, 122.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo4zsrau5\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpo4zsrau5.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.017330555 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.70 tests/s, 115.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.length\
    \ > max_count\n      max_count = word.length\n      max_word = word\n    end\n\
    \  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvts6ftxq\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpvts6ftxq.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.009012496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.96 tests/s, 221.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx8cb_9vr\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpx8cb_9vr.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.010981535 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.06 tests/s, 182.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcbtqj3aa\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpcbtqj3aa.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.012041501 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    83.05 tests/s, 166.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = words[0]\n  max_unique_chars = words[0].chars.uniq.count\n  words.each\
    \ do |word|\n    if word.chars.uniq.count > max_unique_chars\n      max_word =\
    \ word\n      max_unique_chars = word.chars.uniq.count\n    end\n  end\n  max_word\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n\
    \    candidate = method(:find_max)\n    assert_equal(\"string\", candidate.call([\"\
    name\", \"of\", \"string\"]))\n    assert_equal(\"enam\", candidate.call([\"name\"\
    , \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"\
    ]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"we\"\
    , \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5c9e00mi\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp5c9e00mi.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.012083059 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.76 tests/s, 165.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp530upnjz\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp530upnjz.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.014432459 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.29 tests/s, 138.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.length\
    \ > max_count\n      max_count = word.length\n      max_word = word\n    end\n\
    \  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm7bln_3u\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpm7bln_3u.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.016424975 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    60.88 tests/s, 121.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  # TODO: your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpi4grb3ek\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpi4grb3ek.rb:15:in `test_find_max'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_max\n\
    \     14:     candidate = method(:find_max)\n  => 15:     assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n     16:     assert_equal(\"\
    enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n     17:     assert_equal(\"\
    aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n     18:     assert_equal(\"\
    abc\", candidate.call([\"abc\", \"cba\"]))\n<\"string\"> expected but was\n<nil>\n\
    \ndiff:\n? \"string\"\n? n    l  \n===============================================================================\n\
    \nFinished in 0.011369449 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.96 tests/s, 87.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.size }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe67w6g9e\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpe67w6g9e.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.021414999 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    46.70 tests/s, 93.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplsevcpwf\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmplsevcpwf.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.016457832 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    60.76 tests/s, 121.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps3flmtrn\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmps3flmtrn.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.019399064 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    51.55 tests/s, 103.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpblb4cbel\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpblb4cbel.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.0099995 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.01 tests/s, 200.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx78g01du\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpx78g01du.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.010407303 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.09 tests/s, 192.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max = 0\n  max_word = \"\"\n  words.each do |word|\n    if word.chars.uniq.length\
    \ > max\n      max = word.chars.uniq.length\n      max_word = word\n    end\n\
    \  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpee4tp7hr\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpee4tp7hr.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.018971506 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    52.71 tests/s, 105.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.size }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb5q4joxp\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpb5q4joxp.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.013045894 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.65 tests/s, 153.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.size }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp85hq8wod\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp85hq8wod.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.011819517 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.61 tests/s, 169.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuc72a6hv\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpuc72a6hv.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.009442951 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.90 tests/s, 211.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdv7esawb\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpdv7esawb.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.008697428 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.98 tests/s, 229.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnqevrf85\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpnqevrf85.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.01092469 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.54 tests/s, 183.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5lqr1w49\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp5lqr1w49.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.011010596 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.82 tests/s, 181.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    count = word.chars.uniq.count\n\
    \    if count > max_count\n      max_count = count\n      max_word = word\n  \
    \  end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3k634cox\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp3k634cox.rb:25:in `test_find_max'\n\
    \     22:   def test_find_max\n     23:     candidate = method(:find_max)\n  \
    \   24:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 25:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     26:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     27:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     28:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.010664373 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    93.77 tests/s, 187.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    count = word.chars.uniq.count\n\
    \    if count > max_count\n      max_count = count\n      max_word = word\n  \
    \  end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv1pbnac4\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpv1pbnac4.rb:25:in `test_find_max'\n\
    \     22:   def test_find_max\n     23:     candidate = method(:find_max)\n  \
    \   24:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 25:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     26:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     27:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     28:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.009961823 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.38 tests/s, 200.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = words[0]\n  max_count = words[0].chars.uniq.count\n  words.each\
    \ do |word|\n    if word.chars.uniq.count > max_count\n      max_word = word\n\
    \      max_count = word.chars.uniq.count\n    end\n  end\n  max_word\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n\
    \    candidate = method(:find_max)\n    assert_equal(\"string\", candidate.call([\"\
    name\", \"of\", \"string\"]))\n    assert_equal(\"enam\", candidate.call([\"name\"\
    , \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"\
    ]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"we\"\
    , \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqoptdahp\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpqoptdahp.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.01218177 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.09 tests/s, 164.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max = words.max_by { |word| word.chars.uniq.count }\n  max\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate\
    \ = method(:find_max)\n    assert_equal(\"string\", candidate.call([\"name\",\
    \ \"of\", \"string\"]))\n    assert_equal(\"enam\", candidate.call([\"name\",\
    \ \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"\
    ]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"we\"\
    , \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1o5fjqyr\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp1o5fjqyr.rb:17:in `test_find_max'\n\
    \     14:   def test_find_max\n     15:     candidate = method(:find_max)\n  \
    \   16:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 17:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     18:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     19:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     20:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.014936153 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.95 tests/s, 133.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.size }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxhddmt3g\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpxhddmt3g.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.013418978 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.52 tests/s, 149.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = words[0]\n  max_count = words[0].chars.uniq.count\n  words.each\
    \ do |word|\n    if word.chars.uniq.count > max_count\n      max_word = word\n\
    \      max_count = word.chars.uniq.count\n    end\n  end\n  max_word\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n\
    \    candidate = method(:find_max)\n    assert_equal(\"string\", candidate.call([\"\
    name\", \"of\", \"string\"]))\n    assert_equal(\"enam\", candidate.call([\"name\"\
    , \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"\
    ]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"we\"\
    , \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprjm0vh63\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmprjm0vh63.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.010165657 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.37 tests/s, 196.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx65t3zo6\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpx65t3zo6.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.012993129 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.96 tests/s, 153.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxe36pgho\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpxe36pgho.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.008337503 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.94 tests/s, 239.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxx32a065\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpxx32a065.rb:15:in `test_find_max'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_max\n\
    \     14:     candidate = method(:find_max)\n  => 15:     assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n     16:     assert_equal(\"\
    enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n     17:     assert_equal(\"\
    aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n     18:     assert_equal(\"\
    abc\", candidate.call([\"abc\", \"cba\"]))\n<\"string\"> expected but was\n<nil>\n\
    \ndiff:\n? \"string\"\n? n    l  \n===============================================================================\n\
    \nFinished in 0.016013115 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    62.45 tests/s, 62.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.length\
    \ > max_count\n      max_count = word.length\n      max_word = word\n    end\n\
    \  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphpj893s0\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmphpj893s0.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.010310618 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.99 tests/s, 193.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm7jfuwfg\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpm7jfuwfg.rb:15:in `test_find_max'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_max\n\
    \     14:     candidate = method(:find_max)\n  => 15:     assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n     16:     assert_equal(\"\
    enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n     17:     assert_equal(\"\
    aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n     18:     assert_equal(\"\
    abc\", candidate.call([\"abc\", \"cba\"]))\n<\"string\"> expected but was\n<nil>\n\
    \ndiff:\n? \"string\"\n? n    l  \n===============================================================================\n\
    \nFinished in 0.00970141 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.08 tests/s, 103.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.size }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu7jzdz4y\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpu7jzdz4y.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.012595927 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    79.39 tests/s, 158.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.count }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmptaz4lxkj\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmptaz4lxkj.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.007218644 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    138.53 tests/s, 277.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_pyd15xg\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp_pyd15xg.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.013809564 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.41 tests/s, 144.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpecljlkvw\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpecljlkvw.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.013202274 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.74 tests/s, 151.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt640y7za\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpt640y7za.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.00813781 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.88 tests/s, 245.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5jp2ry11\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp5jp2ry11.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.010718919 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    93.29 tests/s, 186.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = words[0]\n  max_chars = words[0].chars.uniq.count\n  words.each\
    \ do |word|\n    if word.chars.uniq.count > max_chars\n      max_chars = word.chars.uniq.count\n\
    \      max_word = word\n    end\n  end\n  max_word\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate\
    \ = method(:find_max)\n    assert_equal(\"string\", candidate.call([\"name\",\
    \ \"of\", \"string\"]))\n    assert_equal(\"enam\", candidate.call([\"name\",\
    \ \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"\
    ]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"we\"\
    , \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpusdyz31h\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpusdyz31h.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.010713736 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    93.34 tests/s, 186.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvxkndyxa\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpvxkndyxa.rb:15:in `test_find_max'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_max\n\
    \     14:     candidate = method(:find_max)\n  => 15:     assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n     16:     assert_equal(\"\
    enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n     17:     assert_equal(\"\
    aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n     18:     assert_equal(\"\
    abc\", candidate.call([\"abc\", \"cba\"]))\n<\"string\"> expected but was\n<nil>\n\
    \ndiff:\n? \"string\"\n? n    l  \n===============================================================================\n\
    \nFinished in 0.012089124 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.72 tests/s, 82.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppdxk02gk\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmppdxk02gk.rb:15:in `test_find_max'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_max\n\
    \     14:     candidate = method(:find_max)\n  => 15:     assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n     16:     assert_equal(\"\
    enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n     17:     assert_equal(\"\
    aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n     18:     assert_equal(\"\
    abc\", candidate.call([\"abc\", \"cba\"]))\n<\"string\"> expected but was\n<nil>\n\
    \ndiff:\n? \"string\"\n? n    l  \n===============================================================================\n\
    \nFinished in 0.00724888 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.95 tests/s, 137.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp83vaqw9x\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp83vaqw9x.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.011240551 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.96 tests/s, 177.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    count = word.chars.uniq.count\n\
    \    if count > max_count\n      max_count = count\n      max_word = word\n  \
    \  end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6ga445fx\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp6ga445fx.rb:25:in `test_find_max'\n\
    \     22:   def test_find_max\n     23:     candidate = method(:find_max)\n  \
    \   24:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 25:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     26:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     27:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     28:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.012519711 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    79.87 tests/s, 159.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.size }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdrk3x0fd\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpdrk3x0fd.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.012225205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.80 tests/s, 163.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_q010ph_\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp_q010ph_.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.011374204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.92 tests/s, 175.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.size }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp39t5bpmc\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp39t5bpmc.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.015161314 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    65.96 tests/s, 131.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.length\
    \ > max_count\n      max_count = word.chars.uniq.length\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfrfzgekz\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpfrfzgekz.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.007517383 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.03 tests/s, 266.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max = words.max_by { |word| word.chars.uniq.size }\n  max\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate\
    \ = method(:find_max)\n    assert_equal(\"string\", candidate.call([\"name\",\
    \ \"of\", \"string\"]))\n    assert_equal(\"enam\", candidate.call([\"name\",\
    \ \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"\
    ]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"we\"\
    , \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbxft1ivo\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpbxft1ivo.rb:17:in `test_find_max'\n\
    \     14:   def test_find_max\n     15:     candidate = method(:find_max)\n  \
    \   16:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 17:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     18:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     19:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     20:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.018328073 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    54.56 tests/s, 109.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7a5s6crt\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp7a5s6crt.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.019124764 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    52.29 tests/s, 104.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    count = word.chars.uniq.count\n\
    \    if count > max_count\n      max_count = count\n      max_word = word\n  \
    \  end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppq8rtc38\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmppq8rtc38.rb:25:in `test_find_max'\n\
    \     22:   def test_find_max\n     23:     candidate = method(:find_max)\n  \
    \   24:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 25:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     26:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     27:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     28:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.008615241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    116.07 tests/s, 232.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.size }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmphsmxdk0s\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmphsmxdk0s.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.013834569 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.28 tests/s, 144.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8ptw3r6y\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp8ptw3r6y.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.01492385 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.01 tests/s, 134.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuvmqjvzw\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpuvmqjvzw.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.013122207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.21 tests/s, 152.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = words[0]\n  max_count = words[0].chars.uniq.count\n  words.each\
    \ do |word|\n    if word.chars.uniq.count > max_count\n      max_word = word\n\
    \      max_count = word.chars.uniq.count\n    end\n  end\n  max_word\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n\
    \    candidate = method(:find_max)\n    assert_equal(\"string\", candidate.call([\"\
    name\", \"of\", \"string\"]))\n    assert_equal(\"enam\", candidate.call([\"name\"\
    , \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"\
    ]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"we\"\
    , \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuejapr8m\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpuejapr8m.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.014899574 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.12 tests/s, 134.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    count = word.chars.uniq.count\n\
    \    if count > max_count\n      max_count = count\n      max_word = word\n  \
    \  end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbf7c9xtn\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpbf7c9xtn.rb:25:in `test_find_max'\n\
    \     22:   def test_find_max\n     23:     candidate = method(:find_max)\n  \
    \   24:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 25:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     26:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     27:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     28:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.017279845 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.87 tests/s, 115.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.length\
    \ > max_count\n      max_count = word.length\n      max_word = word\n    end\n\
    \  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnqg3b1vz\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpnqg3b1vz.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.009636732 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.77 tests/s, 207.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphta6dx89\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmphta6dx89.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.011314056 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.39 tests/s, 176.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9wswy4jn\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp9wswy4jn.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.013251978 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.46 tests/s, 150.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5zhc7jdu\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp5zhc7jdu.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.008082926 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.72 tests/s, 247.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.count }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpowqekpl4\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpowqekpl4.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.008037174 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.42 tests/s, 248.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.count }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt_tio287\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpt_tio287.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.017338025 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.68 tests/s, 115.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    count = word.chars.uniq.count\n\
    \    if count > max_count\n      max_count = count\n      max_word = word\n  \
    \  end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmyqaz8up\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpmyqaz8up.rb:25:in `test_find_max'\n\
    \     22:   def test_find_max\n     23:     candidate = method(:find_max)\n  \
    \   24:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 25:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     26:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     27:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     28:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.007599447 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.59 tests/s, 263.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.length\
    \ > max_count\n      max_count = word.length\n      max_word = word\n    end\n\
    \  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6u36qzbp\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp6u36qzbp.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.011828551 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.54 tests/s, 169.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3wb4seya\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp3wb4seya.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.012051269 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.98 tests/s, 165.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.size }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfp3zfzqc\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpfp3zfzqc.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.011815871 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.63 tests/s, 169.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmhzfertq\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpmhzfertq.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.012874382 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.67 tests/s, 155.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.size }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9x8_ca9b\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp9x8_ca9b.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.008919865 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.11 tests/s, 224.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptsvn_nn1\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmptsvn_nn1.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.007711174 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.68 tests/s, 259.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = words[0]\n  max_count = words[0].chars.uniq.count\n  words.each\
    \ do |word|\n    if word.chars.uniq.count > max_count\n      max_word = word\n\
    \      max_count = word.chars.uniq.count\n    end\n  end\n  max_word\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n\
    \    candidate = method(:find_max)\n    assert_equal(\"string\", candidate.call([\"\
    name\", \"of\", \"string\"]))\n    assert_equal(\"enam\", candidate.call([\"name\"\
    , \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"\
    ]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"we\"\
    , \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf1fpmxd3\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpf1fpmxd3.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.013262307 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.40 tests/s, 150.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.count }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp27ljh0pz\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp27ljh0pz.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.011151276 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    89.68 tests/s, 179.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz7hm74z8\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpz7hm74z8.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.008928827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.00 tests/s, 223.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.size }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm5bx21eo\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpm5bx21eo.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.011864519 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.28 tests/s, 168.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.length\
    \ > max_count\n      max_count = word.length\n      max_word = word\n    end\n\
    \  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphqdlg_l1\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmphqdlg_l1.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.007885112 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.82 tests/s, 253.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8h420yqu\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp8h420yqu.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.012870624 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.70 tests/s, 155.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp84fbaxb2\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp84fbaxb2.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.012595603 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    79.39 tests/s, 158.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyer2to7d\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpyer2to7d.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.012741986 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    78.48 tests/s, 156.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = words[0]\n  max_chars = words[0].chars.uniq.count\n  words.each\
    \ do |word|\n    if word.chars.uniq.count > max_chars\n      max_chars = word.chars.uniq.count\n\
    \      max_word = word\n    end\n  end\n  max_word\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate\
    \ = method(:find_max)\n    assert_equal(\"string\", candidate.call([\"name\",\
    \ \"of\", \"string\"]))\n    assert_equal(\"enam\", candidate.call([\"name\",\
    \ \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"\
    ]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"we\"\
    , \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpff5mvh4q\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpff5mvh4q.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.01610888 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    62.08 tests/s, 124.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_len = 0\n  words.each do |word|\n    if word.length\
    \ > max_len\n      max_len = word.length\n      max_word = word\n    end\n  end\n\
    \  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp22vfupm1\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp22vfupm1.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.013908249 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.90 tests/s, 143.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmpt_4_g9\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpmpt_4_g9.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.011034086 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.63 tests/s, 181.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsrzh9wux\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpsrzh9wux.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.01376696 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.64 tests/s, 145.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.length\
    \ > max_count\n      max_count = word.length\n      max_word = word\n    end\n\
    \  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8b51wewb\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp8b51wewb.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.010624765 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    94.12 tests/s, 188.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp19b_t04e\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp19b_t04e.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.012891846 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.57 tests/s, 155.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp9pio1bk\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpp9pio1bk.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.013547264 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.82 tests/s, 147.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = words[0]\n  max_count = words[0].chars.uniq.count\n  words.each\
    \ do |word|\n    if word.chars.uniq.count > max_count\n      max_word = word\n\
    \      max_count = word.chars.uniq.count\n    end\n  end\n  max_word\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n\
    \    candidate = method(:find_max)\n    assert_equal(\"string\", candidate.call([\"\
    name\", \"of\", \"string\"]))\n    assert_equal(\"enam\", candidate.call([\"name\"\
    , \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"\
    ]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"we\"\
    , \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe1o8g634\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpe1o8g634.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.013893293 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.98 tests/s, 143.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp50gtxmsz\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp50gtxmsz.rb:15:in `test_find_max'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_max\n\
    \     14:     candidate = method(:find_max)\n  => 15:     assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n     16:     assert_equal(\"\
    enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n     17:     assert_equal(\"\
    aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n     18:     assert_equal(\"\
    abc\", candidate.call([\"abc\", \"cba\"]))\n<\"string\"> expected but was\n<nil>\n\
    \ndiff:\n? \"string\"\n? n    l  \n===============================================================================\n\
    \nFinished in 0.010188516 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.15 tests/s, 98.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    count = word.chars.uniq.count\n\
    \    if count > max_count\n      max_count = count\n      max_word = word\n  \
    \  end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz7t1dsal\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpz7t1dsal.rb:25:in `test_find_max'\n\
    \     22:   def test_find_max\n     23:     candidate = method(:find_max)\n  \
    \   24:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 25:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     26:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     27:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     28:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.014176022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.54 tests/s, 141.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp055249_s\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp055249_s.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.00822537 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.58 tests/s, 243.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplx4ds854\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmplx4ds854.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.010037429 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.63 tests/s, 199.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.count }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvlriazt4\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpvlriazt4.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.00985661 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    101.45 tests/s, 202.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0gsehfgw\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp0gsehfgw.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.014227179 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.29 tests/s, 140.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.count }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr5poy9x7\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpr5poy9x7.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.018743722 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    53.35 tests/s, 106.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpd_ixmzsk\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpd_ixmzsk.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.011641391 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.90 tests/s, 171.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  # TODO: implement\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpi7furtv4\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpi7furtv4.rb:15:in `test_find_max'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_max\n\
    \     14:     candidate = method(:find_max)\n  => 15:     assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n     16:     assert_equal(\"\
    enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n     17:     assert_equal(\"\
    aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n     18:     assert_equal(\"\
    abc\", candidate.call([\"abc\", \"cba\"]))\n<\"string\"> expected but was\n<nil>\n\
    \ndiff:\n? \"string\"\n? n    l  \n===============================================================================\n\
    \nFinished in 0.013396727 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.65 tests/s, 74.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgrfkx_g0\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpgrfkx_g0.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.015520952 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    64.43 tests/s, 128.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpulmvfz1t\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpulmvfz1t.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.016779048 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    59.60 tests/s, 119.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_n4otsvt\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp_n4otsvt.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.015375865 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    65.04 tests/s, 130.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_chars = 0\n  words.each do |word|\n    if word.chars.uniq.length\
    \ > max_chars\n      max_chars = word.chars.uniq.length\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbufqonpr\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpbufqonpr.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.018105624 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.23 tests/s, 110.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5myfo0_e\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp5myfo0_e.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.007989723 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.16 tests/s, 250.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.size }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxql5gjdv\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpxql5gjdv.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.014156556 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.64 tests/s, 141.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.length\
    \ > max_count\n      max_count = word.length\n      max_word = word\n    end\n\
    \  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk8ydk2pt\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpk8ydk2pt.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.016817348 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    59.46 tests/s, 118.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max = words.max_by { |word| word.chars.uniq.count }\n  max\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate\
    \ = method(:find_max)\n    assert_equal(\"string\", candidate.call([\"name\",\
    \ \"of\", \"string\"]))\n    assert_equal(\"enam\", candidate.call([\"name\",\
    \ \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"\
    ]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"we\"\
    , \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplfvqjsnn\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmplfvqjsnn.rb:17:in `test_find_max'\n\
    \     14:   def test_find_max\n     15:     candidate = method(:find_max)\n  \
    \   16:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 17:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     18:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     19:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     20:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.015864723 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    63.03 tests/s, 126.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsilm695g\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpsilm695g.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.009603581 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    104.13 tests/s, 208.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp28iev_o9\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp28iev_o9.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.01430813 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.89 tests/s, 139.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdv59ltwe\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpdv59ltwe.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.011312624 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.40 tests/s, 176.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.size }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmplh73vyc9\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmplh73vyc9.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.012324442 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.14 tests/s, 162.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0m0msogq\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp0m0msogq.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.015247157 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    65.59 tests/s, 131.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = words[0]\n  max_count = words[0].chars.uniq.count\n  words.each\
    \ do |word|\n    if word.chars.uniq.count > max_count\n      max_word = word\n\
    \      max_count = word.chars.uniq.count\n    end\n  end\n  max_word\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n\
    \    candidate = method(:find_max)\n    assert_equal(\"string\", candidate.call([\"\
    name\", \"of\", \"string\"]))\n    assert_equal(\"enam\", candidate.call([\"name\"\
    , \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"\
    ]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"we\"\
    , \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu4qsh325\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpu4qsh325.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.013665027 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.18 tests/s, 146.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_6bpzcj3\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp_6bpzcj3.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.012175012 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.14 tests/s, 164.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    count = word.chars.uniq.count\n\
    \    if count > max_count\n      max_count = count\n      max_word = word\n  \
    \  end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvnu92nvi\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpvnu92nvi.rb:25:in `test_find_max'\n\
    \     22:   def test_find_max\n     23:     candidate = method(:find_max)\n  \
    \   24:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 25:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     26:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     27:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     28:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.011566349 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.46 tests/s, 172.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbyb8lt5_\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpbyb8lt5_.rb:15:in `test_find_max'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_max\n\
    \     14:     candidate = method(:find_max)\n  => 15:     assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n     16:     assert_equal(\"\
    enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n     17:     assert_equal(\"\
    aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n     18:     assert_equal(\"\
    abc\", candidate.call([\"abc\", \"cba\"]))\n<\"string\"> expected but was\n<nil>\n\
    \ndiff:\n? \"string\"\n? n    l  \n===============================================================================\n\
    \nFinished in 0.010497065 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.26 tests/s, 95.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.count }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoh8v4geo\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpoh8v4geo.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.0090771 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.17 tests/s, 220.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  # TODO: implement\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppxx9wuf8\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmppxx9wuf8.rb:15:in `test_find_max'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_max\n\
    \     14:     candidate = method(:find_max)\n  => 15:     assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n     16:     assert_equal(\"\
    enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n     17:     assert_equal(\"\
    aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n     18:     assert_equal(\"\
    abc\", candidate.call([\"abc\", \"cba\"]))\n<\"string\"> expected but was\n<nil>\n\
    \ndiff:\n? \"string\"\n? n    l  \n===============================================================================\n\
    \nFinished in 0.007819477 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.89 tests/s, 127.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.size }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq7jjze1h\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpq7jjze1h.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.007793399 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.31 tests/s, 256.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4mbqjx_0\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp4mbqjx_0.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.007815888 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.94 tests/s, 255.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.size }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgy5p_7x0\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpgy5p_7x0.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.013322053 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.06 tests/s, 150.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.count }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm_1wmk2s\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpm_1wmk2s.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.018368548 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    54.44 tests/s, 108.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwcyc9bv5\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpwcyc9bv5.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.008910321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.23 tests/s, 224.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpw394m6yf\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpw394m6yf.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.01411043 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.87 tests/s, 141.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnby9qmhj\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpnby9qmhj.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.009157336 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.20 tests/s, 218.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpefmgab72\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpefmgab72.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.007672426 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.34 tests/s, 260.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp44nbk1ac\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp44nbk1ac.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.008612138 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    116.12 tests/s, 232.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.size }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9tknks4f\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp9tknks4f.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.019324873 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    51.75 tests/s, 103.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  words.max_by { |word| word.chars.uniq.count }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_24_a6nc\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp_24_a6nc.rb:16:in `test_find_max'\n\
    \     13:   def test_find_max\n     14:     candidate = method(:find_max)\n  \
    \   15:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 16:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     17:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     18:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     19:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.007608175 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.44 tests/s, 262.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpog69tzhs\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpog69tzhs.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.00724786 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.97 tests/s, 275.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppdv7b5ba\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmppdv7b5ba.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.007825884 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.78 tests/s, 255.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    count = word.chars.uniq.count\n\
    \    if count > max_count\n      max_count = count\n      max_word = word\n  \
    \  end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpddglswsc\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpddglswsc.rb:25:in `test_find_max'\n\
    \     22:   def test_find_max\n     23:     candidate = method(:find_max)\n  \
    \   24:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 25:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     26:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     27:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     28:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.007239268 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    138.14 tests/s, 276.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  # TODO: implement\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg09twvkb\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpg09twvkb.rb:15:in `test_find_max'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_max\n\
    \     14:     candidate = method(:find_max)\n  => 15:     assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n     16:     assert_equal(\"\
    enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n     17:     assert_equal(\"\
    aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n     18:     assert_equal(\"\
    abc\", candidate.call([\"abc\", \"cba\"]))\n<\"string\"> expected but was\n<nil>\n\
    \ndiff:\n? \"string\"\n? n    l  \n===============================================================================\n\
    \nFinished in 0.007111223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.62 tests/s, 140.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp7yh3prp\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpp7yh3prp.rb:15:in `test_find_max'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_max\n\
    \     14:     candidate = method(:find_max)\n  => 15:     assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n     16:     assert_equal(\"\
    enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n     17:     assert_equal(\"\
    aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n     18:     assert_equal(\"\
    abc\", candidate.call([\"abc\", \"cba\"]))\n<\"string\"> expected but was\n<nil>\n\
    \ndiff:\n? \"string\"\n? n    l  \n===============================================================================\n\
    \nFinished in 0.007467064 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.92 tests/s, 133.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  # TODO: implement\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf0ht0ww_\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpf0ht0ww_.rb:15:in `test_find_max'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_max\n\
    \     14:     candidate = method(:find_max)\n  => 15:     assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n     16:     assert_equal(\"\
    enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n     17:     assert_equal(\"\
    aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n     18:     assert_equal(\"\
    abc\", candidate.call([\"abc\", \"cba\"]))\n<\"string\"> expected but was\n<nil>\n\
    \ndiff:\n? \"string\"\n? n    l  \n===============================================================================\n\
    \nFinished in 0.009806902 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    101.97 tests/s, 101.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe6vp0he1\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpe6vp0he1.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.016162645 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    61.87 tests/s, 123.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    count = word.split(\"\
    \").uniq.count\n    if count > max_count\n      max_count = count\n      max_word\
    \ = word\n    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n\
    \    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n\
    \    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n\
    \    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n\
    \    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"\
    footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"\
    rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\"\
    , \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\"\
    , \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n\
    \    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpceoq2buu\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpceoq2buu.rb:25:in `test_find_max'\n\
    \     22:   def test_find_max\n     23:     candidate = method(:find_max)\n  \
    \   24:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 25:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     26:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     27:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     28:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.007332247 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.38 tests/s, 272.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max = words.max_by { |word| word.chars.uniq.count }\n  max\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate\
    \ = method(:find_max)\n    assert_equal(\"string\", candidate.call([\"name\",\
    \ \"of\", \"string\"]))\n    assert_equal(\"enam\", candidate.call([\"name\",\
    \ \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"\
    ]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"we\"\
    , \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgc3ki0ra\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpgc3ki0ra.rb:17:in `test_find_max'\n\
    \     14:   def test_find_max\n     15:     candidate = method(:find_max)\n  \
    \   16:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 17:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     18:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     19:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     20:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.006996744 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.92 tests/s, 285.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.length\
    \ > max_count\n      max_count = word.length\n      max_word = word\n    end\n\
    \  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_774szt4\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmp_774szt4.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.013029518 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.75 tests/s, 153.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\n# find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n\
    \  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_word = word\n\
    \    end\n  end\n  max_word\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\"\
    , candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\",\
    \ candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\"\
    , candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"\
    abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"\
    we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
    this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"\
    b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"\
    ]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpildpuy14\nStarted\nF\n===============================================================================\n\
    Failure: test_find_max(TestHumanEval)\n/tmp/tmpildpuy14.rb:24:in `test_find_max'\n\
    \     21:   def test_find_max\n     22:     candidate = method(:find_max)\n  \
    \   23:     assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"\
    ]))\n  => 24:     assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"\
    game\"]))\n     25:     assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n     26:     assert_equal(\"abc\", candidate.call([\"abc\"\
    , \"cba\"]))\n     27:     assert_equal(\"footbott\", candidate.call([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]))\n<\"enam\"> expected but was\n<\"\
    name\">\n\ndiff:\n? ename\n===============================================================================\n\
    \nFinished in 0.007177968 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.32 tests/s, 278.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
