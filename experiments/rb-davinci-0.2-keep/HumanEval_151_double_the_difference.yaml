name: HumanEval_151_double_the_difference
language: ruby
prompt: "# Given a list of numbers, return the sum of squares of the numbers\n# in\
  \ the list that are odd. Ignore numbers that are negative or not integers.\n# double_the_difference([1,\
  \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1, -2, 0]) == 0\n#\
  \ double_the_difference([9, -2]) == 81\n# double_the_difference([0]) == 0  \n# If\
  \ the input list is empty, return 0.\ndef double_the_difference(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
  \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
  \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
  \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0,\
  \ candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
  \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
  \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
completions: ["  lst.select { |n| n.is_a?(Integer) && n.odd? }.map { |n| n ** 2 }.sum\n\
    end", "  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+)\
    \ || 0\nend", "  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2\
    \ }.reduce(0, :+)\nend", "  lst.select { |x| x.is_a?(Integer) && x > 0 }.map {\
    \ |x| x ** 2 }.reduce(:+) || 0\nend", "  lst.select{|x| x.is_a?(Integer) && x\
    \ > 0}.map{|x| x**2}.inject(0, :+)\nend", "  return 0 if lst.empty?\n  lst.map\
    \ { |x| x**2 if x.is_a?(Integer) && x > 0 }.compact.reduce(:+)\nend", "  lst.select\
    \ { |x| x.is_a?(Integer) && x > 0 }.map { |x| x**2 }.reduce(:+) || 0\nend", " \
    \ # your code here\nend", "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer)\
    \ && num > 0\n      sum += num ** 2\n    end\n  end\n  sum\nend", "  lst.select\
    \ { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+) ||\
    \ 0\nend", "  # your code here\nend", "  lst.select { |n| n.odd? && n.is_a?(Integer)\
    \ && n > 0 }.map { |n| n ** 2 }.sum\nend", "  lst.select { |x| x.is_a?(Integer)\
    \ && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\nend", "  return 0 if lst.empty?\n\
    \  lst.select { |num| num.odd? && num.is_a?(Integer) && num > 0 }.map { |num|\
    \ num ** 2 }.reduce(:+)\nend", "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer)\
    \ && num > 0\n      sum += num ** 2\n    end\n  end\n  sum\nend", "  sum = 0\n\
    \  lst.each do |x|\n    if x.is_a?(Integer) && x > 0\n      if x % 2 == 1\n  \
    \      sum += x ** 2\n      end\n    end\n  end\n  return sum\nend", "  lst.select\
    \ { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+) || 0\nend",
  "  # Your code here\nend", "  lst.select { |n| n.is_a?(Integer) && n.odd? }.map\
    \ { |n| n * n }.sum\nend", "  lst.select { |n| n.is_a?(Integer) && n.odd? }.map\
    \ { |n| n ** 2 }.sum\nend", "  # your code here\nend", "  sum = 0\n  lst.each\
    \ do |num|\n    if num.is_a?(Integer) && num > 0\n      sum += num**2\n    end\n\
    \  end\n  sum\nend", "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer)\
    \ && num > 0\n      sum += num ** 2\n    end\n  end\n  sum\nend", "  lst.select\
    \ { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+) || 0\nend",
  "  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+) ||\
    \ 0\nend", "  lst.select{|x| x.is_a?(Integer) && x > 0}.map{|x| x**2}.reduce(:+)\
    \ || 0\nend", "  lst.select { |n| n.is_a?(Integer) && n > 0 }.map { |n| n ** 2\
    \ }.reduce(0, :+)\nend", "  # Your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # Your code here\nend", "  # your code here\nend",
  "  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend", "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num\
    \ > 0\n      sum += num ** 2\n    end\n  end\n  sum\nend", "  # your code here\n\
    end", "  # your code here\nend", "  lst.select{|x| x.is_a?(Integer) && x > 0}.map{|x|\
    \ x**2}.reduce(:+) || 0\nend", "  lst.select { |x| x.is_a?(Integer) && x > 0 }.map\
    \ { |x| x ** 2 }.reduce(0, :+)\nend", "  sum = 0\n  lst.each do |num|\n    if\
    \ num.is_a?(Integer) && num > 0\n      sum += num**2\n    end\n  end\n  sum\n\
    end", "  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+)\
    \ || 0\nend", "  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2\
    \ }.reduce(:+) || 0\nend", "  # Your code here\nend", "  # your code here\nend",
  "  return 0 if lst.empty?\n  lst.select { |num| num.is_a?(Integer) && num.odd? }.map\
    \ { |num| num ** 2 }.reduce(:+)\nend", "  lst.select { |num| num.is_a?(Integer)\
    \ && num > 0 }.map { |num| num ** 2 }.sum\nend", "  # your code here\nend", " \
    \ lst.select { |n| n.is_a?(Integer) && n > 0 }.map { |n| n ** 2 }.reduce(0, :+)\n\
    end", "  lst.select{|x| x.is_a?(Integer) && x > 0}.map{|x| x**2}.reduce(:+) ||\
    \ 0\nend", "  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0,\
    \ :+)\nend", "  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x**2 }.reduce(:+)\
    \ || 0\nend", "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num\
    \ > 0\n      sum += num ** 2\n    end\n  end\n  sum\nend", "  lst.select { |x|\
    \ x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\nend", "  lst.select\
    \ { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+) ||\
    \ 0\nend", "  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num\
    \ ** 2 }.reduce(:+) || 0\nend", "  # your code here\nend", "  lst.select { |n|\
    \ n.is_a?(Integer) && n > 0 }.map { |n| n * n }.reduce(0, :+)\nend", "  # your\
    \ code here\nend", "  return 0 if lst.empty?\n  lst.select { |num| num.is_a?(Integer)\
    \ && num.odd? }.map { |num| num ** 2 }.reduce(:+)\nend", "  lst.select { |x| x.is_a?(Integer)\
    \ && x > 0 }.map { |x| x ** 2 }.reduce(:+) || 0\nend", "  lst.select { |num| num.is_a?(Integer)\
    \ && num > 0 }.map { |num| num ** 2 }.reduce(:+) || 0\nend", "  lst.select { |num|\
    \ num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+) || 0\nend",
  "  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+) ||\
    \ 0\nend", "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num >\
    \ 0\n      sum += num**2\n    end\n  end\n  sum\nend", "  sum = 0\n  lst.each\
    \ do |num|\n    if num.is_a?(Integer) && num > 0\n      sum += num ** 2\n    end\n\
    \  end\n  sum\nend", "  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x|\
    \ x**2 }.reduce(:+) || 0\nend", "  lst.select { |n| n.is_a?(Integer) && n > 0\
    \ }.map { |n| n ** 2 }.reduce(0, :+)\nend", "  # your code here\nend", "  lst.select\
    \ { |num| num.odd? }.map { |num| num ** 2 }.sum\nend", "  # your code here\nend",
  "  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x * x }.reduce(:+) ||\
    \ 0\nend", "  # Your code here\nend", "  lst.select { |num| num.is_a?(Integer)\
    \ && num.odd? }.map { |num| num ** 2 }.sum\nend", "  # your code here\nend", " \
    \ lst.select { |num| num.odd? && num.is_a?(Integer) && num > 0 }.map { |num| num\
    \ ** 2 }.sum\nend", "  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x|\
    \ x ** 2 }.reduce(:+) || 0\nend", "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer)\
    \ && num.odd?\n      sum += num ** 2\n    end\n  end\n  sum\nend", "  sum = 0\n\
    \  lst.each do |x|\n    if x.is_a?(Integer) && x > 0\n      sum += x**2\n    end\n\
    \  end\n  sum\nend", "  # your code here\nend", "  lst.select { |x| x.is_a?(Integer)\
    \ && x > 0 }.map { |x| x**2 }.reduce(:+) || 0\nend", "  lst.select { |num| num.is_a?(Integer)\
    \ && num > 0 }.map { |num| num ** 2 }.reduce(:+) || 0\nend", "  # your code here\n\
    end", "  lst.select { |x| x.odd? }.map { |x| x * x }.reduce(0, :+)\nend", "  lst.select\
    \ { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.sum\nend", "  lst.select\
    \ { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\nend", " \
    \ lst.select { |n| n.is_a?(Integer) && n > 0 }.map { |n| n ** 2 }.reduce(0, :+)\n\
    end", "  # your code here\nend", "  # your code here\nend", "  lst.select { |num|\
    \ num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+) || 0\nend",
  "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend", "  lst.select { |num| num.odd? &&\
    \ num.integer? }.map { |num| num ** 2 }.sum\nend", "  return 0 if lst.empty?\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\n\
    end", "  # your code here\nend", "  sum = 0\n  lst.each do |i|\n    if i.is_a?(Integer)\
    \ && i > 0\n      sum += i**2\n    end\n  end\n  sum\nend", "  sum = 0\n  lst.each\
    \ do |num|\n    if num.is_a?(Integer) && num > 0\n      sum += num ** 2\n    end\n\
    \  end\n  sum\nend", "  # your code here\nend", "  lst.reject { |num| num < 0\
    \ || num % 1 != 0 }.map { |num| num ** 2 }.reduce(:+)\nend", "  # your code here\n\
    end", "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n\
    \      sum += num ** 2\n    end\n  end\n  sum\nend", "  sum = 0\n  lst.each do\
    \ |num|\n    if num.is_a?(Integer) && num > 0\n      sum += num ** 2\n    end\n\
    \  end\n  sum\nend", "  lst.select { |n| n.is_a?(Integer) && n.odd? }.map { |n|\
    \ n ** 2 }.sum\nend", "  # your code here\nend", "  lst.select { |x| x.is_a?(Integer)\
    \ && x.odd? }.map { |x| x ** 2 }.sum\nend", "  lst.select { |x| x.is_a?(Integer)\
    \ && x > 0 }.map { |x| x ** 2 }.reduce(:+) || 0\nend", "  sum = 0\n  lst.each\
    \ do |num|\n    if num.is_a?(Integer) && num.odd?\n      sum += num ** 2\n   \
    \ end\n  end\n  sum\nend", "  # your code here\nend", "  lst.select { |num| num.is_a?(Integer)\
    \ && num > 0 }.map { |num| num ** 2 }.reduce(:+) || 0\nend", "  lst.select { |x|\
    \ x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\nend", "  sum =\
    \ 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum += num\
    \ ** 2\n    end\n  end\n  sum\nend", "  # your code here\nend", "  sum = 0\n \
    \ lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum += num **\
    \ 2\n    end\n  end\n  sum\nend", "  lst.select { |num| num.is_a?(Integer) &&\
    \ num > 0 }.map { |num| num ** 2 }.reduce(:+) || 0\nend", "  # your code here\n\
    end", "  sum = 0\n  lst.each do |num|\n    if num > 0 && num % 2 == 1\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend", "  sum = 0\n  lst.each do |num|\n\
    \    if num.is_a?(Integer) && num > 0\n      sum += num**2\n    end\n  end\n \
    \ sum\nend", "  lst.select{|x| x.is_a?(Integer) && x > 0}.map{|x| x**2}.inject(0,\
    \ :+)\nend", "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num\
    \ > 0\n      sum += num ** 2\n    end\n  end\n  sum\nend", "  sum = 0\n  lst.each\
    \ do |num|\n    if num.is_a?(Integer) && num > 0\n      if num % 2 == 1\n    \
    \    sum += num ** 2\n      end\n    end\n  end\n  sum\nend", "  lst.select {\
    \ |x| x.is_a?(Integer) && x > 0 }.map { |x| x**2 }.reduce(0, :+)\nend", "  lst.select\
    \ { |x| x.is_a?(Integer) && x > 0 }.map { |x| x**2 }.reduce(0, :+)\nend", "  #\
    \ Your code here\nend", "  lst.select { |num| num.is_a?(Integer) && num > 0 }.map\
    \ { |num| num ** 2 }.reduce(:+) || 0\nend", "  sum = 0\n  lst.each do |num|\n\
    \    if num.is_a?(Integer) && num >= 0\n      if num % 2 == 1\n        sum +=\
    \ num ** 2\n      end\n    end\n  end\n  sum\nend", "  lst.select { |num| num.odd?\
    \ }.map { |num| num ** 2 }.sum\nend", "  # Your code here\nend", "  lst.select\
    \ { |n| n.is_a?(Integer) && n > 0 }.map { |n| n ** 2 }.reduce(0, :+)\nend", " \
    \ # your code here\nend", "  lst.select{|x| x.is_a?(Integer) && x > 0}.map{|x|\
    \ x**2}.reduce(:+) || 0\nend", "  # your code here\nend", "  lst.select { |x|\
    \ x.is_a?(Integer) && x > 0 }.map { |x| x**2 }.reduce(:+) || 0\nend", "  sum =\
    \ 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num.odd?\n      sum +=\
    \ num ** 2\n    end\n  end\n  sum\nend", "  lst.select { |x| x.is_a?(Integer)\
    \ && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\nend", "  lst.select { |x| x.is_a?(Integer)\
    \ && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\nend", "  sum = 0\n  lst.each do\
    \ |num|\n    if num.is_a?(Integer) && num > 0\n      sum += num ** 2\n    end\n\
    \  end\n  sum\nend", "  lst.select { |x| x.is_a?(Integer) && x.odd? }.map { |x|\
    \ x ** 2 }.sum\nend", "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer)\
    \ && num > 0\n      sum += num ** 2\n    end\n  end\n  sum\nend", "  lst.select\
    \ { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+) ||\
    \ 0\nend", "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num >\
    \ 0\n      sum += num ** 2\n    end\n  end\n  sum\nend", "  lst.select { |num|\
    \ num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+) || 0\nend",
  "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend", "  lst.select { |x| x.is_a?(Integer)\
    \ && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\nend", "  # Your code here\nend",
  "  # your code here\nend", "  lst.select { |num| num.is_a?(Integer) && num > 0 }.map\
    \ { |num| num ** 2 }.reduce(:+) || 0\nend", "  lst.select { |n| n.is_a?(Integer)\
    \ && n.odd? }.map { |n| n ** 2 }.sum\nend", "  lst.select { |x| x.is_a?(Integer)\
    \ && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\nend", "  sum = 0\n  lst.each do\
    \ |num|\n    if num.is_a?(Integer) && num > 0\n      sum += num ** 2\n    end\n\
    \  end\n  sum\nend", "  lst.select { |num| num.is_a?(Integer) && num > 0 }.map\
    \ { |num| num ** 2 }.reduce(:+) || 0\nend", "  lst.select { |n| n.is_a?(Integer)\
    \ && n.odd? }.map { |n| n ** 2 }.sum\nend", "  # your code here\nend", "  lst.select\
    \ { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+) ||\
    \ 0\nend", "  # your code here\nend", "  sum = 0\n  lst.each do |num|\n    if\
    \ num.is_a?(Integer) && num > 0\n      if num % 2 == 1\n        sum += num **\
    \ 2\n      end\n    end\n  end\n  sum\nend", "  sum = 0\n  lst.each do |num|\n\
    \    if num.is_a?(Integer) && num > 0\n      sum += num**2\n    end\n  end\n \
    \ sum\nend", "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num\
    \ > 0\n      sum += num ** 2\n    end\n  end\n  sum\nend", "  sum = 0\n  lst.each\
    \ do |num|\n    if num.is_a?(Integer) && num > 0\n      sum += num**2\n    end\n\
    \  end\n  sum\nend", "  lst.select { |num| num.is_a?(Integer) && num.odd? }.map\
    \ { |num| num ** 2 }.sum\nend", "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer)\
    \ && num > 0\n      sum += num ** 2\n    end\n  end\n  sum\nend", "  # your code\
    \ here\nend", "  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x**2 }.reduce(:+)\
    \ || 0\nend", "  # your code here\nend", "  # Your code here\nend", "  sum = 0\n\
    \  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum += num **\
    \ 2\n    end\n  end\n  sum\nend", "  lst.select { |num| num.is_a?(Integer) &&\
    \ num.odd? }.map { |num| num ** 2 }.sum\nend", "  # your code here\nend", "  lst.select\
    \ { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\nend", " \
    \ lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end", "  # your code here\nend", "  # your code here\nend", "  sum = 0\n  lst.each\
    \ do |num|\n    if num.is_a?(Integer) && num > 0\n      sum += num ** 2\n    end\n\
    \  end\n  sum\nend", "  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x|\
    \ x ** 2 }.reduce(0, :+)\nend", "  lst.select { |x| x.is_a?(Integer) && x > 0\
    \ }.map { |x| x ** 2 }.reduce(0, :+)\nend", "  lst.select { |x| x.is_a?(Integer)\
    \ && x.odd? }.map { |x| x**2 }.sum\nend", "  # Your code here\nend", "  lst.select\
    \ { |x| x.odd? }.map { |x| x * x }.sum\nend", "  sum = 0\n  lst.each do |num|\n\
    \    if num.is_a?(Integer) && num > 0\n      sum += num**2\n    end\n  end\n \
    \ sum\nend", "  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2\
    \ }.reduce(:+) || 0\nend", "  sum = 0\n  lst.each do |x|\n    if x.is_a?(Integer)\
    \ && x > 0\n      sum += x**2\n    end\n  end\n  sum\nend", "  lst.select { |x|\
    \ x.odd? }.map { |x| x ** 2 }.sum\nend", "  # your code here\nend", "  lst.select\
    \ { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\nend", " \
    \ lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend", "  # your code here\nend", "  lst.select { |x| x.is_a?(Integer)\
    \ && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\nend", "  lst.select { |num| num.is_a?(Integer)\
    \ && num > 0 }.map { |num| num ** 2 }.reduce(:+) || 0\nend", "  lst.select { |n|\
    \ n.is_a?(Integer) && n.odd? }.map { |n| n ** 2 }.sum\nend", "  lst.select { |x|\
    \ x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\nend", "  # Your\
    \ code here\nend", "  lst.select { |n| n.is_a?(Integer) && n > 0 }.map { |n| n\
    \ ** 2 }.sum\nend", "  # your code here\nend", "  lst.select { |x| x.is_a?(Integer)\
    \ && x > 0 }.map { |x| x ** 2 }.reduce(:+) || 0\nend", "  lst.select { |x| x.is_a?(Integer)\
    \ && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\nend", "  lst.select { |num| num.is_a?(Integer)\
    \ && num.odd? }.map { |num| num ** 2 }.sum\nend", "  lst.select { |num| num.is_a?(Integer)\
    \ && num > 0 }.map { |num| num ** 2 }.reduce(:+) || 0\nend", "  # your code here\n\
    end", "  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x**2 }.reduce(:+)\
    \ || 0\nend", "  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x**2 }.reduce(:+)\
    \ || 0\nend", "  sum = 0\n  lst.each do |x|\n    if x.is_a?(Integer) && x.odd?\n\
    \      sum += x**2\n    end\n  end\n  sum\nend", "  sum = 0\n  lst.each do |num|\n\
    \    if num.is_a?(Integer) && num > 0\n      sum += num**2\n    end\n  end\n \
    \ sum\nend", "  return 0 if lst.empty?\n  lst.select{|x| x.is_a?(Integer) && x\
    \ > 0}.map{|x| x**2}.reduce(:+)\nend", "  lst.select { |num| num.is_a?(Integer)\
    \ && num.odd? }.map { |num| num ** 2 }.sum\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
