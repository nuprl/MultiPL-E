name: HumanEval_111_histogram
language: ruby
prompt: "# Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n# of the letter with the most repetition and containing the corresponding\
  \ count.\n# If several letters have the same occurrence, return all of them.\n#\
  \ Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n# histogram('a b b\
  \ a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a': 2, 'b': 2}\n# histogram('b\
  \ b b b a') == {'b': 4}\n# histogram('') == {}\ndef histogram(test)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_histogram\n\
  \    candidate = method(:histogram)\n    assert_equal({\"a\" => 2, \"b\" => 2},\
  \ candidate.call(\"a b b a\"))\n    assert_equal({\"a\" => 2, \"b\" => 2}, candidate.call(\"\
  a b c a b\"))\n    assert_equal({\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1,\
  \ \"g\" => 1}, candidate.call(\"a b c d g\"))\n    assert_equal({\"r\" => 1, \"\
  t\" => 1, \"g\" => 1}, candidate.call(\"r t g\"))\n    assert_equal({\"b\" => 4},\
  \ candidate.call(\"b b b b a\"))\n    assert_equal({\"r\" => 1, \"t\" => 1, \"g\"\
  \ => 1}, candidate.call(\"r t g\"))\n    assert_equal({}, candidate.call(\"\"))\n\
  \    assert_equal({\"a\" => 1}, candidate.call(\"a\"))\n  end\nend\n"
completions: ["  histogram = Hash.new(0)\n  test.split(' ').each { |letter| histogram[letter]\
    \ += 1 }\n  histogram\nend", "  # Your code here\nend", "  result = {}\n  test.split('\
    \ ').each do |letter|\n    if result.has_key?(letter)\n      result[letter] +=\
    \ 1\n    else\n      result[letter] = 1\n    end\n  end\n  result\nend", "  histogram\
    \ = Hash.new(0)\n  test.split(' ').each { |letter| histogram[letter] += 1 }\n\
    \  histogram.select { |_, v| v == histogram.values.max }\nend", "  test.split.each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  test.split(' ').each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  test.split.each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  h = Hash.new(0)\n  test.split('\
    \ ').each { |letter| h[letter] += 1 }\n  h.select { |k, v| v == h.values.max }\n\
    end", "  result = Hash.new(0)\n  test.split(' ').each do |letter|\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  test.split.each_with_object(Hash.new(0)) { |word,counts|\
    \ counts[word] += 1 }\nend", "  result = {}\n  test.split(' ').each do |letter|\n\
    \    if result.has_key?(letter)\n      result[letter] += 1\n    else\n      result[letter]\
    \ = 1\n    end\n  end\n  result\nend", "  # Your code here\nend", "  test.split.each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  letters = test.split(' ')\n \
    \ letters.each_with_object(Hash.new(0)) { |letter, counts| counts[letter] += 1\
    \ }\nend", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter]\
    \ = test.count(letter)\n  end\n  result\nend", "  test.split(' ').each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  histogram = {}\n  test.split('\
    \ ').each do |letter|\n    histogram[letter] = test.split(' ').count(letter)\n\
    \  end\n  histogram\nend", "  histogram = Hash.new(0)\n  test.split.each { |word|\
    \ histogram[word] += 1 }\n  histogram\nend", "  result = {}\n  test.split(' ').each\
    \ do |letter|\n    result[letter] = test.split(' ').count(letter)\n  end\n  result\n\
    end", "  test.split.each_with_object(Hash.new(0)) { |word,counts| counts[word]\
    \ += 1 }\nend", "  test.split.each_with_object(Hash.new(0)) { |word,counts| counts[word]\
    \ += 1 }\nend", "  h = Hash.new(0)\n  test.split(' ').each do |x|\n    h[x] +=\
    \ 1\n  end\n  h\nend", "  result = {}\n  test.split(' ').each do |letter|\n  \
    \  result[letter] = test.split(' ').count(letter)\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(' ').each do |letter|\n    if result.has_key?(letter)\n \
    \     result[letter] += 1\n    else\n      result[letter] = 1\n    end\n  end\n\
    \  result\nend", "  test.split.each_with_object(Hash.new(0)) { |word, counts|\
    \ counts[word] += 1 }\nend", "  histogram = Hash.new(0)\n  test.split(' ').each\
    \ { |letter| histogram[letter] += 1 }\n  histogram.select { |letter, count| count\
    \ == histogram.values.max }\nend", "  histogram = Hash.new(0)\n  test.split('\
    \ ').each do |letter|\n    histogram[letter] += 1\n  end\n  histogram\nend", " \
    \ # your code here\nend", "  result = {}\n  test.split(' ').each do |letter|\n\
    \    result[letter] = test.count(letter)\n  end\n  result\nend", "  result = {}\n\
    \  test.split(' ').each do |x|\n    result[x] = test.split(' ').count(x)\n  end\n\
    \  result\nend", "  histogram = {}\n  test.split(' ').each do |letter|\n    if\
    \ histogram.has_key?(letter)\n      histogram[letter] += 1\n    else\n      histogram[letter]\
    \ = 1\n    end\n  end\n  histogram\nend", "  test.split(' ').each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  letters = test.split(' ')\n \
    \ counts = Hash.new(0)\n  letters.each { |letter| counts[letter] += 1 }\n  counts\n\
    end", "  histogram = {}\n  test.split(' ').each do |letter|\n    if histogram.key?(letter)\n\
    \      histogram[letter] += 1\n    else\n      histogram[letter] = 1\n    end\n\
    \  end\n  histogram\nend", "  test.split.each_with_object(Hash.new(0)) { |word,counts|\
    \ counts[word] += 1 }\nend", "  result = {}\n  test.split(' ').each do |letter|\n\
    \    if result.has_key?(letter)\n      result[letter] += 1\n    else\n      result[letter]\
    \ = 1\n    end\n  end\n  result\nend", "  test.split(' ').group_by { |x| x }.map\
    \ { |k, v| [k, v.size] }.to_h\nend", "  histogram = Hash.new(0)\n  test.split('\
    \ ').each { |letter| histogram[letter] += 1 }\n  histogram\nend", "  test.split('\
    \ ').each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 }\nend",
  "  result = {}\n  test.split(' ').each do |letter|\n    result[letter] = test.count(letter)\n\
    \  end\n  result\nend", "  test.split(' ').inject(Hash.new(0)) { |h, v| h[v] +=\
    \ 1; h }.select { |k, v| v == test.split(' ').inject(Hash.new(0)) { |h, v| h[v]\
    \ += 1; h }.values.max }\nend", "  test.split(' ').inject(Hash.new(0)) { |h, v|\
    \ h[v] += 1; h }.select { |k, v| v == test.split(' ').inject(Hash.new(0)) { |h,\
    \ v| h[v] += 1; h }.values.max }\nend", "  result = Hash.new(0)\n  test.split.each\
    \ { |letter| result[letter] += 1 }\n  result\nend", "  test.split(' ').each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  result = {}\n  test.split(\"\
    \ \").each do |x|\n    if result.has_key?(x)\n      result[x] += 1\n    else\n\
    \      result[x] = 1\n    end\n  end\n  result\nend", "  result = Hash.new(0)\n\
    \  test.split(' ').each { |x| result[x] += 1 }\n  result\nend", "  histogram =\
    \ Hash.new(0)\n  test.split(' ').each { |letter| histogram[letter] += 1 }\n  histogram\n\
    end", "  test.split(' ').each_with_object(Hash.new(0)) { |word,counts| counts[word]\
    \ += 1 }\nend", "  # your code here\nend", "  test.split.each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  test.split(' ').group_by{|x| x}.map{|k,v|\
    \ [k, v.count]}.to_h\nend", "  result = {}\n  test.split.each do |letter|\n  \
    \  result[letter] = test.split.count(letter)\n  end\n  result\nend", "  test.split.each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  test_array = test.split(' ')\n\
    \  test_array.each do |letter|\n    if test_array.count(letter) > 1\n      test_array.delete(letter)\n\
    \    end\n  end\n  test_array.each do |letter|\n    if test_array.count(letter)\
    \ > 1\n      test_array.delete(letter)\n    end\n  end\n  test_array.each do |letter|\n\
    \    if test_array.count(letter) > 1\n      test_array.delete(letter)\n    end\n\
    \  end\n  test_array.each do |letter|\n    if test_array.count(letter) > 1\n \
    \     test_array.delete(letter)\n    end\n  end\n  test_array.each do |letter|\n\
    \    if test_array.count(letter) > 1\n      test_array.delete(letter)\n    end\n\
    \  end\n  test_array.each do |letter|\n    if test_array.count(letter) > 1\n \
    \     test_array.delete(letter)\n    end\n  end\n  test_array.each do |letter|\n\
    \    if test_array.count(letter) > 1\n      test_array.delete(letter)\n    end\n\
    \  end\n  test_array.each do |letter|\n    if test_array.count(letter) > 1\n \
    \     test_array.delete(letter)\n    end\n  end\n  test_array.each do |letter|\n\
    \    if test_array.count(letter) > 1\n      test_array.delete(letter)\n    end\n\
    \  end\n  test_array.each do |letter|\n    if test_array.count(letter) > 1\n \
    \     test_array.delete(letter)\n    end\n  end\n  test_array.each do |letter|\n\
    \    if test_array.count(letter) > 1\n      test_array.delete(letter)\n    end\n\
    \  end\n  test_array.each do |letter|\n    if test_array.count(letter) > 1\n \
    \     test_array.delete(letter)\n    end\n  end\n  test_array.each do |letter|\n\
    \    if test_array.count(", "  result = {}\n  test.split.each do |letter|\n  \
    \  result[letter] = test.split.count(letter)\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(' ').each do |letter|\n    if result.has_key?(letter)\n \
    \     result[letter] += 1\n    else\n      result[letter] = 1\n    end\n  end\n\
    \  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter]\
    \ = test.count(letter)\n  end\n  result\nend", "  # your code here\nend", "  result\
    \ = {}\n  test.split(' ').each do |letter|\n    if result.has_key?(letter)\n \
    \     result[letter] += 1\n    else\n      result[letter] = 1\n    end\n  end\n\
    \  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter]\
    \ = test.count(letter)\n  end\n  result\nend", "  test.split.each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  h = Hash.new(0)\n  test.split('\
    \ ').each { |x| h[x] += 1 }\n  h.select { |k, v| v == h.values.max }\nend", " \
    \ test.split.each_with_object(Hash.new(0)) { |word,counts| counts[word] += 1 }\n\
    end", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter] =\
    \ test.count(letter)\n  end\n  result\nend", "  histogram = {}\n  test.split('\
    \ ').each do |letter|\n    if histogram.has_key?(letter)\n      histogram[letter]\
    \ += 1\n    else\n      histogram[letter] = 1\n    end\n  end\n  histogram\nend",
  "  test.split.each_with_object(Hash.new(0)) { |word,counts| counts[word] += 1 }\n\
    end", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter] =\
    \ test.count(letter)\n  end\n  result\nend", "  result = {}\n  test.split.each\
    \ do |letter|\n    result[letter] = test.split.count(letter)\n  end\n  result\n\
    end", "  # Your code here\nend", "  result = {}\n  test.split(' ').each do |letter|\n\
    \    if result.has_key?(letter)\n      result[letter] += 1\n    else\n      result[letter]\
    \ = 1\n    end\n  end\n  result\nend", "  test.split.each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  letters = test.split(' ')\n  letters.each_with_object(Hash.new(0))\
    \ { |letter,counts| counts[letter] += 1 }\nend", "  test.split(' ').each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  test.split(' ').each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  test.split(' ').each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  # TODO: implement me\n  # test.split('').each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\n  # test.split('').each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\n  # test.split('').each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\n  # test.split('').each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\n  # test.split('').each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\n  # test.split('').each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\n  # test.split('').each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\n  # test.split('').each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\n  # test.split('').each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\n  # test.split('').each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\n  # test.split('').each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\n  # test.split('').each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\n  # test.split('').each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\n  # test.split('').each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\n  # test.split('').each_with_object", " \
    \ test.split.each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1\
    \ }\nend", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter]\
    \ = test.count(letter)\n  end\n  result\nend", "  h = Hash.new(0)\n  test.split.each\
    \ { |letter| h[letter] += 1 }\n  h\nend", "  histogram = Hash.new(0)\n  test.split('\
    \ ').each do |letter|\n    histogram[letter] += 1\n  end\n  histogram\nend", " \
    \ result = {}\n  test.split(' ').each do |letter|\n    result[letter] = test.count(letter)\n\
    \  end\n  result\nend", "  test.split(' ').each_with_object(Hash.new(0)) { |word,counts|\
    \ counts[word] += 1 }\nend", "  histogram = Hash.new(0)\n  test.split.each { |word|\
    \ histogram[word] += 1 }\n  histogram\nend", "  result = {}\n  test.split(' ').each\
    \ do |letter|\n    result[letter] = test.count(letter)\n  end\n  result\nend",
  "  histogram = Hash.new(0)\n  test.split(' ').each { |letter| histogram[letter]\
    \ += 1 }\n  histogram\nend", "  test.split.each_with_object(Hash.new(0)) { |word,counts|\
    \ counts[word] += 1 }\nend", "  test.split.each_with_object(Hash.new(0)) { |word,\
    \ counts| counts[word] += 1 }\nend", "  result = {}\n  test.split(' ').each do\
    \ |letter|\n    if result.has_key?(letter)\n      result[letter] += 1\n    else\n\
    \      result[letter] = 1\n    end\n  end\n  result\nend", "  test.split.each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  histogram = Hash.new(0)\n  test.split('\
    \ ').each { |letter| histogram[letter] += 1 }\n  histogram\nend", "  test.split.each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  histogram = Hash.new(0)\n  test.split.each\
    \ { |letter| histogram[letter] += 1 }\n  histogram.select { |k, v| v == histogram.values.max\
    \ }\nend", "  # your code here\nend", "  # your code here\nend", "  result = Hash.new(0)\n\
    \  test.split(' ').each { |x| result[x] += 1 }\n  result\nend", "  histogram =\
    \ Hash.new(0)\n  test.split.each { |word| histogram[word] += 1 }\n  histogram.select\
    \ { |k, v| v == histogram.values.max }\nend", "  result = {}\n  test.split(' ').each\
    \ do |letter|\n    result[letter] = test.count(letter)\n  end\n  result\nend",
  "  result = {}\n  test.split(' ').each do |letter|\n    result[letter] = test.count(letter)\n\
    \  end\n  result\nend", "  test = test.split(' ')\n  test.each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  result = {}\n  test.split.each\
    \ do |letter|\n    if result.has_key?(letter)\n      result[letter] += 1\n   \
    \ else\n      result[letter] = 1\n    end\n  end\n  result\nend", "  # Your code\
    \ here\nend", "  result = {}\n  test.split(' ').each do |char|\n    result[char]\
    \ = test.split(' ').count(char)\n  end\n  result\nend", "  h = Hash.new(0)\n \
    \ test.split(' ').each { |x| h[x] += 1 }\n  h.select { |k, v| v == h.values.max\
    \ }\nend", "  test.split(\" \").inject(Hash.new(0)) { |h,v| h[v] += 1; h }\nend",
  "  test.split.each_with_object(Hash.new(0)) { |word,counts| counts[word] += 1 }\n\
    end", "  count = Hash.new(0)\n  test.split(' ').each { |letter| count[letter]\
    \ += 1 }\n  count.select { |letter, count| count == count.max }\nend", "  test.split.each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  result = {}\n  test.split(' ').each\
    \ do |letter|\n    result[letter] = test.count(letter)\n  end\n  result\nend",
  "  result = {}\n  test.split(' ').each do |letter|\n    if result.has_key?(letter)\n\
    \      result[letter] += 1\n    else\n      result[letter] = 1\n    end\n  end\n\
    \  result\nend", "  histogram = Hash.new(0)\n  test.split(' ').each { |letter|\
    \ histogram[letter] += 1 }\n  histogram.select { |letter, count| count == histogram.values.max\
    \ }\nend", "  histogram = Hash.new(0)\n  test.split(' ').each { |letter| histogram[letter]\
    \ += 1 }\n  histogram\nend", "  test.split(' ').each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  histogram = {}\n  test.split('\
    \ ').each do |letter|\n    histogram[letter] = test.count(letter)\n  end\n  histogram\n\
    end", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter] =\
    \ test.count(letter)\n  end\n  result\nend", "  result = {}\n  test.split(' ').each\
    \ do |letter|\n    result[letter] = test.split(' ').count(letter)\n  end\n  result\n\
    end", "  histogram = Hash.new(0)\n  test.split.each { |word| histogram[word] +=\
    \ 1 }\n  histogram\nend", "  test.split.each_with_object(Hash.new(0)) { |word,counts|\
    \ counts[word] += 1 }\nend", "  letters = test.split(' ')\n  histogram = {}\n\
    \  letters.each do |letter|\n    if histogram.has_key?(letter)\n      histogram[letter]\
    \ += 1\n    else\n      histogram[letter] = 1\n    end\n  end\n  histogram\nend",
  "  histogram = Hash.new(0)\n  test.split(' ').each do |letter|\n    histogram[letter]\
    \ += 1\n  end\n  histogram\nend", "  test.split.each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  histogram = {}\n  test.split.each\
    \ do |letter|\n    if histogram.has_key?(letter)\n      histogram[letter] += 1\n\
    \    else\n      histogram[letter] = 1\n    end\n  end\n  histogram\nend", " \
    \ test.split(\" \").each_with_object(Hash.new(0)) { |word,counts| counts[word]\
    \ += 1 }\nend", "  test.split(' ').each_with_object(Hash.new(0)) { |word, counts|\
    \ counts[word] += 1 }\nend", "  result = {}\n  test.split(' ').each do |letter|\n\
    \    result[letter] = test.count(letter)\n  end\n  result\nend", "  test.split('\
    \ ').each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 }\nend",
  "  result = {}\n  test.split(' ').each do |letter|\n    result[letter] = test.split('\
    \ ').count(letter)\n  end\n  result\nend", "  test.split.each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  result = {}\n  test.split(' ').each\
    \ do |letter|\n    result[letter] = test.count(letter)\n  end\n  result\nend",
  "  histogram = Hash.new(0)\n  test.split(' ').each do |letter|\n    histogram[letter]\
    \ += 1\n  end\n  histogram\nend", "  test.split(' ').each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  # your code here\nend", "  #\
    \ Your code here\nend", "  histogram = Hash.new(0)\n  test.split(' ').each do\
    \ |letter|\n    histogram[letter] += 1\n  end\n  histogram.select { |k, v| v ==\
    \ histogram.values.max }\nend", "  result = {}\n  test.split(' ').each do |x|\n\
    \    result[x] = test.count(x)\n  end\n  result\nend", "  test.split(' ').each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  letters = test.split(' ')\n \
    \ letters.each_with_object(Hash.new(0)) { |letter, counts| counts[letter] += 1\
    \ }\nend", "  test.split(\" \").inject(Hash.new(0)) { |h,v| h[v] += 1; h }\nend",
  "  test.split.each_with_object(Hash.new(0)) { |word,counts| counts[word] += 1 }\n\
    end", "  result = {}\n  test.split.each do |letter|\n    result[letter] = test.split.count(letter)\n\
    \  end\n  result\nend", "  histogram = Hash.new(0)\n  test.split(\" \").each do\
    \ |letter|\n    histogram[letter] += 1\n  end\n  histogram\nend", "  result =\
    \ {}\n  test.split(' ').each do |letter|\n    result[letter] = test.count(letter)\n\
    \  end\n  result\nend", "  # your code here\nend", "  result = {}\n  test.split('\
    \ ').each do |letter|\n    if result.has_key?(letter)\n      result[letter] +=\
    \ 1\n    else\n      result[letter] = 1\n    end\n  end\n  result\nend", "  #\
    \ your code here\nend", "  result = {}\n  test.split(' ').each do |letter|\n \
    \   result[letter] = test.split(' ').count(letter)\n  end\n  result\nend", " \
    \ test.split.each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1\
    \ }\nend", "  letters = test.split(' ')\n  letters.each_with_object(Hash.new(0))\
    \ { |letter, counts| counts[letter] += 1 }\nend", "  test.split(' ').each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  result = {}\n  test.split(' ').each\
    \ do |letter|\n    if result.has_key?(letter)\n      result[letter] += 1\n   \
    \ else\n      result[letter] = 1\n    end\n  end\n  result\nend", "  histogram\
    \ = Hash.new(0)\n  test.split(' ').each { |letter| histogram[letter] += 1 }\n\
    \  histogram\nend", "  test.split(' ').each_with_object(Hash.new(0)) { |word,\
    \ counts| counts[word] += 1 }\nend", "  test.split(' ').each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  result = {}\n  test.split(' ').each\
    \ do |letter|\n    result[letter] = test.count(letter)\n  end\n  result\nend",
  "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter] = test.split(\"\
    \ \").count(letter)\n  end\n  result\nend", "  test.split.inject(Hash.new(0))\
    \ { |h, c| h[c] += 1; h }.select { |k, v| v == test.split.inject(Hash.new(0))\
    \ { |h, c| h[c] += 1; h }.values.max }\nend", "  histogram = Hash.new(0)\n  test.split('\
    \ ').each { |letter| histogram[letter] += 1 }\n  histogram.select { |k, v| v ==\
    \ histogram.values.max }\nend", "  histogram = Hash.new(0)\n  test.split(' ').each\
    \ do |letter|\n    histogram[letter] += 1\n  end\n  histogram\nend", "  result\
    \ = Hash.new(0)\n  test.split.each do |letter|\n    result[letter] += 1\n  end\n\
    \  result\nend", "  result = {}\n  test.split.each do |letter|\n    if result.has_key?(letter)\n\
    \      result[letter] += 1\n    else\n      result[letter] = 1\n    end\n  end\n\
    \  result\nend", "  test.split.each_with_object(Hash.new(0)) { |word, counts|\
    \ counts[word] += 1 }\nend", "  test.split.each_with_object(Hash.new(0)) { |word,\
    \ counts| counts[word] += 1 }\nend", "  result = {}\n  test.split(' ').each do\
    \ |letter|\n    result[letter] = test.split(' ').count(letter)\n  end\n  result\n\
    end", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter] =\
    \ test.count(letter)\n  end\n  result\nend", "  test.split(\" \").each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  test.split(' ').each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  result = Hash.new(0)\n  test.split.each\
    \ { |word| result[word] += 1 }\n  result\nend", "  h = Hash.new(0)\n  test.split('\
    \ ').each { |word| h[word] += 1 }\n  h\nend", "  # your code here\nend", "  test.split('\
    \ ').each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 }\nend",
  "  histogram = Hash.new(0)\n  test.split(' ').each { |letter| histogram[letter]\
    \ += 1 }\n  histogram\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    if result.has_key?(letter)\n      result[letter] += 1\n    else\n      result[letter]\
    \ = 1\n    end\n  end\n  result\nend", "  histogram = Hash.new(0)\n  test.split('\
    \ ').each do |letter|\n    histogram[letter] += 1\n  end\n  histogram\nend", " \
    \ test.split(' ').each_with_object(Hash.new(0)) { |word, counts| counts[word]\
    \ += 1 }\nend", "  # your code here\nend", "  result = {}\n  test.split(' ').each\
    \ do |letter|\n    if result.key?(letter)\n      result[letter] += 1\n    else\n\
    \      result[letter] = 1\n    end\n  end\n  result\nend", "  histogram = Hash.new(0)\n\
    \  test.split.each do |letter|\n    histogram[letter] += 1\n  end\n  histogram\n\
    end", "  # Your code here\nend", "  result = {}\n  test.split(' ').each do |letter|\n\
    \    if result.has_key?(letter)\n      result[letter] += 1\n    else\n      result[letter]\
    \ = 1\n    end\n  end\n  result\nend", "  # your code here\nend", "  result =\
    \ {}\n  test.split(' ').each do |letter|\n    if result.has_key?(letter)\n   \
    \   result[letter] += 1\n    else\n      result[letter] = 1\n    end\n  end\n\
    \  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter]\
    \ = test.count(letter)\n  end\n  result\nend", "  histogram = Hash.new(0)\n  test.split('\
    \ ').each { |letter| histogram[letter] += 1 }\n  histogram\nend", "  test.split('\
    \ ').each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 }\nend",
  "  test.split(' ').each_with_object(Hash.new(0)) { |word,counts| counts[word] +=\
    \ 1 }\nend", "  test.split(\" \").each_with_object(Hash.new(0)) { |word,counts|\
    \ counts[word] += 1 }\nend", "  test.split.each_with_object(Hash.new(0)) { |word,counts|\
    \ counts[word] += 1 }\nend", "  test.split(\" \").group_by{|x| x}.map{|k,v| [k,\
    \ v.size]}.to_h\nend", "  test.split.each_with_object(Hash.new(0)) { |word, counts|\
    \ counts[word] += 1 }\nend", "  result = Hash.new(0)\n  test.split(' ').each {\
    \ |letter| result[letter] += 1 }\n  result\nend", "  result = {}\n  test.split('\
    \ ').each do |i|\n    if result.key?(i)\n      result[i] += 1\n    else\n    \
    \  result[i] = 1\n    end\n  end\n  result\nend", "  test.split.each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  test.split(\" \").inject(Hash.new(0))\
    \ { |hash, word| hash[word] += 1; hash }\nend", "  result = {}\n  test.split('\
    \ ').each do |letter|\n    result[letter] = test.count(letter)\n  end\n  result\n\
    end", "  test.split.each_with_object(Hash.new(0)) { |word,counts| counts[word]\
    \ += 1 }\nend", "  test.split.each_with_object(Hash.new(0)) { |word, counts| counts[word]\
    \ += 1 }\nend", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter]\
    \ = test.count(letter)\n  end\n  result\nend", "  histogram = Hash.new(0)\n  test.split('\
    \ ').each do |letter|\n    histogram[letter] += 1\n  end\n  histogram\nend", " \
    \ histogram = {}\n  test.split(' ').each do |letter|\n    if histogram.has_key?(letter)\n\
    \      histogram[letter] += 1\n    else\n      histogram[letter] = 1\n    end\n\
    \  end\n  histogram\nend", "  test.split(' ').each_with_object(Hash.new(0)) {\
    \ |word, counts| counts[word] += 1 }\nend", "  # Your code here\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
