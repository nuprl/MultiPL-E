name: HumanEval_70_strange_sort_list
language: ruby
results:
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpeg6vn33z\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpeg6vn33z.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.009154004 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.24 tests/s, 109.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.partition.with_index { |_, i|\
    \ i.even? }.flatten\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqhz6e61b\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpqhz6e61b.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.012466202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.22 tests/s, 80.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu_1hw6m_\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpu_1hw6m_.rb:17:in `test_strange_sort_list'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_strange_sort_list\n\
    \     16:     candidate = method(:strange_sort_list)\n  => 17:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.011541146 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.65 tests/s, 86.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvfhpozw_\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpvfhpozw_.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.008003997 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.94 tests/s, 124.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpycckixhw\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpycckixhw.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.007665754 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.45 tests/s, 130.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzpe6_a2s\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpzpe6_a2s.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.01524703 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    65.59 tests/s, 65.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsft082wd\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpsft082wd.rb:17:in `test_strange_sort_list'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_strange_sort_list\n\
    \     16:     candidate = method(:strange_sort_list)\n  => 17:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.016845629 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    59.36 tests/s, 59.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8rn6cw47\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp8rn6cw47.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.01268105 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    78.86 tests/s, 78.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4qur9n4p\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp4qur9n4p.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.01448183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.05 tests/s, 69.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort_by.with_index { |_, i| i.even?\
    \ ? lst.min : lst.max }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg_nr58ei\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpg_nr58ei.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.010239627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    97.66 tests/s, 97.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsu2f4jaf\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpsu2f4jaf.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.011201554 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    89.27 tests/s, 89.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdyutcxhj\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpdyutcxhj.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.014139343 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.72 tests/s, 70.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmph77xrkaf\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmph77xrkaf.rb:17:in `test_strange_sort_list'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_strange_sort_list\n\
    \     16:     candidate = method(:strange_sort_list)\n  => 17:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.012185489 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.06 tests/s, 82.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzx44_kj2\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpzx44_kj2.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.009686738 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.23 tests/s, 103.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpionybiuq\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpionybiuq.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.017072973 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    58.57 tests/s, 58.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdianrywj\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpdianrywj.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.010512369 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.13 tests/s, 95.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.map.with_index { |_, i| i.even? ? lst.shift : lst.pop }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvpcjfpc8\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpvpcjfpc8.rb:17:in `test_strange_sort_list'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_strange_sort_list\n\
    \     16:     candidate = method(:strange_sort_list)\n  => 17:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.01238326 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.75 tests/s, 80.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  lst.sort!\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn_x6zoqr\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpn_x6zoqr.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.010974921 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.12 tests/s, 91.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpucc2acrm\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpucc2acrm.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.016442421 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    60.82 tests/s, 60.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.insert(1, lst.pop)\n  lst\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmrh_j2ft\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpmrh_j2ft.rb:19:in `test_strange_sort_list'\n\
    \     16:   def test_strange_sort_list\n     17:     candidate = method(:strange_sort_list)\n\
    \     18:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n  => 19:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     20:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     21:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n \
    \    22:     assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n<[5, 9,\
    \ 6, 8, 7]> expected but was\n<[5, 9, 6, 7, 8]>\n\ndiff:\n? [5, 9, 6, 7, 8, 7]\n\
    ===============================================================================\n\
    \nFinished in 0.019222537 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    52.02 tests/s, 104.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  sorted = []\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(l\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: ''
  stderr: "/tmp/tmpf4e47zdn.rb:61: syntax error, unexpected local variable or method,\
    \ expecting ')'\nrequire 'test/unit'\n^~~~~~~\n/tmp/tmpf4e47zdn.rb:62: class definition\
    \ in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpf4e47zdn.rb:75: syntax error, unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg_1ttcbt\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpg_1ttcbt.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.008831965 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.23 tests/s, 113.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7fvbf8yp\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp7fvbf8yp.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.012433722 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.43 tests/s, 80.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort_by.with_index { |_, i| [i.even?\
    \ ? :min : :max] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4t3ql4l9\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp4t3ql4l9.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[2, 4, 1, 3]>\n\ndiff:\n? [2, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.018432061 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    54.25 tests/s, 54.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5gvrjbro\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp5gvrjbro.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.012944856 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.25 tests/s, 77.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.partition.with_index { |_, i|\
    \ i.even? }.flatten\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_6sw1qvl\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp_6sw1qvl.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.020492398 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    48.80 tests/s, 48.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcdwpc7ov\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpcdwpc7ov.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.01466886 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.17 tests/s, 68.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  until lst.empty?\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp54530kr5\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp54530kr5.rb:23:in `test_strange_sort_list'\n\
    \     20:   def test_strange_sort_list\n     21:     candidate = method(:strange_sort_list)\n\
    \     22:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n  => 23:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     24:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     25:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n \
    \    26:     assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n<[5, 9,\
    \ 6, 8, 7]> expected but was\n<[5, 9, 6, 8, 7, nil]>\n\ndiff:\n? [5, 9, 6, 8,\
    \ 7, nil]\n===============================================================================\n\
    \nFinished in 0.019283673 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    51.86 tests/s, 103.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnh6ofmm5\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpnh6ofmm5.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.012990849 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.98 tests/s, 76.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo61i1krz\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpo61i1krz.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.009494779 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.32 tests/s, 105.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  lst.sort!\n  while lst.length > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0o6r7pa7\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp0o6r7pa7.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.008783484 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.85 tests/s, 113.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmptvm5sg9q\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmptvm5sg9q.rb:16:in `test_strange_sort_list'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_strange_sort_list\n\
    \     15:     candidate = method(:strange_sort_list)\n  => 16:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     17:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     18:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     19:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.01336641 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.81 tests/s, 74.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp56ghdkss\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp56ghdkss.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.014665673 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.19 tests/s, 68.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdmvumqd9\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpdmvumqd9.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.015903039 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    62.88 tests/s, 62.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjkwbe5kj\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpjkwbe5kj.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.009016211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.91 tests/s, 110.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmptet9ahss\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmptet9ahss.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.009614762 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    104.01 tests/s, 104.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp87p8z31j\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp87p8z31j.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.013357294 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.87 tests/s, 74.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjsrg44df\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpjsrg44df.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.019873287 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    50.32 tests/s, 50.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgwvzvd80\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpgwvzvd80.rb:17:in `test_strange_sort_list'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_strange_sort_list\n\
    \     16:     candidate = method(:strange_sort_list)\n  => 17:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.016208724 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    61.70 tests/s, 61.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnhm2_8u3\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpnhm2_8u3.rb:17:in `test_strange_sort_list'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_strange_sort_list\n\
    \     16:     candidate = method(:strange_sort_list)\n  => 17:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.014105771 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.89 tests/s, 70.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmprjc5_p91\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmprjc5_p91.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.011130755 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    89.84 tests/s, 89.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp45tdg5l0\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp45tdg5l0.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.009318268 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.32 tests/s, 107.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp217m_xmg\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp217m_xmg.rb:17:in `test_strange_sort_list'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_strange_sort_list\n\
    \     16:     candidate = method(:strange_sort_list)\n  => 17:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.014565184 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.66 tests/s, 68.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb_0sxw1_\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpb_0sxw1_.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.013520276 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.96 tests/s, 73.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1k_ct8e3\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp1k_ct8e3.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.015950855 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    62.69 tests/s, 62.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpy_mh51d0\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpy_mh51d0.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.009434541 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.99 tests/s, 105.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmptea1nzfc\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmptea1nzfc.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.016355295 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    61.14 tests/s, 61.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpftud1g7s\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpftud1g7s.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.012028784 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    83.13 tests/s, 83.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmprzabng37\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmprzabng37.rb:17:in `test_strange_sort_list'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_strange_sort_list\n\
    \     16:     candidate = method(:strange_sort_list)\n  => 17:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.009723214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    102.85 tests/s, 102.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsd7ejrab\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpsd7ejrab.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.009774258 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    102.31 tests/s, 102.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph_o92vka\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmph_o92vka.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.010811357 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.50 tests/s, 92.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  lst.sort!\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpct8fkj10\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpct8fkj10.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.009751286 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    102.55 tests/s, 102.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  lst.sort!\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcobptue7\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpcobptue7.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.012872337 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.69 tests/s, 77.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp44n_q1pr\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp44n_q1pr.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.013726638 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.85 tests/s, 72.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  lst.sort!\n  while lst.length > 0\n    result << lst.shift\n    result << lst.pop\
    \ if lst.length > 0\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm1a4_2ci\nStarted\n.\nFinished in 0.001213033 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    824.38 tests/s, 7419.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  until lst.empty?\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkwd0dkmm\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpkwd0dkmm.rb:23:in `test_strange_sort_list'\n\
    \     20:   def test_strange_sort_list\n     21:     candidate = method(:strange_sort_list)\n\
    \     22:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n  => 23:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     24:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     25:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n \
    \    26:     assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n<[5, 9,\
    \ 6, 8, 7]> expected but was\n<[5, 9, 6, 8, 7, nil]>\n\ndiff:\n? [5, 9, 6, 8,\
    \ 7, nil]\n===============================================================================\n\
    \nFinished in 0.016302441 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    61.34 tests/s, 122.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4ydyzu9u\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp4ydyzu9u.rb:17:in `test_strange_sort_list'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_strange_sort_list\n\
    \     16:     candidate = method(:strange_sort_list)\n  => 17:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.024297268 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    41.16 tests/s, 41.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpi_prnoee\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpi_prnoee.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.021677476 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    46.13 tests/s, 46.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1l4mfffw\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp1l4mfffw.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.012866348 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.72 tests/s, 77.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnu3toqo7\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpnu3toqo7.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.017449704 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.31 tests/s, 57.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbfjbyj1m\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpbfjbyj1m.rb:17:in `test_strange_sort_list'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_strange_sort_list\n\
    \     16:     candidate = method(:strange_sort_list)\n  => 17:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.012939114 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.29 tests/s, 77.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj4v15k86\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpj4v15k86.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.020398055 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    49.02 tests/s, 49.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort_by.with_index { |e, i| [i.even?\
    \ ? e : -e, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsv9ijqhz\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpsv9ijqhz.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[4, 2, 1, 3]>\n\ndiff:\n? [4, 2, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.013049587 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.63 tests/s, 76.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp39239x04\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp39239x04.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.010826124 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.37 tests/s, 92.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkr8besyk\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpkr8besyk.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.014472555 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.10 tests/s, 69.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.map.with_index { |_, i| i.even?\
    \ ? lst.shift : lst.pop }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4dkyh_p9\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp4dkyh_p9.rb:18:in `test_strange_sort_list'\n\
    \     15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n  => 18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n \
    \    19:     assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n     20:\
    \     assert_equal([], candidate.call([]))\n     21:     assert_equal([1, 8, 2,\
    \ 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n<[1, 9, 5, 8, 6,\
    \ 7]> expected but was\n<[5, 1, 6, 9, 7, 8]>\n\ndiff:\n? [   1,    9, 5, 8, 6,\
    \ 7]\n?  5,    6,    7          \n===============================================================================\n\
    \nFinished in 0.014101123 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.92 tests/s, 283.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_lgmet6u\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp_lgmet6u.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.010092367 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.08 tests/s, 99.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyysunz91\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpyysunz91.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.019294337 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    51.83 tests/s, 51.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.flatten.reverse\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5k3wq89b\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp5k3wq89b.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[4, 3, 2, 1]>\n\ndiff:\n? [1, 4,    2, 3]\n?        3,    1 \n===============================================================================\n\
    \nFinished in 0.008786419 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.81 tests/s, 113.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpganz1yfr\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpganz1yfr.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.022591659 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    44.26 tests/s, 44.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmppmzsryzp\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmppmzsryzp.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.013628907 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.37 tests/s, 73.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  sorted = []\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(l\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: ''
  stderr: "/tmp/tmptuic4ply.rb:61: syntax error, unexpected local variable or method,\
    \ expecting ')'\nrequire 'test/unit'\n^~~~~~~\n/tmp/tmptuic4ply.rb:62: class definition\
    \ in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmptuic4ply.rb:75: syntax error, unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpify5uj7t\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpify5uj7t.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.01206901 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.86 tests/s, 82.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  lst.sort!\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmhr5gljr\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpmhr5gljr.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.018572685 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    53.84 tests/s, 53.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1fbmisxr\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp1fbmisxr.rb:17:in `test_strange_sort_list'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_strange_sort_list\n\
    \     16:     candidate = method(:strange_sort_list)\n  => 17:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.018319581 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    54.59 tests/s, 54.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpimsa2z9y\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpimsa2z9y.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.018740486 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    53.36 tests/s, 53.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp00r9ympo\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp00r9ympo.rb:17:in `test_strange_sort_list'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_strange_sort_list\n\
    \     16:     candidate = method(:strange_sort_list)\n  => 17:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.008184051 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.19 tests/s, 122.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7yt3tgat\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp7yt3tgat.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.009224861 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.40 tests/s, 108.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!.reverse!\n\
    \  lst.each_with_index.map { |e, i| i.even? ? e : lst.pop }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpukdog_qu\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpukdog_qu.rb:17:in `test_strange_sort_list'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_strange_sort_list\n\
    \     16:     candidate = method(:strange_sort_list)\n  => 17:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[4, 1, 2]>\n\ndiff:\n? [4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.015938885 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    62.74 tests/s, 62.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcsr539k9\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpcsr539k9.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.015269337 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    65.49 tests/s, 65.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmsyvb2cz\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpmsyvb2cz.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.01556217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    64.26 tests/s, 64.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1on2jyea\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp1on2jyea.rb:16:in `test_strange_sort_list'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_strange_sort_list\n\
    \     15:     candidate = method(:strange_sort_list)\n  => 16:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     17:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     18:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     19:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.013891747 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.99 tests/s, 71.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp813s16_m\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp813s16_m.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.02202399 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    45.41 tests/s, 45.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqpzbpyil\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpqpzbpyil.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.010402434 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.13 tests/s, 96.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpro45befz\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpro45befz.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.013870927 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.09 tests/s, 72.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  res = []\n  while lst.size > 1\n    res << lst.shift\n    res << lst.pop\n\
    \  end\n  res << lst.shift\n  res\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgqyllkub\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpgqyllkub.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.016451357 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    60.79 tests/s, 60.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpff5ol9yw\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpff5ol9yw.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.009781184 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    102.24 tests/s, 102.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt_gsaaar\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpt_gsaaar.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.008156411 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.60 tests/s, 122.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0qy590vc\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp0qy590vc.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.009374332 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    106.67 tests/s, 106.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpru9mxcev\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpru9mxcev.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.01009786 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.03 tests/s, 99.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwqlxgreg\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpwqlxgreg.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.013053287 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.61 tests/s, 76.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  (lst.size / 2).times do |i|\n    lst.insert(2 * i + 1, lst.pop)\n  end\n  lst\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmws255uh\nStarted\n.\nFinished in 0.000609069 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1641.85 tests/s, 14776.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkx0pldq7\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpkx0pldq7.rb:16:in `test_strange_sort_list'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_strange_sort_list\n\
    \     15:     candidate = method(:strange_sort_list)\n  => 16:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     17:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     18:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     19:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.017627689 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    56.73 tests/s, 56.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.reverse.each_slice(2).flat_map(&:reverse)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq6oee0a8\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpq6oee0a8.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.011260241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.81 tests/s, 88.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7__cy_x7\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp7__cy_x7.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.017821941 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    56.11 tests/s, 56.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  sorted = []\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9sv9j5q3\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp9sv9j5q3.rb:26:in `test_strange_sort_list'\n\
    \     23:   def test_strange_sort_list\n     24:     candidate = method(:strange_sort_list)\n\
    \     25:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n  => 26:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     27:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     28:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n \
    \    29:     assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n<[5, 9,\
    \ 6, 8, 7]> expected but was\n<[5, 9, 6, 8]>\n\ndiff:\n? [5, 9, 6, 8, 7]\n===============================================================================\n\
    \nFinished in 0.009048459 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.52 tests/s, 221.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  lst.sort!\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9bf84qfp\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp9bf84qfp.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.01735878 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.61 tests/s, 57.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpi8rkezv3\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpi8rkezv3.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.008195882 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.01 tests/s, 122.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_with_index.map do |_, i|\n    if i.even?\n      lst.shift\n    else\n\
    \      lst.pop\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvtdh1ccx\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpvtdh1ccx.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.015373465 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    65.05 tests/s, 65.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp26_bfcye\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp26_bfcye.rb:17:in `test_strange_sort_list'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_strange_sort_list\n\
    \     16:     candidate = method(:strange_sort_list)\n  => 17:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.013577888 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.65 tests/s, 73.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.partition.with_index { |_, i|\
    \ i.even? }.flatten\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpctt147c6\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpctt147c6.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.012577231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    79.51 tests/s, 79.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.unshift(lst.pop)\n  lst\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbo7v2_6c\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpbo7v2_6c.rb:18:in `test_strange_sort_list'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_strange_sort_list\n\
    \     17:     candidate = method(:strange_sort_list)\n  => 18:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     19:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     20:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     21:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[4, 1, 2, 3]>\n\ndiff:\n? [4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.015657085 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    63.87 tests/s, 63.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwex_sh9u\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpwex_sh9u.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.009799929 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    102.04 tests/s, 102.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  lst.sort!\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4uafsi9d\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp4uafsi9d.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.011411226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.63 tests/s, 87.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj51cu81u\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpj51cu81u.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.009365899 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    106.77 tests/s, 106.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgh6erbp2\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpgh6erbp2.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.012115367 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.54 tests/s, 82.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.pop\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyf3uum3k\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpyf3uum3k.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.0132653 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.38 tests/s, 75.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpetaknx3g\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpetaknx3g.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.0151025 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.21 tests/s, 66.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp56fg39wu\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp56fg39wu.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.01077732 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.79 tests/s, 92.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoencb8q2\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpoencb8q2.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.00954128 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    104.81 tests/s, 104.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpplw42cmy\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpplw42cmy.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.016755443 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    59.68 tests/s, 59.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp55kl27v6\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp55kl27v6.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.013661839 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.20 tests/s, 73.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.flatten.reverse\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp062dak6w\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp062dak6w.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[4, 3, 2, 1]>\n\ndiff:\n? [1, 4,    2, 3]\n?        3,    1 \n===============================================================================\n\
    \nFinished in 0.016226127 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    61.63 tests/s, 61.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpab9yhnc6\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpab9yhnc6.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.011613234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.11 tests/s, 86.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7g9cd6hl\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp7g9cd6hl.rb:17:in `test_strange_sort_list'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_strange_sort_list\n\
    \     16:     candidate = method(:strange_sort_list)\n  => 17:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.014715034 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.96 tests/s, 67.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  lst.sort!\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx0bbqcg8\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpx0bbqcg8.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.012770599 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    78.30 tests/s, 78.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe21q2cqs\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpe21q2cqs.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.010994958 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.95 tests/s, 90.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.map.with_index do |_, i|\n    i.even? ? lst.shift : lst.pop\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvybna8ge\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpvybna8ge.rb:19:in `test_strange_sort_list'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_strange_sort_list\n\
    \     18:     candidate = method(:strange_sort_list)\n  => 19:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     20:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     21:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     22:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.008543048 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.05 tests/s, 117.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.unshift(lst.pop)\n  lst\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz5u9bcdn\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpz5u9bcdn.rb:18:in `test_strange_sort_list'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_strange_sort_list\n\
    \     17:     candidate = method(:strange_sort_list)\n  => 18:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     19:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     20:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     21:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[4, 1, 2, 3]>\n\ndiff:\n? [4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.013408479 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.58 tests/s, 74.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  until lst.empty?\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9q9mjz95\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp9q9mjz95.rb:23:in `test_strange_sort_list'\n\
    \     20:   def test_strange_sort_list\n     21:     candidate = method(:strange_sort_list)\n\
    \     22:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n  => 23:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     24:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     25:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n \
    \    26:     assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n<[5, 9,\
    \ 6, 8, 7]> expected but was\n<[5, 9, 6, 8, 7, nil]>\n\ndiff:\n? [5, 9, 6, 8,\
    \ 7, nil]\n===============================================================================\n\
    \nFinished in 0.014572533 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.62 tests/s, 137.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnd2k9zqt\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpnd2k9zqt.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.008584793 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    116.49 tests/s, 116.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpawtf7959\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpawtf7959.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.011675311 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.65 tests/s, 85.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnnij__43\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpnnij__43.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.01894684 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    52.78 tests/s, 52.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmplubx2tqh\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmplubx2tqh.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.00821808 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.68 tests/s, 121.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2ocnf0fn\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp2ocnf0fn.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.020909727 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    47.82 tests/s, 47.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7d78o3ja\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp7d78o3ja.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.012721661 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    78.61 tests/s, 78.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxpt1fzzp\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpxpt1fzzp.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.018964758 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    52.73 tests/s, 52.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 0\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuzxlinas\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpuzxlinas.rb:23:in `test_strange_sort_list'\n\
    \     20:   def test_strange_sort_list\n     21:     candidate = method(:strange_sort_list)\n\
    \     22:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n  => 23:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     24:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     25:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n \
    \    26:     assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n<[5, 9,\
    \ 6, 8, 7]> expected but was\n<[5, 9, 6, 8, 7, nil]>\n\ndiff:\n? [5, 9, 6, 8,\
    \ 7, nil]\n===============================================================================\n\
    \nFinished in 0.019232218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    52.00 tests/s, 103.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.map.with_index { |_, i| i.even? ? lst.shift : lst.pop }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpeynvmr4l\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpeynvmr4l.rb:17:in `test_strange_sort_list'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_strange_sort_list\n\
    \     16:     candidate = method(:strange_sort_list)\n  => 17:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.010933006 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.47 tests/s, 91.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxbgx7t9k\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpxbgx7t9k.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.01357135 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.68 tests/s, 73.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsqpw7e2b\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpsqpw7e2b.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.01890822 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    52.89 tests/s, 52.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpntxcie3f\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpntxcie3f.rb:17:in `test_strange_sort_list'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_strange_sort_list\n\
    \     16:     candidate = method(:strange_sort_list)\n  => 17:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.008659066 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.49 tests/s, 115.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while !lst.empty?\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfu3zyp3h\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpfu3zyp3h.rb:23:in `test_strange_sort_list'\n\
    \     20:   def test_strange_sort_list\n     21:     candidate = method(:strange_sort_list)\n\
    \     22:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n  => 23:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     24:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     25:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n \
    \    26:     assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n<[5, 9,\
    \ 6, 8, 7]> expected but was\n<[5, 9, 6, 8, 7, nil]>\n\ndiff:\n? [5, 9, 6, 8,\
    \ 7, nil]\n===============================================================================\n\
    \nFinished in 0.015241746 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    65.61 tests/s, 131.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  lst.sort!\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp_og9ad7\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpp_og9ad7.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.015646992 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    63.91 tests/s, 63.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.insert(1, lst.pop) until lst.size == 1\n  lst\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: b'Loaded suite /tmp/tmpcg84l63e\nStarted'
  stderr: None
  exit_code: -1
  status: Timeout
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz7qqjsao\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpz7qqjsao.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.013536659 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.87 tests/s, 73.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.unshift(lst.pop)\n  lst\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3z7w4rc9\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp3z7w4rc9.rb:18:in `test_strange_sort_list'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_strange_sort_list\n\
    \     17:     candidate = method(:strange_sort_list)\n  => 18:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     19:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     20:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     21:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[4, 1, 2, 3]>\n\ndiff:\n? [4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.009346479 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    106.99 tests/s, 106.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpd21cv7d2\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpd21cv7d2.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.013943784 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.72 tests/s, 71.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyht2zekt\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpyht2zekt.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.012596872 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    79.38 tests/s, 79.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqjaeg42_\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpqjaeg42_.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.009068144 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.28 tests/s, 110.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  lst.sort!\n  while lst.size > 0\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfojqir3m\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpfojqir3m.rb:23:in `test_strange_sort_list'\n\
    \     20:   def test_strange_sort_list\n     21:     candidate = method(:strange_sort_list)\n\
    \     22:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n  => 23:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     24:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     25:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n \
    \    26:     assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n<[5, 9,\
    \ 6, 8, 7]> expected but was\n<[5, 9, 6, 8, 7, nil]>\n\ndiff:\n? [5, 9, 6, 8,\
    \ 7, nil]\n===============================================================================\n\
    \nFinished in 0.011497488 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.98 tests/s, 173.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.partition.with_index { |_, i| i.even? }.flatten\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuhbt41nv\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpuhbt41nv.rb:17:in `test_strange_sort_list'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_strange_sort_list\n\
    \     16:     candidate = method(:strange_sort_list)\n  => 17:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.019303753 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    51.80 tests/s, 51.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpacml0gnj\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpacml0gnj.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.012682625 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    78.85 tests/s, 78.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpff3vvv6f\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpff3vvv6f.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.014733342 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.87 tests/s, 67.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpabkcmc2k\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpabkcmc2k.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.012920423 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.40 tests/s, 77.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmphzz12pw4\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmphzz12pw4.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.013772705 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.61 tests/s, 72.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqdt55yoh\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpqdt55yoh.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.010361511 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.51 tests/s, 96.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp72d6w5hn\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp72d6w5hn.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.014229297 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.28 tests/s, 70.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpapv73e42\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpapv73e42.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.014859993 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.29 tests/s, 67.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp722ooa1c\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp722ooa1c.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.013215764 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.67 tests/s, 75.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpivmfcuzs\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpivmfcuzs.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.013522185 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.95 tests/s, 73.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort_by.with_index { |_, i| i.even?\
    \ ? lst.min : lst.max }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2yxnnbzk\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp2yxnnbzk.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.020553985 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    48.65 tests/s, 48.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp83jupmcz\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp83jupmcz.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.009603882 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    104.12 tests/s, 104.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7xatvqe8\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp7xatvqe8.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.012535785 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    79.77 tests/s, 79.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmptypwdwik\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmptypwdwik.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.013090216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.39 tests/s, 76.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpd4bltd1x\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpd4bltd1x.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.012596846 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    79.38 tests/s, 79.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpflctv510\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpflctv510.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.016117737 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    62.04 tests/s, 62.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmphsdtadsl\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmphsdtadsl.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.013659038 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.21 tests/s, 73.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpd_bilbkz\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpd_bilbkz.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.024680939 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    40.52 tests/s, 40.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsusn5bvw\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpsusn5bvw.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.01435356 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.67 tests/s, 69.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.unshift(lst.pop) until lst.length == 1\n  lst\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: b'Loaded suite /tmp/tmp5pgww3m5\nStarted'
  stderr: None
  exit_code: -1
  status: Timeout
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmptjrdfg26\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmptjrdfg26.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.009169721 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.05 tests/s, 109.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpaz7skwqe\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpaz7skwqe.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.0150499 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.45 tests/s, 66.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf9w5fo60\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpf9w5fo60.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.017675603 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    56.58 tests/s, 56.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  lst.sort!\n  while lst.size > 0\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpd8uhm6qa\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpd8uhm6qa.rb:23:in `test_strange_sort_list'\n\
    \     20:   def test_strange_sort_list\n     21:     candidate = method(:strange_sort_list)\n\
    \     22:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n  => 23:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     24:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     25:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n \
    \    26:     assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n<[5, 9,\
    \ 6, 8, 7]> expected but was\n<[5, 9, 6, 8, 7, nil]>\n\ndiff:\n? [5, 9, 6, 8,\
    \ 7, nil]\n===============================================================================\n\
    \nFinished in 0.019026016 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    52.56 tests/s, 105.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpeayqed7u\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpeayqed7u.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.009031551 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.72 tests/s, 110.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqw6zpw4r\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpqw6zpw4r.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.017659436 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    56.63 tests/s, 56.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp6a67ccm\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpp6a67ccm.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.009982116 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.18 tests/s, 100.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6p4uw_z4\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp6p4uw_z4.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.012344753 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.01 tests/s, 81.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuyy42ums\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpuyy42ums.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.01227605 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.46 tests/s, 81.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdjfe_d5j\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpdjfe_d5j.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.013322914 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.06 tests/s, 75.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0vqvl2y4\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp0vqvl2y4.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.016240659 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    61.57 tests/s, 61.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while !lst.empty?\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv2a8d7dd\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpv2a8d7dd.rb:23:in `test_strange_sort_list'\n\
    \     20:   def test_strange_sort_list\n     21:     candidate = method(:strange_sort_list)\n\
    \     22:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n  => 23:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     24:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     25:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n \
    \    26:     assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n<[5, 9,\
    \ 6, 8, 7]> expected but was\n<[5, 9, 6, 8, 7, nil]>\n\ndiff:\n? [5, 9, 6, 8,\
    \ 7, nil]\n===============================================================================\n\
    \nFinished in 0.020950301 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    47.73 tests/s, 95.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  lst.sort!\n  while lst.length > 0\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg_gtqvh1\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpg_gtqvh1.rb:23:in `test_strange_sort_list'\n\
    \     20:   def test_strange_sort_list\n     21:     candidate = method(:strange_sort_list)\n\
    \     22:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n  => 23:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     24:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     25:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n \
    \    26:     assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n<[5, 9,\
    \ 6, 8, 7]> expected but was\n<[5, 9, 6, 8, 7, nil]>\n\ndiff:\n? [5, 9, 6, 8,\
    \ 7, nil]\n===============================================================================\n\
    \nFinished in 0.014895533 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.13 tests/s, 134.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpprnkmola\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpprnkmola.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.010691248 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    93.53 tests/s, 93.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8sai_5zw\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp8sai_5zw.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.012986333 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.00 tests/s, 77.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  while lst.size > 0\n    result << lst.min\n    lst.delete_at(lst.index(lst.min))\n\
    \    result << lst.max\n    lst.delete_at(lst.index(lst.max))\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2zmx449u\nStarted\nE\n===============================================================================\n\
    Error: test_strange_sort_list(TestHumanEval): TypeError: no implicit conversion\
    \ from nil to integer\n/tmp/tmp2zmx449u.rb:15:in `delete_at'\n/tmp/tmp2zmx449u.rb:15:in\
    \ `strange_sort_list'\n/tmp/tmp2zmx449u.rb:24:in `call'\n/tmp/tmp2zmx449u.rb:24:in\
    \ `test_strange_sort_list'\n     21:   def test_strange_sort_list\n     22:  \
    \   candidate = method(:strange_sort_list)\n     23:     assert_equal([1, 4, 2,\
    \ 3], candidate.call([1, 2, 3, 4]))\n  => 24:     assert_equal([5, 9, 6, 8, 7],\
    \ candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2, 4, 3],\
    \ candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5, 8, 6,\
    \ 7], candidate.call([5, 6, 7, 8, 9, 1]))\n     27:     assert_equal([5, 5, 5,\
    \ 5], candidate.call([5, 5, 5, 5]))\n===============================================================================\n\
    \nFinished in 0.001481143 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    675.15 tests/s, 675.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpricny767\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpricny767.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.014520511 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.87 tests/s, 68.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9liiysd6\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp9liiysd6.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.009493776 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.33 tests/s, 105.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbdadqyom\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpbdadqyom.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.01606601 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    62.24 tests/s, 62.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6v1gu792\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp6v1gu792.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.015153927 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    65.99 tests/s, 65.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz7az8ujq\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpz7az8ujq.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.009477224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.52 tests/s, 105.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp88ebk5ob\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp88ebk5ob.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.007971366 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.45 tests/s, 125.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp036rttie\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp036rttie.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.008342416 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.87 tests/s, 119.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjwk3gvr0\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpjwk3gvr0.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.009744404 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    102.62 tests/s, 102.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  lst.sort!\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxe42aqdi\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpxe42aqdi.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.012333439 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.08 tests/s, 81.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnpz9f91n\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpnpz9f91n.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.015281696 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    65.44 tests/s, 65.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8gychsx9\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmp8gychsx9.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.013977193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.55 tests/s, 71.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.map.with_index do |_, i|\n    i.even? ? lst.shift : lst.pop\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpst5u1zb5\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpst5u1zb5.rb:19:in `test_strange_sort_list'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_strange_sort_list\n\
    \     18:     candidate = method(:strange_sort_list)\n  => 19:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     20:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     21:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     22:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.009349892 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    106.95 tests/s, 106.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp1guhfz9\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpp1guhfz9.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.009622089 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.93 tests/s, 103.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmprzeqz333\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmprzeqz333.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.007967073 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.52 tests/s, 125.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbfbc_6g7\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpbfbc_6g7.rb:16:in `test_strange_sort_list'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_strange_sort_list\n\
    \     15:     candidate = method(:strange_sort_list)\n  => 16:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     17:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     18:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     19:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3     4 \n===============================================================================\n\
    \nFinished in 0.008994277 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    111.18 tests/s, 111.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbhvgrj_q\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpbhvgrj_q.rb:23:in `test_strange_sort_list'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_strange_sort_list\n\
    \     22:     candidate = method(:strange_sort_list)\n  => 23:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n===============================================================================\n\
    \nFinished in 0.008094628 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.54 tests/s, 123.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpudmjz1lv\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpudmjz1lv.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.007033848 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.17 tests/s, 142.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbc3e9lg2\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpbc3e9lg2.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.008491633 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.76 tests/s, 117.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmptgw5eekd\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmptgw5eekd.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.016441682 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    60.82 tests/s, 60.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpy23unpft\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpy23unpft.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.008232001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.48 tests/s, 121.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcvrrdp9c\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpcvrrdp9c.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.009899085 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    101.02 tests/s, 101.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp9_gq6vd\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpp9_gq6vd.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.015704336 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    63.68 tests/s, 63.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpd079itba\nStarted\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/tmp/tmpd079itba.rb:15:in `test_strange_sort_list'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_strange_sort_list\n\
    \     14:     candidate = method(:strange_sort_list)\n  => 15:     assert_equal([1,\
    \ 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([5, 9, 6,\
    \ 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:     assert_equal([1, 5, 2,\
    \ 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:     assert_equal([1, 9, 5,\
    \ 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1, 4, 2, 3]> expected but was\n\
    <[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.009072147 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.23 tests/s, 110.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
